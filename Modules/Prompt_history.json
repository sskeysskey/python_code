[
    {
        "id": "2025-05-27 11:54:10",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode编写的app程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"Face ID\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Account Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SETTING\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account & Setting\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account & Setting\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "现在的问题是：当我链接手机，构建build版本安装应用都一切正常，应用启动后直接点击登录按钮时，程序会崩溃，报错内容“Thread 1: breakpoint 1.1 (1)”，崩溃指向portfolioview.swift里的这句代码“PortfolioView(username: session.username, vm: vm) ”，这是保持手机链接mac，并再一次完整构建过程中会发生的。但如果我点击stop running scheme or application按钮，断开连接，从手机上直接运行该应用，却一切正常，无论账号密码登录还是faceid登录都不会报错崩溃。这是为什么？该怎么改？"
    },
    {
        "id": "2025-05-27 12:09:31",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode开发的iphone app",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"Face ID\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Account Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SETTING\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account & Setting\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account & Setting\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "我之前删除了一个在这句“PortfolioView(username: session.username, vm: vm) ”上的断点，结果我的Face ID登录功能按钮没有，功能也没了，你帮我看看是怎么回事儿？"
    },
    {
        "id": "2025-05-27 13:15:31",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode编写的app程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/AssetsView.swift",
                "filename": "AssetsView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\n// グラフのデータポイント用構造体\nstruct DealDataPoint: Identifiable, Equatable {\n    let id = UUID()\n    let date: Date\n    let value: Double\n}\n\n// 期間選択オプション\nenum TimeRangeOption: String, CaseIterable, Identifiable {\n    case all = \"All\"\n    // case last3Months = \"近三个月\"\n    // case last6Months = \"近半年\"\n    // case yearToDate = \"年初至今\"\n    case last1Year = \" 1 Year\"  // 変更\n    case last2Years = \"2 Years\"  // 変更\n    case custom = \"Filter\"  // \"筛选\" はボタンのラベルとして使用\n\n    var id: String { self.rawValue }\n}\n\nclass AssetsViewModel: ObservableObject {\n    // MARK: - Published Properties\n    @Published var selectedTimeRange: TimeRangeOption = .last1Year  // デフォルトを変更 (例: 近一年)\n    @Published var customStartDate: Date =\n        Calendar.current.date(byAdding: .month, value: -1, to: Date()) ?? Date()\n    @Published var customEndDate: Date = Date()\n    @Published var isFilterActive: Bool = false\n\n    // 追加: 表示用の整形済みカスタム日付文字列\n    @Published var displayCustomStartDateString: String? = nil\n    @Published var displayCustomEndDateString: String? = nil\n\n    @Published var chartData: [DealDataPoint] = []\n    @Published var cumulativeReturn: Double = 0.0\n    @Published var returnRate: Double = 0.0  // 収益率\n\n    @Published var isLoading: Bool = false\n    @Published var errorMessage: String? = nil\n\n    // データベース関連\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // private から internal に変更 (Viewでフォーマットする場合に備えて。今回はViewModelで整形)\n    internal let dbDateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd\"\n        return formatter\n    }()\n\n    // 色定義\n    let selectedButtonColor = Color.gray\n    let deselectedButtonTextColor = Color.white\n    let defaultButtonBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n\n    private let SQLITE_TRANSIENT_VALUE = unsafeBitCast(-1, to: sqlite3_destructor_type.self)\n\n    // MARK: - Initialization\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            self.dbPath = \"\"\n            self.errorMessage = \"关键错误：Firstrade.db 未在应用包中找到。\"\n            // 本番アプリでは、より丁寧なエラー処理を検討してください。\n            // fatalError(\"Firstrade.db not found in bundle.\")\n            return\n        }\n        self.dbPath = path\n        print(\"assets_db_path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // openDatabase内でerrorMessageが設定されます\n            return\n        }\n        fetchDataForSelectedRange()  // 初期データロード\n    }\n\n    deinit {\n        closeDatabase()\n    }\n\n    // MARK: - Database Handling\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"资产页面数据库成功打开。\")\n            errorMessage = nil\n            return true\n        } else {\n            let errorMsg = \"打开数据库时出错 \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            errorMessage = errorMsg\n            if db != nil {  // エラーがあってもdbポインタがnilでない場合があるため閉じる\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    private func closeDatabase() {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"资产页面数据库已关闭。\")\n        }\n    }\n\n    // MARK: - Data Fetching and Processing\n    func selectTimeRange(_ range: TimeRangeOption) {\n        selectedTimeRange = range\n        if range != .custom {\n            isFilterActive = false\n            displayCustomStartDateString = nil  // カスタム日付表示をクリア\n            displayCustomEndDateString = nil  // カスタム日付表示をクリア\n        }\n        // isFilterActive は、カスタムフィルターが適用されたときに applyCustomDateRange で true に設定されます。\n        // 他のボタンが押されたときは、ここで false に設定します。\n        fetchDataForSelectedRange()\n    }\n\n    func applyCustomDateRange(start: Date, end: Date) {\n        customStartDate = start\n        customEndDate = end\n        selectedTimeRange = .custom\n        isFilterActive = true\n        // 整形済み日付文字列を更新\n        displayCustomStartDateString = dbDateFormatter.string(from: start)\n        displayCustomEndDateString = dbDateFormatter.string(from: end)\n        fetchDataForSelectedRange()\n    }\n\n    func fetchDataForSelectedRange() {\n        guard db != nil || openDatabase() else {\n            isLoading = false\n            return\n        }\n\n        isLoading = true\n        errorMessage = nil\n\n        let (effectiveStartDate, effectiveEndDate) = getDatesForCurrentSelection()\n        let startDateString = dbDateFormatter.string(from: effectiveStartDate)\n        let endDateString = dbDateFormatter.string(from: effectiveEndDate)\n\n        print(\"正在为资产页面获取数据，范围: \\(startDateString) 至 \\(endDateString)\")\n\n        var fetchedDeals: [DealDataPoint] = []\n        let dealsQuery =\n            \"SELECT date, value FROM Deals WHERE date >= ? AND date <= ? ORDER BY date ASC;\"\n        var stmtDeals: OpaquePointer?\n\n        if sqlite3_prepare_v2(db, dealsQuery, -1, &stmtDeals, nil) == SQLITE_OK {\n            // 修正箇所 1\n            sqlite3_bind_text(stmtDeals, 1, startDateString, -1, SQLITE_TRANSIENT_VALUE)\n            // 修正箇所 2\n            sqlite3_bind_text(stmtDeals, 2, endDateString, -1, SQLITE_TRANSIENT_VALUE)\n\n            while sqlite3_step(stmtDeals) == SQLITE_ROW {\n                guard let dateStrChars = sqlite3_column_text(stmtDeals, 0) else { continue }\n                let dateStr = String(cString: dateStrChars)\n                let value = sqlite3_column_double(stmtDeals, 1)\n                if let date = dbDateFormatter.date(from: dateStr) {\n                    fetchedDeals.append(DealDataPoint(date: date, value: value))\n                }\n            }\n            sqlite3_finalize(stmtDeals)\n        } else {\n            let queryError = \"准备Deals查询失败: \\(String(cString: sqlite3_errmsg(db)))\"\n            print(queryError)\n            DispatchQueue.main.async {\n                self.errorMessage = queryError\n                self.isLoading = false\n                self.chartData = []\n                self.cumulativeReturn = 0.0\n                self.returnRate = 0.0\n            }\n            return\n        }\n\n        var calculatedCumulativeReturn: Double = 0.0\n        var calculatedReturnRate: Double = 0.0\n\n        if let firstDealValue = fetchedDeals.first?.value,\n            let lastDealValue = fetchedDeals.last?.value\n        {\n            calculatedCumulativeReturn = lastDealValue - firstDealValue\n\n            var startBalanceValue: Double?\n            let dealsStartDateString = dbDateFormatter.string(from: effectiveStartDate)  // Dealsの実際の開始日\n\n            // 1. Dealsの開始日に対応するBalanceデータを検索\n            let balanceQueryForDealsStart =\n                \"SELECT value FROM Balance WHERE date <= ? ORDER BY date DESC LIMIT 1;\"\n            var stmtBalance: OpaquePointer?\n            if sqlite3_prepare_v2(db, balanceQueryForDealsStart, -1, &stmtBalance, nil) == SQLITE_OK\n            {\n                sqlite3_bind_text(stmtBalance, 1, dealsStartDateString, -1, SQLITE_TRANSIENT_VALUE)\n                if sqlite3_step(stmtBalance) == SQLITE_ROW {\n                    startBalanceValue = sqlite3_column_double(stmtBalance, 0)\n                }\n                sqlite3_finalize(stmtBalance)\n            } else {\n                let balanceQueryError =\n                    \"准备Balance查询(Deals开始日)失败: \\(String(cString: sqlite3_errmsg(db)))\"\n                print(balanceQueryError)\n                DispatchQueue.main.async {\n                    self.errorMessage = (self.errorMessage ?? \"\") + \"\\n\" + balanceQueryError\n                }\n            }\n\n            // 2. 「全部」選択時で、上記で見つからなかった場合、Balanceテーブルの最古のデータを検索\n            if selectedTimeRange == .all && startBalanceValue == nil {\n                print(\"「全部」选择：未在Deals开始日期 \\(dealsStartDateString) 找到Balance，尝试Balance表中的最早日期。\")\n                let oldestBalanceQuery = \"SELECT value FROM Balance ORDER BY date ASC LIMIT 1;\"\n                var stmtOldestBalance: OpaquePointer?\n                if sqlite3_prepare_v2(db, oldestBalanceQuery, -1, &stmtOldestBalance, nil)\n                    == SQLITE_OK\n                {\n                    if sqlite3_step(stmtOldestBalance) == SQLITE_ROW {\n                        startBalanceValue = sqlite3_column_double(stmtOldestBalance, 0)\n                        if startBalanceValue != nil {\n                            print(\"已找到Balance表中的最早余额: \\(startBalanceValue!)\")\n                        } else {\n                            print(\"Balance表中没有找到任何数据。\")\n                        }\n                    }\n                    sqlite3_finalize(stmtOldestBalance)\n                } else {\n                    let oldestBalanceQueryError =\n                        \"准备Balance最古数据查询失败: \\(String(cString: sqlite3_errmsg(db)))\"\n                    print(oldestBalanceQueryError)\n                    DispatchQueue.main.async {\n                        self.errorMessage =\n                            (self.errorMessage ?? \"\") + \"\\n\" + oldestBalanceQueryError\n                    }\n                }\n            }\n\n            // 3. 収益率を計算\n            if let startBalance = startBalanceValue {\n                if startBalance != 0 {\n                    calculatedReturnRate = (calculatedCumulativeReturn / startBalance)\n                } else {\n                    calculatedReturnRate = 0  // または未定義として扱う\n                    print(\"警告: 用于计算收益率的期初余额为零。\")\n                    DispatchQueue.main.async {\n                        self.errorMessage = (self.errorMessage ?? \"\") + \"\\n警告: 用于计算收益率的期初余额为零。\"\n                    }\n                }\n            } else {\n                print(\"警告: 未能找到日期 \\(startDateString) 的期初余额以计算收益率。\")\n                DispatchQueue.main.async {\n                    self.errorMessage = (self.errorMessage ?? \"\") + \"\\n警告: 未能找到期初余额以计算收益率。\"\n                }\n            }\n        } else if !fetchedDeals.isEmpty {\n            calculatedCumulativeReturn = 0.0\n            calculatedReturnRate = 0.0\n        }\n\n        DispatchQueue.main.async {\n            self.chartData = fetchedDeals\n            self.cumulativeReturn = calculatedCumulativeReturn\n            self.returnRate = calculatedReturnRate\n            self.isLoading = false\n            if fetchedDeals.isEmpty && self.errorMessage == nil {\n                self.errorMessage = \"在选定时间段内未找到任何交易数据。\"\n            }\n        }\n    }\n\n    private func getDatesForCurrentSelection() -> (start: Date, end: Date) {\n        let calendar = Calendar.current\n        let today = Date()\n\n        switch selectedTimeRange {\n        case .all:\n            // \"全部\" の場合、Dealsテーブルの最初の日付を取得\n            var earliestDate: Date?\n            let queryMinDate = \"SELECT MIN(date) FROM Deals;\"\n            var stmtMinDate: OpaquePointer?\n            if sqlite3_prepare_v2(db, queryMinDate, -1, &stmtMinDate, nil) == SQLITE_OK {\n                if sqlite3_step(stmtMinDate) == SQLITE_ROW {\n                    if let dateStrChars = sqlite3_column_text(stmtMinDate, 0) {\n                        let dateStr = String(cString: dateStrChars)\n                        earliestDate = dbDateFormatter.date(from: dateStr)\n                    }\n                }\n                sqlite3_finalize(stmtMinDate)\n            }\n            return (earliestDate ?? calendar.date(byAdding: .year, value: -5, to: today)!, today)  // フォールバックを5年前に変更\n        case .last1Year:  // 変更\n            return (calendar.date(byAdding: .year, value: -1, to: today)!, today)\n        case .last2Years:  // 変更\n            return (calendar.date(byAdding: .year, value: -2, to: today)!, today)\n        // case .yearToDate: // 削除\n        // let year = calendar.component(.year, from: today)\n        // let startOfYear = calendar.date(from: DateComponents(year: year, month: 1, day: 1))!\n        // return (startOfYear, today)\n        case .custom:\n            return (customStartDate, customEndDate)\n        }\n    }\n}\n\nstruct AssetsView: View {\n    @StateObject private var viewModel = AssetsViewModel()\n    @State private var showingDateFilter = false\n\n    // 颜色定义\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let textColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let chartLineColor = Color.gray  // 曲线颜色\n    private let positiveReturnColor = Color.green\n    private let negativeReturnColor = Color.red\n    private let accentDateColor = Color.blue  // 日付の強調色としてオレンジを定義\n\n    // タブの定義 (新股盈亏は削除)\n    // private enum AssetSubTab: String, CaseIterable, Identifiable {\n    //     case assetAnalysis = \"资产分析\"\n    //     case profitLossAnalysis = \"盈亏分析\"\n    //     var id: String { self.rawValue }\n    // }\n    // @State private var selectedSubTab: AssetSubTab = .assetAnalysis\n\n    // 日付フォーマッタ (グラフのX軸用)\n    private let chartDateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy/MM/dd\"\n        return formatter\n    }()\n\n    // MARK: - Colors for Transaction History (as per new request)\n    private let timelineActualColor = Color.gray.opacity(0.4)\n    private var dotBuyActualColor: Color { positiveReturnColor } // Reuse existing\n    private var dotSellActualColor: Color { negativeReturnColor } // Reuse existing\n    private let dotOtherActualColor = Color(white: 0.6)\n    private var accentColorForTabUnderline: Color { accentDateColor }\n\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea()\n\n                ScrollView { // Added ScrollView to accommodate new section\n                    VStack(spacing: 0) {\n                        // 上部タブ (资产分析 / 盈亏分析)\n                        // Picker(\"分析类型\", selection: $selectedSubTab) {\n                        //     ForEach(AssetSubTab.allCases) { tab in\n                        //         Text(tab.rawValue).tag(tab)\n                        //     }\n                        // }\n                        // .pickerStyle(SegmentedPickerStyle())\n                        // .padding(.horizontal)\n                        // .padding(.top, 10)\n                        // .background(pageBackgroundColor) // SegmentedPickerの背景が透明にならないように\n                        // .onChange(of: selectedSubTab) { _ in\n                        //     // 必要に応じてタブ変更時の処理を記述\n                        //     // 現在はどちらのタブも同じデータを表示するため、特別な処理は不要\n                        //     print(\"Selected sub-tab: \\(selectedSubTab.rawValue)\")\n                        // }\n\n                        // 走势分析セクション\n                        trendAnalysisControlsSection\n                            .padding(.top, 15)\n\n                        // --- ここから追加 ---\n                        // フィルターがアクティブで、日付文字列が利用可能な場合に表示\n                        if viewModel.isFilterActive,\n                            let startDateStr = viewModel.displayCustomStartDateString,\n                            let endDateStr = viewModel.displayCustomEndDateString\n                        {\n                            HStack(spacing: 5) {\n                                Text(\"   \")\n                                    .font(.subheadline)  // フォントサイズを調整\n                                    .foregroundColor(self.secondaryTextColor)\n                                    .padding(.leading, 16)  // 左端のパディング\n                                Text(startDateStr)\n                                    .font(.headline.bold())  // サイズを大きく、太字に\n                                    .foregroundColor(self.accentDateColor)  // 目立つ色 (オレンジ)\n\n                                Text(\"    ～～   \")\n                                    .font(.subheadline)\n                                    .foregroundColor(self.secondaryTextColor)\n                                    .padding(.horizontal, 2)  // \"到\" の左右に少しスペース\n\n                                Text(endDateStr)\n                                    .font(.headline.bold())\n                                    .foregroundColor(self.accentDateColor)\n\n                                Spacer()  // 右側の余白を埋めて全体を左寄せにする\n                            }\n                            .frame(maxWidth: .infinity)  // HStackを画面幅いっぱいに広げる\n                            .padding(.vertical, 12)  // 上下のパディング\n                            // 背景色をページ背景より少し明るく、または区別できる色に\n                            .background(viewModel.defaultButtonBackgroundColor.opacity(0.85))\n                            // .background(Color(red: 35/255, green: 40/255, blue: 50/255)) // 例: 少し明るい背景\n                            .padding(.top, 15)  // 上の trendAnalysisControlsSection との間隔\n                        }\n                        // --- ここまで追加 ---\n\n                        returnSummarySection\n                            // 上に要素が追加された場合も考慮し、一貫したスペースを保つ\n                            .padding(.top, 15)  // 上の要素 (trendAnalysisControlsSection または追加された日付行) との間隔\n\n                        // 折れ線グラフエリア\n                        chartArea\n                            .padding(.top, 10)\n                            .padding(.bottom, 5)  // X軸ラベルとの間隔\n\n                        // グラフのX軸ラベル (開始日と終了日)\n                        xAxisLabels\n                            .padding(.horizontal, 25)  // グラフの左右マージンに合わせる\n                            .padding(.bottom, 20) // Add some space before the new section\n\n                        // --- NEW TRANSACTION HISTORY SECTION ---\n                        transactionHistorySection\n                            .padding(.top, 10) // Spacing from elements above\n                        // --- END NEW TRANSACTION HISTORY SECTION ---\n\n                        // Spacer() // Removed Spacer from here, ScrollView handles empty space\n                    }\n                }\n            }\n            .navigationTitle(\"Analysis of Asset\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) {\n                    Text(\"Analysis of Asset  (ZhangYan)\").font(.headline).foregroundColor(textColor)\n                }\n                // 右上のアイコンは指示になかったため省略\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar)\n            .sheet(isPresented: $showingDateFilter) {\n                DateFilterView(\n                    startDate: $viewModel.customStartDate,\n                    endDate: $viewModel.customEndDate,\n                    onApply: { start, end in\n                        viewModel.applyCustomDateRange(start: start, end: end)\n                    }\n                )\n            }\n            .onAppear {\n                // ビューが表示されたときに初期データをロード (ViewModelのinitでも実行されるが、再表示時にも対応)\n                if viewModel.chartData.isEmpty && !viewModel.isLoading {\n                    viewModel.fetchDataForSelectedRange()\n                }\n            }\n        }\n        .navigationViewStyle(StackNavigationViewStyle())\n    }\n\n    // MARK: - Subviews\n    private var trendAnalysisControlsSection: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            HStack {\n//                Text(\" \")\n//                    .font(.headline)\n//                    .foregroundColor(textColor)\n                Spacer()\n            }\n            .padding(.horizontal)\n\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 10) {\n                    ForEach(TimeRangeOption.allCases.filter { $0 != .custom }) { range in\n                        timeRangeButton(for: range)\n                    }\n                    filterButton\n                }\n                .padding(.horizontal)\n            }\n        }\n    }\n\n    private func timeRangeButton(for range: TimeRangeOption) -> some View {\n        Button(action: {\n            viewModel.selectTimeRange(range)\n        }) {\n            Text(range.rawValue)\n                .font(.subheadline)\n                .padding(.horizontal, 12)\n                .padding(.vertical, 8)\n                .background(\n                    viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                        ? viewModel.selectedButtonColor : viewModel.defaultButtonBackgroundColor\n                )\n                .foregroundColor(\n                    viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                        ? .white : viewModel.deselectedButtonTextColor\n                )\n                .cornerRadius(8)\n                .overlay(\n                    RoundedRectangle(cornerRadius: 8)\n                        .stroke(\n                            viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                                ? viewModel.selectedButtonColor : secondaryTextColor.opacity(0.5),\n                            lineWidth: 0.5)\n                )\n        }\n    }\n\n    // MARK: - 修正箇所\n    private var filterButton: some View {\n        Button(action: {\n            // 筛选ボタンが押されたときに、DateFilterView に渡すデフォルトの日付を設定します。\n            // viewModel の dbDateFormatter を使用して日付文字列を Date オブジェクトに変換します。\n            let defaultStartDateString = \"2022-01-01\"\n            let defaultEndDateString = \"2023-01-01\"\n\n            if let newStartDate = viewModel.dbDateFormatter.date(from: defaultStartDateString),\n                let newEndDate = viewModel.dbDateFormatter.date(from: defaultEndDateString)\n            {\n                // viewModel のカスタム日付プロパティを更新します。\n                // これにより、DateFilterView が表示される際にこれらの日付が初期値として使用されます。\n                viewModel.customStartDate = newStartDate\n                viewModel.customEndDate = newEndDate\n            } else {\n                // 日付の解析に失敗した場合のフォールバック処理です。\n                // エラーメッセージをコンソールに出力し、既存のカスタム日付（またはViewModelの初期デフォルト値）が使用されます。\n                print(\"错误：无法解析筛选的默认自定义日期。将使用ViewModel当前的自定义日期或其初始默认值。\")\n            }\n\n            // DateFilterView を表示します。\n            showingDateFilter = true\n        }) {\n            HStack(spacing: 4) {\n                Text(TimeRangeOption.custom.rawValue)  // \"筛选\"\n                Image(systemName: \"slider.horizontal.3\")\n            }\n            .font(.subheadline)\n            .padding(.horizontal, 12)\n            .padding(.vertical, 8)\n            .background(\n                viewModel.isFilterActive\n                    ? viewModel.selectedButtonColor : viewModel.defaultButtonBackgroundColor\n            )\n            .foregroundColor(\n                viewModel.isFilterActive ? .white : viewModel.deselectedButtonTextColor\n            )\n            .cornerRadius(8)\n            .overlay(\n                RoundedRectangle(cornerRadius: 8)\n                    .stroke(\n                        viewModel.isFilterActive\n                            ? viewModel.selectedButtonColor : secondaryTextColor.opacity(0.5),\n                        lineWidth: 0.5)\n            )\n        }\n    }\n    // MARK: - 修正箇所ここまで\n\n    private var returnSummarySection: some View {\n        VStack(alignment: .leading, spacing: 15) {\n            HStack {\n//                Text(\"  \")\n//                    .font(.headline)\n//                    .foregroundColor(textColor)\n                Spacer()\n            }\n            .padding(.horizontal)\n\n            HStack {\n                VStack(alignment: .leading, spacing: 4) {\n                    Text(\"Accumulated Earnings · USD\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                    Text(\n                        String(\n                            format: \"%@%.2f\", viewModel.cumulativeReturn >= 0 ? \"+\" : \"\",\n                            viewModel.cumulativeReturn)\n                    )\n                    .font(.title2.bold())\n                    .foregroundColor(\n                        viewModel.cumulativeReturn >= 0 ? positiveReturnColor : negativeReturnColor)\n                }\n                Spacer()\n                VStack(alignment: .trailing, spacing: 4) {\n                    HStack(spacing: 4) {  // デザイン画像のテキストとアイコン\n                        Text(\"Yield Rate\")\n                            .font(.caption)\n                            .foregroundColor(secondaryTextColor)\n                        // Image(systemName: \"chevron.down\") // デザイン画像のアイコン、意味が不明瞭なため一旦コメントアウト\n                        //    .font(.caption)\n                        //    .foregroundColor(secondaryTextColor)\n                    }\n                    Text(\n                        String(\n                            format: \"%@%.2f%%\", viewModel.returnRate * 100 >= 0 ? \"+\" : \"\",\n                            viewModel.returnRate * 100)\n                    )\n                    .font(.title3.bold())\n                    // デザイン画像ではオレンジだが、意味合い的には収益率なので緑/赤\n                    .foregroundColor(\n                        viewModel.returnRate >= 0 ? positiveReturnColor : negativeReturnColor)\n                }\n            }\n            .padding(.horizontal)\n        }\n    }\n\n    private var chartArea: some View {\n        Group {\n            if viewModel.isLoading {\n                ProgressView()\n                    .progressViewStyle(CircularProgressViewStyle(tint: textColor))\n                    .frame(height: 220)  // グラフの高さに合わせる\n                    .frame(maxWidth: .infinity)\n            } else if let errorMsg = viewModel.errorMessage, viewModel.chartData.isEmpty {\n                // データがなく、エラーがある場合のみエラーメッセージを大きく表示\n                Text(errorMsg)\n                    .font(.callout)\n                    .foregroundColor(.red)\n                    .padding()\n                    .frame(height: 220)\n                    .frame(maxWidth: .infinity, alignment: .center)\n            } else {\n                // データがある場合、またはデータがありエラーもある場合はグラフを表示\n                LineChartView(\n                    dataPoints: viewModel.chartData,\n                    strokeColor: chartLineColor,\n                    axisColor: secondaryTextColor,\n                    axisLabelColor: secondaryTextColor\n                )\n                .frame(height: 220)  // グラフの高さを指定\n                .padding(.horizontal, 15)  // グラフ描画エリアの左右パディング\n\n                // グラフの下に軽微なエラーメッセージを表示（データはあるが、一部情報が欠けている場合など）\n                if let errorMsg = viewModel.errorMessage, !viewModel.chartData.isEmpty {\n                    Text(errorMsg)\n                        .font(.caption2)\n                        .foregroundColor(.gray)\n                        .padding(.horizontal, 20)\n                        .lineLimit(2)\n                }\n            }\n        }\n    }\n\n    private var xAxisLabels: some View {\n        HStack {\n            if let firstDate = viewModel.chartData.first?.date {\n                Text(chartDateFormatter.string(from: firstDate))\n            } else {\n                Text(\"----/--/--\")  // データがない場合のプレースホルダー\n            }\n            Spacer()\n            if let lastDate = viewModel.chartData.last?.date, viewModel.chartData.count > 1 {  // データが2つ以上ある場合のみ終了日を表示\n                Text(chartDateFormatter.string(from: lastDate))\n            } else if viewModel.chartData.count == 1,\n                let firstDate = viewModel.chartData.first?.date\n            {\n                Text(chartDateFormatter.string(from: firstDate))  // データが1つの場合は開始日と同じ\n            } else {\n                Text(\"----/--/--\")  // データがない場合のプレースホルダー\n            }\n        }\n        .font(.caption)\n        .foregroundColor(secondaryTextColor)\n    }\n\n    // MARK: - New Transaction History Section (as per request)\n    private var transactionHistorySection: some View {\n        VStack(alignment: .leading, spacing: 0) {\n            // Tab-like header\n            HStack(spacing: 0) {\n                // VStack 包含 \"账户记录\" 和 下划线，现在是第一个元素\n                VStack(spacing: 3) {\n                    Text(\"Account Records\")\n                        .font(.system(size: 15, weight: .medium))\n                        .padding(.vertical, 10)\n                        .padding(.horizontal, 20)\n                        .foregroundColor(textColor) // \"账户记录\" 保持 textColor，因为它现在是选中的/主要的\n                    Rectangle()\n                        .frame(width: 80, height: 2.5) // 修改这里：增加了 width 使其变短，40 是一个示例值，您可以根据需要调整\n                        .foregroundColor(accentColorForTabUnderline)\n                }\n\n                // \"订单现况\" 现在是第二个元素\n                Text(\"Order Status\")\n                    .font(.system(size: 15, weight: .medium))\n                    .padding(.vertical, 10)\n                    .padding(.horizontal, 20)\n                    .foregroundColor(secondaryTextColor) // \"订单现况\" 保持 secondaryTextColor\n\n                Spacer()\n            }\n            .padding(.leading) // Align with content below\n            .padding(.bottom, 8)\n\n            // List of transactions\n            VStack(alignment: .leading, spacing: 0) {\n                transactionRowView(month: \"Mar\", day: \"25\", year: \"2025\", transactionType: \"Sell CHAU\", transactionDetails: \"38.68 Shares @ $16.88\", dotColor: dotSellActualColor)\n                transactionRowView(month: \"Mar\", day: \"19\", year: \"2025\", transactionType: \"Buy CHAU\", transactionDetails: \"38.68 Shares @ $25.36\", dotColor: dotBuyActualColor)\n                transactionRowView(month: \"Dec\", day: \"01\", year: \"2024\", transactionType: \"Sell IBIT\", transactionDetails: \"14 Shares @ $35.64\", dotColor: dotSellActualColor)\n                transactionRowView(month: \"Jun\", day: \"05\", year: \"2024\", transactionType: \"Withdraw\", transactionDetails: \"$5,000.00\", dotColor: dotOtherActualColor)\n                transactionRowView(month: \"Jun\", day: \"01\", year: \"2024\", transactionType: \"Buy IBIT\", transactionDetails: \"14 Shares @ $36.04\", dotColor: dotBuyActualColor)\n                // 利息 (Interest) entry for 9月 16 is intentionally omitted as per request\n                transactionRowView(month: \"May\", day: \"27\", year: \"2024\", transactionType: \"Sell TLT\", transactionDetails: \"23.84 Shares @ $25.36\", dotColor: dotBuyActualColor)\n                transactionRowView(month: \"May\", day: \"19\", year: \"2024\", transactionType: \"Buy TLT\", transactionDetails: \"23.84 Shares @ $29.36\", dotColor: dotBuyActualColor)\n            }\n            .padding(.leading, 20) // Indent the transaction list slightly for the timeline\n            .padding(.trailing, 15) // Overall right padding\n        }\n    }\n\n    private func transactionRowView(\n        month: String, day: String, year: String,\n        transactionType: String, transactionDetails: String,\n        dotColor: Color\n    ) -> some View {\n        HStack(alignment: .center, spacing: 10) { // Adjusted spacing\n            // Date Column\n            VStack(alignment: .center, spacing: 2) {\n                Text(month)\n                    .font(.caption)\n                    .foregroundColor(secondaryTextColor)\n                Text(day)\n                    .font(.system(size: 17, weight: .medium))\n                    .foregroundColor(textColor)\n                Text(year)\n                    .font(.caption)\n                    .foregroundColor(secondaryTextColor)\n            }\n            .frame(width: 40) // Date column width\n\n            // Timeline Column\n            ZStack {\n                // The continuous vertical line for this row's segment\n                Rectangle()\n                    .fill(timelineActualColor) // Use the defined timeline color\n                    .frame(width: 1.5)\n\n                // Circle to \"punch out\" the line behind the dot\n                Circle()\n                    .fill(pageBackgroundColor) // Use the main page background color\n                    .frame(width: 12, height: 12) // Size of the punch-out\n\n                // The actual colored dot\n                Circle()\n                    .fill(dotColor)\n                    .frame(width: 8, height: 8) // Size of the transaction dot\n            }\n            .frame(width: 12) // Width of the timeline ZStack\n\n            // Details Column\n            VStack(alignment: .leading, spacing: 3) {\n                Text(transactionType)\n                    .font(.system(size: 15, weight: .medium))\n                    .foregroundColor(textColor)\n                Text(transactionDetails)\n                    .font(.system(size: 12))\n                    .foregroundColor(secondaryTextColor)\n                    .fixedSize(horizontal: false, vertical: true) // Allow text to wrap\n            }\n            .padding(.leading, 4) // Small space after timeline\n\n            Spacer() // Pushes content to the left\n        }\n        .padding(.vertical, 12) // Vertical padding for the row, defines its height and spacing\n    }\n\n}\n\nstruct DateFilterView: View {\n    @Binding var startDate: Date\n    @Binding var endDate: Date\n    var onApply: (Date, Date) -> Void\n    @Environment(\\.presentationMode) var presentationMode\n\n    // 色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let textColor = Color.white\n    private let accentButtonColor = Color(hex: \"3B82F6\")  // Firstradeの標準的なアクセントカラー\n\n    @State private var tempStartDate: Date\n    @State private var tempEndDate: Date\n    @State private var dateError: String? = nil\n\n    init(startDate: Binding<Date>, endDate: Binding<Date>, onApply: @escaping (Date, Date) -> Void)\n    {\n        _startDate = startDate\n        _endDate = endDate\n        self.onApply = onApply\n        // tempStartDate と tempEndDate は、親ビューから渡されたバインディングの現在の値で初期化されます。\n        // AssetsView の filterButton アクションで viewModel.customStartDate と viewModel.customEndDate が\n        // 更新されていれば、ここでその新しい値が tempStartDate と tempEndDate の初期値となります。\n        _tempStartDate = State(initialValue: startDate.wrappedValue)\n        _tempEndDate = State(initialValue: endDate.wrappedValue)\n    }\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea()\n                VStack(spacing: 20) {\n                    Text(\"Date Range\")\n                        .font(.title2.bold())\n                        .foregroundColor(textColor)\n                        .padding(.top, 30)\n\n                    DatePicker(\"START\", selection: $tempStartDate, displayedComponents: .date)\n                        .foregroundColor(textColor)\n                        .colorScheme(.dark)  // DatePickerのUIをダークテーマに\n                        .accentColor(accentButtonColor)  // カレンダー内の選択色\n                        .padding(.horizontal)\n\n                    DatePicker(\n                        \"END\", selection: $tempEndDate, in: tempStartDate...,\n                        displayedComponents: .date\n                    )\n                    .foregroundColor(textColor)\n                    .colorScheme(.dark)\n                    .accentColor(accentButtonColor)\n                    .padding(.horizontal)\n\n                    if let error = dateError {\n                        Text(error)\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .padding(.horizontal)\n                    }\n\n                    Button(action: {\n                        if tempEndDate < tempStartDate {\n                            dateError = \"截止日期不能早于起始日期。\"\n                            return\n                        }\n                        dateError = nil\n                        onApply(tempStartDate, tempEndDate)\n                        presentationMode.wrappedValue.dismiss()\n                    }) {\n                        Text(\"OK\")\n                            .font(.headline)\n                            .foregroundColor(.white)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal)\n                    .padding(.top, 20)\n\n                    Spacer()\n                }\n            }\n            .navigationTitle(\"筛选日期\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) {\n                    Text(\"Filter Date\").foregroundColor(textColor)\n                }\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(\"Cancel\") {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                    .foregroundColor(accentButtonColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar)  // ナビゲーションバーのアイテムを明るく\n        }\n        .navigationViewStyle(StackNavigationViewStyle())  // モーダル表示に適したスタイル\n    }\n}\n\nstruct LineChartView: View {\n    let dataPoints: [DealDataPoint]\n    let strokeColor: Color\n    let axisColor: Color\n    let axisLabelColor: Color\n\n    private var maxY: Double { (dataPoints.map { $0.value }.max() ?? 0) }\n    private var minY: Double { (dataPoints.map { $0.value }.min() ?? 0) }\n    private var ySpread: Double {\n        let spread = maxY - minY\n        return spread == 0 ? 1 : spread  // 0除算を避ける\n    }\n\n    var body: some View {\n        GeometryReader { geometry in\n            if dataPoints.isEmpty {\n                Text(\"No Data for Chart\")\n                    .foregroundColor(axisLabelColor)\n                    .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .center)\n            } else {\n                Path { path in\n                    // グラフの描画領域を少し内側にオフセットする（ラベルのため）\n                    let drawingWidth = geometry.size.width * 0.9  // 左右に5%ずつのマージン\n                    let drawingHeight = geometry.size.height * 0.9  // 上下に5%ずつのマージン\n                    let xOffset = geometry.size.width * 0.05\n                    let yOffset = geometry.size.height * 0.05\n\n                    for i in dataPoints.indices {\n                        let dataPoint = dataPoints[i]\n\n                        // X座標の計算 (データポイントの数に基づいて均等に配置)\n                        let xPosition: CGFloat\n                        if dataPoints.count == 1 {\n                            xPosition = drawingWidth / 2  // データが1つなら中央に\n                        } else {\n                            xPosition = CGFloat(i) * (drawingWidth / CGFloat(dataPoints.count - 1))\n                        }\n\n                        // Y座標の計算 (Y軸は反転し、スプレッドに基づいてスケーリング)\n                        let yPosition =\n                            drawingHeight * (1 - CGFloat((dataPoint.value - minY) / ySpread))\n\n                        let actualX = xPosition + xOffset\n                        let actualY = yPosition + yOffset\n\n                        if i == 0 {\n                            path.move(to: CGPoint(x: actualX, y: actualY))\n                        } else {\n                            path.addLine(to: CGPoint(x: actualX, y: actualY))\n                        }\n                        // データポイントに円を描画 (オプション)\n                        // path.addEllipse(in: CGRect(x: actualX - 2, y: actualY - 2, width: 4, height: 4))\n                    }\n                }\n                .stroke(strokeColor, lineWidth: 2)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "我想新增目前缺失的markets页面，附件是设计图，请告还原度实现"
    },
    {
        "id": "2025-05-27 15:00:22",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            WatchlistView() // Use the newly created WatchlistView\n                .tabItem {\n                    Image(systemName: \"star\") // SwiftUI will use \"star.fill\" when selected\n                    Text(\"Watchlist\")\n                }\n\n            MarketsView()\n                .tabItem {\n                    Image(systemName: \"safari.fill\") // Using safari.fill as a compass-like icon\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    private var requestTransferButton: some View {\n        Button(action: {\n            print(\"Request transfer tapped (not implemented)\")\n        }) {\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))  // Adjusted font\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)  // Explicit height\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库文件中有一个名为Balance的表，结构和内容如下“id  date        value  \n--  ----------  -------\n2   2025-05-21  28000.0\n1   2025-05-22  30000.0\n”"
            }
        ],
        "final_prompt": "目前我点击depositview界面上的\"request transfer\"按钮是没有反应的，我想要在点击后增加一个新页面，附件是设计图，设计图上有一个\"deposit to ...\"和\"withdraw from...\"的单选框，默认是选中withdraw...，下方的cashamout数值是从firstrade.db的balance表中读取出来的，是最新一天的value值，下面的amout位置可以输入，最小输入为1，当输入数值大于等于1时，得下的preview按钮才会亮起来，preview按钮点击功能后续会做，这里先把实现一个样式。我该怎么改代码才能实现以上需求？"
    },
    {
        "id": "2025-05-27 15:58:03",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SwiftUI\nimport SQLite3 // SQLiteを使用するためにインポート\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg = \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db) // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0 // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\") // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n//                Text(\"Please select transfer type\")\n//                    .font(.headline)\n//                    .foregroundColor(primaryTextColor)\n//                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(systemName: viewModel.selectedTransferType == type ? \"largecircle.fill.circle\" : \"circle\")\n                                    .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30/255, green: 35/255, blue: 45/255)) // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n                \n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\")\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5))\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n\nstruct RequestTransferView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {\n            RequestTransferView()\n        }\n        .preferredColorScheme(.dark)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库有一个叫“Deposit”的表，结构和内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”"
            }
        ],
        "final_prompt": "我的需求是：当点击requesttransfer程序里的Submit按钮，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的Deposit表内写入一条记录，日期是系统日期当天，value是之前填写入的amout数额，type是2，然后在这个界面等待1.5秒，然后界面关闭，显示出它的上一级界面（depositview）并且刷新一下这个界面（因为这个界面有读取数据库的功能），目的是让新写入数据库的内容可以更新出来。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 16:15:21",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库有一个叫“Deposit”的表，结构和内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SQLite3  // SQLiteを使用するためにインポート\nimport SwiftUI\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw  // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)  // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0  // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\n                \"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\"\n            )\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\")  // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n                //                Text(\"Please select transfer type\")\n                //                    .font(.headline)\n                //                    .foregroundColor(primaryTextColor)\n                //                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(\n                                    systemName: viewModel.selectedTransferType == type\n                                        ? \"largecircle.fill.circle\" : \"circle\"\n                                )\n                                .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30 / 255, green: 35 / 255, blue: 45 / 255))  // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\n                        \"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\"\n                    )\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(\n                            accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5)\n                        )\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：当点击requesttransferview程序里的Submit按钮后，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的Deposit表内写入一条记录，日期是系统日期当天，value是之前已经填入的amount数额，type是2，然后在这个界面等待1.5秒后界面关闭，程序会自动显示出它的上一级界面（depositview）并且我需要刷新一下这个界面（因为这个界面有读取数据库的功能），目的是让新写入数据库的内容可以更新出来。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 17:16:33",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SQLite3  // SQLiteを使用するためにインポート\nimport SwiftUI\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw  // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)  // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0  // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\n                \"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\"\n            )\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\")  // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n                //                Text(\"Please select transfer type\")\n                //                    .font(.headline)\n                //                    .foregroundColor(primaryTextColor)\n                //                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(\n                                    systemName: viewModel.selectedTransferType == type\n                                        ? \"largecircle.fill.circle\" : \"circle\"\n                                )\n                                .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30 / 255, green: 35 / 255, blue: 45 / 255))  // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\n                        \"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\"\n                    )\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(\n                            accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5)\n                        )\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "目前程序里的amount是读取firstrade.db的Balance表，我的需求是：当点击requesttransferview程序里的Submit按钮后，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的另一个表Deposit里写入一条记录（“Deposit”的表内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”），日期是系统日期当天，value是之前已经填入的amount数额，type是2，然后在这个界面等待1.5秒后界面关闭。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 19:32:11",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            WatchlistView() // Use the newly created WatchlistView\n                .tabItem {\n                    Image(systemName: \"star\") // SwiftUI will use \"star.fill\" when selected\n                    Text(\"Watchlist\")\n                }\n\n            MarketsView()\n                .tabItem {\n                    Image(systemName: \"safari.fill\") // Using safari.fill as a compass-like icon\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/Search.swift",
                "filename": "Search.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI\n\n// MARK: - 协议与模型\nprotocol SearchDescribableItem {\n    var symbol: String { get }\n    var name: String { get }\n    var tag: [String] { get }\n    var description1: String { get }\n    var description2: String { get }\n}\n\nstruct SelectedSymbol: Identifiable {\n    let id = UUID()\n    let result: SearchResult\n    let category: String\n}\n\nstruct GroupedSearchResults: Identifiable {\n    var id = UUID()\n    var category: MatchCategory\n    var results: [(result: SearchResult, score: Int)]\n    let highestScore: Int\n}\n\nenum MatchCategory: String, CaseIterable, Identifiable {\n    case stockSymbol = \"Stock Symbol\"\n    case etfSymbol = \"ETF Symbol\"\n    case stockName = \"Stock Name\"\n    case etfName = \"ETF Name\"\n    case stockTag = \"Stock Tag\"\n    case etfTag = \"ETF Tag\"\n    case stockDescription = \"Stock Description\"\n    case etfDescription = \"ETF Description\"\n    \n    var id: String { self.rawValue }\n    \n    var priority: Int {\n        switch self {\n        case .stockSymbol, .etfSymbol:\n            return 1000\n        case .stockTag, .etfTag:\n            return 800\n        case .stockName, .etfName:\n            return 500\n        case .stockDescription, .etfDescription:\n            return 300\n        }\n    }\n}\n\n// MARK: - 搜索结果包装\nclass SearchResult: Identifiable, ObservableObject {\n    let id = UUID()\n    @Published var symbol: String\n    @Published var name: String\n    @Published var tag: [String]\n    @Published var marketCap: String?\n    @Published var peRatio: String?\n    @Published var pb: String?  // 添加 pb 属性\n    @Published var compare: String?\n    @Published var volume: String?\n    \n    init(symbol: String, name: String, tag: [String],\n         marketCap: String? = nil, peRatio: String? = nil, pb: String? = nil,\n         compare: String? = nil, volume: String? = nil) {\n        self.symbol = symbol\n        self.name = name\n        self.tag = tag\n        self.marketCap = marketCap\n        self.peRatio = peRatio\n        self.pb = pb  // 初始化 pb\n        self.compare = compare\n        self.volume = volume\n    }\n}\n\n// MARK: - 分组 header\nstruct GroupHeaderView: View {\n    let category: MatchCategory\n    @Binding var isCollapsed: Bool\n    \n    var body: some View {\n        HStack {\n            Text(category.rawValue)\n                .font(.headline)\n                .foregroundColor(.gray)\n            Spacer()\n            Image(systemName: isCollapsed ? \"chevron.down\" : \"chevron.up\")\n                .foregroundColor(.gray)\n        }\n        .contentShape(Rectangle())\n        .onTapGesture {\n            withAnimation {\n                isCollapsed.toggle()\n            }\n        }\n    }\n}\n\n// MARK: - 主搜索按钮页面\nstruct SearchContentView: View {\n    @State private var showSearch = false\n    @State private var showCompare = false\n    @State private var showEarning = false // 添加新状态\n    @EnvironmentObject var dataService: DataService\n    \n    var body: some View {\n        NavigationStack {\n            HStack(spacing: 12) {\n                Button(action: { showCompare = true }) {\n                    VStack {\n                        Image(systemName: \"chart.line.uptrend.xyaxis\")\n                            .font(.system(size: 20))\n                        Text(\"比较\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showEarning = true }) {\n                    VStack {\n                        Image(systemName: \"calendar\")\n                            .font(.system(size: 20))\n                        Text(\"财报\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n            }\n            .padding(.horizontal)\n            Spacer()\n        }\n        .navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        }\n        .navigationDestination(isPresented: $showCompare) {\n            CompareView(initialSymbol: \"\")\n        }\n        .navigationDestination(isPresented: $showEarning) {\n                    EarningReleaseView()\n                }\n    }\n}\n\n// MARK: - 搜索页面\nstruct SearchView: View {\n    @Environment(\\.dismiss) private var dismiss\n    @State private var searchText: String = \"\"\n    @State private var showClearButton: Bool = false\n    @State private var showSearchHistory: Bool = false\n    @State private var groupedSearchResults: [GroupedSearchResults] = []\n    @State private var isLoading: Bool = false\n    @State private var selectedCategory: String? = nil\n    @State private var showChart: Bool = false\n    @State private var selectedResult: SearchResult? = nil\n    @State private var selectedSymbol: SelectedSymbol? = nil\n    @State private var isFirstAppear = true\n    @ObservedObject var viewModel: SearchViewModel\n    @FocusState private var isSearchFieldFocused: Bool\n    @State private var showChartView: Bool = false\n    @State private var selectedSymbolForChart: SelectedSymbol? = nil\n    @State private var selectedSymbolForDescription: SelectedSymbol? = nil\n    @State private var clipboardContent: String = \"\"\n    @State private var showClipboardBar: Bool = false\n    \n    @State private var collapsedGroups: [MatchCategory: Bool] = [:]\n    let isSearchActive: Bool\n    \n    init(isSearchActive: Bool = false, dataService: DataService) {\n        self.isSearchActive = isSearchActive\n        self.viewModel = SearchViewModel(dataService: dataService)\n        _showSearchHistory = State(initialValue: isSearchActive)\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            searchBar\n                .padding()\n            \n            // 剪贴板小条\n            if showClipboardBar {\n                HStack {\n                    Image(systemName: \"doc.on.clipboard\")\n                        .foregroundColor(.gray)\n                    Text(clipboardContent)\n                        .lineLimit(1)\n                        .truncationMode(.middle)\n                    Spacer()\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n                .background(Color(.systemGray5))\n                .cornerRadius(8)\n                .padding(.horizontal)\n                .onTapGesture {\n                    // 粘贴并隐藏小条\n                    searchText = clipboardContent\n                    withAnimation {\n                        showClipboardBar = false\n                        showSearchHistory = false\n                    }\n                    // 你可以根据需要自动触发搜索：\n                     startSearch()\n                }\n                .transition(.move(edge: .top).combined(with: .opacity))\n            }\n\n            ZStack {\n                if showSearchHistory {\n                    SearchHistoryView(viewModel: viewModel) { term in\n                        searchText = term\n                        startSearch()\n                    }\n                    .transition(.opacity)\n                    .zIndex(1)\n                }\n                \n                if isLoading {\n                    ProgressView(\"正在搜索...\")\n                        .padding()\n                }\n                \n                if !showSearchHistory && !groupedSearchResults.isEmpty {\n                    searchResultsList\n                        .transition(.opacity)\n                }\n            }\n            .navigationBarTitleDisplayMode(.inline)\n            .alert(isPresented: Binding<Bool>(\n                get: { viewModel.errorMessage != nil },\n                set: { if !$0 { viewModel.errorMessage = nil } }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(viewModel.errorMessage ?? \"\"),\n                    dismissButton: .default(Text(\"确定\"))\n                )\n            }\n            .sheet(item: $selectedSymbol) { selected in\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n        .onAppear {\n            if isSearchActive && isFirstAppear {\n                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n                    isSearchFieldFocused = true\n                    isFirstAppear = false\n                }\n            }\n        }\n    }\n    \n    private var searchBar: some View {\n        HStack {\n            ZStack(alignment: .trailing) {\n                TextField(\n                    \"请输入要搜索的关键字\",\n                    text: $searchText,\n                    onEditingChanged: { isEditing in\n                        withAnimation {\n                            // 控制搜索历史的展示\n                            showSearchHistory = isEditing && searchText.isEmpty\n                            if isEditing && searchText.isEmpty {\n                                groupedSearchResults = []\n                            }\n                        }\n                        // 当开始编辑且文本为空时，读取剪贴板并展示小条\n                        if isEditing && searchText.isEmpty {\n                            if let content = UIPasteboard.general.string?\n                                .trimmingCharacters(in: .whitespacesAndNewlines),\n                               !content.isEmpty {\n                                clipboardContent = content\n                                withAnimation {\n                                    showClipboardBar = true\n                                }\n                            }\n                        }\n                    },\n                    onCommit: {\n                        startSearch()\n                    }\n                )\n                .focused($isSearchFieldFocused)\n                .padding(10)\n                .padding(.trailing, showClearButton ? 30 : 10)\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n                .onChange(of: searchText) { _, newValue in\n                    showClearButton = !newValue.isEmpty\n                    if newValue.isEmpty {\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                        }\n                    } else {\n                        // 输入时隐藏剪贴板小条\n                        withAnimation { showClipboardBar = false }\n                    }\n                }\n\n                if showClearButton {\n                    Button(action: {\n                        searchText = \"\"\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                            isSearchFieldFocused = true\n                        }\n                        // 点击清除时读取剪贴板\n                        if let content = UIPasteboard.general.string?\n                            .trimmingCharacters(in: .whitespacesAndNewlines),\n                           !content.isEmpty {\n                            clipboardContent = content\n                            withAnimation {\n                                showClipboardBar = true\n                            }\n                        }\n                    }) {\n                        Image(systemName: \"xmark.circle.fill\")\n                            .foregroundColor(.gray)\n                            .opacity(0.6)\n                    }\n                    .padding(.trailing, 15)\n                    .transition(.opacity)\n                }\n            }\n\n            Button(action: {\n                startSearch()\n                isSearchFieldFocused = false\n            }) {\n                Text(\"搜索\")\n                    .foregroundColor(.white)\n                    .padding(.horizontal)\n                    .padding(.vertical, 8)\n                    .background(Color.blue)\n                    .cornerRadius(8)\n            }\n        }\n    }\n    \n    private var searchResultsList: some View {\n        List {\n            ForEach(groupedSearchResults) { groupedResult in\n                if !groupedResult.results.isEmpty {\n                    Section(header: GroupHeaderView(\n                        category: groupedResult.category,\n                        isCollapsed: Binding(\n                            get: { collapsedGroups[groupedResult.category] ?? false },\n                            set: { collapsedGroups[groupedResult.category] = $0 }\n                        )\n                    )) {\n                        if !(collapsedGroups[groupedResult.category] ?? false) {\n                            ForEach(groupedResult.results.sorted { $0.score > $1.score }, id: \\.result.id) { result, score in\n                                SearchResultRow(result: result, score: score)\n                                    .contentShape(Rectangle())  // 添加这一行\n                                    .onTapGesture {           // 改用 onTapGesture\n                                        handleResultSelection(result: result)\n                                    }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        .listStyle(InsetGroupedListStyle())\n        .sheet(item: $selectedSymbolForDescription) { selected in\n            if let descriptions = getDescriptions(for: selected.result.symbol) {\n                DescriptionView(descriptions: descriptions, isDarkMode: true)\n            } else {\n                DescriptionView(descriptions: (\"No description available.\", \"\"), isDarkMode: true)\n            }\n        }\n        .navigationDestination(isPresented: $showChartView) {\n            if let selected = selectedSymbolForChart {\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n    }\n\n    // 添加处理结果选择的方法\n    private func handleResultSelection(result: SearchResult) {\n        // 检查symbol是否在数据库中有数据\n        if let groupName = viewModel.dataService.getCategory(for: result.symbol) {\n            // 检查数据库中是否有该symbol的价格数据\n            DispatchQueue.global(qos: .userInitiated).async {\n                let data = DatabaseManager.shared.fetchHistoricalData(\n                    symbol: result.symbol,\n                    tableName: groupName,\n                    dateRange: .timeRange(.oneMonth)\n                )\n                \n                DispatchQueue.main.async {\n                    if data.isEmpty {\n                        // 如果没有价格数据，但有description数据\n                        if getDescriptions(for: result.symbol) != nil {\n                            selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n                        }\n                    } else {\n                        // 有价格数据，通过导航打开ChartView\n                        selectedSymbolForChart = SelectedSymbol(result: result, category: groupName)\n                        showChartView = true\n                    }\n                }\n            }\n        } else {\n            // 如果在分类中找不到，但可能有description\n            if getDescriptions(for: result.symbol) != nil {\n                selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n            }\n        }\n    }\n\n    // 添加获取描述的辅助方法\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = viewModel.dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = viewModel.dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    func startSearch() {\n        let trimmed = searchText.trimmingCharacters(in: .whitespaces)\n        guard !trimmed.isEmpty else { return }\n        isSearchFieldFocused = false\n        isLoading = true\n        showSearchHistory = false\n\n        viewModel.performSearch(query: trimmed) { groupedResults in\n            DispatchQueue.main.async {\n                withAnimation {\n                    // 1. 先赋值\n                    self.groupedSearchResults = groupedResults\n                    self.isLoading = false\n                    \n                    // 2. 初始化折叠状态\n                    for group in groupedResults {\n                        if self.collapsedGroups[group.category] == nil {\n                            self.collapsedGroups[group.category] = false\n                        }\n                    }\n                }\n                \n                // 3. 自动判断首个结果\n                if\n                    let firstGroup = groupedResults.first,\n                    // 记得 results 本来就是按 score 排好序的\n                    let firstEntry = firstGroup.results.first,\n                    trimmed.uppercased() == firstEntry.result.symbol.uppercased()\n                {\n                    // 4. 直接打开 chart 或 description\n                    self.handleResultSelection(result: firstEntry.result)\n                    return\n                }\n                \n                // 如果不一致，就正常停留在列表\n            }\n        }\n    }\n}\n\n// MARK: - 搜索结果行\nstruct SearchResultRow: View {\n    @ObservedObject var result: SearchResult\n    let score: Int\n    \n    var body: some View {\n        VStack(alignment: .leading) {\n            HStack {\n                VStack(alignment: .leading) {\n                    HStack {\n                        Text(result.symbol)\n                            .foregroundColor(.blue)\n                        Text(result.name)\n                            .foregroundColor(.primary)\n                            .lineLimit(1)\n                            .truncationMode(.tail)\n                    }\n                    .font(.headline)\n                    Text(result.tag.joined(separator: \", \"))\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                Spacer()\n            }\n            HStack {\n                if let marketCap = result.marketCap {\n                    Text(marketCap)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let peRatio = result.peRatio, peRatio != \"--\" {\n                    Text(peRatio)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let pb = result.pb, pb != \"--\" {  // 添加 PB 的显示\n                                    Text(pb)\n                                        .font(.subheadline)\n                                        .foregroundColor(.secondary)\n                                }\n                if let compare = result.compare {\n                    Text(compare)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let volume = result.volume {\n                    Text(volume)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n            }\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - 搜索历史视图\nstruct SearchHistoryView: View {\n    @ObservedObject var viewModel: SearchViewModel\n    var onSelect: (String) -> Void\n    \n    var body: some View {\n        VStack {\n            if viewModel.searchHistory.isEmpty {\n                Text(\"暂无搜索历史\")\n                    .foregroundColor(.secondary)\n                    .padding()\n            } else {\n                ScrollView {\n                    VStack(alignment: .leading, spacing: 8) {\n                        ForEach(viewModel.searchHistory, id: \\.self) { term in\n                            HStack {\n                                Text(term)\n                                Spacer()\n                                Button(action: {\n                                    viewModel.removeSearchHistory(term: term)\n                                }) {\n                                    Image(systemName: \"trash\")\n                                        .foregroundColor(.red)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 4)\n                            .contentShape(Rectangle())\n                            .onTapGesture {\n                                onSelect(term)\n                            }\n                        }\n                    }\n                }\n                .background(Color(.systemBackground))\n                .cornerRadius(8)\n                .shadow(radius: 5)\n                .padding([.horizontal, .bottom])\n            }\n        }\n    }\n}\n\n// MARK: - ViewModel\nclass SearchViewModel: ObservableObject {\n    @Published var searchHistory: [String] = []\n    @Published var errorMessage: String? = nil\n    @Published var isChartLoading: Bool = false\n    @Published var groupedSearchResults: [GroupedSearchResults] = []\n    \n    var dataService: DataService\n    private var cancellables = Set<AnyCancellable>()\n    \n    init(dataService: DataService = DataService()) {\n        self.dataService = dataService\n        dataService.$errorMessage\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.errorMessage, on: self)\n            .store(in: &cancellables)\n        loadSearchHistory()\n    }\n    \n    func performSearch(query: String, completion: @escaping ([GroupedSearchResults]) -> Void) {\n        let keywords = query.lowercased().split(separator: \" \").map { String($0) }\n        \n        DispatchQueue.global(qos: .userInitiated).async { [weak self] in\n            guard let self = self, let descriptionData = self.dataService.descriptionData else {\n                DispatchQueue.main.async { completion([]) }\n                return\n            }\n            \n            var groupedResults: [(\n                group: GroupedSearchResults,\n                matchScore: Int,\n                priority: Int\n            )] = []\n            \n            let categories: [MatchCategory] = [\n                .stockSymbol, .etfSymbol,\n                .stockName, .etfName,\n                .stockTag, .etfTag,\n                .stockDescription, .etfDescription\n            ]\n            \n            for category in categories {\n                var matches: [(result: SearchResult, score: Int)] = []\n                \n                switch category {\n                case .stockSymbol, .stockName, .stockDescription, .stockTag:\n                    matches = self.searchCategory(items: descriptionData.stocks, keywords: keywords, category: category)\n                    \n                case .etfSymbol, .etfName, .etfDescription, .etfTag:\n                    matches = self.searchCategory(items: descriptionData.etfs, keywords: keywords, category: category)\n                }\n                \n                if !matches.isEmpty {\n                    let highestScore = matches.max(by: { $0.score < $1.score })?.score ?? 0\n                    let group = GroupedSearchResults(category: category, results: matches, highestScore: highestScore)\n                    groupedResults.append((group, highestScore, category.priority))\n                }\n            }\n            \n            let sortedGroups = groupedResults.sorted {\n                if $0.matchScore != $1.matchScore {\n                    return $0.matchScore > $1.matchScore\n                }\n                return $0.priority > $1.priority\n            }.map { $0.group }\n            \n            DispatchQueue.main.async {\n                if !keywords.isEmpty {\n                    self.addSearchHistory(term: query)\n                }\n                self.groupedSearchResults = sortedGroups\n                self.fetchLatestVolumes(for: sortedGroups) {\n                    completion(sortedGroups)\n                }\n            }\n        }\n    }\n    \n    // 为 ETF 搜索结果获取最新 volume\n    private func fetchLatestVolumes(for groupedResults: [GroupedSearchResults], completion: @escaping () -> Void) {\n        let etfCategories: Set<MatchCategory> = [.etfSymbol, .etfName, .etfDescription, .etfTag]\n        \n        for groupedResult in groupedResults {\n            if etfCategories.contains(groupedResult.category) {\n                for (_, entry) in groupedResult.results.enumerated() {\n                    let symbol = entry.result.symbol\n                    if let latestVolume = DatabaseManager.shared.fetchLatestVolume(forSymbol: symbol, tableName: \"ETFs\") {\n                        DispatchQueue.main.async {\n                            entry.result.volume = self.formatVolume(latestVolume)\n                        }\n                    } else {\n                        DispatchQueue.main.async {\n                            entry.result.volume = \"--K\"\n                        }\n                    }\n                }\n            }\n        }\n        completion()\n    }\n    \n    private func formatVolume(_ volume: Int64) -> String {\n        let kVolume = Double(volume) / 1000.0\n        return String(format: \"%.0fK\", kVolume)\n    }\n    \n    // 搜索类别，并根据结果进行匹配和排序\n    func searchCategory<T: SearchDescribableItem>(items: [T],\n                                                  keywords: [String],\n                                                  category: MatchCategory)\n    -> [(result: SearchResult, score: Int)] {\n        var scoredResults: [(SearchResult, Int)] = []\n        \n        for item in items {\n            if let totalScore = matchScoreForItem(item, category: category, keywords: keywords) {\n                let upperSymbol = item.symbol.uppercased()\n                let data = dataService.marketCapData[upperSymbol]\n                let marketCap = data?.marketCap\n                let peRatioStr = data?.peRatio != nil ? String(format: \"%.2f\", data!.peRatio!) : \"--\"\n                let pbStr = data?.pb != nil ? String(format: \"%.2f\", data!.pb!) : \"--\"  // 添加 PB 格式化\n                \n                let result = SearchResult(\n                    symbol: item.symbol,\n                    name: item.name,\n                    tag: item.tag,\n                    marketCap: marketCap,\n                    peRatio: peRatioStr,\n                    pb: pbStr,  // 添加 PB 数据\n                    compare: dataService.compareData[upperSymbol]\n                )\n                \n                scoredResults.append((result, totalScore))\n            }\n        }\n        \n        return scoredResults.sorted { $0.1 > $1.1 }\n    }\n    \n    // 计算某个 item 与一组关键词在指定分类下的匹配分数\n    private func matchScoreForItem<T: SearchDescribableItem>(\n        _ item: T,\n        category: MatchCategory,\n        keywords: [String]) -> Int? {\n        \n        var totalScore = 0\n        \n        for keyword in keywords {\n            let lowerKeyword = keyword.lowercased()\n            let singleScore = scoreOfSingleMatch(item: item, keyword: lowerKeyword, category: category)\n            if singleScore <= 0 {\n                return nil\n            } else {\n                totalScore += singleScore\n            }\n        }\n        return totalScore\n    }\n    \n    // 计算单个关键词在指定分类下的匹配分数\n    private func scoreOfSingleMatch<T: SearchDescribableItem>(\n        item: T,\n        keyword: String,\n        category: MatchCategory) -> Int {\n        \n        switch category {\n        case .stockSymbol, .etfSymbol:\n            return matchSymbol(item.symbol.lowercased(), keyword: keyword)\n        case .stockName, .etfName:\n            return matchName(item.name, keyword: keyword)\n        case .stockTag, .etfTag:\n            return matchTags(item.tag, keyword: keyword)\n        case .stockDescription, .etfDescription:\n            return matchDescriptions(item.description1, item.description2, keyword: keyword)\n        }\n    }\n    \n    private func matchSymbol(_ symbol: String, keyword: String) -> Int {\n        if symbol == keyword {\n            return 3\n        } else if symbol.contains(keyword) {\n            return 2\n        } else if isFuzzyMatch(text: symbol, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchName(_ name: String, keyword: String) -> Int {\n        let lowercasedName = name.lowercased()\n        let nameComponents = lowercasedName.components(separatedBy: \",\")\n        let mainName = nameComponents.first ?? lowercasedName\n        let nameWords = mainName.split(separator: \" \").map { String($0) }\n        \n        if lowercasedName == keyword {\n            return 4\n        } else if nameWords.contains(keyword) || mainName == keyword {\n            return 3\n        } else if mainName.contains(keyword) {\n            return 2\n        } else if lowercasedName.contains(keyword) {\n            return 1\n        } else if isFuzzyMatch(text: lowercasedName, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchTags(_ tags: [String], keyword: String) -> Int {\n        var maxScore = 0\n        for t in tags {\n            let lowerTag = t.lowercased()\n            var score = 0\n            if lowerTag == keyword {\n                score = 3\n            } else if lowerTag.contains(keyword) {\n                score = 2\n            } else if isFuzzyMatch(text: lowerTag, keyword: keyword, maxDistance: 1) {\n                score = 1\n            }\n            maxScore = max(maxScore, score)\n        }\n        return maxScore\n    }\n    \n    private func matchDescriptions(_ desc1: String, _ desc2: String, keyword: String) -> Int {\n        let d1 = desc1.lowercased()\n        let d2 = desc2.lowercased()\n        let words = d1.split(separator: \" \") + d2.split(separator: \" \")\n        \n        if words.contains(where: { String($0) == keyword }) {\n            return 2\n        } else if d1.contains(keyword) || d2.contains(keyword) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func isFuzzyMatch(text: String, keyword: String, maxDistance: Int) -> Bool {\n        if keyword.count <= 1 {\n            return text.contains(keyword)\n        }\n        let words = text.split(separator: \" \").map { String($0) }\n        return words.contains { levenshteinDistance($0, keyword) <= maxDistance }\n    }\n    \n    private func levenshteinDistance(_ s1: String, _ s2: String) -> Int {\n        let a = Array(s1)\n        let b = Array(s2)\n        let n = a.count\n        let m = b.count\n        \n        if n == 0 { return m }\n        if m == 0 { return n }\n        \n        var matrix = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n        for i in 0...n { matrix[i][0] = i }\n        for j in 0...m { matrix[0][j] = j }\n        \n        for i in 1...n {\n            for j in 1...m {\n                if a[i - 1] == b[j - 1] {\n                    matrix[i][j] = matrix[i - 1][j - 1]\n                } else {\n                    matrix[i][j] = min(\n                        matrix[i - 1][j] + 1,\n                        matrix[i][j - 1] + 1,\n                        matrix[i - 1][j - 1] + 1\n                    )\n                }\n            }\n        }\n        return matrix[n][m]\n    }\n    \n    // MARK: - 搜索历史\n    func loadSearchHistory() {\n        if let history = UserDefaults.standard.array(forKey: \"stockSearchHistory\") as? [String] {\n            self.searchHistory = history\n        }\n    }\n    \n    func addSearchHistory(term: String) {\n        let trimmedTerm = term.trimmingCharacters(in: .whitespaces)\n        guard !trimmedTerm.isEmpty else { return }\n        \n        if let index = self.searchHistory.firstIndex(where: { $0.lowercased() == trimmedTerm.lowercased() }) {\n            self.searchHistory.remove(at: index)\n        }\n        self.searchHistory.insert(trimmedTerm, at: 0)\n        \n        // 增加搜索历史记录保存条目的数量\n        if self.searchHistory.count > 20 {\n            self.searchHistory = Array(self.searchHistory.prefix(20))\n        }\n        UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n    }\n    \n    func removeSearchHistory(term: String) {\n        if let index = searchHistory.firstIndex(where: { $0.lowercased() == term.lowercased() }) {\n            searchHistory.remove(at: index)\n            UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "portfoliview.swift是我项目里原有的文件，search.swift是我从别的项目中移植过来的文件，我的需求是：点击portfoliview里的这段“HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }”代码中的搜索按钮，直接去调用search.swift的搜索功能，不需要展示search.swift里面这块“struct SearchContentView: View {”的搜索按钮，直接通过这块“Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }”和这块“.navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        } ”来直接拉起搜索界面开始输入等操作。该怎么改代码实现？"
    },
    {
        "id": "2025-05-28 09:06:27",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            // console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 数据提取逻辑 (使用 aria-label 辅助定位，如果存在) ---\n                        // Symbol (通常在第一列)\n                        const symbolCell = row.querySelector('td[aria-label=\"Symbol\"]') || cells[0];\n                        if (symbolCell) {\n                            const symbolLink = symbolCell.querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                const symbolSpan = symbolLink.querySelector('span.symbol');\n                                symbol = symbolSpan ? symbolSpan.textContent.trim() : symbolLink.textContent.trim();\n                            } else { // 如果没有链接，直接取单元格文本\n                                symbol = symbolCell.textContent.trim();\n                            }\n                        }\n\n                        // Name (通常在第二列)\n                        const nameCell = row.querySelector('td[aria-label=\"Name\"]') || cells[1];\n                        if (nameCell) {\n                            const nameDiv = nameCell.querySelector('div[title]');\n                            name = nameDiv ? nameDiv.getAttribute('title').trim() : nameCell.textContent.trim();\n                        }\n\n                        // Price (查找包含 fin-streamer[data-field=\"regularMarketPrice\"])\n                        // 遍历所有单元格，直到找到包含价格的 fin-streamer\n                        for (let i = 0; i < cells.length; i++) {\n                            const priceStreamer = cells[i].querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                price = priceStreamer.getAttribute('data-value');\n                                break;\n                            }\n                        }\n\n                        // Volume (查找包含 fin-streamer[data-field=\"regularMarketVolume\"])\n                        for (let i = 0; i < cells.length; i++) {\n                            const volumeStreamer = cells[i].querySelector('fin-streamer[data-field=\"regularMarketVolume\"]');\n                            if (volumeStreamer) {\n                                volume = volumeStreamer.getAttribute('data-value');\n                                break;\n                            }\n                        }\n\n                        if (volume) {\n                            volume = volume.replace(/,/g, '');\n                        }\n\n                        // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex}: Symbol='${symbol}', Name='${name}', Price='${price}', Volume='${volume}'`);\n\n                        if (symbol && name && price && volume) {\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            // console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex}: Missing some data. S:${symbol}, N:${name}, P:${price}, V:${volume}`);\n                        }\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, row.innerHTML);\n                    }\n                });\n                console.log(`Yahoo ETF Scraper: content.js - Successfully processed ${results.length} ETFs from this page.`);\n                sendResponse({ success: true, data: results });\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table NOT found after all attempts for URL:\", window.location.href);\n                sendResponse({ success: false, error: 'Could not find the target ETF table on the page.' });\n            }\n        } catch (error) {\n            console.error('Yahoo ETF Scraper: content.js - Critical error in scrapeYahooETFs:', error);\n            sendResponse({ success: false, error: error.message });\n        }\n        return true;\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "之前运行一切正常，今天发现打开页面，也加载完成，但是没抓到任何东西。不知道是不是页面代码改变导致抓取失灵，这是要抓取的今天的新的页面代码“<body id=\"atomic\">\n<div id=\"sda-E2E\" class=\"sdaContainer tw-flex tw-justify-center hideOnPrin t\" style=\"min-height: 90px;\" data-google-query-id=\"CPGx4Lj7xI0DFeXzTAIdhDs\na9A\">•</div> flex\n<div id=\"svelte\">\n<<script type=\"module\">@</script>\n<div id=\"app-err-banner\" style=\"display: none;\">∞</div>\n<script type=\"application/json\" id=\"fin-trending-tickers\">@</script> <progress max=\"100\" aria-label=\"Page loading\" class=\"yf-12dks8q\" value=\n\"g\"></progress>\n<div data-ad-config=\"large-placeholder-eZe\" class=\"yf-ktwq3d\"></div>\n<header class=\"hideOnPrint yf-r31bp3\">∞</header>\n<section class=\"theme-dialog-wrapper yf-1bt0dri\">@</section>\n<main class=\"layoutContainer yf-1xsmqro\" id=\"nimbus-app\" tabindex=\"-1\"> flex)\n<section class=\"mainContainer yf-1xsmqro\"> flex\n<section class=\"mainContent yf-1xsmqro\"> flex\n<aside class=\"left yf-1xsmqro\" aria-label=\"Left navigation\">•\n</aside>\n<section class=\"main yf-1xsmqro\"> flex\n<article class=\"gridLayout yf-1xsmqro\"> grid\n<section class=\"yf-12mq010\"> flex\n<header class=\"large mb-0 yf-13lpgjv font-condensed\">••.\n</header> flex\n<div class=\"container yf-j24h8w\"> (flex\n<nav aria-label=\"etfs\" class=\" l1 yf-x2pyjv\">∞</nav>\n<div class=\"tableContainer yf-j24h8w\"> flex\n<div class=\"table-container cs-regular tw-border-none yf-\n1570k0a\"> (scroll)\n<table class=\"yf-1570k0a bd\">\n<thead class=\"yf-1570k0a\">@</thead>\n<tbody>\n<tr class=\"row yf-1570k0a\">\n<td class=\" [&_. symbol]: tw-text-md yf-1570k0a lpin shad\" style=\"—-_depth: undefined;\"> ‹div style=\"display: contents; --background-colo\nr: transparent; --hover-bg-color: transparent; -h over-color:var(--enabled-active-emph); --text-co lor: var (--enabled-active-emph); --hover-focus-co lor: var (--hovered-emph-same); --text-decoration: underline;\">\n<span class=\"ticker-wrapper yf-oaxebo\"> i\n<a data-testid=\"table-cell-ticker\" class- tic ker medium [&-symboll: tw-text-md hover noPad ding yf-oaxebo\" aria-label=\"ProShares Ultra Q QQ\" data-ylk=\"elm: qte; elmt: link; itc:0; sec: etf\ns-datatable; slk:QLD\" href=\"/quote/QLD/\" title=\"ProShares Ultra QQQ\" data-rapid_p=\"20\" data-v9y=\"1\"> (flex\n<div class=\"name yf-oaxebo\"> flex\n<span class=\"symbol yf-oaxebo\">QLD</span>\n</div>\n</a>\n</span>\n</div>\n</td>\n<<td class=\"leftAlignHeader yf-1570k0a\" style=\"—-_d epth: undefined;\">\n<div title=\"ProShares Ultra QQQ\" class=\"leftAlign Header yf-362rys enableMaxWidth\">ProShares Ultra\nQQQ</div>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d;\">∞</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d; \"> <div class>\n<fin-streamer data-test=\"change\" data-symbol=\"Q\nLD\" data-field=\"regularMarketPrice\" data-trend=\n\"none\" data-pricehint=\"2\" data-value=\"105.63\" active>105.63</fin-streamer>\n<div class=\"hide-desktop hide-mw txt-positive\">\n</div>\n</div>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine\nd; \"></td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine\nd;\"> @</td>\n<td class=\" yf-1570k0a\" style=\"--_depth: undefine d;\">\n<fin-streamer data-test=\"change\" data-symbol=\"QL\nD\" data-field=\"regularMarketVolume\" data-trend=\"n one\" data-pricehint=\"?\" data-value=\"2327111\" active>2.327M</fin-streamer>\n</td> == $0”，其中这句“<span class=\"symbol yf-oaxebo\">QLD</span>”里的QLD是symbol，这句“<div title=\"ProShares Ultra QQQ\" class=\"leftAlign Header yf-362rys enableMaxWidth\">ProShares Ultra\nQQQ</div>\n”里的ProShares Ultra\nQQQ是name，这句“<fin-streamer data-test=\"change\" data-symbol=\"Q\nLD\" data-field=\"regularMarketPrice\" data-trend=\n\"none\" data-pricehint=\"2\" data-value=\"105.63\" active>105.63</fin-streamer>”里的105.63是price，这句“<fin-streamer data-test=\"change\" data-symbol=\"QL\nD\" data-field=\"regularMarketVolume\" data-trend=\"n one\" data-pricehint=\"?\" data-value=\"2327111\" active>2.327M</fin-streamer>\n”里的2.327.M是volume，你看看是否需要修改代码以便于抓取到内容？"
    },
    {
        "id": "2025-05-28 16:41:21",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/AccountProfileView.swift",
                "filename": "AccountProfileView.swift",
                "content": "import SwiftUI\n\n// MARK: - Common Colors (can be centralized if used across many files)\nprivate let pageBackgroundColorGlobal = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\nprivate let primaryTextColorGlobal = Color.white\nprivate let secondaryTextColorGlobal = Color(white: 0.65)  // For dimmer text like account numbers in headers\nprivate let descriptiveTextColorGlobal = Color(white: 0.75)  // For body/description text\nprivate let separatorColorGlobal = Color(white: 0.35)\nprivate let accentBlueColorGlobal = Color(hex: \"3B82F6\")  // Standard blue for buttons\nfileprivate let certifiedBadgeBackgroundColor = Color(red: 70/255, green: 115/255, blue: 95/255) // Muted dark green (same as \"Enrolled\")\nfileprivate let certifiedBadgeTextColor = Color.white\nfileprivate let infoBoxBackgroundColor = Color(red: 40/255, green: 48/255, blue: 60/255) // Darker blue-gray for info box\n\n// MARK: - Account Profile View and its components\n\nstruct AccountProfileView: View {\n    let accountNumber: String = \"90185542\"  // Sample data\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 0) {\n                // Account Number Display - Using the new reusable header\n                AccountHeaderView(\n                    accountNumber: accountNumber,\n                    textColor: secondaryTextColorGlobal,  // Dimmer text for header\n                    iconName: \"line.horizontal.3\"\n                )\n                .padding(.leading, 16)  // Original padding for this specific layout\n                .padding(.top, 20)\n                .padding(.bottom, 25)\n\n                // Trading Privileges Row - MODIFIED\n                NavigationLink(\n                    destination: TradingPrivilegesView(accountNumber: self.accountNumber)\n                ) {\n                    AccountDetailRow(\n                        title: \"Trading Privileges\",\n                        details: \"Margin, Options, Extended Hour Trading\"\n                    )\n                }\n                CustomDividerView(color: separatorColorGlobal, leadingPadding: 16)\n\n                // MODIFIED: NavigationLink for Required Documents\n                NavigationLink(destination: RequiredDocumentsView(accountNumber: self.accountNumber)) {\n                    AccountDetailRow(\n                        title: \"Required Documents\",\n                        details: \"W-8BEN\"\n                    )\n                }\n                CustomDividerView(color: separatorColorGlobal, leadingPadding: 16)\n\n                Spacer()\n            }\n        }\n        .navigationTitle(\"Account Profile\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n        }\n    }\n}\n\n// Reusable struct for rows in AccountProfileView\nstruct AccountDetailRow: View {\n    let title: String\n    let details: String\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 5) {\n                Text(title)\n                    .font(.system(size: 17))\n                    .foregroundColor(primaryTextColorGlobal)\n                Text(details)\n                    .font(.system(size: 14))\n                    .foregroundColor(secondaryTextColorGlobal)  // Dimmer subtitle\n                    .lineLimit(1)\n            }\n            Spacer()\n            Image(systemName: \"chevron.right\")\n                .font(.system(size: 14, weight: .semibold))\n                .foregroundColor(Color(white: 0.55))\n        }\n        .padding(.horizontal, 16)\n        .padding(.vertical, 16)\n        .background(pageBackgroundColorGlobal)\n    }\n}\n\n// MARK: - Trading Privileges View and its components\n\n// Reusable Account Header\nstruct AccountHeaderView: View {\n    let accountNumber: String\n    let textColor: Color\n    let iconName: String  // e.g., \"line.horizontal.3\"\n\n    var body: some View {\n        HStack(spacing: 8) {\n            Text(accountNumber)\n                .font(.system(size: 15))\n                .foregroundColor(textColor)\n            Image(systemName: iconName)\n                .font(.system(size: 15, weight: .semibold))\n                .foregroundColor(textColor)\n        }\n    }\n}\n\n// Custom Divider View\nstruct CustomDividerView: View {\n    let color: Color\n    let height: CGFloat = 0.5\n    let leadingPadding: CGFloat\n\n    var body: some View {\n        Rectangle()\n            .frame(height: height)\n            .foregroundColor(color)\n            .padding(.leading, leadingPadding)\n    }\n}\n\nstruct TradingPrivilegesView: View {\n    let accountNumber: String\n\n    // Colors specific to or customized for TradingPrivilegesView\n    private let checkmarkColor = Color(red: 64 / 255, green: 192 / 255, blue: 160 / 255)  // Tealish green\n    private let enrolledBadgeBackgroundColor = Color(\n        red: 70 / 255, green: 115 / 255, blue: 95 / 255)  // Muted dark green\n    private let enrolledBadgeTextColor = Color.white\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            ScrollView {\n                VStack(alignment: .leading, spacing: 0) {  // Overall container for content\n                    // THIS SECTION HAS BEEN REMOVED:\n                    // // Account Number Header\n                    // AccountHeaderView(\n                    //     accountNumber: accountNumber,\n                    //     textColor: secondaryTextColorGlobal, // Dimmer text for header\n                    //     iconName: \"line.horizontal.3\"\n                    // )\n                    // .padding(.top, 5)\n                    // .padding(.bottom, 20)\n\n                    // Margin Trading Section\n                    TradingSectionView(\n                        title: \"Margin Trading\",\n                        description: \"This account is not yet approved for margin.\",\n                        buttonText: \"Upgrade\",\n                        buttonAction: {\n//                            print(\"Margin Upgrade Tapped for account: \\(accountNumber)\")  // accountNumber might still be useful for actions\n                            // Add navigation or action logic here\n                        },\n                        items: [],\n                        statusBadgeText: nil,\n                        colors: sectionColors\n                    )\n                    CustomDividerView(color: separatorColorGlobal, leadingPadding: 0)  // Full width divider\n\n                    // Options Trading Section\n                    TradingSectionView(\n                        title: \"Options Trading\",\n                        description: \"Your account is already approved for level 2 option trading.\",\n                        buttonText: \"Upgrade\",\n                        buttonAction: {\n                            print(\"Options Upgrade Tapped\")\n                            // Add navigation or action logic here\n                        },\n                        items: [\n                            \"Write Covered Calls\",\n                            \"Write Cash-Secured Equity Puts\",\n                            \"Purchase Calls and Puts\",\n                        ],\n                        statusBadgeText: nil,\n                        colors: sectionColors\n                    )\n                    CustomDividerView(color: separatorColorGlobal, leadingPadding: 0)  // Full width divider\n\n                    // Extended Hour Trading Section\n                    TradingSectionView(\n                        title: \"Extended Hour Trading\",\n                        description: \"This account is approved for Extended Hour Trading\",\n                        buttonText: nil,  // No button\n                        buttonAction: {},\n                        items: [],\n                        statusBadgeText: \"Enrolled\",\n                        colors: sectionColors\n                    )\n                    // No divider after the last section\n\n                    Spacer()  // Ensures content pushes up if ScrollView is not full\n                }\n                .padding(.horizontal, 16)  // Horizontal padding for all content inside ScrollView\n            }\n        }\n        .navigationTitle(\"Account Profile\")  // Title remains \"Account Profile\" as per screenshot\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n            // Back button will be automatically handled by NavigationView\n        }\n    }\n\n    private var sectionColors: TradingSectionView.Colors {\n        TradingSectionView.Colors(\n            primaryText: primaryTextColorGlobal,\n            descriptionText: descriptiveTextColorGlobal,  // Specific color for descriptions\n            sectionTitle: primaryTextColorGlobal,  // Section titles are primary white\n            buttonBackground: accentBlueColorGlobal,\n            buttonText: primaryTextColorGlobal,  // White text on blue button\n            checkmark: checkmarkColor,\n            badgeBackground: enrolledBadgeBackgroundColor,\n            badgeText: enrolledBadgeTextColor\n        )\n    }\n}\n\nstruct TradingSectionView: View {\n    struct Colors {\n        let primaryText: Color\n        let descriptionText: Color\n        let sectionTitle: Color\n        let buttonBackground: Color\n        let buttonText: Color\n        let checkmark: Color\n        let badgeBackground: Color\n        let badgeText: Color\n    }\n\n    let title: String\n    let description: String\n    let buttonText: String?\n    let buttonAction: () -> Void\n    let items: [String]\n    let statusBadgeText: String?\n    let colors: Colors\n\n    var body: some View {\n        VStack(alignment: .leading, spacing: 12) {\n            HStack {\n                Text(title)\n                    .font(.system(size: 20, weight: .semibold))\n                    .foregroundColor(colors.sectionTitle)\n                Spacer()\n                if let badgeText = statusBadgeText {\n                    Text(badgeText)\n                        .font(.system(size: 12, weight: .medium))\n                        .foregroundColor(colors.badgeText)\n                        .padding(.horizontal, 10)\n                        .padding(.vertical, 5)  // Adjusted padding for badge\n                        .background(colors.badgeBackground)\n                        .clipShape(Capsule())\n                }\n            }\n            .padding(.top, 20)\n\n            Text(description)\n                .font(.system(size: 15))\n                .foregroundColor(colors.descriptionText)  // Use specific description color\n                .lineSpacing(4)\n\n            if !items.isEmpty {\n                VStack(alignment: .leading, spacing: 10) {  // Increased spacing for checklist items\n                    ForEach(items, id: \\.self) { item in\n                        HStack(spacing: 10) {\n                            Image(systemName: \"checkmark\")\n                                .foregroundColor(colors.checkmark)\n                                .font(.system(size: 14, weight: .semibold))\n                            Text(item)\n                                .font(.system(size: 15))\n                                .foregroundColor(colors.descriptionText)  // Checklist items also use description color\n                        }\n                    }\n                }\n                .padding(.top, 8)  // Space before checklist\n            }\n\n            if let btnText = buttonText {\n                Button(action: buttonAction) {\n                    Text(btnText)\n                        .font(.system(size: 17, weight: .medium))\n                        .foregroundColor(colors.buttonText)\n                        .frame(height: 48)\n                        .frame(maxWidth: .infinity)\n                        .background(colors.buttonBackground)\n                        .cornerRadius(8)\n                }\n                .padding(.top, 16)\n            }\n        }\n        .padding(.bottom, 20)  // Space after section content before a potential divider\n    }\n}\n\n// MARK: - Required Documents View (NEW)\n\nstruct RequiredDocumentsView: View {\n    let accountNumber: String\n\n    // Sample data for the view\n    let lastFiledDate: String = \"08/16/2024\"\n    let renewedByDate: String = \"12/31/2027\"\n    let infoText: String = \"*W-8BEN form must be renewed every three years.\"\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            ScrollView {\n                VStack(alignment: .leading, spacing: 16) { // Consistent spacing for content blocks\n                    AccountHeaderView(\n                        accountNumber: accountNumber,\n                        textColor: secondaryTextColorGlobal,\n                        iconName: \"line.horizontal.3\"\n                    )\n                    // No horizontal padding here, as the parent VStack will have it.\n                    .padding(.bottom, 10) // Reduced bottom padding slightly, adjust as needed\n\n                    // W-8BEN Form Section\n                    VStack(alignment: .leading, spacing: 12) {\n                        HStack {\n                            Text(\"W-8BEN Form\")\n                                .font(.system(size: 20, weight: .semibold))\n                                .foregroundColor(primaryTextColorGlobal)\n                            Spacer()\n                            Text(\"Certified\")\n                                .font(.system(size: 12, weight: .medium))\n                                .foregroundColor(certifiedBadgeTextColor)\n                                .padding(.horizontal, 12) // Slightly more horizontal padding for balance\n                                .padding(.vertical, 6)   // Slightly more vertical padding\n                                .background(certifiedBadgeBackgroundColor)\n                                .clipShape(Capsule())\n                        }\n\n                        Text(\"Last filed: \\(lastFiledDate)\")\n                            .font(.system(size: 15))\n                            .foregroundColor(descriptiveTextColorGlobal)\n\n                        Text(\"Renewed by: \\(renewedByDate)\")\n                            .font(.system(size: 15))\n                            .foregroundColor(descriptiveTextColorGlobal)\n                            .padding(.bottom, 8) // Add a bit of space before the info box\n\n                        // Info Box\n                        Text(infoText)\n                            .font(.system(size: 14))\n                            .foregroundColor(primaryTextColorGlobal.opacity(0.9)) // Slightly less bright for info text\n                            .padding(12) // Uniform padding inside the box\n                            .frame(maxWidth: .infinity, alignment: .leading) // Ensure it takes full width\n                            .background(infoBoxBackgroundColor)\n                            .cornerRadius(8)\n                            .padding(.bottom, 16) // Space after info box before button\n\n                        // Renew Button\n                        Button(action: {\n                            print(\"Renew button tapped for W-8BEN, account: \\(accountNumber)\")\n                            // Add renew action logic here\n                        }) {\n                            Text(\"Renew\")\n                                .font(.system(size: 17, weight: .medium))\n                                .foregroundColor(primaryTextColorGlobal)\n                                .frame(height: 48)\n                                .frame(maxWidth: .infinity)\n                                .background(accentBlueColorGlobal)\n                                .cornerRadius(8)\n                        }\n                    }\n                    Spacer() // Pushes content up if ScrollView is not full\n                }\n                .padding(.horizontal, 16) // Horizontal padding for all content inside ScrollView\n                .padding(.top, 5)        // Top padding for the content area inside ScrollView\n            }\n        }\n        .navigationTitle(\"Account Profile\") // Title remains \"Account Profile\"\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            }
        ],
        "final_prompt": "我需要修改的是account profile页面，我想在\"required documents\"下面再增加两行，一行标题叫“Phone Number”对应上一行的Required documents，下面的小字是“139****705”，对应W-8BEN，再下面一行的标题叫“Email”，下面的小字是“sskey***@hotmail.com”，保持整个界面风格统一，同时，这新增的两行跟之前的行区别就是不要出现右边的尖括号，也不需要可以点击。该怎么做？"
    },
    {
        "id": "2025-05-31 11:58:42",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            // 尝试查找 fin-streamer (旧逻辑，可能不再有效)\n                            let priceStreamer = cells[headerIndexMap.price].querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer && priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                price = priceStreamer.getAttribute('value').trim();\n                            } else { // 如果 fin-streamer 找不到或没有value，直接取单元格文本\n                                price = cells[headerIndexMap.price].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, cells[headerIndexMap.price].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "附件是程序运行后生成的csv文件，其中price字段里的内容是这样的“21.54 +0.77 (+3.71%)”，这是要抓取页面的代码“<td class=\" yf-1570kla\" style\"-_depth: und ne\n<div class>\n<fin-streamer data-test=\"change\" data-symbol=\"B\nLCN\" data-field=\"regularMarketPrice\" data-trend=\"none\" data-pricehint=\"2\" data-value=\"21.\n54\" active>21.54</fin-streamer>\n<div class=\"hide-desktop hide-mw txt-positiv e\">\n<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\"regularMarketChang e\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"0.77000046\" active>.</fin-streamer>\n<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-template=\"({fmt})\" data-\nfield=\"regularMarketChangePercent\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"3.\n7072723\" active>•</fin-streamer>\n</div>\n</div>\n</td>\n<td class=\" yf-1570ka\" style=\"—-_depth: undefine d;\">\n+ <fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\"regularMarketChange\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\n\"0.77000046\" data-tstyle=\"default\" active>\n<span class=\"txt-positive\">\n\"+\"\n\"0.77\"\n</ span>\n</fin-streamer>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d; \"> +<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\" regularMarketChangePer cent\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"3.7072723\" data-tstyle=\"default\" active>\n<span class=\"txt-positive\">\n\"+\"\n\"3.71%\"\n</ span>\n</fin-streamer>\n</td>”，也就是说目前程序把price、change、change%三个数据都抓过来写在一个格内，我需要的只是price一个数值而已（也就是21.54），该怎么改代码实现？"
    },
    {
        "id": "2025-05-31 12:26:04",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            }
        ],
        "final_prompt": "附件是运行后生成的csv，里面volume内容有问题：目前是有带逗号的“5,036”，有带M的“4.584M”，还有可能带B的...我需要都格式化成整数，比如刚才的两个，应改为“5036”和“4584000”之类的，该怎么做？"
    },
    {
        "id": "2025-05-31 14:27:21",
        "project_name": "insertdb",
        "project_desc": "我有一个Python开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/Compare_Insert.py",
                "filename": "Compare_Insert.py",
                "content": "import csv\nimport json\nimport sqlite3\nfrom datetime import date, timedelta\nimport os\nimport glob\nimport time\nimport subprocess\n\n# --- 配置 ---\njson_file_path = '/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json'\nblacklist_json_path = '/Users/yanzhang/Documents/Financial_System/Modules/Blacklist.json'\ndb_file_path = '/Users/yanzhang/Documents/Database/Finance.db'\noutput_dir = '/Users/yanzhang/Documents/News'\noutput_txt_file = os.path.join(output_dir, 'ETFs_new.txt')\n\ndef count_files(prefix):\n    \"\"\"\n    计算Downloads目录中指定前缀开头的文件数量\n    \"\"\"\n    download_dir = \"/Users/yanzhang/Downloads/\"\n    files = glob.glob(os.path.join(download_dir, f\"{prefix}_*.csv\"))\n    return len(files)\n\n# --- 1. 计算昨天的日期 ---\nyesterday = date.today() - timedelta(days=1)\nyesterday_str = yesterday.strftime('%Y-%m-%d')\n\nscript = '''\n    delay 1\n    tell application \"Google Chrome\"\n\t    activate\n    end tell\n    delay 0.5\n    tell application \"System Events\"\n        keystroke \"c\" using option down\n    end tell\n    '''\n# 运行AppleScript\nsubprocess.run(['osascript', '-e', script])\n\n# —— 原有等待 topetf_*.txt 的逻辑，直到文件出现 —— \nwhile count_files(\"topetf\") < 1:\n    time.sleep(2)\n    print(\".\", end=\"\", flush=True)\n\n# # 查找Downloads目录下最新的topetf_开头的txt文件\ndownloads_path = '/Users/yanzhang/Downloads/'\ntopetf_files = glob.glob(os.path.join(downloads_path, 'topetf_*.csv'))\n\n# # 按文件修改时间排序，获取最新的文件\ntopetf_file = max(topetf_files, key=os.path.getmtime)\nprint(f\"使用 topetf 文件: {topetf_file}\")\n\n# --- 2. 读取 JSON 文件中的 ETF 列表 ---\ntry:\n    with open(json_file_path, 'r', encoding='utf-8') as f:\n        sectors_data = json.load(f)\n    # 使用集合以便快速查找，如果 \"ETFs\" 键不存在或不是列表，则使用空列表\n    known_etfs = set(sectors_data.get('ETFs', []))\n    if not known_etfs:\n        print(f\"警告: JSON文件 '{json_file_path}' 中 'ETFs' 列表为空或不存在。\")\nexcept FileNotFoundError:\n    print(f\"错误: JSON 文件 '{json_file_path}' 未找到。脚本将退出。\")\n    exit()\nexcept json.JSONDecodeError:\n    print(f\"错误: JSON 文件 '{json_file_path}' 格式无效。脚本将退出。\")\n    exit()\nexcept Exception as e:\n    print(f\"读取JSON文件时发生未知错误: {e}。脚本将退出。\")\n    exit()\n\n# --- 新增：读取 Blacklist JSON 文件中的 ETF 黑名单 ---\netf_blacklist = set() # 初始化为空集合，以防文件读取失败\ntry:\n    with open(blacklist_json_path, 'r', encoding='utf-8') as f_blacklist:\n        blacklist_data = json.load(f_blacklist)\n    # 安全地获取 'etf' 列表，如果键不存在或不是列表，则使用空列表\n    etf_blacklist = set(blacklist_data.get('etf', []))\n    if not etf_blacklist:\n        print(f\"信息: Blacklist JSON文件 '{blacklist_json_path}' 中 'etf' 列表为空或不存在。\")\nexcept FileNotFoundError:\n    print(f\"警告: Blacklist JSON 文件 '{blacklist_json_path}' 未找到。将继续执行，不使用ETF黑名单过滤。\")\nexcept json.JSONDecodeError:\n    print(f\"警告: Blacklist JSON 文件 '{blacklist_json_path}' 格式无效。将继续执行，不使用ETF黑名单过滤。\")\nexcept Exception as e:\n    print(f\"读取Blacklist JSON文件 '{blacklist_json_path}' 时发生未知错误: {e}。将继续执行，不使用ETF黑名单过滤。\")\n\n# --- 3. 确保输出目录存在 ---\nos.makedirs(output_dir, exist_ok=True)\n\n# --- 4. 初始化用于数据库插入和文件写入的列表 ---\netfs_to_db = []\nnew_etfs_to_file = []\n\n# --- 5. 读取 CSV 文件并处理数据 ---\ntry:\n    with open(topetf_file, mode='r', encoding='utf-8-sig') as csvfile: # utf-8-sig 处理可能的BOM\n        reader = csv.DictReader(csvfile)\n        if not reader.fieldnames or not all(col in reader.fieldnames for col in ['Symbol', 'Name', 'Price', 'Volume']):\n            print(f\"错误: CSV文件 '{topetf_file}' 缺少必要的列 (Symbol, Name, Price, Volume)。\")\n            exit()\n\n        for row in reader:\n            symbol = row.get('Symbol')\n            name = row.get('Name')\n            price_str = row.get('Price')\n            volume_str = row.get('Volume')\n\n            # 基本的数据校验\n            if not all([symbol, name, price_str, volume_str]):\n                print(f\"警告: CSV文件中发现不完整的行: {row}。跳过此行。\")\n                continue\n\n            try:\n                price_original = float(price_str) # 先转换为浮点数\n                volume = int(volume_str)\n            except ValueError:\n                print(f\"警告: 无法转换行 {row} 中的Price或Volume为数值。跳过此行。\")\n                continue\n\n            if symbol in known_etfs:\n                # 将 price 四舍五入到两位小数\n                price_rounded = round(price_original, 2)\n                # 数据库表结构: id, date, name, price, volume\n                # CSV Symbol -> DB name\n                etfs_to_db.append((yesterday_str, symbol, price_rounded, volume))\n            else:\n                # 条件1: volume > 200,000\n                if volume > 200000:\n                    # 条件2: symbol 不在 ETF 黑名单中\n                    if symbol not in etf_blacklist:\n                        new_etfs_to_file.append(f\"{symbol}: {name}, {volume}\")\n\nexcept FileNotFoundError:\n    print(f\"错误: CSV 文件 '{topetf_file}' 未找到。脚本将退出。\")\n    exit()\nexcept Exception as e:\n    print(f\"读取CSV文件时发生未知错误: {e}。脚本将退出。\")\n    exit()\n\n# --- 6. 将匹配的 ETF 数据写入数据库 ---\nif etfs_to_db:\n    conn = None # 初始化conn\n    try:\n        conn = sqlite3.connect(db_file_path)\n        cursor = conn.cursor()\n        # 注意：假设 ETFs 表已经存在，并且有 date, name, price, volume 列\n        # id 列通常是 PRIMARY KEY AUTOINCREMENT，不需要显式插入\n        sql_insert = \"INSERT INTO ETFs (date, name, price, volume) VALUES (?, ?, ?, ?)\"\n        cursor.executemany(sql_insert, etfs_to_db)\n        conn.commit()\n        print(f\"成功将 {len(etfs_to_db)} 条匹配的ETF数据写入数据库 '{db_file_path}'。\")\n    except sqlite3.Error as e:\n        print(f\"数据库错误: {e}\")\n        if conn:\n            conn.rollback() # 如果发生错误，回滚事务\n    finally:\n        if conn:\n            conn.close()\nelse:\n    print(\"没有在JSON中匹配到任何ETF，无需写入数据库。\")\n\n# --- 7. 将未匹配的 ETF 数据写入文本文件 ---\nif new_etfs_to_file:\n    try:\n        with open(output_txt_file, 'a', encoding='utf-8') as txtfile: # 'a' 表示追加模式\n            for line in new_etfs_to_file:\n                txtfile.write(line + '\\n')\n        print(f\"成功将 {len(new_etfs_to_file)} 条新的ETF数据写入文件 '{output_txt_file}'。\")\n    except IOError as e:\n        print(f\"写入文件 '{output_txt_file}' 时发生错误: {e}\")\nelse:\n    print(\"没有新的ETF需要写入文件。\")\n\nprint(\"脚本执行完毕。\")"
            }
        ],
        "final_prompt": "附件是程序执行时读取的csv文件，另外我的Sqlite3的Finance.db数据库里的ETFs表里的结构如下“id       date        name  price           volume    \n-------  ----------  ----  --------------  ----------\n621125   2002-09-03  DIA   83.16           12002400  \n154923   2002-09-03  EWC   9.3             6735700   \n219044   2002-09-03  EWD   9.51            1200      \n643161   2002-09-03  EWL   11.05           24200     \n719024   2002-09-03  EWM   22.8            10500     \n102436   2002-09-03  EWT   16.2            7600    ”，你看下根据代码和csv文件内容，这个程序能否正确的把csv中的数据写入数据库表中？"
    },
    {
        "id": "2025-05-31 15:57:00",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            }
        ],
        "final_prompt": "附件是运行后生成的csv，里面volume内容有问题：目前是有带逗号的“5,036”，有带M的“4.584M”，还有可能带B的...我需要都格式化成整数，比如刚才的两个，应改为“5036”和“4584000”之类的，该怎么做？"
    },
    {
        "id": "2025-06-03 19:49:31",
        "project_name": "topetf",
        "project_desc": "我有一个JavaScript和html发的chrome插件程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "function normalizeVolume(raw) {\n    if (!raw || typeof raw !== 'string') return '';\n    // 去掉前后空白\n    let s = raw.trim().toUpperCase();\n    // 记录倍数\n    let mul = 1;\n    if (s.endsWith('B')) {\n        mul = 1e9;\n        s = s.slice(0, -1);\n    } else if (s.endsWith('M')) {\n        mul = 1e6;\n        s = s.slice(0, -1);\n    } else if (s.endsWith('K')) {\n        mul = 1e3;\n        s = s.slice(0, -1);\n    }\n    // 去掉所有逗号\n    s = s.replace(/,/g, '');\n    // 解析浮点数\n    const n = parseFloat(s);\n    if (isNaN(n)) return '';\n    // 四舍五入取整\n    return Math.round(n * mul).toString();\n}\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, rawVol = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n\n                        if (cells[headerIndexMap.volume]) {\n                            let vs = cells[headerIndexMap.volume].querySelector(\n                                'fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]'\n                            );\n                            if (vs && vs.hasAttribute('value') && vs.getAttribute('value').trim() !== \"\") {\n                                rawVol = vs.getAttribute('value').trim();\n                            } else {\n                                rawVol = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                        }\n                        // 把 rawVol 传给 normalizeVolume 得到最终 volume\n                        const volume = normalizeVolume(rawVol);\n\n                        // 最后 push 的时候用 volume 而不是 rawVol\n                        if (symbol && name && price !== null && volume !== null) {\n                            results.push({ symbol, name, price, volume });\n                        }\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "这个程序在执行的时候，如果网络很好，也就是很快就装载完页面时，就一切正常，但如果碰到网络不太好导致网站加载缓慢的时候，过了好长时间后即便最终页面加载完成了，此时抓取功能也无法成功的抓取到数据呢？"
    },
    {
        "id": "2025-06-04 15:59:35",
        "project_name": "highlow",
        "project_desc": "我有一个Python开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Test/Sectors_All_test.json",
                "filename": "Sectors_All_test.json",
                "content": "{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}"
            }
        ],
        "final_prompt": "我有一个sqlite3的DB文件/Users/yanzhang/Documents/Database/Finance.db，我还有一个/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json文件“{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}”，Finance.db里数据表的名称跟json文件的组名是一一对应的，比如db文件里就有名为Bonds或Economics的的数据库表，所有数据库表的结构有两种类型“id      date        name  price     volume    \n------  ----------  ----  --------  ----------\n6797    2002-09-03  AAPL  0.25      276936800 \n846288  2002-09-03  ACIW  2.49      307500    \n805805  2002-09-03  ACLS  26.0      163150    \n76410   2002-09-03  ACN   15.75     1984200 ”和“id    date        name    price \n----  ----------  ------  ------\n1655  2024-08-26  PDD     -28.6 \n4     2024-09-04  ASND    -11.27\n5     2024-09-04  CNM     -15.81\n2     2024-09-04  DLTR    -22.16\n1     2024-09-04  GTLB    21.64 \n7     2024-09-04  HQY     5.13  ”，区别是有没有volume列存在，但id、date、name、name字段都是一致的。我的需求是：拿json文件内以下分组“\"Bonds\",  \"Currencies\",  \"Crypto\",  \"Indices\",  \"Commodities\",  \"ETFs\",  \"Economics\",”里的每一个symbol去数据库对应表中拿到最新日期的price，然后依次在以下时间间隔“半年、一年、2年”内进行全面的检索，判断该symbol的最新日期price是否是相应时间间隔内所有price里是最低的或最高的，不管是最低还是最高，都按照固定格式输出到/Users/yanzhang/Documents/News/highlow.txt文件内，格式大致如下“[6 months}\nLow:\nUSDCNY, DXY\nHigh:\nHuangJin\n\n[1Y]\nLow:\nUSDGBP, VIX\nHigh:\nHuangJin\n\n[2Y]\nLow:\nCopper\nHigh:\nNaturalgas\n”，其中low是最低分组，high是最高分组，该怎么写代码实现以上需求？"
    },
    {
        "id": "2025-06-04 22:40:40",
        "project_name": "Insert_Earning_auto",
        "project_desc": "我想用Python的Qt5开发一个程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/News/Earnings_Release_new.txt",
                "filename": "Earnings_Release_new.txt",
                "content": "CRDO   : 4419000   : 2025-06-02\nCPB:O  : 3695000   : 2025-06-02\nSAIC:Y : 666883    : 2025-06-02\nCRWD   : 3011000   : 2025-06-03\nFERG:W : 1112000   : 2025-06-03\nHPE:Y  : 15547000  : 2025-06-03\nDG:O   : 2013000   : 2025-06-03\nGWRE   : 728542    : 2025-06-03\nHQY    : 780838    : 2025-06-03\nDCI:W  : 379778    : 2025-06-03\nNIO:Y  : 21990000  : 2025-06-03\nOLLI   : 952340    : 2025-06-03\nASAN   : 1887000   : 2025-06-03\nDLTR:B : 2902000   : 2025-06-04\nMDB:Y  : 1547000   : 2025-06-04\nDSGX   : 229669    : 2025-06-04\nFIVE:O : 1510000   : 2025-06-04\nBMA    : 347626    : 2025-06-04\nPVH:Y  : 1034000   : 2025-06-04\nTHO:Y  : 652762    : 2025-06-04\nAVGO:C : 17485000  : 2025-06-05\nLULU:Y : 2435000   : 2025-06-05\nIOT    : 2811000   : 2025-06-05\nDOCU   : 1714000   : 2025-06-05\nBF-B:B : 3105000   : 2025-06-05\nCIEN   : 1122000   : 2025-06-05\nTTC:Y  : 534205    : 2025-06-05\nMTN:O  : 907903    : 2025-06-05\n"
            }
        ],
        "final_prompt": "我想用Python的Qt5开发一个程序。我有一个/Users/yanzhang/Documents/News/Earnings_Release_new.txt文件，里面的内容如下“CRDO   : 4419000   : 2025-06-02\nCPB:O  : 3695000   : 2025-06-02\nSAIC:Y : 666883    : 2025-06-02\nCRWD   : 3011000   : 2025-06-03\nFERG:W : 1112000   : 2025-06-03\nHPE:Y  : 15547000  : 2025-06-03\n”，每一行第一个冒号前面的字符串就是symbol（比如：CRDO   : 4419000   : 2025-06-02这一行，CRDO就是symbol，另一个“CPB:O  : 3695000   : 2025-06-02”中CPB就是symbol），最后一个冒号后面的是日期（比如：2025-06-02），我还有一个/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json文件，内容如下“{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}”，另外我还有一个sqlite3的数据库/Users/yanzhang/Documents/Database/Finance.db，里面有两类数据表，一类是跟Sector_all里的组名完全一致的表名（比如：Consumer_Defensive，sector_all里有一个分组叫这个名称，同样在Finance.db里也有同名的数据表存在），这一类数据表的格式如下“id      date        name  price     volume    \n------  ----------  ----  --------  ----------\n6797    2002-09-03  AAPL  0.25      276936800 \n846288  2002-09-03  ACIW  2.49      307500    \n805805  2002-09-03  ACLS  26.0      163150    \n76410   2002-09-03  ACN   15.75     1984200   \n58415   2002-09-03  ADBE  9.21      9882400   \n129845  2002-09-03  ADI   22.83     3314300   \n834254  2002-09-03  ADP   28.59     3068604   \n227895  2002-09-03  ADSK  6.3       1204000   \n489203  2002-09-03  AKAM  0.91      1005000   \n88666   2002-09-03  AMAT  12.99     26967200  \n46159   2002-09-03  AMD   8.26      4103300   ”，另一类表是一个名为Earning的数据表，格式如下“id    date        name    price \n----  ----------  ------  ------\n1655  2024-08-26  PDD     -28.6 \n4     2024-09-04  ASND    -11.27\n5     2024-09-04  CNM     -15.81\n2     2024-09-04  DLTR    -22.16\n1     2024-09-04  GTLB    21.64 \n7     2024-09-04  HQY     5.13  \n6     2024-09-04  HRL     -6.43 ”。我的需求是：拿当前系统日期的前一天和再前一天这两个日期分别去txt文件中去匹配，反向查找到能跟这两个日期匹配的所有symbol，然后分开处理，将属于当前系统日期前一天的symbol，去sector_all里反向查找到该symbol所属的数据表，然后根据表名和symbol去数据库中拿到系统日期前一天的price和再前一天的price，然后计算两者的差值百分比（用较新一天的price减去前一天的price再除以前一天的price），然后将这个百分比数值（去除百分号）和系统日期前一天的时间以及symbol一块写入Earning数据库表中（如果百分比是-4.5%，那么写入的price将是-4.5），把每一个symbol写入后的最终的结果展示在qt5界面上让我看到，这是分开处理的前一部分。后一部分是针对匹配当前系统日期前两天的symbol，同样将这部分symbol去sector_all里反查组名从而找到所属的数据库表名，然后去数据库中拿到系统日期前一天的price和再前一天的price，然后计算两者的差值百分比（这块跟之前是一致的），区别在于，第二部分里的symbol还需要再去Earning表中拿该symbol最新日期的price数值（如果数值是-1.7，就代表是-1.7%），然后将该symbol和这两个百分比数值放到界面的一行里展示给我看，旁边增加一个名为\"替换\"的按钮，如果点击按钮，那么作用是将新的百分比数值替换掉earning里面的数值（这里举个例子：假如新的百分比是3.7%，则将其中的3.7作为price写入earning表中），写入的时间也需要变更为系统日期的前一天。你只是将这些信息和按钮都展示在界面上，是否按下按钮由我来决定，然后每一个符合这一规则（系统前两天日期）的symbol都逐行在界面上进行展示。如何写代码可以实现以上所有这些需求？"
    },
    {
        "id": "2025-06-07 21:22:39",
        "project_name": "indices",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Indices.swift",
                "filename": "Indices.swift",
                "content": "import SwiftUI\nimport Foundation\n\n// MARK: - Models\n\nstruct IndicesSector: Identifiable, Codable {\n    var id: String { name }\n    let name: String\n    let symbols: [IndicesSymbol]\n    var subSectors: [IndicesSector]? // 添加子分组\n    \n    private enum CodingKeys: String, CodingKey {\n        case name, symbols\n    }\n    \n    init(name: String, symbols: [IndicesSymbol], subSectors: [IndicesSector]? = nil) {\n        self.name = name\n        self.symbols = symbols\n        self.subSectors = subSectors\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        self.name = try container.decode(String.self, forKey: .name)\n        self.symbols = try container.decode([IndicesSymbol].self, forKey: .symbols)\n        self.subSectors = nil\n    }\n}\n\n\nstruct IndicesSymbol: Identifiable, Codable {\n    var id: String { symbol }  // 使用symbol作为唯一标识符\n    let symbol: String\n    let name: String\n    var value: String\n    var tags: [String]?\n    \n    private enum CodingKeys: String, CodingKey {\n        case symbol, name, value, tags\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        self.symbol = try container.decode(String.self, forKey: .symbol)\n        self.name = try container.decode(String.self, forKey: .name)\n        self.value = try container.decode(String.self, forKey: .value)\n        self.tags = try container.decodeIfPresent([String].self, forKey: .tags)\n    }\n    \n    init(symbol: String, name: String, value: String, tags: [String]?) {\n        self.symbol = symbol\n        self.name = name\n        self.value = value\n        self.tags = tags\n    }\n}\n\nstruct DynamicCodingKeys: CodingKey {\n    var stringValue: String\n    var intValue: Int? { return nil }\n    \n    init?(stringValue: String) { self.stringValue = stringValue }\n    init?(intValue: Int) { return nil }\n}\n\nstruct SectorsPanel: Decodable {\n    let sectors: [IndicesSector]\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: DynamicCodingKeys.self)\n        var sectors: [IndicesSector] = []\n        \n        let orderedKeys = container.allKeys\n            .map { $0.stringValue }\n            .sorted()\n        \n        for key in orderedKeys {\n            let codingKey = DynamicCodingKeys(stringValue: key)!\n            let symbolsContainer = try container.nestedContainer(keyedBy: DynamicCodingKeys.self, forKey: codingKey)\n            let orderedSymbolKeys = symbolsContainer.allKeys\n                .map { $0.stringValue }\n                .sorted()\n            \n            if key == \"Economics\" {\n                // 原 Economics 分组特殊处理\n                var groupedSymbols: [String: [IndicesSymbol]] = [:]\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolValue = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    \n                    // 按前缀数字分组\n                    if let prefixNumber = symbolValue.split(separator: \" \").first,\n                       let _ = Int(prefixNumber) {\n                        let group = String(prefixNumber)\n                        let symbolName = symbolValue.split(separator: \" \")[1]\n                        let symbol = IndicesSymbol(\n                            symbol: symbolKey,\n                            name: String(symbolName),\n                            value: \"\",\n                            tags: nil\n                        )\n                        \n                        if groupedSymbols[group] == nil {\n                            groupedSymbols[group] = []\n                        }\n                        groupedSymbols[group]?.append(symbol)\n                    }\n                }\n                \n                let subSectors = groupedSymbols.sorted(by: { $0.key < $1.key }).map { group, groupSymbols in\n                    IndicesSector(name: group, symbols: groupSymbols)\n                }\n                \n                let economicsSector = IndicesSector(\n                    name: key,\n                    symbols: [],\n                    subSectors: subSectors\n                )\n                sectors.append(economicsSector)\n            } else if key == \"Commodities\" {\n                // Commodities 分组特殊处理：添加“重要”子分组，把 CrudeOil 和 Huangjin 放到其中\n                var importantSymbols: [IndicesSymbol] = []\n                var normalSymbols: [IndicesSymbol] = []\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    let symbol = IndicesSymbol(symbol: symbolKey, name: symbolName, value: \"\", tags: nil)\n                    \n                    if symbolKey == \"CrudeOil\" || symbolKey == \"Huangjin\" {\n                        importantSymbols.append(symbol)\n                    } else {\n                        normalSymbols.append(symbol)\n                    }\n                }\n                \n                if !importantSymbols.isEmpty {\n                    var subSectors: [IndicesSector] = []\n                    // “重要”子分组\n                    subSectors.append(IndicesSector(name: \"重要\", symbols: importantSymbols))\n                    // 若还有其他 symbol，则增加“其他”子分组\n                    if !normalSymbols.isEmpty {\n                        subSectors.append(IndicesSector(name: \"其他\", symbols: normalSymbols))\n                    }\n                    let commoditiesSector = IndicesSector(name: key, symbols: [], subSectors: subSectors)\n                    sectors.append(commoditiesSector)\n                } else if !normalSymbols.isEmpty {\n                    // 如果没有重要 symbol，则常规处理\n                    let commoditiesSector = IndicesSector(name: key, symbols: normalSymbols)\n                    sectors.append(commoditiesSector)\n                }\n            } else if key == \"Currencies\" {\n                // Currencies 分组特殊处理：添加“重要”子分组，把 USDJPY 和 USDCNY 和 DXY 和 CNYI 放到其中\n                var importantSymbols: [IndicesSymbol] = []\n                var normalSymbols: [IndicesSymbol] = []\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    let symbol = IndicesSymbol(symbol: symbolKey, name: symbolName, value: \"\", tags: nil)\n                    \n                    if symbolKey == \"USDJPY\" || symbolKey == \"USDCNY\" || symbolKey == \"DXY\" || symbolKey == \"CNYI\" || symbolKey == \"JPYI\" || symbolKey == \"CHFI\" || symbolKey == \"EURI\" {\n                        importantSymbols.append(symbol)\n                    } else {\n                        normalSymbols.append(symbol)\n                    }\n                }\n                \n                if !importantSymbols.isEmpty {\n                    var subSectors: [IndicesSector] = []\n                    // “重要”子分组\n                    subSectors.append(IndicesSector(name: \"重要\", symbols: importantSymbols))\n                    // 如果还有其他 symbol，则增加“其他”子分组\n                    if !normalSymbols.isEmpty {\n                        subSectors.append(IndicesSector(name: \"其他\", symbols: normalSymbols))\n                    }\n                    let currenciesSector = IndicesSector(name: key, symbols: [], subSectors: subSectors)\n                    sectors.append(currenciesSector)\n                } else if !normalSymbols.isEmpty {\n                    // 如果没有特别的 symbol，则常规处理\n                    let currenciesSector = IndicesSector(name: key, symbols: normalSymbols)\n                    sectors.append(currenciesSector)\n                }\n            } else {\n                // 其他分组常规处理\n                var symbols: [IndicesSymbol] = []\n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    symbols.append(IndicesSymbol(\n                        symbol: symbolKey,\n                        name: symbolName,\n                        value: \"\",\n                        tags: nil\n                    ))\n                }\n                \n                if !symbols.isEmpty {\n                    let sector = IndicesSector(name: key, symbols: symbols)\n                    sectors.append(sector)\n                }\n            }\n        }\n        \n        self.sectors = sectors\n    }\n}\n\n// MARK: - Views\n\nstruct IndicesContentView: View {\n    @EnvironmentObject var dataService: DataService\n    @State private var showError: Bool = false\n    @State private var errorMessage: String = \"\"\n    \n    // 自定义网格布局\n    private let gridLayout = [\n        GridItem(.adaptive(minimum: 100, maximum: .infinity), spacing: 12)\n    ]\n    \n    var body: some View {\n        NavigationView {\n            ScrollView {\n                if let sectorsPanel = dataService.sectorsPanel {\n                    LazyVGrid(columns: gridLayout, spacing: 12) {\n                        ForEach(sectorsPanel.sectors, id: \\.name) { sector in\n                            NavigationLink {\n                                SectorDetailView(sector: sector)\n                                    .navigationBarTitleDisplayMode(.inline)\n                            } label: {\n                                SectorButtonView(sectorName: sector.name)\n                            }\n                        }\n                    }\n                    .padding()\n                } else {\n                    if let error = dataService.errorMessage {\n                        Text(error)\n                            .foregroundColor(.red)\n                            .padding()\n                    } else {\n                        LoadingView()\n                    }\n                }\n            }\n//            .navigationTitle(\"Sectors\")\n            .alert(isPresented: Binding<Bool>(\n                get: { dataService.errorMessage != nil },\n                set: { _ in dataService.errorMessage = nil }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(dataService.errorMessage ?? \"未知错误\"),\n                    dismissButton: .default(Text(\"好的\"))\n                )\n            }\n        }\n        .navigationViewStyle(StackNavigationViewStyle())\n    }\n}\n\nstruct LoadingView: View {\n    var body: some View {\n        VStack {\n            ProgressView(\"加载中，请稍候...\")\n                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                .scaleEffect(1.5, anchor: .center)\n        }\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n        .background(Color(.systemBackground))\n    }\n}\n\nstruct SectorButtonView: View {\n    let sectorName: String\n    \n    var body: some View {\n        Text(sectorName.replacingOccurrences(of: \"_\", with: \" \"))\n            .font(.subheadline).bold()\n            .foregroundColor(.white)\n            .padding(.horizontal, 12)\n            .padding(.vertical, 8)\n            .background(\n                LinearGradient(\n                    gradient: Gradient(colors: [.blue, .purple]),\n                    startPoint: .topLeading,\n                    endPoint: .bottomTrailing\n                )\n            )\n            .cornerRadius(10)\n            .shadow(color: Color.black.opacity(0.15), radius: 3, x: 2, y: 2)\n            .frame(minHeight: 44)\n    }\n}\n\nstruct SectorDetailView: View {\n    let sector: IndicesSector\n    @EnvironmentObject var dataService: DataService\n    @State private var symbols: [IndicesSymbol] = []\n    @State private var showError: Bool = false\n    @State private var errorMessage: String = \"\"\n    \n    var body: some View {\n        ScrollView {\n            // 如果存在子分组则遍历每个子分组显示\n            if let subSectors = sector.subSectors, !subSectors.isEmpty {\n                ForEach(subSectors, id: \\.name) { subSector in\n                    VStack(alignment: .leading, spacing: 8) {\n                        Text(subSector.name)\n                            .font(.headline)\n                            .padding(.horizontal)\n                            .padding(.top, 16)\n                        \n                        LazyVStack(spacing: 0) {\n                            ForEach(loadSymbolsForSubSector(subSector.symbols)) { symbol in\n                                SymbolItemView(symbol: symbol, sectorName: sector.name)\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 否则按原规则显示当前分组的 symbol 数组\n                LazyVStack(spacing: 0) {\n                    ForEach(symbols) { symbol in\n                        SymbolItemView(symbol: symbol, sectorName: sector.name)\n                    }\n                }\n            }\n        }\n        .padding(.horizontal)\n        .padding(.top, 8)\n        .navigationBarTitle(\n            sector.name.replacingOccurrences(of: \"_\", with: \" \"),\n            displayMode: .inline\n        )\n        .alert(isPresented: $showError) {\n            Alert(\n                title: Text(\"错误\"),\n                message: Text(errorMessage),\n                dismissButton: .default(Text(\"好的\"))\n            )\n        }\n        .onAppear {\n            // 如果没有子分组，则加载 symbol 数组\n            if sector.subSectors == nil || sector.subSectors!.isEmpty {\n                loadSymbols()\n            }\n        }\n    }\n    \n    func loadSymbolsForSubSector(_ symbols: [IndicesSymbol]) -> [IndicesSymbol] {\n        let compareMap = dataService.compareData\n        return symbols.map { symbol in\n            var updatedSymbol = symbol\n            let value = compareMap[symbol.symbol.uppercased()] ??\n                        compareMap[symbol.symbol] ??\n                        \"N/A\"\n            updatedSymbol.value = value\n            \n            if let description = dataService.descriptionData?.stocks.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag ?? dataService.descriptionData?.etfs.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag {\n                updatedSymbol.tags = description\n            }\n            \n            return updatedSymbol\n        }\n    }\n    \n    func loadSymbols() {\n        let compareMap = dataService.compareData\n        self.symbols = sector.symbols.map { symbol in\n            var updatedSymbol = symbol\n            let value = compareMap[symbol.symbol.uppercased()] ??\n                        compareMap[symbol.symbol] ??\n                        \"N/A\"\n            updatedSymbol.value = value\n            \n            if let description = dataService.descriptionData?.stocks.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag ?? dataService.descriptionData?.etfs.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag {\n                updatedSymbol.tags = description\n            }\n            \n            return updatedSymbol\n        }\n    }\n}\n\n// 修改 SymbolItemView 只显示 symbol\nstruct SymbolItemView: View {\n    let symbol: IndicesSymbol\n    let sectorName: String\n    \n    private var tableName: String {\n        switch sectorName {\n        case \"ETFs_US\":\n            return \"ETFs\"\n        case \"Economic_All\":\n            return \"Economics\"\n        default:\n            return sectorName\n        }\n    }\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: symbol.symbol, groupName: tableName)) {\n            VStack(alignment: .leading, spacing: 8) {\n                // 只显示 symbol\n                HStack {\n                    Text(symbol.symbol)\n                        .font(.headline)\n                        .foregroundColor(.primary)\n                    \n                    Spacer()\n                    \n                    Text(symbol.value)\n                        .foregroundColor(getValueColor(value: symbol.value))\n                        .fontWeight(.semibold)\n                }\n                \n                // 保持 tags 显示\n                if let tags = symbol.tags, !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding()\n            .background(\n                RoundedRectangle(cornerRadius: 12)\n                    .fill(Color(.systemGray6))\n                    .shadow(color: Color.black.opacity(0.05), radius: 2, x: 2, y: 2)\n            )\n            .padding(.vertical, 4)\n        }\n    }\n    \n    private func getValueColor(value: String) -> Color {\n        if value.contains(\"+\") {\n            return .green\n        } else if value.contains(\"-\") {\n            return .red\n        } else if value == \"N/A\" {\n            return .gray\n        } else {\n            return .blue\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Modules/Sectors_panel.json",
                "filename": "Sectors_panel.json",
                "content": "{\n    \"Basic_Materials\": {\n        \"UFPI\": \"\",\n        \"BCC\": \"\"\n    },\n    \"Real_Estate\": {},\n    \"Energy\": {},\n    \"Technology\": {\n        \"ENPH\": \"\"\n    },\n    \"Consumer_Cyclical\": {},\n    \"Utilities\": {},\n    \"Consumer_Defensive\": {\n        \"FLO\": \"关注财报\",\n        \"GIS\": \"关注财报\"\n    },\n    \"Industrials\": {\n        \"BAH\": \"\"\n    },\n    \"Communication_Services\": {\n        \"OMC\": \"\"\n    },\n    \"Financial_Services\": {\n        \"BRK-A\": \"\"\n    },\n    \"Healthcare\": {\n        \"MRNA\": \"\"\n    },\n    \"Bonds\": {\n        \"US10Y\": \"\",\n        \"US2Y\": \"\",\n        \"JP10Y\": \"\",\n        \"IND10Y\": \"\",\n        \"BR10Y\": \"\",\n        \"UK10Y\": \"\",\n        \"TUR10Y\": \"\"\n    },\n    \"Indices\": {\n        \"VIX\": \"\",\n        \"NASDAQ\": \"\",\n        \"S&P500\": \"\",\n        \"DowJones\": \"\",\n        \"HANGSENG\": \"\",\n        \"Shanghai\": \"\",\n        \"Shenzhen\": \"\",\n        \"EURO50\": \"\",\n        \"UK100\": \"\",\n        \"Russell\": \"\",\n        \"panEURO100\": \"\",\n        \"Nikkei\": \"\",\n        \"India\": \"\",\n        \"Singapore\": \"\",\n        \"Russia\": \"\",\n        \"Korea\": \"\",\n        \"Australia\": \"\",\n        \"Brazil\": \"\"\n    },\n    \"Commodities\": {\n        \"CrudeOil\": \"\",\n        \"Huangjin\": \"\",\n        \"Naturalgas\": \"\",\n        \"BalticDry\": \"\",\n        \"Silver\": \"\",\n        \"Copper\": \"\",\n        \"Uranium\": \"\",\n        \"Nickel\": \"\",\n        \"Aluminum\": \"\",\n        \"Steel\": \"\",\n        \"IronOre\": \"\",\n        \"Platinum\": \"\",\n        \"Cocoa\": \"\",\n        \"Coffee\": \"\",\n        \"YuMi\": \"\",\n        \"Soybean\": \"\",\n        \"Cotton\": \"\",\n        \"OrangeJuice\": \"\",\n        \"Sugar\": \"\",\n        \"Wheat\": \"\",\n        \"Rice\": \"\",\n        \"Oat\": \"\",\n        \"LeanHogs\": \"\",\n        \"LiveCattle\": \"\",\n        \"PalmOil\": \"\",\n        \"Coal\": \"\",\n        \"Tin\": \"\",\n        \"Zinc\": \"\",\n        \"Palladium\": \"\",\n        \"Poultry\": \"\",\n        \"Salmon\": \"\"\n    },\n    \"Crypto\": {\n        \"Bitcoin\": \"\",\n        \"Ether\": \"\",\n        \"Binance\": \"\",\n        \"Solana\": \"\",\n        \"XRP\": \"\"\n    },\n    \"ETFs\": {\n        \"SCHD\": \"\",\n        \"DBC\": \"\",\n        \"IBIT\": \"\",\n        \"SOXX\": \"\",\n        \"ASHR\": \"\",\n        \"EWT\": \"\",\n        \"URA\": \"\",\n        \"UUP\": \"\",\n        \"FXY\": \"\"\n    },\n    \"highlow\": {\n        \"THD\": \"\"\n    },\n    \"Currencies\": {\n        \"DXY\": \"美元指数\",\n        \"CNYI\": \"人民币指数\",\n        \"JPYI\": \"日元指数\",\n        \"USDCNY\": \"\",\n        \"USDJPY\": \"\",\n        \"EURUSD\": \"\",\n        \"CNYJPY\": \"\",\n        \"GBPI\": \"英镑指数\",\n        \"CHFI\": \"瑞士法郎指数\",\n        \"EURI\": \"欧元指数\",\n        \"CNYARS\": \"阿根廷\",\n        \"GBPUSD\": \"\",\n        \"CNYINR\": \"印度卢比\",\n        \"CNYKRW\": \"\",\n        \"CNYEGP\": \"埃及\",\n        \"CNYRUB\": \"俄罗斯卢布\",\n        \"CNYPHP\": \"菲律宾比索\",\n        \"CNYIDR\": \"印度尼西亚卢比\",\n        \"CNYTHB\": \"泰国\",\n        \"CNYIRR\": \"伊朗\",\n        \"CNYCHF\": \"人民币瑞士法郎\",\n        \"CNYUSD\": \"人民币兑美元\",\n        \"USDRUB\": \"俄罗斯卢布\",\n        \"USDCHF\": \"美元瑞士法郎\",\n        \"USDKRW\": \"\",\n        \"USDTRY\": \"\",\n        \"USDSGD\": \"\",\n        \"USDTWD\": \"\",\n        \"USDIDR\": \"印度尼西亚卢比\",\n        \"USDPHP\": \"菲律宾比索\",\n        \"USDMYR\": \"马来西亚\",\n        \"USDMXN\": \"墨西哥\",\n        \"USDARS\": \"阿根廷\",\n        \"USDEGP\": \"埃及\",\n        \"USDBRL\": \"巴西\",\n        \"USDINR\": \"印度卢比\"\n    },\n    \"Economics\": {\n        \"USNonFarmA\": \"04 USNonFarmA\",\n        \"USNonPMI\": \"04 USNonPMI\",\n        \"USTrade\": \"05 USTrade\",\n        \"USNonFarm\": \"06 USNonFarm\",\n        \"USUnemploy\": \"06 USUnemploy\",\n        \"USInitial\": \"05 USInitial\"\n    },\n    \"ETFs_US\": {\n        \"TLT\": \"\",\n        \"XLK\": \"科技\",\n        \"XLV\": \"医疗\",\n        \"XLI\": \"工业\",\n        \"XLF\": \"金融\",\n        \"XLP\": \"必需消费\",\n        \"XLY\": \"非必需消费\",\n        \"XLRE\": \"房地产\",\n        \"XAR\": \"国防航天\",\n        \"KIE\": \"保险\",\n        \"XLB\": \"原材料\",\n        \"PAVE\": \"基础设施\",\n        \"XLE\": \"能源\",\n        \"XLU\": \"公共事业\"\n    },\n    \"Economic_All\": {\n        \"USGDP\": \"\",\n        \"USCPI\": \"\",\n        \"USInterest\": \"\",\n        \"USNonFarm\": \"\",\n        \"USNonFarmA\": \"\",\n        \"USTrade\": \"\",\n        \"USConfidence\": \"\",\n        \"USRetailM\": \"\",\n        \"CoreCPI\": \"\",\n        \"CorePPI\": \"\",\n        \"USPPI\": \"\",\n        \"USNonPMI\": \"\",\n        \"USUnemploy\": \"\",\n        \"CorePCEY\": \"\",\n        \"CorePCEM\": \"\",\n        \"USConspending\": \"\",\n        \"PCEY\": \"\",\n        \"USInitial\": \"\",\n        \"ImportPriceM\": \"\",\n        \"ImportPriceY\": \"\"\n    }\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json",
                "filename": "Sectors_All.json",
                "content": "{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}"
            }
        ],
        "final_prompt": "我在sectors_panel里新增了一个分类叫highlow，里面有一些symbol，目前我点击这些symbol，可能是把highlow作为groupname传递给chartview来展示，我的需求是：当我在indices程序里点击里面的symbol时，应该通过dataservice程序去索引sectors_all里按照symbol找到所属的组名（sectors_all里的组名就是groupname），然后把symbol和组名一块传递给chartview来展示曲线。该怎么改代码实现这一需求？"
    },
    {
        "id": "2025-06-09 17:18:40",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 17:23:45",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 18:19:12",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// MARK: - 新增：High/Low 数据模型\nstruct HighLowItem: Identifiable, Codable {\n    var id = UUID()\n    let symbol: String\n}\n\nstruct HighLowGroup: Identifiable {\n    let id: String // 使用 timeInterval 作为 id\n    let timeInterval: String\n    var items: [HighLowItem]\n}\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 18:46:41",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// MARK: - 新增：High/Low 数据模型\nstruct HighLowItem: Identifiable, Codable {\n    var id = UUID()\n    let symbol: String\n}\n\nstruct HighLowGroup: Identifiable {\n    let id: String // 使用 timeInterval 作为 id\n    let timeInterval: String\n    var items: [HighLowItem]\n}\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Search.swift",
                "filename": "Search.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI\n\n// MARK: - 协议与模型\nprotocol SearchDescribableItem {\n    var symbol: String { get }\n    var name: String { get }\n    var tag: [String] { get }\n    var description1: String { get }\n    var description2: String { get }\n}\n\nstruct SelectedSymbol: Identifiable {\n    let id = UUID()\n    let result: SearchResult\n    let category: String\n}\n\nstruct GroupedSearchResults: Identifiable {\n    var id = UUID()\n    var category: MatchCategory\n    var results: [(result: SearchResult, score: Int)]\n    let highestScore: Int\n}\n\nenum MatchCategory: String, CaseIterable, Identifiable {\n    case stockSymbol = \"Stock Symbol\"\n    case etfSymbol = \"ETF Symbol\"\n    case stockName = \"Stock Name\"\n    case etfName = \"ETF Name\"\n    case stockTag = \"Stock Tag\"\n    case etfTag = \"ETF Tag\"\n    case stockDescription = \"Stock Description\"\n    case etfDescription = \"ETF Description\"\n    \n    var id: String { self.rawValue }\n    \n    var priority: Int {\n        switch self {\n        case .stockSymbol, .etfSymbol:\n            return 1000\n        case .stockTag, .etfTag:\n            return 800\n        case .stockName, .etfName:\n            return 500\n        case .stockDescription, .etfDescription:\n            return 300\n        }\n    }\n}\n\n// MARK: - 搜索结果包装\nclass SearchResult: Identifiable, ObservableObject {\n    let id = UUID()\n    @Published var symbol: String\n    @Published var name: String\n    @Published var tag: [String]\n    @Published var marketCap: String?\n    @Published var peRatio: String?\n    @Published var pb: String?  // 添加 pb 属性\n    @Published var compare: String?\n    @Published var volume: String?\n    \n    init(symbol: String, name: String, tag: [String],\n         marketCap: String? = nil, peRatio: String? = nil, pb: String? = nil,\n         compare: String? = nil, volume: String? = nil) {\n        self.symbol = symbol\n        self.name = name\n        self.tag = tag\n        self.marketCap = marketCap\n        self.peRatio = peRatio\n        self.pb = pb  // 初始化 pb\n        self.compare = compare\n        self.volume = volume\n    }\n}\n\n// MARK: - 分组 header\nstruct GroupHeaderView: View {\n    let category: MatchCategory\n    @Binding var isCollapsed: Bool\n    \n    var body: some View {\n        HStack {\n            Text(category.rawValue)\n                .font(.headline)\n                .foregroundColor(.gray)\n            Spacer()\n            Image(systemName: isCollapsed ? \"chevron.down\" : \"chevron.up\")\n                .foregroundColor(.gray)\n        }\n        .contentShape(Rectangle())\n        .onTapGesture {\n            withAnimation {\n                isCollapsed.toggle()\n            }\n        }\n    }\n}\n\n// MARK: - 主搜索按钮页面\nstruct SearchContentView: View {\n    @State private var showSearch = false\n    @State private var showCompare = false\n    @State private var showEarning = false // 添加新状态\n    @EnvironmentObject var dataService: DataService\n    \n    var body: some View {\n        NavigationStack {\n            HStack(spacing: 12) {\n                Button(action: { showCompare = true }) {\n                    VStack {\n                        Image(systemName: \"chart.line.uptrend.xyaxis\")\n                            .font(.system(size: 20))\n                        Text(\"比较\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showEarning = true }) {\n                    VStack {\n                        Image(systemName: \"calendar\")\n                            .font(.system(size: 20))\n                        Text(\"财报\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n            }\n            .padding(.horizontal)\n            Spacer()\n        }\n        .navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        }\n        .navigationDestination(isPresented: $showCompare) {\n            CompareView(initialSymbol: \"\")\n        }\n        .navigationDestination(isPresented: $showEarning) {\n                    EarningReleaseView()\n                }\n    }\n}\n\n// MARK: - 搜索页面\nstruct SearchView: View {\n    @Environment(\\.dismiss) private var dismiss\n    @State private var searchText: String = \"\"\n    @State private var showClearButton: Bool = false\n    @State private var showSearchHistory: Bool = false\n    @State private var groupedSearchResults: [GroupedSearchResults] = []\n    @State private var isLoading: Bool = false\n    @State private var selectedCategory: String? = nil\n    @State private var showChart: Bool = false\n    @State private var selectedResult: SearchResult? = nil\n    @State private var selectedSymbol: SelectedSymbol? = nil\n    @State private var isFirstAppear = true\n    @ObservedObject var viewModel: SearchViewModel\n    @FocusState private var isSearchFieldFocused: Bool\n    @State private var showChartView: Bool = false\n    @State private var selectedSymbolForChart: SelectedSymbol? = nil\n    @State private var selectedSymbolForDescription: SelectedSymbol? = nil\n    @State private var clipboardContent: String = \"\"\n    @State private var showClipboardBar: Bool = false\n    \n    @State private var collapsedGroups: [MatchCategory: Bool] = [:]\n    let isSearchActive: Bool\n    \n    init(isSearchActive: Bool = false, dataService: DataService) {\n        self.isSearchActive = isSearchActive\n        self.viewModel = SearchViewModel(dataService: dataService)\n        _showSearchHistory = State(initialValue: isSearchActive)\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            searchBar\n                .padding()\n            \n            // 剪贴板小条\n            if showClipboardBar {\n                HStack {\n                    Image(systemName: \"doc.on.clipboard\")\n                        .foregroundColor(.gray)\n                    Text(clipboardContent)\n                        .lineLimit(1)\n                        .truncationMode(.middle)\n                    Spacer()\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n                .background(Color(.systemGray5))\n                .cornerRadius(8)\n                .padding(.horizontal)\n                .onTapGesture {\n                    // 粘贴并隐藏小条\n                    searchText = clipboardContent\n                    withAnimation {\n                        showClipboardBar = false\n                        showSearchHistory = false\n                    }\n                    // 你可以根据需要自动触发搜索：\n                     startSearch()\n                }\n                .transition(.move(edge: .top).combined(with: .opacity))\n            }\n\n            ZStack {\n                if showSearchHistory {\n                    SearchHistoryView(viewModel: viewModel) { term in\n                        searchText = term\n                        startSearch()\n                    }\n                    .transition(.opacity)\n                    .zIndex(1)\n                }\n                \n                if isLoading {\n                    ProgressView(\"正在搜索...\")\n                        .padding()\n                }\n                \n                if !showSearchHistory && !groupedSearchResults.isEmpty {\n                    searchResultsList\n                        .transition(.opacity)\n                }\n            }\n            .navigationBarTitleDisplayMode(.inline)\n            .alert(isPresented: Binding<Bool>(\n                get: { viewModel.errorMessage != nil },\n                set: { if !$0 { viewModel.errorMessage = nil } }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(viewModel.errorMessage ?? \"\"),\n                    dismissButton: .default(Text(\"确定\"))\n                )\n            }\n            .sheet(item: $selectedSymbol) { selected in\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n        .onAppear {\n            if isSearchActive && isFirstAppear {\n                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n                    isSearchFieldFocused = true\n                    isFirstAppear = false\n                }\n            }\n        }\n    }\n    \n    private var searchBar: some View {\n        HStack {\n            ZStack(alignment: .trailing) {\n                TextField(\n                    \"请输入要搜索的关键字\",\n                    text: $searchText,\n                    onEditingChanged: { isEditing in\n                        withAnimation {\n                            // 控制搜索历史的展示\n                            showSearchHistory = isEditing && searchText.isEmpty\n                            if isEditing && searchText.isEmpty {\n                                groupedSearchResults = []\n                            }\n                        }\n                        // 当开始编辑且文本为空时，读取剪贴板并展示小条\n                        if isEditing && searchText.isEmpty {\n                            if let content = UIPasteboard.general.string?\n                                .trimmingCharacters(in: .whitespacesAndNewlines),\n                               !content.isEmpty {\n                                clipboardContent = content\n                                withAnimation {\n                                    showClipboardBar = true\n                                }\n                            }\n                        }\n                    },\n                    onCommit: {\n                        startSearch()\n                    }\n                )\n                .focused($isSearchFieldFocused)\n                .padding(10)\n                .padding(.trailing, showClearButton ? 30 : 10)\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n                .onChange(of: searchText) { _, newValue in\n                    showClearButton = !newValue.isEmpty\n                    if newValue.isEmpty {\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                        }\n                    } else {\n                        // 输入时隐藏剪贴板小条\n                        withAnimation { showClipboardBar = false }\n                    }\n                }\n\n                if showClearButton {\n                    Button(action: {\n                        searchText = \"\"\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                            isSearchFieldFocused = true\n                        }\n                        // 点击清除时读取剪贴板\n                        if let content = UIPasteboard.general.string?\n                            .trimmingCharacters(in: .whitespacesAndNewlines),\n                           !content.isEmpty {\n                            clipboardContent = content\n                            withAnimation {\n                                showClipboardBar = true\n                            }\n                        }\n                    }) {\n                        Image(systemName: \"xmark.circle.fill\")\n                            .foregroundColor(.gray)\n                            .opacity(0.6)\n                    }\n                    .padding(.trailing, 15)\n                    .transition(.opacity)\n                }\n            }\n\n            Button(action: {\n                startSearch()\n                isSearchFieldFocused = false\n            }) {\n                Text(\"搜索\")\n                    .foregroundColor(.white)\n                    .padding(.horizontal)\n                    .padding(.vertical, 8)\n                    .background(Color.blue)\n                    .cornerRadius(8)\n            }\n        }\n    }\n    \n    private var searchResultsList: some View {\n        List {\n            ForEach(groupedSearchResults) { groupedResult in\n                if !groupedResult.results.isEmpty {\n                    Section(header: GroupHeaderView(\n                        category: groupedResult.category,\n                        isCollapsed: Binding(\n                            get: { collapsedGroups[groupedResult.category] ?? false },\n                            set: { collapsedGroups[groupedResult.category] = $0 }\n                        )\n                    )) {\n                        if !(collapsedGroups[groupedResult.category] ?? false) {\n                            ForEach(groupedResult.results.sorted { $0.score > $1.score }, id: \\.result.id) { result, score in\n                                SearchResultRow(result: result, score: score)\n                                    .contentShape(Rectangle())  // 添加这一行\n                                    .onTapGesture {           // 改用 onTapGesture\n                                        handleResultSelection(result: result)\n                                    }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        .listStyle(InsetGroupedListStyle())\n        .sheet(item: $selectedSymbolForDescription) { selected in\n            if let descriptions = getDescriptions(for: selected.result.symbol) {\n                DescriptionView(descriptions: descriptions, isDarkMode: true)\n            } else {\n                DescriptionView(descriptions: (\"No description available.\", \"\"), isDarkMode: true)\n            }\n        }\n        .navigationDestination(isPresented: $showChartView) {\n            if let selected = selectedSymbolForChart {\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n    }\n\n    // 添加处理结果选择的方法\n    private func handleResultSelection(result: SearchResult) {\n        // 检查symbol是否在数据库中有数据\n        if let groupName = viewModel.dataService.getCategory(for: result.symbol) {\n            // 检查数据库中是否有该symbol的价格数据\n            DispatchQueue.global(qos: .userInitiated).async {\n                let data = DatabaseManager.shared.fetchHistoricalData(\n                    symbol: result.symbol,\n                    tableName: groupName,\n                    dateRange: .timeRange(.oneMonth)\n                )\n                \n                DispatchQueue.main.async {\n                    if data.isEmpty {\n                        // 如果没有价格数据，但有description数据\n                        if getDescriptions(for: result.symbol) != nil {\n                            selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n                        }\n                    } else {\n                        // 有价格数据，通过导航打开ChartView\n                        selectedSymbolForChart = SelectedSymbol(result: result, category: groupName)\n                        showChartView = true\n                    }\n                }\n            }\n        } else {\n            // 如果在分类中找不到，但可能有description\n            if getDescriptions(for: result.symbol) != nil {\n                selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n            }\n        }\n    }\n\n    // 添加获取描述的辅助方法\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = viewModel.dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = viewModel.dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    func startSearch() {\n        let trimmed = searchText.trimmingCharacters(in: .whitespaces)\n        guard !trimmed.isEmpty else { return }\n        isSearchFieldFocused = false\n        isLoading = true\n        showSearchHistory = false\n\n        viewModel.performSearch(query: trimmed) { groupedResults in\n            DispatchQueue.main.async {\n                withAnimation {\n                    // 1. 先赋值\n                    self.groupedSearchResults = groupedResults\n                    self.isLoading = false\n                    \n                    // 2. 初始化折叠状态\n                    for group in groupedResults {\n                        if self.collapsedGroups[group.category] == nil {\n                            self.collapsedGroups[group.category] = false\n                        }\n                    }\n                }\n                \n                // 3. 自动判断首个结果\n                if\n                    let firstGroup = groupedResults.first,\n                    // 记得 results 本来就是按 score 排好序的\n                    let firstEntry = firstGroup.results.first,\n                    trimmed.uppercased() == firstEntry.result.symbol.uppercased()\n                {\n                    // 4. 直接打开 chart 或 description\n                    self.handleResultSelection(result: firstEntry.result)\n                    return\n                }\n                \n                // 如果不一致，就正常停留在列表\n            }\n        }\n    }\n}\n\n// MARK: - 搜索结果行\nstruct SearchResultRow: View {\n    @ObservedObject var result: SearchResult\n    let score: Int\n    \n    var body: some View {\n        VStack(alignment: .leading) {\n            HStack {\n                VStack(alignment: .leading) {\n                    HStack {\n                        Text(result.symbol)\n                            .foregroundColor(.blue)\n                        Text(result.name)\n                            .foregroundColor(.primary)\n                            .lineLimit(1)\n                            .truncationMode(.tail)\n                    }\n                    .font(.headline)\n                    Text(result.tag.joined(separator: \", \"))\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                Spacer()\n            }\n            HStack {\n                if let marketCap = result.marketCap {\n                    Text(marketCap)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let peRatio = result.peRatio, peRatio != \"--\" {\n                    Text(peRatio)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let pb = result.pb, pb != \"--\" {  // 添加 PB 的显示\n                                    Text(pb)\n                                        .font(.subheadline)\n                                        .foregroundColor(.secondary)\n                                }\n                if let compare = result.compare {\n                    Text(compare)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let volume = result.volume {\n                    Text(volume)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n            }\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - 搜索历史视图\nstruct SearchHistoryView: View {\n    @ObservedObject var viewModel: SearchViewModel\n    var onSelect: (String) -> Void\n    \n    var body: some View {\n        VStack {\n            if viewModel.searchHistory.isEmpty {\n                Text(\"暂无搜索历史\")\n                    .foregroundColor(.secondary)\n                    .padding()\n            } else {\n                ScrollView {\n                    VStack(alignment: .leading, spacing: 8) {\n                        ForEach(viewModel.searchHistory, id: \\.self) { term in\n                            HStack {\n                                Text(term)\n                                Spacer()\n                                Button(action: {\n                                    viewModel.removeSearchHistory(term: term)\n                                }) {\n                                    Image(systemName: \"trash\")\n                                        .foregroundColor(.red)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 4)\n                            .contentShape(Rectangle())\n                            .onTapGesture {\n                                onSelect(term)\n                            }\n                        }\n                    }\n                }\n                .background(Color(.systemBackground))\n                .cornerRadius(8)\n                .shadow(radius: 5)\n                .padding([.horizontal, .bottom])\n            }\n        }\n    }\n}\n\n// MARK: - ViewModel\nclass SearchViewModel: ObservableObject {\n    @Published var searchHistory: [String] = []\n    @Published var errorMessage: String? = nil\n    @Published var isChartLoading: Bool = false\n    @Published var groupedSearchResults: [GroupedSearchResults] = []\n    \n    var dataService: DataService\n    private var cancellables = Set<AnyCancellable>()\n    \n    init(dataService: DataService = DataService()) {\n        self.dataService = dataService\n        dataService.$errorMessage\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.errorMessage, on: self)\n            .store(in: &cancellables)\n        loadSearchHistory()\n    }\n    \n    func performSearch(query: String, completion: @escaping ([GroupedSearchResults]) -> Void) {\n        let keywords = query.lowercased().split(separator: \" \").map { String($0) }\n        \n        DispatchQueue.global(qos: .userInitiated).async { [weak self] in\n            guard let self = self, let descriptionData = self.dataService.descriptionData else {\n                DispatchQueue.main.async { completion([]) }\n                return\n            }\n            \n            var groupedResults: [(\n                group: GroupedSearchResults,\n                matchScore: Int,\n                priority: Int\n            )] = []\n            \n            let categories: [MatchCategory] = [\n                .stockSymbol, .etfSymbol,\n                .stockName, .etfName,\n                .stockTag, .etfTag,\n                .stockDescription, .etfDescription\n            ]\n            \n            for category in categories {\n                var matches: [(result: SearchResult, score: Int)] = []\n                \n                switch category {\n                case .stockSymbol, .stockName, .stockDescription, .stockTag:\n                    matches = self.searchCategory(items: descriptionData.stocks, keywords: keywords, category: category)\n                    \n                case .etfSymbol, .etfName, .etfDescription, .etfTag:\n                    matches = self.searchCategory(items: descriptionData.etfs, keywords: keywords, category: category)\n                }\n                \n                if !matches.isEmpty {\n                    let highestScore = matches.max(by: { $0.score < $1.score })?.score ?? 0\n                    let group = GroupedSearchResults(category: category, results: matches, highestScore: highestScore)\n                    groupedResults.append((group, highestScore, category.priority))\n                }\n            }\n            \n            let sortedGroups = groupedResults.sorted {\n                if $0.matchScore != $1.matchScore {\n                    return $0.matchScore > $1.matchScore\n                }\n                return $0.priority > $1.priority\n            }.map { $0.group }\n            \n            DispatchQueue.main.async {\n                if !keywords.isEmpty {\n                    self.addSearchHistory(term: query)\n                }\n                self.groupedSearchResults = sortedGroups\n                self.fetchLatestVolumes(for: sortedGroups) {\n                    completion(sortedGroups)\n                }\n            }\n        }\n    }\n    \n    // 为 ETF 搜索结果获取最新 volume\n    private func fetchLatestVolumes(for groupedResults: [GroupedSearchResults], completion: @escaping () -> Void) {\n        let etfCategories: Set<MatchCategory> = [.etfSymbol, .etfName, .etfDescription, .etfTag]\n        \n        for groupedResult in groupedResults {\n            if etfCategories.contains(groupedResult.category) {\n                for (_, entry) in groupedResult.results.enumerated() {\n                    let symbol = entry.result.symbol\n                    if let latestVolume = DatabaseManager.shared.fetchLatestVolume(forSymbol: symbol, tableName: \"ETFs\") {\n                        DispatchQueue.main.async {\n                            entry.result.volume = self.formatVolume(latestVolume)\n                        }\n                    } else {\n                        DispatchQueue.main.async {\n                            entry.result.volume = \"--K\"\n                        }\n                    }\n                }\n            }\n        }\n        completion()\n    }\n    \n    private func formatVolume(_ volume: Int64) -> String {\n        let kVolume = Double(volume) / 1000.0\n        return String(format: \"%.0fK\", kVolume)\n    }\n    \n    // 搜索类别，并根据结果进行匹配和排序\n    func searchCategory<T: SearchDescribableItem>(items: [T],\n                                                  keywords: [String],\n                                                  category: MatchCategory)\n    -> [(result: SearchResult, score: Int)] {\n        var scoredResults: [(SearchResult, Int)] = []\n        \n        for item in items {\n            if let totalScore = matchScoreForItem(item, category: category, keywords: keywords) {\n                let upperSymbol = item.symbol.uppercased()\n                let data = dataService.marketCapData[upperSymbol]\n                let marketCap = data?.marketCap\n                let peRatioStr = data?.peRatio != nil ? String(format: \"%.2f\", data!.peRatio!) : \"--\"\n                let pbStr = data?.pb != nil ? String(format: \"%.2f\", data!.pb!) : \"--\"  // 添加 PB 格式化\n                \n                let result = SearchResult(\n                    symbol: item.symbol,\n                    name: item.name,\n                    tag: item.tag,\n                    marketCap: marketCap,\n                    peRatio: peRatioStr,\n                    pb: pbStr,  // 添加 PB 数据\n                    compare: dataService.compareData[upperSymbol]\n                )\n                \n                scoredResults.append((result, totalScore))\n            }\n        }\n        \n        return scoredResults.sorted { $0.1 > $1.1 }\n    }\n    \n    // 计算某个 item 与一组关键词在指定分类下的匹配分数\n    private func matchScoreForItem<T: SearchDescribableItem>(\n        _ item: T,\n        category: MatchCategory,\n        keywords: [String]) -> Int? {\n        \n        var totalScore = 0\n        \n        for keyword in keywords {\n            let lowerKeyword = keyword.lowercased()\n            let singleScore = scoreOfSingleMatch(item: item, keyword: lowerKeyword, category: category)\n            if singleScore <= 0 {\n                return nil\n            } else {\n                totalScore += singleScore\n            }\n        }\n        return totalScore\n    }\n    \n    // 计算单个关键词在指定分类下的匹配分数\n    private func scoreOfSingleMatch<T: SearchDescribableItem>(\n        item: T,\n        keyword: String,\n        category: MatchCategory) -> Int {\n        \n        switch category {\n        case .stockSymbol, .etfSymbol:\n            return matchSymbol(item.symbol.lowercased(), keyword: keyword)\n        case .stockName, .etfName:\n            return matchName(item.name, keyword: keyword)\n        case .stockTag, .etfTag:\n            return matchTags(item.tag, keyword: keyword)\n        case .stockDescription, .etfDescription:\n            return matchDescriptions(item.description1, item.description2, keyword: keyword)\n        }\n    }\n    \n    private func matchSymbol(_ symbol: String, keyword: String) -> Int {\n        if symbol == keyword {\n            return 3\n        } else if symbol.contains(keyword) {\n            return 2\n        } else if isFuzzyMatch(text: symbol, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchName(_ name: String, keyword: String) -> Int {\n        let lowercasedName = name.lowercased()\n        let nameComponents = lowercasedName.components(separatedBy: \",\")\n        let mainName = nameComponents.first ?? lowercasedName\n        let nameWords = mainName.split(separator: \" \").map { String($0) }\n        \n        if lowercasedName == keyword {\n            return 4\n        } else if nameWords.contains(keyword) || mainName == keyword {\n            return 3\n        } else if mainName.contains(keyword) {\n            return 2\n        } else if lowercasedName.contains(keyword) {\n            return 1\n        } else if isFuzzyMatch(text: lowercasedName, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchTags(_ tags: [String], keyword: String) -> Int {\n        var maxScore = 0\n        for t in tags {\n            let lowerTag = t.lowercased()\n            var score = 0\n            if lowerTag == keyword {\n                score = 3\n            } else if lowerTag.contains(keyword) {\n                score = 2\n            } else if isFuzzyMatch(text: lowerTag, keyword: keyword, maxDistance: 1) {\n                score = 1\n            }\n            maxScore = max(maxScore, score)\n        }\n        return maxScore\n    }\n    \n    private func matchDescriptions(_ desc1: String, _ desc2: String, keyword: String) -> Int {\n        let d1 = desc1.lowercased()\n        let d2 = desc2.lowercased()\n        let words = d1.split(separator: \" \") + d2.split(separator: \" \")\n        \n        if words.contains(where: { String($0) == keyword }) {\n            return 2\n        } else if d1.contains(keyword) || d2.contains(keyword) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func isFuzzyMatch(text: String, keyword: String, maxDistance: Int) -> Bool {\n        if keyword.count <= 1 {\n            return text.contains(keyword)\n        }\n        let words = text.split(separator: \" \").map { String($0) }\n        return words.contains { levenshteinDistance($0, keyword) <= maxDistance }\n    }\n    \n    private func levenshteinDistance(_ s1: String, _ s2: String) -> Int {\n        let a = Array(s1)\n        let b = Array(s2)\n        let n = a.count\n        let m = b.count\n        \n        if n == 0 { return m }\n        if m == 0 { return n }\n        \n        var matrix = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n        for i in 0...n { matrix[i][0] = i }\n        for j in 0...m { matrix[0][j] = j }\n        \n        for i in 1...n {\n            for j in 1...m {\n                if a[i - 1] == b[j - 1] {\n                    matrix[i][j] = matrix[i - 1][j - 1]\n                } else {\n                    matrix[i][j] = min(\n                        matrix[i - 1][j] + 1,\n                        matrix[i][j - 1] + 1,\n                        matrix[i - 1][j - 1] + 1\n                    )\n                }\n            }\n        }\n        return matrix[n][m]\n    }\n    \n    // MARK: - 搜索历史\n    func loadSearchHistory() {\n        if let history = UserDefaults.standard.array(forKey: \"stockSearchHistory\") as? [String] {\n            self.searchHistory = history\n        }\n    }\n    \n    func addSearchHistory(term: String) {\n        let trimmedTerm = term.trimmingCharacters(in: .whitespaces)\n        guard !trimmedTerm.isEmpty else { return }\n        \n        if let index = self.searchHistory.firstIndex(where: { $0.lowercased() == trimmedTerm.lowercased() }) {\n            self.searchHistory.remove(at: index)\n        }\n        self.searchHistory.insert(trimmedTerm, at: 0)\n        \n        // 增加搜索历史记录保存条目的数量\n        if self.searchHistory.count > 20 {\n            self.searchHistory = Array(self.searchHistory.prefix(20))\n        }\n        UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n    }\n    \n    func removeSearchHistory(term: String) {\n        if let index = searchHistory.firstIndex(where: { $0.lowercased() == term.lowercased() }) {\n            searchHistory.remove(at: index)\n            UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/ChartView.swift",
                "filename": "ChartView.swift",
                "content": "import SwiftUI\nimport Combine\n\n// MARK: - 时间间隔切换\nenum TimeRange {\n    case oneMonth\n    case threeMonths\n    case sixMonths\n    case oneYear\n    case all\n    case twoYears\n    case fiveYears\n    case tenYears\n    \n    var title: String {\n        switch self {\n        case .oneMonth: return \"1\"\n        case .threeMonths: return \"3\"\n        case .sixMonths: return \"6M\"\n        case .oneYear: return \"1Y\"\n        case .all: return \"All\"\n        case .twoYears: return \"2\"\n        case .fiveYears: return \"5\"\n        case .tenYears: return \"10\"\n        }\n    }\n    \n    var startDate: Date {\n        let calendar = Calendar.current\n        let now = Date()\n        \n        switch self {\n        case .oneMonth:\n            return calendar.date(byAdding: .month, value: -1, to: now) ?? now\n        case .threeMonths:\n            return calendar.date(byAdding: .month, value: -3, to: now) ?? now\n        case .sixMonths:\n            return calendar.date(byAdding: .month, value: -6, to: now) ?? now\n        case .oneYear:\n            return calendar.date(byAdding: .year, value: -1, to: now) ?? now\n        case .all:\n            return calendar.date(byAdding: .year, value: -100, to: now) ?? now\n        case .twoYears:\n            return calendar.date(byAdding: .year, value: -2, to: now) ?? now\n        case .fiveYears:\n            return calendar.date(byAdding: .year, value: -5, to: now) ?? now\n        case .tenYears:\n            return calendar.date(byAdding: .year, value: -10, to: now) ?? now\n        }\n    }\n    \n    func xAxisTickInterval() -> Calendar.Component {\n        switch self {\n        case .oneMonth:\n            return .day\n        case .threeMonths, .sixMonths:\n            return .month\n        case .oneYear:\n            return .month\n        case .twoYears, .fiveYears, .tenYears:\n            return .year\n        case .all:\n            return .year\n        }\n    }\n    \n    func xAxisTickValue() -> Int {\n        switch self {\n        case .oneMonth:\n            return 2 // 每2天一个刻度\n        case .threeMonths:\n            return 1 // 每1个月一个刻度\n        case .sixMonths:\n            return 1 // 每1个月一个刻度\n        case .oneYear:\n            return 1 // 每1个月一个刻度\n        case .twoYears, .fiveYears, .tenYears:\n            return 1 // 每1年一个刻度\n        case .all:\n            return 2 // 每3年一个刻度\n        }\n    }\n    \n    // 添加采样率控制，优化长期数据加载\n    func samplingRate() -> Int {\n        switch self {\n        case .oneMonth, .threeMonths, .sixMonths, .oneYear:\n            return 1 // 不采样，使用所有数据点\n        case .twoYears:\n            return 2 // 每2个数据点取1个\n        case .fiveYears:\n            return 5 // 每5个数据点取1个\n        case .tenYears:\n            return 10 // 每10个数据点取1个\n        case .all:\n            return 15 // 每15个数据点取1个\n        }\n    }\n}\n\n// 1. 首先添加一个气泡视图组件\nstruct BubbleView: View {\n    let text: String\n    let color: Color\n    let pointX: CGFloat\n    let pointY: CGFloat\n    \n    var body: some View {\n        Text(text)\n            .font(.system(size: 12))\n            .lineLimit(3)\n            .multilineTextAlignment(.center)\n            .padding(8)\n            .background(color.opacity(0.2))\n            .foregroundColor(color)\n            .cornerRadius(8)\n            .overlay(\n                // 添加小三角形指向特殊点\n                GeometryReader { geo in\n                    Path { path in\n                        let width = geo.size.width\n                        let height = geo.size.height\n                        \n                        path.move(to: CGPoint(x: width/2 - 5, y: height))\n                        path.addLine(to: CGPoint(x: width/2, y: height + 5))\n                        path.addLine(to: CGPoint(x: width/2 + 5, y: height))\n                        path.closeSubpath()\n                    }\n                    .fill(color.opacity(0.2))\n                }\n            )\n    }\n}\n\n// 2. 添加Marker结构体表示需要显示气泡的信息\nstruct BubbleMarker: Identifiable {\n    let id = UUID()\n    let text: String\n    let color: Color\n    let pointIndex: Int\n    let date: Date\n    var position: CGPoint = .zero // 将在计算布局时设置\n    var size: CGSize = .zero      // 将在计算布局时设置\n}\n\n// MARK: - 页面布局\nstruct ChartView: View {\n    let symbol: String\n    let groupName: String\n    private let verticalPadding: CGFloat = 20  // 上下各20点的边距\n    \n    @State private var chartData: [DatabaseManager.PriceData] = []\n    @State private var sampledChartData: [DatabaseManager.PriceData] = [] // 采样后的数据\n    @State private var selectedTimeRange: TimeRange = .sixMonths\n    @State private var isLoading = true\n    @State private var earningData: [DatabaseManager.EarningData] = []\n    // 预计算渲染点，减少Canvas内重复计算\n    @State private var renderedPoints: [RenderedPoint] = []\n    \n    // 单指滑动状态\n    @State private var dragLocation: CGPoint?\n    @State private var draggedPointIndex: Int?\n    @State private var draggedPoint: DatabaseManager.PriceData?\n    @State private var isDragging = false\n    \n    // 双指滑动状态\n    @State private var isMultiTouch = false\n    @State private var firstTouchLocation: CGPoint?\n    @State private var secondTouchLocation: CGPoint?\n    @State private var firstTouchPointIndex: Int?\n    @State private var secondTouchPointIndex: Int?\n    @State private var firstTouchPoint: DatabaseManager.PriceData?\n    @State private var secondTouchPoint: DatabaseManager.PriceData?\n    \n    // 标记点显示控制\n    @State private var showRedMarkers: Bool = false     // 全局标记(红色)默认关闭\n    @State private var showOrangeMarkers: Bool = true   // 股票特定标记(橙色)默认开启\n    @State private var showBlueMarkers: Bool = true     // 财报标记(蓝色)默认开启\n    \n    // 3. 在ChartView中添加状态变量存储气泡数据\n    @State private var bubbleMarkers: [BubbleMarker] = []\n    @State private var shouldUpdateBubbles: Bool = true\n    @State private var showBubbles: Bool = true  // 浮窗显示开关默认打开\n    \n    @Environment(\\.colorScheme) var colorScheme\n    @Environment(\\.presentationMode) var presentationMode\n    @EnvironmentObject var dataService: DataService\n    \n    private struct RenderedPoint {\n        let x: CGFloat\n        let y: CGFloat\n        let date: Date\n        let price: Double\n        let dataIndex: Int\n    }\n    \n    private func updateRenderedPoints() {\n        let width = UIScreen.main.bounds.width\n        let height: CGFloat = 320\n        let effectiveHeight = height - (verticalPadding * 2)\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        \n        renderedPoints = sampledChartData.enumerated().map { index, point in\n            let x = CGFloat(index) * horizontalStep\n            let normalizedY = CGFloat((point.price - minPrice) / priceRange)\n            let y = height - verticalPadding - (normalizedY * effectiveHeight)\n            return RenderedPoint(x: x, y: y, date: point.date, price: point.price, dataIndex: index)\n        }\n    }\n    \n    // 页面配置\n    private var isDarkMode: Bool {\n        colorScheme == .dark\n    }\n    \n    private var chartColor: Color {\n        isDarkMode ? Color.white : Color.blue\n    }\n    \n    private var backgroundColor: Color {\n        isDarkMode ? Color.black : Color.white\n    }\n    \n    private var minPrice: Double {\n        sampledChartData.map { $0.price }.min() ?? 0\n    }\n    \n    private var maxPrice: Double {\n        sampledChartData.map { $0.price }.max() ?? 0\n    }\n    \n    private var priceRange: Double {\n        max(maxPrice - minPrice, 0.01) // 避免除零\n    }\n    \n    // 计算两点之间的价格变化百分比\n    private var priceDifferencePercentage: Double? {\n        guard let first = firstTouchPoint?.price,\n              let second = secondTouchPoint?.price else {\n            return nil\n        }\n        \n        return ((second - first) / first) * 100.0\n    }\n    \n    private func findClosestDataPoint(to targetDate: Date, in data: [DatabaseManager.PriceData]) -> DatabaseManager.PriceData? {\n        let calendar = Calendar.current\n        \n        // 首先尝试在同一月份内查找\n        let targetMonth = calendar.component(.month, from: targetDate)\n        let targetYear = calendar.component(.year, from: targetDate)\n        \n        // 筛选同年同月的数据点\n        let sameMonthData = data.filter { point in\n            let pointMonth = calendar.component(.month, from: point.date)\n            let pointYear = calendar.component(.year, from: point.date)\n            return pointMonth == targetMonth && pointYear == targetYear\n        }\n        \n        if !sameMonthData.isEmpty {\n            // 在同月数据中找最近的点\n            return sameMonthData.min { point1, point2 in\n                abs(point1.date.timeIntervalSince(targetDate)) < abs(point2.date.timeIntervalSince(targetDate))\n            }\n        }\n        \n        // 如果同月没有数据，则在前后一个月范围内查找\n        let monthRange = 1 // 可以调整这个值来改变查找范围\n        let extendedData = data.filter { point in\n            let components = calendar.dateComponents([.month], from: targetDate, to: point.date)\n            guard let monthDiff = components.month else { return false }\n            return abs(monthDiff) <= monthRange\n        }\n        \n        return extendedData.min { point1, point2 in\n            abs(point1.date.timeIntervalSince(targetDate)) < abs(point2.date.timeIntervalSince(targetDate))\n        }\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            // 固定高度的信息显示区域\n            VStack {\n                // 事件文本或时间价格信息区域\n                ZStack(alignment: .top) {\n                    // 背景空白区域，保持固定高度\n                    Rectangle()\n                        .fill(Color.clear)\n                        .frame(height: 80) // 固定三行文本的高度\n                    VStack {\n                        if isMultiTouch, let firstPoint = firstTouchPoint, let secondPoint = secondTouchPoint {\n                            // 获取两个时间点\n                            let date1 = firstPoint.date\n                            let date2 = secondPoint.date\n                            \n                            // 确定显示顺序：较早的日期显示在左边\n                            let (earlierDate, laterDate) = date1 < date2\n                                ? (formatDate(date1), formatDate(date2))\n                                : (formatDate(date2), formatDate(date1))\n                            \n                            // 百分比计算仍然保持原有逻辑（基于触摸顺序）\n                            let percentChange = priceDifferencePercentage ?? 0\n                            \n                            HStack {\n                                Text(\"\\(earlierDate)\")\n                                    .font(.system(size: 16, weight: .medium))\n                                Text(\"\\(laterDate)\")\n                                    .font(.system(size: 16, weight: .medium))\n                                Text(\"\\(formatPercentage(percentChange))\")\n                                    .font(.system(size: 16, weight: .bold))\n                                    .foregroundColor(percentChange >= 0 ? .green : .red)\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 8)\n                            .background(Color(UIColor.systemGray6))\n                            .cornerRadius(8)\n                            \n                        } else if let point = draggedPoint {\n                            // 单指模式：显示单点信息和标记\n                            let pointDate = formatDate(point.date)\n                            \n                            // 计算价格变化百分比\n                            let percentChange = calculatePriceChangePercentage(from: point)\n                            \n                            HStack {\n                                Text(\"\\(pointDate)  \\(formatPrice(point.price))\")\n                                    .font(.system(size: 16, weight: .medium))\n                                \n                                if let percentChange = percentChange {\n                                    Text(formatPercentage(percentChange))\n                                        .font(.system(size: 16, weight: .bold))\n                                        .foregroundColor(percentChange >= 0 ? .green : .red)\n                                }\n                                \n                                // 显示全局或特定标记信息\n                                if let markerText = getMarkerText(for: point.date) {\n                                    Text(markerText)\n                                        .font(.system(size: 18, weight: .medium))\n                                        .foregroundColor(.orange)\n                                        .multilineTextAlignment(.leading)\n                                        .lineLimit(2)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 8)\n                            .background(Color(UIColor.systemGray6))\n                            .cornerRadius(8)\n                        }\n                    }\n                    .padding(.horizontal)\n                    .padding(.top, 10)\n                }\n            }\n            \n            // Chart\n            if isLoading {\n                ProgressView()\n                    .scaleEffect(1.5)\n                    .padding()\n                    .frame(height: 250) // 固定高度与图表一致\n            } else if sampledChartData.isEmpty {\n                Text(\"No data available\")\n                    .font(.title2)\n                    .foregroundColor(.gray)\n                    .frame(height: 250) // 固定高度与图表一致\n            } else {\n                // Chart canvas\n                ZStack {\n                    GeometryReader { geometry in\n                        // 使用 Canvas 替代 Path 提高性能\n                        Canvas { context, size in\n                            // 考虑边距后的实际绘制高度\n                            let effectiveHeight = size.height - (verticalPadding * 2)\n                            \n                            // 修改所有 y 坐标计算，加入边距因素\n                            let priceToY: (Double) -> CGFloat = { price in\n                                let normalizedY = CGFloat((price - minPrice) / priceRange)\n                                return size.height - verticalPadding - (normalizedY * effectiveHeight)\n                            }\n                            \n                            // 绘制价格线\n                            let width = size.width\n                            let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n                            \n                            if !renderedPoints.isEmpty {\n                                var pricePath = Path()\n                                pricePath.move(to: CGPoint(x: renderedPoints[0].x, y: renderedPoints[0].y))\n                                \n                                for i in 1..<renderedPoints.count {\n                                    pricePath.addLine(to: CGPoint(x: renderedPoints[i].x, y: renderedPoints[i].y))\n                                }\n                                // 绘制价格线\n                                context.stroke(pricePath, with: .color(chartColor), lineWidth: 2)\n                                // —— 在这里加上小黑点 ——\n                                if [.oneMonth, .threeMonths, .sixMonths].contains(selectedTimeRange) {\n                                    // renderedPoints 里每个点就是我们事先计算好的 (x,y)\n                                    for pt in renderedPoints {\n                                        let dotRect = CGRect(x: pt.x - 2, y: pt.y - 2, width: 3, height: 3)\n                                        context.fill(Path(ellipseIn: dotRect), with: .color(.black))\n                                    }\n                                }\n                            }\n                            \n                            // 绘制零线 - 当最低值小于 0 时\n                            if minPrice < 0 {\n                                let effectiveMaxPrice = max(maxPrice, 0)\n                                let effectiveRange = effectiveMaxPrice - minPrice\n                                let zeroY = size.height - verticalPadding - CGFloat((0 - minPrice) / effectiveRange) * effectiveHeight\n                                \n                                var zeroPath = Path()\n                                zeroPath.move(to: CGPoint(x: 0, y: zeroY))\n                                zeroPath.addLine(to: CGPoint(x: width, y: zeroY))\n                                \n                                context.stroke(zeroPath, with: .color(Color.gray.opacity(0.5)), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                            }\n                            \n                            // 绘制标记点\n                            for marker in getTimeMarkers() {\n                                if let index = sampledChartData.firstIndex(where: { isSameDay($0.date, marker.date) }) {\n                                    let shouldShow = (marker.type == .global && showRedMarkers) ||\n                                                   (marker.type == .symbol && showOrangeMarkers) ||\n                                                   (marker.type == .earning && showBlueMarkers)\n                                    \n                                    if shouldShow {\n                                        let x = CGFloat(index) * horizontalStep\n                                        let y = priceToY(sampledChartData[index].price)\n                                        \n                                        let markerPath = Path(ellipseIn: CGRect(x: x - 4, y: y - 4, width: 8, height: 8))\n                                        context.fill(markerPath, with: .color(marker.color))\n                                    }\n                                }\n                            }\n                            \n                            // 触摸指示器相关绘制也需要使用新的 y 坐标计算方式\n                            if isMultiTouch {\n                                // 第一个触摸点\n                                if let firstIndex = firstTouchPointIndex, let firstPoint = firstTouchPoint {\n                                    let x = CGFloat(firstIndex) * horizontalStep\n                                    let y = priceToY(firstPoint.price)\n                                    \n                                    // 第一条虚线\n                                    var linePath = Path()\n                                    linePath.move(to: CGPoint(x: x, y: verticalPadding))\n                                    linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                    context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                    \n                                    // 第一个点的高亮显示\n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                                \n                                // 第二个触摸点\n                                if let secondIndex = secondTouchPointIndex, let secondPoint = secondTouchPoint {\n                                    let x = CGFloat(secondIndex) * horizontalStep\n                                    let y = priceToY(secondPoint.price)  // 使用 priceToY 函数\n                                    \n                                    // 第二条虚线\n                                    var linePath = Path()\n                                    linePath.move(to: CGPoint(x: x, y: 0))\n                                    linePath.addLine(to: CGPoint(x: x, y: verticalPadding))\n                                    linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                    context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                    \n                                    // 第二个点的高亮显示\n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                                \n                                // 绘制两点之间的连线\n                                if let firstIndex = firstTouchPointIndex, let secondIndex = secondTouchPointIndex,\n                                   let firstPoint = firstTouchPoint, let secondPoint = secondTouchPoint {\n                                    let x1 = CGFloat(firstIndex) * horizontalStep\n                                    let y1 = priceToY(firstPoint.price)  // 使用 priceToY 函数\n                                    let x2 = CGFloat(secondIndex) * horizontalStep\n                                    let y2 = priceToY(secondPoint.price)  // 使用 priceToY 函数\n                                    \n                                    var connectPath = Path()\n                                    connectPath.move(to: CGPoint(x: x1, y: y1))\n                                    connectPath.addLine(to: CGPoint(x: x2, y: y2))\n                                    \n                                    let lineColor = secondPoint.price >= firstPoint.price ? Color.green : Color.red\n                                    context.stroke(connectPath, with: .color(lineColor), style: StrokeStyle(lineWidth: 1, dash: [2]))\n                                }\n                            } else if let pointIndex = draggedPointIndex {\n                                let x = CGFloat(pointIndex) * horizontalStep\n                                \n                                var linePath = Path()\n                                linePath.move(to: CGPoint(x: x, y: verticalPadding))\n                                linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                \n                                if let point = draggedPoint {\n                                    let y = priceToY(point.price)\n                                    \n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                            }\n                        }\n                        \n                        // 添加以下代码显示气泡\n                        // 修改浮窗显示逻辑，在overlay部分\n                        .overlay(\n                            ZStack {\n                                // 只在不拖动的情况下，且浮窗开关打开时显示气泡\n                                if !isDragging && !isMultiTouch && showBubbles {\n                                    ForEach(bubbleMarkers) { marker in\n                                        // 只显示那些对应颜色点被打开的浮窗\n                                        if (marker.color == .red && showRedMarkers) ||\n                                           (marker.color == .orange && showOrangeMarkers) ||\n                                           (marker.color == .green && showBlueMarkers) {\n                                            BubbleView(\n                                                text: marker.text,\n                                                color: marker.color,\n                                                pointX: marker.position.x,\n                                                pointY: marker.position.y\n                                            )\n                                            .frame(width: marker.size.width)\n                                            .position(x: marker.position.x, y: marker.position.y - 40) // 气泡位于点上方\n                                            .opacity(0.9)\n                                            .transition(.opacity)\n                                            .animation(.easeInOut(duration: 0.3), value: marker.id)\n                                        }\n                                    }\n                                }\n                            }\n                        )\n                        \n                        // X轴标签独立绘制，避免在Canvas内部绘制文本\n                        ForEach(getXAxisTicks(), id: \\.self) { date in\n                            if let index = getIndexForDate(date) {\n                                let x = CGFloat(index) * (geometry.size.width / CGFloat(max(1, sampledChartData.count - 1)))\n                                Text(formatXAxisLabel(date))\n                                    .font(.system(size: 10))\n                                    .foregroundColor(.gray)\n                                    .position(x: x, y: geometry.size.height + 10)\n                            }\n                        }\n                    }\n                    .overlay(\n                        // 2. 优化触摸处理视图\n                        OptimizedTouchHandler(\n                            onSingleTouchChanged: { location in\n                                // 使用防抖动技术减少过于频繁的更新\n                                withAnimation(.easeOut(duration: 0.1)) {\n                                    isMultiTouch = false\n                                    updateDragLocation(location)\n                                }\n                            },\n                            onMultiTouchChanged: { first, second in\n                                withAnimation(.easeOut(duration: 0.1)) {\n                                    isMultiTouch = true\n                                    updateMultiTouchLocations(first, second)\n                                }\n                            },\n                            onTouchesEnded: {\n                                withAnimation(.easeOut(duration: 0.2)) {\n                                    resetTouchStates()\n                                }\n                            }\n                        )\n                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n                    )\n                }\n                .frame(height: 320)\n                .padding(.bottom, 30) // 为 X 轴标签留出空间\n            }\n            \n            // Time range buttons\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 7) {\n                    ForEach([TimeRange.oneMonth, .threeMonths, .sixMonths, .oneYear, .all, .twoYears, .fiveYears, .tenYears], id: \\.title) { range in\n                        Button(action: {\n                            selectedTimeRange = range\n                            loadChartData()\n                        }) {\n                            Text(range.title)\n                                .font(.system(size: 14, weight: selectedTimeRange == range ? .bold : .regular))\n                                .padding(.vertical, 6)\n                                .padding(.horizontal, 12)\n                                .background(\n                                    selectedTimeRange == range ?\n                                        Color.blue.opacity(0.2) :\n                                        Color.clear\n                                )\n                                .foregroundColor(selectedTimeRange == range ? .blue : .primary)\n                                .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n            }\n            \n            .padding(.vertical, 10)\n            \n            // 修改标记点显示控制开关UI，添加新的浮窗开关\n            HStack(spacing: 10) {\n                // 绿色标记点(财报)开关\n                Toggle(isOn: $showBlueMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .green))\n                \n                // 浮窗显示开关\n                Toggle(isOn: $showBubbles) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .purple)) // 使用紫色区分浮窗开关\n                \n                // 红色标记点(全局)开关\n                Toggle(isOn: $showRedMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .red))\n                \n                // 橙色标记点(股票特定)开关\n                Toggle(isOn: $showOrangeMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .orange))\n                \n                .padding(.horizontal)\n            }\n            .padding(.vertical, 30)\n            \n            // Action buttons\n            HStack(spacing: 20) {\n                // Description\n                NavigationLink(destination: {\n                    if let descriptions = getDescriptions(for: symbol) {\n                        DescriptionView(descriptions: descriptions, isDarkMode: isDarkMode)\n                    } else {\n                        DescriptionView(\n                            descriptions: (\"No description available.\", \"\"),\n                            isDarkMode: isDarkMode\n                        )\n                    }\n                }) {\n                    Text(\"Description\")\n                        .font(.system(size: 16, weight: .medium))\n                        .foregroundColor(.blue)\n                }\n                // Compare\n                NavigationLink(destination: CompareView(initialSymbol: symbol)) {\n                    Text(\"Compare\")\n                        .font(.system(size: 16, weight: .medium))\n                        .padding(.leading, 20)\n                        .foregroundColor(.blue)\n                }\n                // Similar\n                NavigationLink(destination: SimilarView(symbol: symbol)) {\n                    Text(\"Similar\")\n                        .font(.system(size: 16, weight: .medium))\n                        .padding(.leading, 20)\n                        .foregroundColor(.blue)\n                }\n            }\n            .padding(.horizontal, 20)\n            .padding(.vertical, 10)\n            Spacer() // 添加Spacer让所有内容靠顶部\n        }\n        .background(backgroundColor.edgesIgnoringSafeArea(.all))\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                HStack(spacing: 8) {\n                    Text(symbol)\n                        .font(.headline)\n                    \n                    if let marketCapItem = dataService.marketCapData[symbol.uppercased()] {\n                        Text(marketCapItem.marketCap)\n                            .font(.subheadline)\n                            .foregroundColor(.secondary)\n                        \n                        if let peRatio = marketCapItem.peRatio {\n                            Text(\"\\(String(format: \"%.2f\", peRatio))\")\n                                .font(.subheadline)\n                                .foregroundColor(.secondary)\n                        }\n                        \n                        // 新增显示 pb 的部分\n                        if let pb = marketCapItem.pb {\n                            Text(\"\\(String(format: \"%.2f\", pb))\")\n                                .font(.subheadline)\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    \n                    if let compareStock = dataService.compareData[symbol.uppercased()] {\n                        Text(compareStock)\n                            .font(.subheadline)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n        }\n        .navigationBarTitleDisplayMode(.inline) // 保持导航栏标题显示为居中\n        .onAppear {\n            loadChartData()\n        }\n    }\n    \n    // MARK: - X轴刻度绘制\n    private func getXAxisTicks() -> [Date] {\n        guard !sampledChartData.isEmpty else { return [] }\n        \n        var ticks: [Date] = []\n        let calendar = Calendar.current\n        let component = selectedTimeRange.xAxisTickInterval()\n        let interval = selectedTimeRange.xAxisTickValue()\n        \n        if let startDate = sampledChartData.first?.date, let endDate = sampledChartData.last?.date {\n            var currentDate = startDate\n            \n            while currentDate <= endDate {\n                ticks.append(currentDate)\n                if let nextDate = calendar.date(byAdding: component, value: interval, to: currentDate) {\n                    currentDate = nextDate\n                } else {\n                    break\n                }\n            }\n            // 如果最后一次生成的日期与 endDate 不在同一天（或同月/同年，取决于 granularity），则补充 endDate\n            if let lastTick = ticks.last, !calendar.isDate(lastTick, equalTo: endDate, toGranularity: tickGranularity()) {\n                ticks.append(endDate)\n            }\n        }\n        \n        return ticks\n    }\n\n    // 根据时间区间确定刻度的比较精度\n    private func tickGranularity() -> Calendar.Component {\n        switch selectedTimeRange {\n        case .oneMonth:\n            return .day\n        case .threeMonths, .sixMonths, .oneYear:\n            return .month\n        case .twoYears, .fiveYears, .tenYears, .all:\n            return .year\n        }\n    }\n    \n    // 计算价格变化百分比\n    private func calculatePriceChangePercentage(from point: DatabaseManager.PriceData) -> Double? {\n        guard let latestPrice = sampledChartData.last?.price else { return nil }\n        return ((latestPrice - point.price) / point.price) * 100.0\n    }\n    \n    // MARK: - Helper Methods\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    private func loadChartData() {\n        isLoading = true\n        DispatchQueue.global(qos: .userInitiated).async {\n            print(\"开始数据库查询...\")\n            let newData = DatabaseManager.shared.fetchHistoricalData(\n                symbol: symbol,\n                tableName: groupName,\n                dateRange: .timeRange(selectedTimeRange)\n            )\n            print(\"查询完成，获取到 \\(newData.count) 条数据\")\n            \n            // 获取财报数据\n            let earnings = DatabaseManager.shared.fetchEarningData(forSymbol: symbol)\n            print(\"获取到 \\(earnings.count) 条财报数据\")\n            \n            // 对长期数据进行采样，提高性能\n            let sampledData = sampleData(newData, rate: selectedTimeRange.samplingRate())\n            print(\"采样后数据点数: \\(sampledData.count)\")\n\n            DispatchQueue.main.async {\n                chartData = newData\n                sampledChartData = sampledData\n                earningData = earnings\n                isLoading = false\n                updateRenderedPoints() // 添加这一行\n                // 重置触摸状态\n                resetTouchStates()\n                // 添加调用更新气泡\n                updateBubbleMarkers()\n                print(\"数据已更新到UI\")\n            }\n        }\n    }\n    \n    // 添加气泡布局计算方法\n    private func updateBubbleMarkers() {\n        let width = UIScreen.main.bounds.width\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        let maxLabelWidth: CGFloat = 120 // 气泡最大宽度\n        \n        var markers: [BubbleMarker] = []\n        \n        // 添加全局标记(红色)\n        for (date, text) in dataService.globalTimeMarkers {\n            if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, date) }) {\n                // 精确匹配的情况\n                let x = CGFloat(exactIndex) * horizontalStep\n                let y = getYForPrice(sampledChartData[exactIndex].price)\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .red,\n                    pointIndex: exactIndex,\n                    date: date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData),\n                      let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                // 最近匹配的情况\n                let x = CGFloat(closestIndex) * horizontalStep\n                let y = getYForPrice(closestPoint.price)\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .red,\n                    pointIndex: closestIndex,\n                    date: closestPoint.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            }\n        }\n        \n        // 添加股票特定标记(橙色)\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, text) in symbolMarkers {\n                if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, date) }) {\n                    // 精确匹配的情况\n                    let x = CGFloat(exactIndex) * horizontalStep\n                    let y = getYForPrice(sampledChartData[exactIndex].price)\n                    \n                    markers.append(BubbleMarker(\n                        text: text,\n                        color: .orange,\n                        pointIndex: exactIndex,\n                        date: date,\n                        position: CGPoint(x: x, y: y),\n                        size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                    ))\n                } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData),\n                          let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                    // 最近匹配的情况\n                    let x = CGFloat(closestIndex) * horizontalStep\n                    let y = getYForPrice(closestPoint.price)\n                    \n                    markers.append(BubbleMarker(\n                        text: text,\n                        color: .orange,\n                        pointIndex: closestIndex,\n                        date: closestPoint.date,\n                        position: CGPoint(x: x, y: y),\n                        size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                    ))\n                }\n            }\n        }\n        \n        // 添加财报标记(绿色)\n        for earning in earningData {\n            if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, earning.date) }) {\n                // 精确匹配的情况\n                let x = CGFloat(exactIndex) * horizontalStep\n                let y = getYForPrice(sampledChartData[exactIndex].price)\n                \n                // 获取当天价格\n                let currentPrice = sampledChartData[exactIndex].price\n                // 获取最新价格\n                let latestPrice = sampledChartData.last?.price ?? currentPrice\n                // 计算价格变化百分比\n                let priceChangePercent = ((latestPrice - currentPrice) / currentPrice) * 100\n                \n                // 格式化日期\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"MM-dd\"\n                let dateStr = dateFormatter.string(from: earning.date)\n                \n                // 构建显示文本\n                let text = \"\\(dateStr) \\(String(format: \"%+.2f%%\", priceChangePercent))\\n\\(String(format: \"%.2f%%\", earning.price))\"\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .green,\n                    pointIndex: exactIndex,\n                    date: earning.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            } else if let closestPoint = findClosestDataPoint(to: earning.date, in: sampledChartData),\n                      let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                // 最近匹配的情况\n                let x = CGFloat(closestIndex) * horizontalStep\n                let y = getYForPrice(closestPoint.price)\n                \n                // 使用最近点的价格计算\n                let currentPrice = closestPoint.price\n                let latestPrice = sampledChartData.last?.price ?? currentPrice\n                let priceChangePercent = ((latestPrice - currentPrice) / currentPrice) * 100\n                \n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"MM-dd\"\n                let dateStr = dateFormatter.string(from: earning.date) // 使用原始财报日期\n                \n                let text = \"\\(dateStr) \\(String(format: \"%+.2f%%\", priceChangePercent))\\n\\(String(format: \"%.2f%%\", earning.price))\"\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .green,\n                    pointIndex: closestIndex,\n                    date: closestPoint.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            }\n        }\n        \n        // 优化气泡布局以减少重叠\n        let optimizedMarkers = optimizeBubbleLayout(markers, canvasWidth: width, canvasHeight: 320)\n        \n        withAnimation {\n            self.bubbleMarkers = optimizedMarkers\n        }\n    }\n    \n    // 计算给定价格对应的Y坐标\n    private func getYForPrice(_ price: Double) -> CGFloat {\n        // 考虑上下边距，这里假设verticalPadding = 20\n        let height: CGFloat = 320 // 与Chart高度保持一致\n        let effectiveHeight = height - (verticalPadding * 2)\n        let normalizedY = CGFloat((price - minPrice) / priceRange)\n        return height - verticalPadding - (normalizedY * effectiveHeight)\n    }\n\n    // 气泡布局优化算法\n    private func optimizeBubbleLayout(_ markers: [BubbleMarker], canvasWidth: CGFloat, canvasHeight: CGFloat) -> [BubbleMarker] {\n        guard !markers.isEmpty else { return [] }\n        \n        var optimizedMarkers = markers\n        \n        // 首先将气泡分为上半部分和下半部分\n        let midY = canvasHeight / 2\n        var upperMarkers = optimizedMarkers.filter { $0.position.y <= midY }\n        var lowerMarkers = optimizedMarkers.filter { $0.position.y > midY }\n        \n        // 按X坐标排序\n        upperMarkers.sort { $0.position.x < $1.position.x }\n        lowerMarkers.sort { $0.position.x < $1.position.x }\n        \n        // 分层排列上半部分气泡\n        var layers: [[BubbleMarker]] = []\n        let bubbleHeight: CGFloat = 50 // 估计气泡高度\n        let bubbleSpacing: CGFloat = 10 // 水平间距\n        \n        for marker in upperMarkers {\n            var placed = false\n            \n            // 尝试放入现有层\n            for i in 0..<layers.count {\n                if layers[i].isEmpty || (marker.position.x - layers[i].last!.position.x > layers[i].last!.size.width / 2 + bubbleSpacing) {\n                    layers[i].append(marker)\n                    placed = true\n                    break\n                }\n            }\n            \n            // 如果无法放入现有层，创建新层\n            if !placed {\n                layers.append([marker])\n            }\n        }\n        \n        // 应用计算后的Y偏移\n        var offsetY: CGFloat = 20 // 顶部起始偏移\n        for (_, layer) in layers.enumerated() {\n            for marker in layer {\n                if let index = optimizedMarkers.firstIndex(where: { $0.id == marker.id }) {\n                    optimizedMarkers[index].position.y = offsetY\n                }\n            }\n            offsetY += bubbleHeight\n        }\n        \n        // 类似处理下半部分气泡\n        layers = []\n        offsetY = canvasHeight - bubbleHeight\n        \n        for marker in lowerMarkers {\n            var placed = false\n            \n            for i in 0..<layers.count {\n                if layers[i].isEmpty || (marker.position.x - layers[i].last!.position.x > layers[i].last!.size.width / 2 + bubbleSpacing) {\n                    layers[i].append(marker)\n                    placed = true\n                    break\n                }\n            }\n            \n            if !placed {\n                layers.append([marker])\n            }\n        }\n        \n        for (_, layer) in layers.enumerated() {\n            for marker in layer {\n                if let index = optimizedMarkers.firstIndex(where: { $0.id == marker.id }) {\n                    optimizedMarkers[index].position.y = offsetY\n                }\n            }\n            offsetY -= bubbleHeight\n        }\n        \n        // 调整X坐标确保气泡不超出边界\n        for i in 0..<optimizedMarkers.count {\n            let halfWidth = optimizedMarkers[i].size.width / 2\n            if optimizedMarkers[i].position.x - halfWidth < 0 {\n                optimizedMarkers[i].position.x = halfWidth\n            } else if optimizedMarkers[i].position.x + halfWidth > canvasWidth {\n                optimizedMarkers[i].position.x = canvasWidth - halfWidth\n            }\n        }\n        \n        return optimizedMarkers\n    }\n    \n    // 重置所有触摸状态\n    private func resetTouchStates() {\n        // 重置单指状态\n        dragLocation = nil\n        draggedPointIndex = nil\n        draggedPoint = nil\n        isDragging = false\n        \n        // 重置双指状态\n        isMultiTouch = false\n        firstTouchLocation = nil\n        secondTouchLocation = nil\n        firstTouchPointIndex = nil\n        secondTouchPointIndex = nil\n        firstTouchPoint = nil\n        secondTouchPoint = nil\n        \n        // 拖动结束后，如果气泡应该显示，则更新气泡\n        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {\n            if !self.isDragging && !self.isMultiTouch {\n                self.shouldUpdateBubbles = true\n                self.updateBubbleMarkers()\n            }\n        }\n    }\n    \n    // 4. 优化数据采样方法\n    private func sampleData(_ data: [DatabaseManager.PriceData], rate: Int) -> [DatabaseManager.PriceData] {\n        guard rate > 1, !data.isEmpty else { return data }\n        \n        // 计算数据的实际时间跨度\n        let calendar = Calendar.current\n        let startDate = data.first?.date ?? Date()\n        let endDate = data.last?.date ?? Date()\n        let components = calendar.dateComponents([.day], from: startDate, to: endDate)\n        let totalDays = components.day ?? 0\n        \n        // 计算数据密度：时间跨度（天）/ 数据点数量\n        let dataDensity = totalDays / data.count\n        \n        // 如果数据密度低（每个数据点间隔超过2天），则不进行采样\n        if dataDensity > 2 {\n            print(\"数据密度低 (每\\(dataDensity)天一个数据点)，不进行采样\")\n            return data\n        }\n        \n        // 根据实际数据跨度动态调整采样率\n        var adjustedRate = rate\n        \n        // 根据实际数据时长调整采样率\n        if selectedTimeRange == .twoYears && totalDays < 365*2 {\n            // 如果选择2Y但实际数据少于2年，使用1Y的采样率(或不采样)\n            adjustedRate = totalDays < 365 ? 1 : selectedTimeRange.samplingRate() / 2\n        } else if selectedTimeRange == .fiveYears && totalDays < 365*5 {\n            // 如果选择5Y但实际数据少于5年，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else {\n                adjustedRate = max(2, selectedTimeRange.samplingRate() / 2)\n            }\n        } else if selectedTimeRange == .tenYears && totalDays < 365*10 {\n            // 如果选择10Y但实际数据少于10年，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else if totalDays < 365*5 {\n                adjustedRate = TimeRange.fiveYears.samplingRate()\n            } else {\n                adjustedRate = max(5, selectedTimeRange.samplingRate() / 2)\n            }\n        } else if selectedTimeRange == .all && totalDays < 365*15 {\n            // 如果选择All但实际数据少于预期，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else if totalDays < 365*5 {\n                adjustedRate = TimeRange.fiveYears.samplingRate()\n            } else if totalDays < 365*10 {\n                adjustedRate = TimeRange.tenYears.samplingRate()\n            } else {\n                adjustedRate = max(10, selectedTimeRange.samplingRate() / 2)\n            }\n        }\n        \n        // 如果调整后的采样率为1，则直接返回原始数据\n        if adjustedRate <= 1 {\n            return data\n        }\n\n        var result: [DatabaseManager.PriceData] = []\n        \n        // 始终包含第一个点\n        if let first = data.first {\n            result.append(first)\n        }\n        \n        // 获取所有特殊事件点的日期\n        var specialDates: [Date] = []\n        \n        // 添加全局时间标记（红点）\n        for (date, _) in dataService.globalTimeMarkers {\n            if data.contains(where: { isSameDay($0.date, date) }) {\n                specialDates.append(date)\n            }\n        }\n        \n        // 添加特定股票的时间标记（橙点）\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, _) in symbolMarkers {\n                if data.contains(where: { isSameDay($0.date, date) }) {\n                    specialDates.append(date)\n                }\n            }\n        }\n        \n        // 添加财报数据标记（蓝点）\n        for earning in earningData {\n            if data.contains(where: { isSameDay($0.date, earning.date) }) {\n                specialDates.append(earning.date)\n            }\n        }\n        \n        // 使用更有效的价格变化采样策略，这种方法会保留价格变化明显的点，而不仅仅是等间隔采样\n        let priceChangeThreshold = 0.005 // 0.5%的价格变化阈值\n        \n        var lastIncludedIndex = 0\n        for i in stride(from: adjustedRate, to: data.count - 1, by: adjustedRate) {\n            let lastIncludedPrice = data[lastIncludedIndex].price\n            let currentPrice = data[i].price\n            \n            // 检查当前日期是否是特殊事件点\n            let isSpecialDate = specialDates.contains(where: { isSameDay(data[i].date, $0) })\n            \n            // 如果是特殊事件点，或价格变化超过阈值，或者按采样率正常添加\n            if isSpecialDate || abs((currentPrice - lastIncludedPrice) / lastIncludedPrice) > priceChangeThreshold {\n                result.append(data[i])\n                lastIncludedIndex = i\n            } else if i % (adjustedRate * 2) == 0 {\n                // 仍然保持一定的时间间隔采样\n                result.append(data[i])\n                lastIncludedIndex = i\n            }\n        }\n        \n        // 添加最后一个点\n        if let last = data.last, result.last?.id != last.id {\n            result.append(last)\n        }\n        \n        // 在 sampleData 方法中的特殊点处理部分\n        for date in specialDates {\n            if !result.contains(where: { isSameDay($0.date, date) }) {\n                if let exactMatch = data.first(where: { isSameDay($0.date, date) }) {\n                    // 有精确匹配的情况\n                    result.append(exactMatch)\n                } else if let closestPoint = findClosestDataPoint(to: date, in: data) {\n                    // 使用最近的数据点\n                    result.append(closestPoint)\n                }\n            }\n        }\n        \n        // 按日期排序结果\n        result.sort { $0.date < $1.date }\n        \n        print(\"原始数据点: \\(data.count), 采样后数据点: \\(result.count), 采样率: \\(adjustedRate)\")\n        return result\n    }\n    \n    // 从触摸位置计算数据索引\n    private func getIndexFromLocation(_ location: CGPoint) -> Int {\n        guard !sampledChartData.isEmpty else { return 0 }\n        \n        let width = UIScreen.main.bounds.width\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        \n        // 计算相对位置\n        let relativeX = location.x\n        \n        // 特殊处理最后一个点的情况\n        if relativeX >= width - horizontalStep {\n            return sampledChartData.count - 1\n        }\n        \n        // 其他位置的正常计算\n        let index = Int(round(relativeX / horizontalStep))\n        return min(sampledChartData.count - 1, max(0, index))\n    }\n    \n    // 更新单指拖动状态\n    private func updateDragLocation(_ location: CGPoint) {\n        guard !sampledChartData.isEmpty else { return }\n        \n        let index = getIndexFromLocation(location)\n        \n        dragLocation = location\n        draggedPointIndex = index\n        draggedPoint = sampledChartData[safe: index]\n        isDragging = true\n    }\n    \n    // 更新双指触摸状态\n    private func updateMultiTouchLocations(_ first: CGPoint, _ second: CGPoint) {\n        guard !sampledChartData.isEmpty else { return }\n        \n        let firstIndex = getIndexFromLocation(first)\n        let secondIndex = getIndexFromLocation(second)\n        \n        firstTouchLocation = first\n        secondTouchLocation = second\n        firstTouchPointIndex = firstIndex\n        secondTouchPointIndex = secondIndex\n        firstTouchPoint = sampledChartData[safe: firstIndex]\n        secondTouchPoint = sampledChartData[safe: secondIndex]\n    }\n    \n    // 修改TimeMarker结构\n    private enum MarkerType {\n        case global // 红点\n        case symbol // 橙色点\n        case earning // 蓝点\n    }\n\n    private struct TimeMarker: Identifiable {\n        let id = UUID()\n        let date: Date\n        let text: String\n        let type: MarkerType\n        \n        var color: Color {\n            switch type {\n            case .global: return .red\n            case .symbol: return .orange\n            case .earning: return .green\n            }\n        }\n    }\n    \n    private func getTimeMarkers() -> [TimeMarker] {\n        var markers: [TimeMarker] = []\n        \n        // 处理全局时间标记\n        for (date, text) in dataService.globalTimeMarkers {\n            if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, date) }) {\n                // 情况1：有准确匹配\n                markers.append(TimeMarker(date: exactMatch.date, text: text, type: .global))\n            } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData) {\n                // 情况2和3：使用最近的数据点\n                markers.append(TimeMarker(date: closestPoint.date, text: text, type: .global))\n            }\n        }\n        \n        // 处理特定股票的时间标记\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, text) in symbolMarkers {\n                if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, date) }) {\n                    markers.append(TimeMarker(date: exactMatch.date, text: text, type: .symbol))\n                } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData) {\n                    markers.append(TimeMarker(date: closestPoint.date, text: text, type: .symbol))\n                }\n            }\n        }\n        \n        // 处理财报数据标记\n        for earning in earningData {\n            if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, earning.date) }) {\n                let earningText = String(format: \"%.2f\", earning.price)\n                markers.append(TimeMarker(date: exactMatch.date, text: earningText, type: .earning))\n            } else if let closestPoint = findClosestDataPoint(to: earning.date, in: sampledChartData) {\n                let earningText = String(format: \"%.2f\", earning.price)\n                markers.append(TimeMarker(date: closestPoint.date, text: earningText, type: .earning))\n            }\n        }\n        \n        return markers\n    }\n    \n    private func getMarkerText(for date: Date) -> String? {\n        // 检查全局标记\n        if showRedMarkers {\n            if let text = dataService.globalTimeMarkers.first(where: { isSameDay($0.key, date) })?.value {\n                return text\n            }\n            // 检查是否是最近匹配的点\n            if let (_, text) = dataService.globalTimeMarkers.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.key, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return text\n            }\n        }\n        \n        // 检查特定股票标记\n        if showOrangeMarkers, let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            if let text = symbolMarkers.first(where: { isSameDay($0.key, date) })?.value {\n                return text\n            }\n            // 检查是否是最近匹配的点\n            if let (_, text) = symbolMarkers.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.key, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return text\n            }\n        }\n        \n        // 检查财报数据标记\n        if showBlueMarkers {\n            if let earningPoint = earningData.first(where: { isSameDay($0.date, date) }) {\n                return String(format: \"昨日财报\\n%.2f%%\", earningPoint.price)\n            }\n            // 检查是否是最近匹配的点\n            if let earningPoint = earningData.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.date, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return String(format: \"昨日财报\\n%.2f%%\", earningPoint.price)\n            }\n        }\n        \n        return nil\n    }\n    \n    // 格式化方法\n    private func formatDate(_ date: Date) -> String {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd\"\n        return formatter.string(from: date)\n    }\n    \n    private func formatPrice(_ price: Double) -> String {\n        return String(format: \"%.2f\", price)\n    }\n    \n    private func formatPercentage(_ value: Double) -> String {\n        return String(format: \"%.2f%%\", value)\n    }\n    \n    private func formatXAxisLabel(_ date: Date) -> String {\n        let formatter = DateFormatter()\n        \n        switch selectedTimeRange {\n        case .oneMonth:\n            formatter.dateFormat = \"dd\"\n        case .threeMonths, .sixMonths, .oneYear:\n            formatter.dateFormat = \"MMM\"\n        case .twoYears, .fiveYears, .tenYears, .all:\n            formatter.dateFormat = \"yyyy\"\n        }\n        \n        return formatter.string(from: date)\n    }\n    \n    // 日期比较方法\n    private func isSameDay(_ date1: Date, _ date2: Date) -> Bool {\n        let calendar = Calendar.current\n        return calendar.isDate(date1, inSameDayAs: date2)\n    }\n    \n    private func getIndexForDate(_ date: Date) -> Int? {\n        return sampledChartData.firstIndex { priceData in\n            let calendar = Calendar.current\n            \n            switch selectedTimeRange {\n            case .oneMonth:\n                return calendar.isDate(priceData.date, inSameDayAs: date)\n            case .threeMonths, .sixMonths, .oneYear:\n                return calendar.isDate(priceData.date, equalTo: date, toGranularity: .month)\n            case .twoYears, .fiveYears, .tenYears, .all:\n                return calendar.isDate(priceData.date, equalTo: date, toGranularity: .year)\n            }\n        }\n    }\n}\n\n// MARK: - 多触控处理视图\n// 3. 改进的多触控处理视图\n// MARK: - 多触控处理视图\nstruct OptimizedTouchHandler: UIViewRepresentable {\n    var onSingleTouchChanged: (CGPoint) -> Void\n    var onMultiTouchChanged: (CGPoint, CGPoint) -> Void\n    var onTouchesEnded: () -> Void\n    \n    func makeUIView(context: Context) -> UIView {\n        let view = OptimizedMultitouchView()\n        view.onSingleTouchChanged = onSingleTouchChanged\n        view.onMultiTouchChanged = onMultiTouchChanged\n        view.onTouchesEnded = onTouchesEnded\n        view.backgroundColor = .clear\n        return view\n    }\n    \n    func updateUIView(_ uiView: UIView, context: Context) {\n        // 不需要更新\n    }\n    \n    class OptimizedMultitouchView: UIView {\n        var onSingleTouchChanged: ((CGPoint) -> Void)?\n        var onMultiTouchChanged: ((CGPoint, CGPoint) -> Void)?\n        var onTouchesEnded: (() -> Void)?\n        \n        private var activeTouches: [UITouch: CGPoint] = [:]\n        private var lastUpdateTime: TimeInterval = 0\n        private let throttleInterval: TimeInterval = 0.016 // 约60fps\n        \n        override init(frame: CGRect) {\n            super.init(frame: frame)\n            isMultipleTouchEnabled = true\n            isUserInteractionEnabled = true\n        }\n        \n        required init?(coder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n        \n        override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n            for touch in touches {\n                activeTouches[touch] = touch.location(in: self)\n            }\n            updateTouches(force: true)\n        }\n        \n        override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {\n            // 更新移动的触摸点\n            for touch in touches {\n                activeTouches[touch] = touch.location(in: self)\n            }\n            \n            // 应用节流控制\n            let currentTime = CACurrentMediaTime()\n            if currentTime - lastUpdateTime > throttleInterval {\n                updateTouches()\n                lastUpdateTime = currentTime\n            }\n        }\n        \n        override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {\n            // 移除结束的触摸点\n            for touch in touches {\n                activeTouches.removeValue(forKey: touch)\n            }\n            \n            if activeTouches.isEmpty {\n                onTouchesEnded?()\n            } else {\n                updateTouches(force: true)\n            }\n        }\n        \n        override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n            activeTouches.removeAll()\n            onTouchesEnded?()\n        }\n        \n        private func updateTouches(force: Bool = false) {\n            let touchCount = activeTouches.count\n            \n            if touchCount >= 2 {\n                // 双指或多指触摸，取前两个触摸点\n                let touchPoints = Array(activeTouches.values)\n                onMultiTouchChanged?(touchPoints[0], touchPoints[1])\n            } else if touchCount == 1 {\n                // 单指触摸\n                if let location = activeTouches.values.first {\n                    onSingleTouchChanged?(location)\n                }\n            }\n        }\n    }\n}\n\n// MARK: - 数组安全索引扩展\nextension Array {\n    subscript(safe index: Int) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，这两个栏目的样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description里的tags，symbol可以点击进入chartview界面，每个分组里面有超过5个symbol时才会折叠等等规则都参考earningrelease即可。该怎么写代码实现？"
    },
    {
        "id": "2025-06-10 14:50:25",
        "project_name": "MNSPP",
        "project_desc": "我想在我已有的sqlite3数据库/Users/yanzhang/Documents/Database/Finance.db中新建一个名为MNSPP的表",
        "files": [
            {
                "path": "/Users/yanzhang/Downloads/marketcap_pe.txt",
                "filename": "marketcap_pe.txt",
                "content": "LIN: 222520000000.0, 34.3, 5.85\nBHP: 126290000000.0, 11.06, 2.76\nRIO: 95890000000.0, 8.35, 1.74\nSCCO: 76900000000.0, 21.3, 8.04\nSHW: 89580000000.0, 33.79, 21.69\nFCX: 59570000000.0, 34.0, 3.37\nECL: 75710000000.0, 36.33, 8.53\nCRH: 62410000000.0, 19.65, 2.96\nAPD: 62260000000.0, 40.31, 4.23\nVALE: 40480000000.0, 6.88, 1.15\nNEM: 58280000000.0, 11.93, 1.86\nNUE: 28050000000.0, 21.44, 1.4\nDOW: 20180000000.0, 71.38, 1.2\nCTVA: 48870000000.0, 43.16, 2.01\nMLM: 33240000000.000004, 31.61, 3.66\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/Shares.txt",
                "filename": "Shares.txt",
                "content": "LIN: 470720000, 5.85\nBHP: 2540000000, 2.76\nRIO: 1620000000, 1.74\nSCCO: 804070000, 8.04\nSHW: 250600000, 21.69\nFCX: 1440000000, 3.37\nECL: 283510000, 8.53\nCRH: 674380000, 2.96\nAPD: 222540000, 4.23\nVALE: 4269999999, 1.15\nNEM: 1110000000, 1.86\nNUE: 230750000, 1.4\nDOW: 706860000, 1.2\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/symbol_names.txt",
                "filename": "symbol_names.txt",
                "content": "LIN: Linde\nBHP: BHP\nRIO: Rio Tinto\nSCCO: Southern Copper\nSHW: The Sherwin-Williams\nFCX: Freeport-McMoRan\nECL: Ecolab\nCRH: CRH\nAPD: Air Products Chemicals\nVALE: Vale\nNEM: Newmont\nNUE: Nucor\nDOW: Dow\nCTVA: Corteva\nMLM: Martin Marietta Materials\n"
            }
        ],
        "final_prompt": "表结构大致如下“CREATE TABLE  IF NOT EXISTS  MNSPP (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    symbol TEXT,\n    name TEXT,\n    shares REAL,\n    marketcap REAL,\n    pe_ratio REAL,\n    pb REAL,\n);\n”，表里的内容来源如下：读取symbol_names.txt文件，冒号前面就是symbol，冒号后面就是name，然后读取shares.txt，紧挨着冒号后面的第一串数字就是shares，最后读取marketcap_pe.txt文件，紧挨着冒号的第一串数字就是marketcap，第二串（以逗号隔开）就是pe，第三串就是pb。我需要你帮我写程序按照我的要求把这些数据写入数据库表中，我该怎么做？"
    },
    {
        "id": "2025-06-10 15:34:01",
        "project_name": "marketcap",
        "project_desc": "我有一个用applescript和Python联合开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py",
                "filename": "Stock_Chart.py",
                "content": "import re\nimport sys\nimport json\nimport subprocess\nimport tkinter as tk\nimport pyperclip\nfrom functools import lru_cache\nimport concurrent.futures\n\nsys.path.append('/Users/yanzhang/Documents/Financial_System/Query')\nfrom Chart_input import plot_financial_data\n\n@lru_cache(maxsize=None)\ndef lazy_load_data(path, data_type='json'):\n    with open(path, 'r', encoding='utf-8') as file:\n        if data_type == 'json':\n            return json.load(file)\n        else:\n            data = {}\n            for line in file:\n                line = line.strip()\n                if not line:\n                    continue  # 忽略空行\n                key, value = map(str.strip, line.split(':', 1))\n                if data_type == 'marketcap_pe':\n                    parts = [p.strip() for p in value.split(',')]\n                    if len(parts) >= 2:\n                        # 忽略其他额外的数据项\n                        marketcap, pe, *_ = parts\n                        data[key.strip()] = (float(marketcap), pe)\n                    else:\n                        raise ValueError(f\"数据格式错误：{line}\")\n                elif \"shares.txt\" in path.lower():\n                    # 当处理 shares.txt 文件时，读取多个字段\n                    parts = [p.strip() for p in value.split(',')]\n                    if len(parts) == 2:\n                        try:\n                            share_val = int(parts[0])\n                        except ValueError:\n                            share_val = parts[0]\n                        pb_text = parts[1]\n                        data[key.strip()] = (share_val, pb_text)\n                    else:\n                        # 只有一个数字时，设置 pb_text 默认值\n                        data[key.strip()] = (int(parts[0]), \"--\")\n                else:\n                    data[key.strip()] = value\n            return data\n\ndef close_app(root):\n    if root:\n        root.quit()\n        root.destroy()\n\ndef display_dialog(message):\n    # AppleScript代码模板\n    applescript_code = f'display dialog \"{message}\" buttons {{\"OK\"}} default button \"OK\"'\n    \n    # 使用subprocess调用osascript\n    process = subprocess.run(['osascript', '-e', applescript_code], check=True)\n\ndef match_and_plot(input_trimmed, sector_data, compare_data, shares, marketcap_pe_data, json_data, db_path):\n    search_keys = [input_trimmed, input_trimmed.capitalize(), input_trimmed.upper()]\n    for input_variant in search_keys:\n        for sector, names in sector_data.items():\n            if input_variant in names:\n                plot_financial_data(\n                    db_path, sector, input_variant,\n                    compare_data.get(input_variant, \"N/A\"),\n                    shares.get(input_variant, \"N/A\"),\n                    *marketcap_pe_data.get(input_variant, (None, 'N/A')),\n                    json_data, '10Y', True)\n                return True\n    input_lower = input_trimmed.lower()\n    for sector, names in sector_data.items():\n        for name in names:\n            if re.search(input_lower, name.lower()):\n                plot_financial_data(\n                    db_path, sector, name,\n                    compare_data.get(name, \"N/A\"),\n                    shares.get(name, \"N/A\"),\n                    *marketcap_pe_data.get(name, (None, 'N/A')),\n                    json_data, '10Y', True)\n                return True\n    return False\n\ndef load_data_parallel():\n    data_sources = [\n        ('/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json', 'json'),\n        ('/Users/yanzhang/Documents/News/backup/Compare_All.txt', 'compare'),\n        ('/Users/yanzhang/Documents/News/backup/Shares.txt', 'compare'),\n        ('/Users/yanzhang/Documents/News/backup/marketcap_pe.txt', 'marketcap_pe'),\n        ('/Users/yanzhang/Documents/Financial_System/Modules/description.json', 'json')\n    ]\n    \n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        future_to_data = {executor.submit(lazy_load_data, path, data_type): (path, data_type) for path, data_type in data_sources}\n        results = {}\n        for future in concurrent.futures.as_completed(future_to_data):\n            path, data_type = future_to_data[future]\n            try:\n                data = future.result()\n                results[path] = data\n            except Exception as exc:\n                print(f'{path} generated an exception: {exc}')\n    \n    return results\n\ndef input_mapping(root, data, db_path, user_input):\n    if not user_input:\n        print(\"未输入任何内容，程序即将退出。\")\n        close_app(root)\n        return\n\n    input_trimmed = user_input.strip()\n    if match_and_plot(input_trimmed, data['/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json'],\n                      data['/Users/yanzhang/Documents/News/backup/Compare_All.txt'],\n                      data['/Users/yanzhang/Documents/News/backup/Shares.txt'],\n                      data['/Users/yanzhang/Documents/News/backup/marketcap_pe.txt'],\n                      data['/Users/yanzhang/Documents/Financial_System/Modules/description.json'],\n                      db_path):\n        close_app(root)\n    else:\n        # 把没找到的符号拷贝到剪贴板，然后用 show_description.py 的 paste 模式来弹 description 界面\n        pyperclip.copy(input_trimmed)\n        subprocess.run([\n            sys.executable,\n            '/Users/yanzhang/Documents/Financial_System/Query/show_description.py',\n            'paste'\n        ], check=True)\n        close_app(root)\n\ndef get_user_input_custom(root, prompt):\n    input_dialog = tk.Toplevel(root)\n    input_dialog.title(prompt)\n    input_dialog.geometry('280x90')\n\n    screen_width = input_dialog.winfo_screenwidth()\n    screen_height = input_dialog.winfo_screenheight()\n    position_right = int(screen_width / 2 - 140)\n    position_down = int(screen_height / 2 - 140) - 100\n    input_dialog.geometry(f\"280x90+{position_right}+{position_down}\")\n\n    entry = tk.Entry(input_dialog, width=20, font=('Helvetica', 18))\n    entry.pack(pady=20, ipady=10)\n    entry.focus_set()\n\n    try:\n        entry.insert(0, root.clipboard_get())\n    except tk.TclError:\n        pass\n    entry.select_range(0, tk.END)\n\n    user_input = None\n\n    def on_submit():\n        nonlocal user_input\n        user_input = entry.get()\n        input_dialog.destroy()\n\n    entry.bind('<Return>', lambda event: on_submit())\n    input_dialog.bind('<Escape>', lambda event: input_dialog.destroy())\n    input_dialog.wait_window(input_dialog)\n    return user_input\n\nif __name__ == '__main__':\n    root = tk.Tk()\n    root.withdraw()\n    root.bind('<Escape>', lambda event: close_app(root))\n\n    data = load_data_parallel()\n    db_path = '/Users/yanzhang/Documents/Database/Finance.db'\n\n    if len(sys.argv) > 1:\n        arg = sys.argv[1]\n        if arg == \"paste\":\n            clipboard_content = pyperclip.paste()\n            input_mapping(root, data, db_path, clipboard_content)\n        elif arg == \"input\":\n            user_input = get_user_input_custom(root, \"请输入\")\n            input_mapping(root, data, db_path, user_input)\n    else:\n        print(\"请提供参数 input 或 paste\")\n        sys.exit(1)\n\n    root.mainloop()"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Query/Chart_input.py",
                "filename": "Chart_input.py",
                "content": "# o1优化后代码\nimport re\nimport sqlite3\nimport subprocess\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RadioButtons\nimport matplotlib\nimport tkinter as tk\nfrom tkinter import scrolledtext, font as tkFont\nfrom functools import lru_cache\nfrom scipy.interpolate import interp1d\n\n@lru_cache(maxsize=None)\ndef fetch_data(db_path, table_name, name):\n    \"\"\"\n    从数据库中获取指定名称的日期、价格、成交量数据。\n    如果表中存在volume字段，则一起返回，否则只返回date和price。\n    \"\"\"\n    with sqlite3.connect(db_path) as conn:\n        cursor = conn.cursor()\n        try:\n            # 为查询字段添加索引\n            cursor.execute(f\"CREATE INDEX IF NOT EXISTS idx_name ON {table_name} (name);\")\n            query = f\"SELECT date, price, volume FROM {table_name} WHERE name = ? ORDER BY date;\"\n            result = cursor.execute(query, (name,)).fetchall()\n            if not result:\n                raise ValueError(\"没有查询到可用数据\")\n            return result\n        except sqlite3.OperationalError:\n            query = f\"SELECT date, price FROM {table_name} WHERE name = ? ORDER BY date;\"\n            result = cursor.execute(query, (name,)).fetchall()\n            if not result:\n                raise ValueError(\"没有查询到可用数据\")\n            return result\n\ndef smooth_curve(dates, prices, num_points=500):\n    \"\"\"\n    通过插值生成更多的点来让曲线更平滑。\n    如果数据点少于四个，使用线性插值；否则使用三次插值。\n    \"\"\"\n    date_nums = matplotlib.dates.date2num(dates)\n    if len(dates) < 4:\n        interp_func = interp1d(date_nums, prices, kind='linear')\n    else:\n        interp_func = interp1d(date_nums, prices, kind='cubic')\n\n    new_date_nums = np.linspace(min(date_nums), max(date_nums), num_points)\n    new_prices = interp_func(new_date_nums)\n    new_dates = matplotlib.dates.num2date(new_date_nums)\n\n    return new_dates, new_prices\n\ndef process_data(data):\n    \"\"\"\n    将数据库返回的数据处理为日期、价格、成交量三个列表。\n    如果数据为空，则抛出异常。\n    \"\"\"\n    if not data:\n        raise ValueError(\"没有可供处理的数据\")\n        \n    dates, prices, volumes = [], [], []\n    for row in data:\n        date = datetime.strptime(row[0], \"%Y-%m-%d\")\n        price = float(row[1]) if row[1] is not None else None\n        volume = int(row[2]) if len(row) > 2 and row[2] is not None else None\n        if price is not None:\n            dates.append(date)\n            prices.append(price)\n            volumes.append(volume)\n    \n    return dates, prices, volumes\n\ndef display_dialog(message):\n    \"\"\"\n    使用 AppleScript 在 macOS 上弹出提示对话框。\n    \"\"\"\n    applescript_code = f'display dialog \"{message}\" buttons {{\"OK\"}} default button \"OK\"'\n    subprocess.run(['osascript', '-e', applescript_code], check=True)\n\ndef update_plot(line1, fill, line2, dates, prices, volumes, ax1, ax2, show_volume):\n    \"\"\"\n    根据筛选后的数据更新图表。\n    \"\"\"\n    # 处理 prices 和 dates 可能为空的情况\n    if not dates or not prices:\n        line1.set_data([], [])\n        if fill:\n            fill.remove() # 确保移除旧的fill对象\n            fill = None   # 将fill置为None，因为没有新的fill被创建\n        if volumes: # 假设volumes与dates/prices长度一致或已处理\n            line2.set_data([], [])\n        \n        # 设置默认的轴范围当没有数据时\n        ax1.set_xlim(datetime.now() - timedelta(days=1), datetime.now())\n        ax1.set_ylim(0, 1) # 或者其他合适的默认范围\n        if show_volume:\n            ax2.set_ylim(0, 1)\n        line2.set_visible(show_volume and bool(volumes)) # 仅当有数据时显示\n        plt.draw()\n        return fill # 返回 None 因为 fill 被移除了\n\n    # --- 数据存在，继续绘图 ---\n    line1.set_data(dates, prices)\n    if fill:\n        fill.remove()\n    \n    # 添加edgecolor='none'或linewidth=0参数来移除边缘线\n    fill = ax1.fill_between(dates, prices, color='lightblue', alpha=0.3, edgecolor='none')\n    \n    if volumes: # 确保 volumes 列表不为空\n        line2.set_data(dates, volumes) # 假设 dates 和 volumes 长度匹配\n    else: # 如果 volumes 为空或None\n        line2.set_data([],[])\n\n    # X轴范围设置\n    date_min_val = np.min(dates)\n    date_max_val = np.max(dates)\n    if date_min_val == date_max_val:\n        # 为单个日期点扩展X轴范围\n        ax1.set_xlim(date_min_val - timedelta(days=1), date_max_val + timedelta(days=1))\n    else:\n        date_range = date_max_val - date_min_val\n        right_margin = date_range * 0.01  # 添加1%的右侧余量\n        ax1.set_xlim(date_min_val, date_max_val + right_margin)\n    \n    # Y轴价格范围设置\n    min_p = np.min(prices)\n    max_p = np.max(prices)\n    if min_p == max_p:\n        buffer = abs(min_p * 0.1) if min_p != 0 else 0.1\n        buffer = max(buffer, 1e-6) # 确保buffer有一个最小正值\n        min_p -= buffer\n        max_p += buffer\n        if min_p >= max_p: # 进一步安全检查\n            max_p = min_p + buffer # 确保 max_p > min_p\n    ax1.set_ylim(min_p, max_p)\n    \n    # Y轴成交量范围设置 (ax2)\n    if show_volume:\n        if volumes:\n            valid_volumes = [v for v in volumes if v is not None]\n            if valid_volumes:\n                min_v = np.min(valid_volumes) # 通常成交量不为负，所以min_v可能是0\n                max_v = np.max(valid_volumes)\n                if max_v == min_v : # 所有成交量相同或只有一个点\n                     ax2.set_ylim(0, max_v + 1 if max_v is not None else 1) # 从0开始，给最大值加一点buffer\n                else:\n                     ax2.set_ylim(0, max_v) # 成交量Y轴通常从0开始\n            else: # valid_volumes 为空\n                ax2.set_ylim(0, 1) # 默认范围\n        else: # volumes 列表本身为空或None\n            ax2.set_ylim(0, 1)\n            \n    line2.set_visible(show_volume and bool(volumes)) # bool(volumes) 检查volumes是否非空\n    plt.draw()\n    return fill\n\ndef plot_financial_data(db_path, table_name, name, compare, share, marketcap, pe, json_data,\n                        default_time_range=\"1Y\", panel=\"False\"):\n    \"\"\"\n    主函数，绘制股票或ETF的时间序列图表。支持成交量、标签说明、信息弹窗、区间切换等功能。\n    按键说明：\n    - v：显示或隐藏成交量\n    - 1~9：快速切换不同时间区间\n    - `：弹出信息对话框\n    - d：查询数据库并弹窗显示\n    - c：切换显示或隐藏标记点（红色全局点)\n    - a：切换显示或隐藏收益公告日期点（白色点）\n    - x：切换显示或隐藏标记点（橙色特定点)\n    - e：启动财报数据编辑程序\n    - n：启动财报数据输入程序\n    - t：启动标签Tags编辑程序\n    - w：启动新增Event程序\n    - 方向键上下：在不同时间区间间移动\n    - ESC：关闭所有图表，并在panel为True时退出系统\n    \"\"\"\n    plt.close('all')  # 关闭所有图表\n    matplotlib.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\n    # 如果传入的 share 是一个元组，则拆分为 share_val 与 pb_text\n    if isinstance(share, tuple):\n        share_val, pb_text = share\n    else:\n        share_val = share\n        pb_text = \"\"\n\n    show_volume = False\n    mouse_pressed = False\n    initial_price = None\n    initial_date = None\n    fill = None\n    show_global_markers = False  # 红色点默认不显示\n    show_specific_markers = True  # 橙色点默认显示\n    show_earning_markers = True  # 默认不显示收益点\n    show_all_annotations = True  # 新增：浮窗默认显示\n\n    try:\n        data = fetch_data(db_path, table_name, name)\n    except ValueError as e:\n        display_dialog(f\"{e}\")\n        return\n\n    try:\n        dates, prices, volumes = process_data(data)\n    except ValueError as e:\n        display_dialog(f\"{e}\")\n        return\n\n    if not dates or not prices:\n        display_dialog(\"没有有效的数据来绘制图表。\")\n        return\n\n    # 使用插值函数生成更多的平滑数据点\n    smooth_dates, smooth_prices = smooth_curve(dates, prices)\n\n    #这里可以修改整个表格的大小\n    fig, ax1 = plt.subplots(figsize=(15, 8))\n    \n    # 这里调整图表居上边沿的距离\n    fig.subplots_adjust(left=0.05, bottom=0.1, right=0.83, top=0.8)\n    ax2 = ax1.twinx()\n\n    # 隐藏ax2的轴线和刻度\n    ax2.axis('off')\n\n    fig.patch.set_facecolor('black')\n    ax1.set_facecolor('black')\n    ax1.tick_params(axis='x', colors='white')\n    ax1.tick_params(axis='y', colors='white')\n    ax2.tick_params(axis='y', colors='white')\n\n    highlight_point = ax1.scatter([], [], s=100, color='cyan', zorder=5)\n    \n    # 绘制插值后的平滑曲线\n    line1, = ax1.plot(\n        smooth_dates,\n        smooth_prices,\n        marker='',\n        linestyle='-',\n        linewidth=2,\n        color='cyan',\n        alpha=0.7,\n        label='Price'\n    )\n    # 在每个原始价格点处添加一个小小的白色散点，并保存散点对象引用\n    small_dot_scatter = ax1.scatter(dates, prices, s=5, color='white', zorder=1)\n    \n    line2, = ax2.plot(\n        dates,\n        volumes,\n        marker='o',\n        markersize=2,\n        linestyle='-',\n        linewidth=2,\n        color='magenta',\n        alpha=0.7,\n        label='Volume'\n    )\n    fill = ax1.fill_between(dates, prices, color='cyan', alpha=0.2)\n    line2.set_visible(show_volume)\n\n    # 处理全局标记点和特定股票标记点\n    global_markers = {}\n    specific_markers = {}\n    earning_markers = {}  # 新增：收益公告标记点\n    # 保存所有注释的引用\n    all_annotations = []\n    \n    # 获取全局标记点\n    if 'global' in json_data:\n        for date_str, text in json_data['global'].items():\n            try:\n                marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                global_markers[marker_date] = text\n            except ValueError:\n                print(f\"无法解析全局标记日期: {date_str}\")\n    \n    # 获取特定股票的标记点\n    found_item = None\n    for source in ['stocks', 'etfs']:\n        for item in json_data.get(source, []):\n            if item['symbol'] == name and 'description3' in item:\n                found_item = item\n                for date_obj in item.get('description3', []):\n                    for date_str, text in date_obj.items():\n                        try:\n                            marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                            specific_markers[marker_date] = text\n                        except ValueError:\n                            print(f\"无法解析特定标记日期: {date_str}\")\n                break\n        if found_item:\n            break\n    \n    # 修改获取收益公告日期的部分\n    try:\n        with sqlite3.connect(db_path) as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT date, price FROM Earning WHERE name = ? ORDER BY date\", (name,))\n            for date_str, price_change in cursor.fetchall():\n                try:\n                    marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                    # 查找与 marker_date 最接近的日期（假设主数据的 dates 列表已经生成）\n                    closest_date = min(dates, key=lambda d: abs(d - marker_date))\n                    index = dates.index(closest_date)\n                    marker_price = prices[index]  # 获取该日期对应的价格\n                    latest_price = prices[-1]     # 最新一天的价格\n\n                    # 计算当天价格与最新价格之间的百分比差值，注意防止除以0\n                    if marker_price and marker_price != 0:\n                        diff_percent = ((latest_price - marker_price) / marker_price) * 100\n                    else:\n                        diff_percent = 0\n\n                    # 拼接提示文本，先显示最新价差，再显示昨日财报数据\n                    earning_markers[marker_date] = f\"最新价差: {diff_percent:.2f}%\\n昨日财报: {price_change}%\"\n                except ValueError:\n                    print(f\"无法解析收益公告日期: {date_str}\")\n    except sqlite3.OperationalError as e:\n        print(f\"获取收益数据失败: {e}\")\n    \n    # 标记点\n    global_scatter_points = []\n    specific_scatter_points = []\n    earning_scatter_points = []  # 新增：收益公告标记点列表\n    \n    # 绘制全局标记点（红色）\n    for marker_date, text in global_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='red', \n                                #  alpha=0.7, zorder=4, picker=5) # 初始设为可见\n                                 alpha=0.7, zorder=4, picker=5, visible=show_global_markers)  # 初始设为不可见\n            global_scatter_points.append((scatter, closest_date, price_at_date, text))\n    \n    # 绘制特定股票标记点（橙色）\n    for marker_date, text in specific_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='orange', \n                                #  alpha=0.7, zorder=4, picker=5) # 初始设为可见\n                                 alpha=0.7, zorder=4, picker=5, visible=show_specific_markers)  # 初始设为不可见\n            specific_scatter_points.append((scatter, closest_date, price_at_date, text))\n    \n    # 新增：绘制财报收益公告标记点（白色）\n    for marker_date, text in earning_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='white', \n                                 alpha=0.7, zorder=4, picker=5, visible=show_earning_markers)\n            earning_scatter_points.append((scatter, closest_date, price_at_date, text))\n\n    # 为每个全局标记点(红色点)创建固定注释，交替设置左上与左下偏移\n    red_offsets = [(-60, 50),(50, -60), (-70, 45), (-50, -45)]  # 第一个为左上、第二个为右下、第三个还是为左上、第四个为右上\n    for i, (scatter, date, price, text) in enumerate(global_scatter_points):\n        offset = red_offsets[i % 4]\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),  # 箭头指向的位置\n            xytext=offset,     # 使用交替的偏移\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='red'),\n            color='red',\n            fontsize=12,\n            visible=False  # 默认隐藏(因为红色点初始设定为不可见)\n        )\n        all_annotations.append((annotation, 'global', date, price))\n\n    # 为每个特定股票标记点(橙色点)创建固定注释，左右交替偏移\n    specific_offsets = [\n        (-150, 50),    # 偶数（i=0,2,4…）向右下\n        (20, -50)   # 奇数（i=1,3,5…）向左下\n    ]\n    for i, (scatter, date, price, text) in enumerate(specific_scatter_points):\n        offset = specific_offsets[i % 2]\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),\n            xytext=offset,\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='orange'),\n            color='orange',\n            fontsize=12,\n            visible=show_specific_markers and show_all_annotations\n        )\n        all_annotations.append((annotation, 'specific', date, price))\n\n    # 为每个收益公告标记点(白色点)创建固定注释，将偏移修改为右上（例如 (50,50)）\n    for scatter, date, price, text in earning_scatter_points:\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),\n            xytext=(50, 50),  # 修改为右上偏移\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='white'),\n            color='yellow',\n            fontsize=12,\n            visible=show_earning_markers and show_all_annotations\n        )\n        all_annotations.append((annotation, 'earning', date, price))\n\n    # 添加一个新的函数来控制所有浮窗的显示或隐藏\n    def toggle_all_annotations():\n        \"\"\"切换所有注释的显示状态\"\"\"\n        nonlocal show_all_annotations\n        show_all_annotations = not show_all_annotations\n        \n        # 更新所有注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'global':\n                annotation.set_visible(show_global_markers and show_all_annotations)\n            elif anno_type == 'specific':\n                annotation.set_visible(show_specific_markers and show_all_annotations)\n            elif anno_type == 'earning':\n                annotation.set_visible(show_earning_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n    \n    def clean_percentage_string(percentage_str):\n        \"\"\"\n        将可能包含 % 符号的字符串转换为浮点数。\n        \"\"\"\n        try:\n            return float(percentage_str.strip('%'))\n        except ValueError:\n            return None\n\n    # 计算换手额（单位：百万）\n    # turnover = (\n    #     (volumes[-1] * prices[-1]) / 1e6\n    #     if volumes and volumes[-1] is not None and prices[-1] is not None\n    #     else None\n    # )\n    # turnover_str = f\"{turnover:.1f}\" if turnover is not None else \"\"\n\n    turnover = (\n        (volumes[-1] * prices[-1]) / 1e6\n        if volumes and volumes[-1] is not None and prices[-1] is not None\n        else None\n    )\n\n    if turnover is not None:\n        if turnover >= 1000:  # 大于等于1000M时转换为B\n            turnover = turnover / 1000  # 转换为B\n            turnover_str = f\"{turnover:.1f}B\"\n        else:  # 小于1000M时保持M\n            turnover_str = f\"{turnover:.1f}M\"\n    else:\n        turnover_str = \"\"\n\n    # 从compare中去除中文和加号\n    filtered_compare = re.sub(r'[\\u4e00-\\u9fff+]', '', compare)\n    def clean_percentage_string(percentage_str):\n        try:\n            return float(percentage_str.strip('%'))\n        except ValueError:\n            return None\n    compare_value = clean_percentage_string(filtered_compare)\n\n    # 根据compare和换手额做\"可疑\"标记\n    if turnover is not None and turnover < 100 and compare_value is not None and compare_value > 0:\n        turnover_str = f\"可疑{turnover_str}\"\n\n    # 注意：这里用 share_val（而不是原来的 share）来计算换手率\n    try:\n        share_int = int(share_val)\n        turnover_rate = f\"{(volumes[-1] / share_int) * 100:.2f}\" if (volumes and volumes[-1] is not None and share_int > 0) else \"\"\n    except (ValueError, ZeroDivisionError, TypeError):\n        turnover_rate = \"\"\n        \n    marketcap_in_billion = (\n        f\"{float(marketcap) / 1e9:.1f}B\"\n        if marketcap not in [None, \"N/A\"]\n        else \"\"\n    )\n    pe_text = f\"{pe}\" if pe not in [None, \"N/A\"] else \"\"\n\n    clickable = False\n    tag_str = \"\"\n    fullname = \"\"\n    data_sources = ['stocks', 'etfs']\n    found = False\n\n    # 在JSON中查找对应的name信息以展示完整名称、标签、描述等\n    for source in data_sources:\n        for item in json_data.get(source, []):\n            if item['symbol'] == name:\n                tags = item.get('tag', [])\n                fullname = item.get('name', '')\n                tag_str = ','.join(tags)\n                if len(tag_str) > 25:\n                    tag_str = tag_str[:25] + '...'\n                clickable = True\n                found = True\n                break\n        if found:\n            break\n\n    # 组合标题，增加 pb_text 字段\n    title_text = (\n        f'{name}  {compare}  {turnover_str} {turnover_rate} '\n        f'{marketcap_in_billion} {pe_text} {pb_text} \"{table_name}\" {fullname} {tag_str}'\n    )\n    title_style = {\n        'color': 'orange' if clickable else 'lightgray',\n        'fontsize': 16 if clickable else 15,\n        'fontweight': 'bold',\n        'picker': clickable,\n    }\n    # 在设置标题的代码部分\n    title = ax1.set_title(title_text, **title_style, pad=70)  # 增加pad参数\n\n    def show_stock_etf_info(event=None):\n        \"\"\"\n        展示当前name在JSON数据中的信息（如全名、标签、描述等）。\n        如果未找到则弹框提示。\n        \"\"\"\n        for source in data_sources:\n            for item in json_data.get(source, []):\n                if item['symbol'] == name:\n                    descriptions = item\n                    root = tk.Tk()\n                    root.withdraw()  # 隐藏主窗口\n                    top = tk.Toplevel(root)\n                    top.title(\"Information\")\n                    top.geometry(\"600x750\")\n                    font_size = ('Arial', 22)\n                    text_box = scrolledtext.ScrolledText(top, wrap=tk.WORD, font=font_size)\n                    text_box.pack(expand=True, fill='both')\n                    info = (\n                        f\"{name}\\n\"\n                        f\"{descriptions['name']}\\n\\n\"\n                        f\"{descriptions['tag']}\\n\\n\"\n                        f\"{descriptions['description1']}\\n\\n\"\n                        f\"{descriptions['description2']}\"\n                    )\n                    text_box.insert(tk.END, info)\n                    text_box.config(state=tk.DISABLED)\n                    top.bind('<Escape>', lambda event: root.destroy())\n                    root.mainloop()\n                    return\n        display_dialog(f\"未找到 {name} 的信息\")\n\n    # 修改toggle_global_markers函数\n    def toggle_global_markers():\n        \"\"\"切换全局标记点（红色）的显示状态\"\"\"\n        nonlocal show_global_markers\n        show_global_markers = not show_global_markers\n        \n        # 更新所有全局标记点的可见性\n        for scatter, _, _, _ in global_scatter_points:\n            scatter.set_visible(show_global_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'global':\n                annotation.set_visible(show_global_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改toggle_specific_markers函数\n    def toggle_specific_markers():\n        \"\"\"切换特定股票标记点（橙色）的显示状态\"\"\"\n        nonlocal show_specific_markers\n        show_specific_markers = not show_specific_markers\n        \n        # 更新所有特定股票标记点的可见性\n        for scatter, _, _, _ in specific_scatter_points:\n            scatter.set_visible(show_specific_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'specific':\n                annotation.set_visible(show_specific_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改toggle_earning_markers函数\n    def toggle_earning_markers():\n        \"\"\"切换收益公告标记点的显示状态\"\"\"\n        nonlocal show_earning_markers\n        show_earning_markers = not show_earning_markers\n        \n        # 更新所有收益公告标记点的可见性\n        for scatter, _, _, _ in earning_scatter_points:\n            scatter.set_visible(show_earning_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'earning':\n                annotation.set_visible(show_earning_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改update_marker_visibility函数来同时更新注释\n    def update_marker_visibility():\n        \"\"\"根据当前时间区间和各开关状态，更新标记点和注释的可见性。\"\"\"\n        # 提取当前时间区间内显示的最早日期\n        current_val = radio.value_selected\n        if current_val in time_options:\n            years = time_options[current_val]\n            if years == 0:\n                min_date = min(dates)\n            else:\n                min_date = datetime.now() - timedelta(days=years * 365)\n        else:\n            min_date = min(dates)\n\n        # 更新标记点可见性\n        for scatter, date, _, _ in global_scatter_points:\n            scatter.set_visible((min_date <= date) and show_global_markers)\n        for scatter, date, _, _ in specific_scatter_points:\n            scatter.set_visible((min_date <= date) and show_specific_markers)\n        for scatter, date, _, _ in earning_scatter_points:\n            scatter.set_visible((min_date <= date) and show_earning_markers)\n        \n        # 更新注释可见性\n        for annotation, anno_type, date, _ in all_annotations:\n            if min_date <= date:\n                if anno_type == 'global':\n                    annotation.set_visible(show_global_markers and show_all_annotations)\n                elif anno_type == 'specific':\n                    annotation.set_visible(show_specific_markers and show_all_annotations)\n                elif anno_type == 'earning':\n                    annotation.set_visible(show_earning_markers and show_all_annotations)\n            else:\n                annotation.set_visible(False)\n        \n        fig.canvas.draw_idle()\n    \n    def on_pick(event):\n        \"\"\"\n        当点击标题（可点击）或标记点时，展示对应信息窗口。\n        如果标记点不可见，则不会触发点击事件。\n        \"\"\"\n        if event.artist == title:\n            show_stock_etf_info()\n        elif event.artist in [point[0] for point in global_scatter_points + specific_scatter_points + earning_scatter_points]:\n            # 查找被点击的标记点\n            for scatter, date, price, text in global_scatter_points + specific_scatter_points + earning_scatter_points:\n                if event.artist == scatter:\n                    # 更新注释内容和显示位置\n                    annot.xy = (date, price)\n                    annot.set_text(f\"{datetime.strftime(date, '%Y-%m-%d')}\\n{price}\\n{text}\")\n                    annot.get_bbox_patch().set_alpha(0.8)\n                    annot.set_fontsize(16)\n                    # 调整注释显示位置\n                    midpoint = max(dates) - (max(dates) - min(dates)) / 2\n                    if date < midpoint:\n                        annot.set_position((50, -20))\n                    else:\n                        annot.set_position((-150, -20))\n                    annot.set_visible(True)\n                    highlight_point.set_offsets([date, price])\n                    highlight_point.set_visible(True)\n                    fig.canvas.draw_idle()\n                    break\n\n    def on_keyword_selected(db_path, table_name, name):\n        \"\"\"\n        按关键字查询数据库并弹框显示结果。\n        \"\"\"\n        condition = f\"name = '{name}'\"\n        result = query_database(db_path, table_name, condition)\n        create_window(result)\n\n    def query_database(db_path, table_name, condition):\n        \"\"\"\n        根据条件查询数据库并返回结果的字符串形式。\n        \"\"\"\n        with sqlite3.connect(db_path) as conn:\n            cursor = conn.cursor()\n            query = f\"SELECT * FROM {table_name} WHERE {condition} ORDER BY date DESC;\"\n            cursor.execute(query)\n            rows = cursor.fetchall()\n            if not rows:\n                return \"今天没有数据可显示。\\n\"\n            columns = [description[0] for description in cursor.description]\n            col_widths = [\n                max(len(str(row[i])) for row in rows + [columns])\n                for i in range(len(columns))\n            ]\n            output_text = ' | '.join(\n                [col.ljust(col_widths[idx]) for idx, col in enumerate(columns)]\n            ) + '\\n'\n            output_text += '-' * len(output_text) + '\\n'\n            for row in rows:\n                output_text += ' | '.join(\n                    [str(item).ljust(col_widths[idx]) for idx, item in enumerate(row)]\n                ) + '\\n'\n            return output_text\n\n    def create_window(content):\n        \"\"\"\n        创建新窗口显示查询数据库的结果。\n        \"\"\"\n        root = tk.Tk()\n        root.withdraw()  # 隐藏主窗口\n        top = tk.Toplevel(root)\n        top.title(\"数据库查询结果\")\n        window_width, window_height = 900, 600\n        center_x = (top.winfo_screenwidth() - window_width) // 2\n        center_y = (top.winfo_screenheight() - window_height) // 2\n        top.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')\n        top.bind('<Escape>', lambda event: root.destroy())\n\n        text_font = tkFont.Font(family=\"Courier\", size=20)\n        text_area = scrolledtext.ScrolledText(top, wrap=tk.WORD, width=100, height=30, font=text_font)\n        text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)\n        text_area.insert(tk.INSERT, content)\n        text_area.configure(state='disabled')\n        root.mainloop()\n\n    # 给标题添加可点击下划线\n    if clickable:\n        fig.canvas.mpl_connect('pick_event', on_pick)\n\n    ax1.grid(True, color='gray', alpha=0.1, linestyle='--')\n    plt.xticks(rotation=45)\n\n    annot = ax1.annotate(\n        \"\",\n        xy=(0, 0),\n        xytext=(20, 20),\n        textcoords=\"offset points\",\n        bbox=dict(boxstyle=\"round\", fc=\"black\"),\n        arrowprops=dict(arrowstyle=\"->\"),\n        color='white'\n    )\n    annot.set_visible(False)\n\n    # 定义可选时间范围\n    time_options = {\n        \"1m\": 0.08,\n        \"3m\": 0.25,\n        \"6m\": 0.5,\n        \"1Y\": 1,\n        \"2Y\": 2,\n        \"3Y\": 3,\n        \"5Y\": 5,\n        \"10Y\": 10,\n        \"All\": 0\n    }\n    default_index = list(time_options.keys()).index(default_time_range)\n\n    # 配置单选按钮\n    rax = plt.axes([0.95, 0.005, 0.05, 0.8], facecolor='black')\n    radio = RadioButtons(rax, list(time_options.keys()), active=default_index)\n    for label in radio.labels:\n        label.set_color('white')\n        label.set_fontsize(14)\n    radio.circles[default_index].set_facecolor('red')\n    \n    def open_earning_input(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Insert_Earning_Manual.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def check_earning_kimi(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['osascript', '/Users/yanzhang/Documents/ScriptEditor/CheckKimi_Earning.scpt', name])\n        except Exception as e:\n            display_dialog(f\"启动AppleScript程序失败: {e}\")\n    \n    def open_earning_edit(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Editor_Earning_DB.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def open_tags_edit(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Editor_Symbol_Tags.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def open_event_input(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Insert_Events.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def update_annot(ind):\n        \"\"\"\n        更新工具提示位置和文本内容。\n        \"\"\"\n        x_data, y_data = line1.get_data()\n        xval, yval = x_data[ind[\"ind\"][0]], y_data[ind[\"ind\"][0]]\n        annot.xy = (xval, yval)\n        \n        # 查找当前日期是否有标记信息\n        current_date = xval.replace(tzinfo=None)\n        global_marker_text = None\n        specific_marker_text = None\n        earning_marker_text = None  # 新增：收益公告文本\n        \n        # 只有当标记点可见时才显示对应的事件文本\n        # 查找全局标记\n        if show_global_markers:\n            for marker_date, text in global_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    global_marker_text = text\n                    break\n                \n        if show_specific_markers:\n            for marker_date, text in specific_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    specific_marker_text = text\n                    break\n    \n        # 只有当收益标记点可见时才显示收益事件文本\n        if show_earning_markers:\n            # 查找收益公告标记\n            for marker_date, text in earning_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    earning_marker_text = text\n                    break\n                \n        # 如果鼠标按下，则显示与初始点的百分比变化，否则显示日期和数值\n        if mouse_pressed and initial_price is not None:\n            percent_change = ((yval - initial_price) / initial_price) * 100\n            text = f\"{percent_change:.1f}%\"\n            annot.set_color('white')  # 百分比变化使用白色\n        else:\n            # 显示当前日期、当前价格和当前价格跟最新价格的百分比差值\n            latest_price = prices[-1]  # 获取最新日期的价格\n            current_price = yval       # 当前鼠标位置的价格\n            percent_diff = ((latest_price - current_price) / current_price) * 100  # 计算百分比差值\n            text = f\"{datetime.strftime(xval, '%Y-%m-%d')}\\n{current_price:.2f}\\n\\n{percent_diff:.2f}%\"  # 显示日期、当前价格和百分比差值\n            # text = f\"{datetime.strftime(xval, '%Y-%m-%d')}\\n{percent_diff:.2f}%\"  # 显示日期、当前价格和百分比差值\n            \n            # 添加标记文本信息（如果有）\n            has_earning_marker = False\n            marker_texts = []\n            if global_marker_text:\n                marker_texts.append(global_marker_text)\n            if specific_marker_text:\n                marker_texts.append(specific_marker_text)\n            if earning_marker_text:\n                marker_texts.append(earning_marker_text)\n                has_earning_marker = True\n                \n            if marker_texts:\n                text += \"\\n\" + \"\\n\".join(marker_texts)\n            # 如果是收益公告，设置为黄色字体，否则为白色\n            if has_earning_marker and not (global_marker_text or specific_marker_text):\n                annot.set_color('yellow')  # 收益公告标记使用黄色文字\n            elif global_marker_text and not (specific_marker_text or has_earning_marker):\n                annot.set_color('red')    # 全局标记使用红色文字\n            elif specific_marker_text and not (global_marker_text or has_earning_marker):\n                annot.set_color('orange')    # 特殊标记使用橘色文字\n            else:\n                annot.set_color('white')  # 其他标记使用白色文字\n        \n        annot.set_text(text)\n        annot.get_bbox_patch().set_alpha(0.4)\n        annot.set_fontsize(16)\n        \n        # 检查点的垂直位置\n        y_range = ax1.get_ylim()\n        y_position_ratio = (yval - y_range[0]) / (y_range[1] - y_range[0])\n        \n        # 更智能地调整注释位置\n        x_range = ax1.get_xlim()\n        position_ratio = (matplotlib.dates.date2num(xval) - x_range[0]) / (x_range[1] - x_range[0])\n        \n        # 根据点在图表中的水平和垂直位置调整注释\n        if y_position_ratio < 0.2:  # 如果点在底部区域（靠近X轴）\n            # 将注释向上方移动\n            y_offset = 60  # 设置一个较大的向上偏移\n        elif y_position_ratio > 0.8:    # 如果点在顶部区域\n            y_offset = -120  # 默认向下偏移\n        else:\n            y_offset = -70  # 默认向下偏移\n        \n        # 根据水平位置调整\n        if position_ratio > 0.7:  # 如果点在右侧30%区域\n            # 估计文本长度，越长偏移越大\n            text_length = len(text)\n            x_offset = -20 - min(text_length * 6, 300)  # 根据文本长度动态调整左偏移\n            annot.set_position((x_offset, y_offset))\n        elif position_ratio < 0.3:  # 如果点在左侧30%区域\n            annot.set_position((50, y_offset))\n        else:  # 中间区域\n            # 如果在底部区域，仍然向上偏移\n            if y_position_ratio < 0.2:\n                annot.set_position((-200, y_offset))\n            else:\n                annot.set_position((-200, -70))  # 放到下方\n\n    def hover(event):\n        \"\"\"\n        鼠标在图表上滑动时，更新垂直参考线、注释、以及高亮最近的数据点。\n        \"\"\"\n        if event.inaxes in [ax1, ax2]:\n            if event.xdata:\n                current_date = matplotlib.dates.num2date(event.xdata).replace(tzinfo=None)\n                vline.set_xdata(current_date)\n                vline.set_visible(True)\n                fig.canvas.draw_idle()\n                x_data, y_data = line1.get_data()\n                nearest_index = (np.abs(np.array(x_data) - current_date)).argmin()\n\n                # 判断鼠标位置是否接近数据点的容差（tolerance）值来提高敏感度，根据差值判断是否接近某个数据点\n                # 如果你将它调大，比如改为 0.1 或 0.2，那么即便鼠标离数据点稍远一些，仍然可以触发高亮蓝色价格点\n                date_distance = 0.2 * ((ax1.get_xlim()[1] - ax1.get_xlim()[0]) / 365)\n                if np.isclose(\n                    matplotlib.dates.date2num(x_data[nearest_index]),\n                    matplotlib.dates.date2num(current_date),\n                    atol=date_distance\n                ):\n                    update_annot({\"ind\": [nearest_index]})\n                    annot.set_visible(True)\n                    highlight_point.set_offsets([x_data[nearest_index], y_data[nearest_index]])\n                    highlight_point.set_visible(True)\n                else:\n                    annot.set_visible(False)\n                    highlight_point.set_visible(False)\n                fig.canvas.draw_idle()\n            else:\n                vline.set_visible(False)\n                annot.set_visible(False)\n                highlight_point.set_visible(False)\n                fig.canvas.draw_idle()\n        elif event.inaxes == rax:\n            vline.set_visible(False)\n            annot.set_visible(False)\n            highlight_point.set_visible(False)\n            fig.canvas.draw_idle()\n\n    def update(val):\n        \"\"\"\n        根据单选按钮选项更新图表显示的时间范围。\n        \"\"\"\n        years = time_options[val]\n        if years == 0:\n            filtered_dates, filtered_prices, filtered_volumes = dates, prices, volumes\n            min_date = min(dates)\n        else:\n            min_date = datetime.now() - timedelta(days=years * 365)\n            filtered_dates = [d for d in dates  if d >= min_date]\n            filtered_prices = [p for d,p in zip(dates, prices)  if d >= min_date]\n            filtered_volumes= [v for d,v in zip(dates, volumes) if d >= min_date] if volumes else None\n\n        # ––––– 如果某个区间竟然把所有点都筛没了，但我们确实有老数据，就默认显示最后一条 –––––\n        if not filtered_dates and dates:\n            filtered_dates  = [dates[-1]]\n            filtered_prices = [prices[-1]]\n            filtered_volumes= [volumes[-1]] if volumes else None\n\n        nonlocal fill\n        fill = update_plot(line1, fill, line2, filtered_dates, filtered_prices, filtered_volumes, ax1, ax2, show_volume)\n        radio.circles[list(time_options.keys()).index(val)].set_facecolor('red')\n        \n        # 根据所选时间区间控制原始价格点散点的显示\n        if val in [\"1m\", \"3m\", \"6m\"]:\n            small_dot_scatter.set_visible(True)\n        else:\n            small_dot_scatter.set_visible(False)\n\n        # 更新红色标记点显示，考虑时间范围和红色标记点可见性设置\n        for scatter, date, _, _ in global_scatter_points:\n            scatter.set_visible((min_date <= date) and show_global_markers)\n            \n        # 更新橙色标记点显示，考虑时间范围和橙色标记点可见性设置\n        for scatter, date, _, _ in specific_scatter_points:\n            scatter.set_visible((min_date <= date) and show_specific_markers)\n            \n        # 更新绿色收益公告标记点显示，考虑时间范围和总体可见性设置\n        for scatter, date, _, _ in earning_scatter_points:\n            scatter.set_visible((min_date <= date) and show_earning_markers)\n            \n        # 更新标记点显示后，同时更新注释显示\n        update_marker_visibility()\n\n        fig.canvas.draw_idle()\n\n    def toggle_volume():\n        \"\"\"\n        显示或隐藏成交量曲线。\n        \"\"\"\n        nonlocal show_volume\n        show_volume = not show_volume\n        update(radio.value_selected)\n\n    def on_key(event):\n        \"\"\"\n        处理键盘事件，用于快捷操作图表。\n        \"\"\"\n        actions = {\n            'v': toggle_volume,\n            'r': toggle_global_markers,  # 'r'键切换红色全局标记点显示\n            'x': toggle_specific_markers,  # 'x'键切换橙色特定股票标记点显示\n            'a': toggle_earning_markers,  # 'a'键切换白色收益公告标记点显示（保持不变）\n            'c': toggle_all_annotations,  # 'c'键切换所有浮窗的显示/隐藏\n            'n': lambda: open_earning_input(None),\n            'e': lambda: open_earning_edit(None),\n            't': lambda: open_tags_edit(None),\n            'w': lambda: open_event_input(None),\n            'k': lambda: check_earning_kimi(None),\n            '1': lambda: radio.set_active(7),\n            '2': lambda: radio.set_active(1),\n            '3': lambda: radio.set_active(3),\n            '4': lambda: radio.set_active(4),\n            '5': lambda: radio.set_active(5),\n            '6': lambda: radio.set_active(6),\n            '7': lambda: radio.set_active(8),\n            '8': lambda: radio.set_active(2),\n            '9': lambda: radio.set_active(0),\n            '`': show_stock_etf_info,\n            'd': lambda: on_keyword_selected(db_path, table_name, name)\n        }\n        if event.key in actions:\n            actions[event.key]()\n\n        # 处理方向键在不同时间区间间移动\n        current_index = list(time_options.keys()).index(radio.value_selected)\n        if event.key == 'up' and current_index > 0:\n            radio.set_active(current_index - 1)\n        elif event.key == 'down' and current_index < len(time_options) - 1:\n            radio.set_active(current_index + 1)\n\n    def close_everything(event, panel_flag):\n        \"\"\"\n        按下ESC时关闭图表，并在panel为真时退出系统。\n        \"\"\"\n        if event.key == 'escape':\n            plt.close('all')\n            if panel_flag:\n                import sys\n                sys.exit(0)\n\n    def on_mouse_press(event):\n        \"\"\"\n        记录鼠标左键按下时的价格和日期，用于计算百分比变化。\n        \"\"\"\n        nonlocal mouse_pressed, initial_price, initial_date\n        if event.button == 1:\n            mouse_pressed = True\n            nearest_index = (np.abs(np.array(dates) -\n                            matplotlib.dates.num2date(event.xdata).replace(tzinfo=None))).argmin()\n            initial_price = prices[nearest_index]\n            initial_date = dates[nearest_index]\n\n    def on_mouse_release(event):\n        \"\"\"\n        鼠标左键释放时，停止显示百分比变化。\n        \"\"\"\n        nonlocal mouse_pressed\n        if event.button == 1:\n            mouse_pressed = False\n\n    # 参考线\n    vline = ax1.axvline(x=dates[0], color='cyan', linestyle='--', linewidth=1, visible=False)\n\n    # 连接事件\n    plt.gcf().canvas.mpl_connect(\"motion_notify_event\", hover)\n    plt.gcf().canvas.mpl_connect('key_press_event', on_key)\n    plt.gcf().canvas.mpl_connect('key_press_event', lambda e: close_everything(e, panel))\n    plt.gcf().canvas.mpl_connect('button_press_event', on_mouse_press)\n    plt.gcf().canvas.mpl_connect('button_release_event', on_mouse_release)\n    radio.on_clicked(update)\n\n    def hide_annot_on_leave(event):\n        \"\"\"\n        当鼠标离开图表区域时，隐藏注释和高亮点。\n        \"\"\"\n        annot.set_visible(False)\n        highlight_point.set_visible(False)\n        vline.set_visible(False)\n        fig.canvas.draw_idle()\n\n    plt.gcf().canvas.mpl_connect('figure_leave_event', hide_annot_on_leave)\n\n    # 初始化图表\n    update(default_time_range)\n    print(\"图表绘制完成，等待用户操作...\")\n    plt.show()"
            },
            {
                "path": "/Users/yanzhang/Documents/ScriptEditor/Stock_Chart.scpt",
                "filename": "Stock_Chart.scpt",
                "content": "set the clipboard to \"\"\ndelay 0.3\n\ntell application \"System Events\"\n\tkeystroke \"c\" using {command down}\nend tell\ndelay 0.5\n\ntry\n\tset selectedText to the clipboard\n\tif selectedText is not \"\" then\n\t\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py paste\"\n\telse\n\t\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py input\"\n\tend if\non error errorMessage\n\t-- 如果发生错误，执行 Python 脚本\n\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py input\"\nend try"
            }
        ],
        "final_prompt": "其中，stock_chart会读取marketcap_pe.txt和shares.txt两个文件的内容，提取出marketcap、pe、pb、shares等数据供chart_input展示使用，我已经把这些数据导入sqlite3数据库/Users/yanzhang/Documents/Database/Finance.db里的名为MNSPP表里了，表结构和内容如下“id    symbol  name                                shares         marketcap        pe_ratio  pb    \n----  ------  ----------------------------------  -------------  ---------------  --------  ------\n1     LIN     Linde                               470720000.0    222520000000.0   34.3      5.85  \n2     BHP     BHP                                 2540000000.0   126290000000.0   11.06     2.76  \n3     RIO     Rio Tinto                           1620000000.0   95890000000.0    8.35      1.74  \n4     SCCO    Southern Copper                     804070000.0    76900000000.0    21.3      8.04  \n5     SHW     The Sherwin-Williams                250600000.0    89580000000.0    33.79     21.69 ”，我需要你拿掉读取marketcap_pe.txt和shares.txt部分的功能，把读txt改为通过读取数据表内数据，最终让chart_input跟之前一样正确的展示曲线数据结果。该怎么改代码实现？"
    },
    {
        "id": "2025-06-11 09:26:57",
        "project_name": "bypass",
        "project_desc": "我有一个JavaScript和html发的chrome插件程序",
        "files": [
            {
                "path": "/Users/yanzhang/Downloads/backup/bypass-paywalls-chrome-clean-master/manifest.json",
                "filename": "manifest.json",
                "content": "{\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  },\n  \"content_security_policy\": {\n    \"extension_pages\": \"script-src 'self'; object-src 'self'\"\n  },\n  \"action\": {\n    \"default_popup\": \"options/popup.html\"\n  },\n  \"description\": \"Bypass Paywalls of news sites\",\n  \"homepage_url\": \"https://gitflic.ru/project/magnolia1234/bypass-paywalls-chrome-clean\",\n  \"icons\": {\n    \"128\": \"bypass.png\"\n  },\n  \"manifest_version\": 3,\n  \"minimum_chrome_version\": \"109\",\n  \"key\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvLxf4oOeSoz8qKVzKGQWW5zW44hWCoOoQRGXTrObUpyoGfGzhFO8aZHQmBcLrAZMA4O6EA7GaXnHkOPCLKM11seZ4J2azb1gSswApfAlaoeOLnhDnp/Jpzz7Bt6o4HL+nhKRJUOZ9z+GXAyOkOps5O38TwJN5R6z8tLkleRgfYscp19YU/vq1x9PrbXIHJTRB7qtb/iJmiKATKisXGmFY3Nbs5m379TGqcJFBM9bI+8bSJtS4e7t0LHOwSLDq3IVRaWVsFd9P19WEDNTxuzr9+rczOrw1vgmiisNOcElse8cyVIoq4bjepvfHM/9nzDgKwQsNG5OTzujwHu2UUN4cwIDAQAB\",\n  \"name\": \"Bypass Paywalls Clean\",\n  \"update_url\": \"https://gitflic.ru/project/magnolia1234/bpc_updates/blob/raw?file=updates.xml\",\n  \"short_name\": \"Bypass Paywall\",\n  \"options_ui\": {\n    \"open_in_tab\": true,\n    \"page\": \"options/options.html\"\n  },\n  \"incognito\": \"split\",\n  \"permissions\": [\n    \"cookies\",\n    \"storage\",\n    \"activeTab\",\n    \"declarativeNetRequestWithHostAccess\",\n    \"scripting\",\n    \"offscreen\"\n  ],\n  \"optional_host_permissions\": [\n    \"*://*/*\"\n  ],\n  \"host_permissions\": [\n    \"*://*.24heures.ch/*\",\n    \"*://*.360dx.com/*\",\n    \"*://*.60millions-mag.com/*\",\n    \"*://*.aachener-zeitung.de/*\",\n    \"*://*.aargauerzeitung.ch/*\",\n    \"*://*.abc.es/*\",\n    \"*://*.abcmais.com/*\",\n    \"*://*.abendblatt.de/*\",\n    \"*://*.abqjournal.com/*\",\n    \"*://*.abril.com.br/*\",\n    \"*://*.actu.fr/*\",\n    \"*://*.ad.nl/*\",\n    \"*://*.adage.com/*\",\n    \"*://*.adelaidenow.com.au/*\",\n    \"*://*.adweek.com/*\",\n    \"*://*.aerokurier.de/*\",\n    \"*://*.aerztezeitung.de/*\",\n    \"*://*.afr.com/*\",\n    \"*://*.aisnenouvelle.fr/*\",\n    \"*://*.ajc.com/*\",\n    \"*://*.al-monitor.com/*\",\n    \"*://*.al.com/*\",\n    \"*://*.allgemeine-zeitung.de/*\",\n    \"*://*.alternatives-economiques.fr/*\",\n    \"*://*.ambito.com/*\",\n    \"*://*.americanaffairsjournal.org/*\",\n    \"*://*.americanbanker.com/*\",\n    \"*://*.americanpurpose.com/*\",\n    \"*://*.americastestkitchen.com/*\",\n    \"*://*.aoc.media/*\",\n    \"*://*.apollo-magazine.com/*\",\n    \"*://*.ara.cat/*\",\n    \"*://*.arabalears.cat/*\",\n    \"*://*.architecturaldigest.com/*\",\n    \"*://*.arcinfo.ch/*\",\n    \"*://*.artforum.com/*\",\n    \"*://*.artnet.com/*\",\n    \"*://*.artsenkrant.com/*\",\n    \"*://*.atavist.com/*\",\n    \"*://*.atlantico.fr/*\",\n    \"*://*.auto-motor-und-sport.de/*\",\n    \"*://*.auto-swiat.pl/*\",\n    \"*://*.autocar.co.uk/*\",\n    \"*://*.autohebdo.fr/*\",\n    \"*://*.automobilwoche.de/*\",\n    \"*://*.autonews.com/*\",\n    \"*://*.autoplus.fr/*\",\n    \"*://*.autosport.com/*\",\n    \"*://*.axios.com/*\",\n    \"*://*.azcentral.com/*\",\n    \"*://*.backpacker.com/*\",\n    \"*://*.balkaninsight.com/*\",\n    \"*://*.baltimoresun.com/*\",\n    \"*://*.barandbench.com/*\",\n    \"*://*.bazonline.ch/*\",\n    \"*://*.bd.nl/*\",\n    \"*://*.beleggersbelangen.nl/*\",\n    \"*://*.belfasttelegraph.co.uk/*\",\n    \"*://*.bendigoadvertiser.com.au/*\",\n    \"*://*.benzinga.com/*\",\n    \"*://*.beobachter.ch/*\",\n    \"*://*.berliner-zeitung.de/*\",\n    \"*://*.berlingske.dk/*\",\n    \"*://*.bernerzeitung.ch/*\",\n    \"*://*.betamtb.com/*\",\n    \"*://*.betternutrition.com/*\",\n    \"*://*.betterprogramming.pub/*\",\n    \"*://*.bhaskar.com/*\",\n    \"*://*.bicycling.com/*\",\n    \"*://*.bienpublic.com/*\",\n    \"*://*.bild.de/*\",\n    \"*://*.billboard.com/*\",\n    \"*://*.bizjournals.com/*\",\n    \"*://*.blick.ch/*\",\n    \"*://*.bloomberg.com/*\",\n    \"*://*.bloombergadria.com/*\",\n    \"*://*.bnd.com/*\",\n    \"*://*.bndestem.nl/*\",\n    \"*://*.boersen-zeitung.de/*\",\n    \"*://*.bonappetit.com/*\",\n    \"*://*.bordermail.com.au/*\",\n    \"*://*.bostonglobe.com/*\",\n    \"*://*.bostonherald.com/*\",\n    \"*://*.braunschweiger-zeitung.de/*\",\n    \"*://*.brill.com/*\",\n    \"*://*.brisbanetimes.com.au/*\",\n    \"*://*.britannica.com/*\",\n    \"*://*.bt.no/*\",\n    \"*://*.buffalonews.com/*\",\n    \"*://*.business-standard.com/*\",\n    \"*://*.businessam.be/*\",\n    \"*://*.businessdailyafrica.com/*\",\n    \"*://*.businessdesk.co.nz/*\",\n    \"*://*.businessinsider.com.pl/*\",\n    \"*://*.businessinsider.com/*\",\n    \"*://*.businessinsider.jp/*\",\n    \"*://*.businessinsider.nl/*\",\n    \"*://*.businessoffashion.com/*\",\n    \"*://*.businesspost.ie/*\",\n    \"*://*.businesstimes.com.sg/*\",\n    \"*://*.cairnspost.com.au/*\",\n    \"*://*.calgaryherald.com/*\",\n    \"*://*.cambiocolombia.com/*\",\n    \"*://*.canarias7.es/*\",\n    \"*://*.canberratimes.com.au/*\",\n    \"*://*.capital.bg/*\",\n    \"*://*.capital.fr/*\",\n    \"*://*.capitalgazette.com/*\",\n    \"*://*.cartacapital.com.br/*\",\n    \"*://*.causeur.fr/*\",\n    \"*://*.cen.acs.org/*\",\n    \"*://*.centralwesterndaily.com.au/*\",\n    \"*://*.centrepresseaveyron.fr/*\",\n    \"*://*.challenges.fr/*\",\n    \"*://*.charentelibre.fr/*\",\n    \"*://*.charliehebdo.fr/*\",\n    \"*://*.charlotteobserver.com/*\",\n    \"*://*.chicagobusiness.com/*\",\n    \"*://*.chicagotribune.com/*\",\n    \"*://*.chronicle.com/*\",\n    \"*://*.cincinnati.com/*\",\n    \"*://*.citywire.com/*\",\n    \"*://*.clarin.com/*\",\n    \"*://*.cleaneatingmag.com/*\",\n    \"*://*.cleveland.com/*\",\n    \"*://*.clicrbs.com.br/*\",\n    \"*://*.climbing.com/*\",\n    \"*://*.cnbc.com/*\",\n    \"*://*.cnn.com/*\",\n    \"*://*.cntraveler.com/*\",\n    \"*://*.codesports.com.au/*\",\n    \"*://*.columbian.com/*\",\n    \"*://*.commentary.org/*\",\n    \"*://*.commercialappeal.com/*\",\n    \"*://*.computerweekly.com/*\",\n    \"*://*.connaissancedesarts.com/*\",\n    \"*://*.correiodopovo.com.br/*\",\n    \"*://*.corriere.it/*\",\n    \"*://*.corriereadriatico.it/*\",\n    \"*://*.corrieredellosport.it/*\",\n    \"*://*.cosmopolitan.com/*\",\n    \"*://*.cosmopolitan.fr/*\",\n    \"*://*.countryliving.com/*\",\n    \"*://*.courant.com/*\",\n    \"*://*.courier-journal.com/*\",\n    \"*://*.couriermail.com.au/*\",\n    \"*://*.courrier-picard.fr/*\",\n    \"*://*.courrierinternational.com/*\",\n    \"*://*.crainscleveland.com/*\",\n    \"*://*.crainsdetroit.com/*\",\n    \"*://*.crainsgrandrapids.com/*\",\n    \"*://*.crainsnewyork.com/*\",\n    \"*://*.crikey.com.au/*\",\n    \"*://*.cronista.com/*\",\n    \"*://*.crusoe.com.br/*\",\n    \"*://*.csmonitor.com/*\",\n    \"*://*.ctpost.com/*\",\n    \"*://*.curbed.com/*\",\n    \"*://*.cw.com.tw/*\",\n    \"*://*.cyclingnews.com/*\",\n    \"*://*.dagensmedicin.se/*\",\n    \"*://*.dagsavisen.no/*\",\n    \"*://*.dailyadvertiser.com.au/*\",\n    \"*://*.dailyliberal.com.au/*\",\n    \"*://*.dailymail.co.uk/*\",\n    \"*://*.dailypress.com/*\",\n    \"*://*.dailytelegraph.com.au/*\",\n    \"*://*.dailywire.com/*\",\n    \"*://*.dallasnews.com/*\",\n    \"*://*.decanter.com/*\",\n    \"*://*.defector.com/*\",\n    \"*://*.delish.com/*\",\n    \"*://*.democratandchronicle.com/*\",\n    \"*://*.demorgen.be/*\",\n    \"*://*.denik.cz/*\",\n    \"*://*.denverpost.com/*\",\n    \"*://*.derbund.ch/*\",\n    \"*://*.desmoinesregister.com/*\",\n    \"*://*.destentor.nl/*\",\n    \"*://*.detroitnews.com/*\",\n    \"*://*.df.cl/*\",\n    \"*://*.dhnet.be/*\",\n    \"*://*.diariocorreo.pe/*\",\n    \"*://*.diariodemallorca.es/*\",\n    \"*://*.diariodenavarra.es/*\",\n    \"*://*.diariosur.es/*\",\n    \"*://*.diariovasco.com/*\",\n    \"*://*.digiday.com/*\",\n    \"*://*.digitimes.com/*\",\n    \"*://*.diplomatique.org.br/*\",\n    \"*://*.discovermagazine.com/*\",\n    \"*://*.dispatch.com/*\",\n    \"*://*.dn.no/*\",\n    \"*://*.dn.pt/*\",\n    \"*://*.dn.se/*\",\n    \"*://*.dna.fr/*\",\n    \"*://*.dnevnik.bg/*\",\n    \"*://*.doorbraak.be/*\",\n    \"*://*.dvhn.nl/*\",\n    \"*://*.dwell.com/*\",\n    \"*://*.eastbaytimes.com/*\",\n    \"*://*.eastwest.eu/*\",\n    \"*://*.echo-online.de/*\",\n    \"*://*.economictimes.com/*\",\n    \"*://*.economist.com/*\",\n    \"*://*.ed.nl/*\",\n    \"*://*.editorialedomani.it/*\",\n    \"*://*.elcomercio.es/*\",\n    \"*://*.elcomercio.pe/*\",\n    \"*://*.elconfidencial.com/*\",\n    \"*://*.elcorreo.com/*\",\n    \"*://*.eldeber.com.bo/*\",\n    \"*://*.eldia.es/*\",\n    \"*://*.eldiario.es/*\",\n    \"*://*.eldiariomontanes.es/*\",\n    \"*://*.elespanol.com/*\",\n    \"*://*.elespectador.com/*\",\n    \"*://*.elle.com/*\",\n    \"*://*.elle.fr/*\",\n    \"*://*.elledecor.com/*\",\n    \"*://*.elmercurio.com/*\",\n    \"*://*.elmundo.es/*\",\n    \"*://*.elnortedecastilla.es/*\",\n    \"*://*.elnuevoherald.com/*\",\n    \"*://*.elobservador.com.uy/*\",\n    \"*://*.elpais.com.uy/*\",\n    \"*://*.elpais.com/*\",\n    \"*://*.elperiodico.com/*\",\n    \"*://*.eltiempo.com/*\",\n    \"*://*.eltribuno.com/*\",\n    \"*://*.eluniversal.com.mx/*\",\n    \"*://*.eluniverso.com/*\",\n    \"*://*.em.com.br/*\",\n    \"*://*.enotes.com/*\",\n    \"*://*.epe.es/*\",\n    \"*://*.epicurious.com/*\",\n    \"*://*.epoch.org.il/*\",\n    \"*://*.espn.com/*\",\n    \"*://*.esprit.presse.fr/*\",\n    \"*://*.esquire.com/*\",\n    \"*://*.estadao.com.br/*\",\n    \"*://*.estrepublicain.fr/*\",\n    \"*://*.etc.se/*\",\n    \"*://*.euobserver.com/*\",\n    \"*://*.european-rubber-journal.com/*\",\n    \"*://*.europower.no/*\",\n    \"*://*.exame.com/*\",\n    \"*://*.examiner.com.au/*\",\n    \"*://*.expansion.com/*\",\n    \"*://*.expressnews.com/*\",\n    \"*://*.expresso.pt/*\",\n    \"*://*.farodevigo.es/*\",\n    \"*://*.fastcompany.com/*\",\n    \"*://*.faz.net/*\",\n    \"*://*.femmesdaujourdhui.be/*\",\n    \"*://*.fieldandstream.com/*\",\n    \"*://*.financialexpress.com/*\",\n    \"*://*.financialpost.com/*\",\n    \"*://*.firstthings.com/*\",\n    \"*://*.fiskeribladet.no/*\",\n    \"*://*.flair.be/*\",\n    \"*://*.flair.nl/*\",\n    \"*://*.flugrevue.de/*\",\n    \"*://*.fnlondon.com/*\",\n    \"*://*.forbes.com.au/*\",\n    \"*://*.forbes.com/*\",\n    \"*://*.forbes.pl/*\",\n    \"*://*.forbes.ua/*\",\n    \"*://*.foreignaffairs.com/*\",\n    \"*://*.foreignpolicy.com/*\",\n    \"*://*.fortune.com/*\",\n    \"*://*.foxnews.com/*\",\n    \"*://*.fr.de/*\",\n    \"*://*.freep.com/*\",\n    \"*://*.freitag.de/*\",\n    \"*://*.fresnobee.com/*\",\n    \"*://*.ft.com/*\",\n    \"*://*.ftm.eu/*\",\n    \"*://*.ftm.nl/*\",\n    \"*://*.ga.de/*\",\n    \"*://*.gazetadopovo.com.br/*\",\n    \"*://*.gazzetta.it/*\",\n    \"*://*.gbnews.com/*\",\n    \"*://*.geelongadvertiser.com.au/*\",\n    \"*://*.gelderlander.nl/*\",\n    \"*://*.genomeweb.com/*\",\n    \"*://*.gestion.pe/*\",\n    \"*://*.glassdoor.com/*\",\n    \"*://*.globes.co.il/*\",\n    \"*://*.globo.com/*\",\n    \"*://*.glossy.co/*\",\n    \"*://*.goldcoastbulletin.com.au/*\",\n    \"*://*.goodhousekeeping.com/*\",\n    \"*://*.gq.com/*\",\n    \"*://*.granta.com/*\",\n    \"*://*.groene.nl/*\",\n    \"*://*.grubstreet.com/*\",\n    \"*://*.gva.be/*\",\n    \"*://*.haaretz.co.il/*\",\n    \"*://*.haaretz.com/*\",\n    \"*://*.haarlemsdagblad.nl/*\",\n    \"*://*.handelsblatt.com/*\",\n    \"*://*.handelszeitung.ch/*\",\n    \"*://*.harpers.org/*\",\n    \"*://*.harpersbazaar.com/*\",\n    \"*://*.harzkurier.de/*\",\n    \"*://*.haz.de/*\",\n    \"*://*.hbr.org/*\",\n    \"*://*.hbvl.be/*\",\n    \"*://*.hd.se/*\",\n    \"*://*.heise.de/*\",\n    \"*://*.heraldsun.com.au/*\",\n    \"*://*.hilltimes.com/*\",\n    \"*://*.hindustantimes.com/*\",\n    \"*://*.historyextra.com/*\",\n    \"*://*.historytoday.com/*\",\n    \"*://*.hln.be/*\",\n    \"*://*.housebeautiful.com/*\",\n    \"*://*.houstonchronicle.com/*\",\n    \"*://*.hoy.es/*\",\n    \"*://*.huffingtonpost.it/*\",\n    \"*://*.humo.be/*\",\n    \"*://*.hydrogeninsight.com/*\",\n    \"*://*.ideal.es/*\",\n    \"*://*.ikz-online.de/*\",\n    \"*://*.ilfattoquotidiano.it/*\",\n    \"*://*.ilfoglio.it/*\",\n    \"*://*.ilgazzettino.it/*\",\n    \"*://*.ilgiorno.it/*\",\n    \"*://*.illawarramercury.com.au/*\",\n    \"*://*.ilmanifesto.it/*\",\n    \"*://*.ilmattino.it/*\",\n    \"*://*.ilmessaggero.it/*\",\n    \"*://*.ilrestodelcarlino.it/*\",\n    \"*://*.ilsole24ore.com/*\",\n    \"*://*.iltelegrafolivorno.it/*\",\n    \"*://*.iltirreno.it/*\",\n    \"*://*.inc.com/*\",\n    \"*://*.inc42.com/*\",\n    \"*://*.independent.co.uk/*\",\n    \"*://*.independent.ie/*\",\n    \"*://*.indianexpress.com/*\",\n    \"*://*.indiatimes.com/*\",\n    \"*://*.indiatoday.in/*\",\n    \"*://*.indystar.com/*\",\n    \"*://*.inews.co.uk/*\",\n    \"*://*.infolibre.es/*\",\n    \"*://*.informacion.es/*\",\n    \"*://*.infzm.com/*\",\n    \"*://*.inkl.com/*\",\n    \"*://*.inquirer.com/*\",\n    \"*://*.insidehighered.com/*\",\n    \"*://*.interestingengineering.com/*\",\n    \"*://*.internazionale.it/*\",\n    \"*://*.intrafish.com/*\",\n    \"*://*.intrafish.no/*\",\n    \"*://*.investorschronicle.co.uk/*\",\n    \"*://*.ipolitics.ca/*\",\n    \"*://*.irishexaminer.com/*\",\n    \"*://*.irishnews.com/*\",\n    \"*://*.irishtimes.com/*\",\n    \"*://*.italian.tech/*\",\n    \"*://*.italiaoggi.it/*\",\n    \"*://*.jacksonville.com/*\",\n    \"*://*.jacobin.de/*\",\n    \"*://*.japantimes.co.jp/*\",\n    \"*://*.jazzwise.com/*\",\n    \"*://*.jeuneafrique.com/*\",\n    \"*://*.jgnt.co/*\",\n    \"*://*.journaldemillau.fr/*\",\n    \"*://*.journaldemontreal.com/*\",\n    \"*://*.journaldequebec.com/*\",\n    \"*://*.journaldunet.com/*\",\n    \"*://*.journalnow.com/*\",\n    \"*://*.journalstar.com/*\",\n    \"*://*.jpost.com/*\",\n    \"*://*.jsonline.com/*\",\n    \"*://*.kansas.com/*\",\n    \"*://*.kansascity.com/*\",\n    \"*://*.kathimerini.gr/*\",\n    \"*://*.kentucky.com/*\",\n    \"*://*.kn-online.de/*\",\n    \"*://*.knack.be/*\",\n    \"*://*.knoxnews.com/*\",\n    \"*://*.kompas.id/*\",\n    \"*://*.komputerswiat.pl/*\",\n    \"*://*.krautreporter.de/*\",\n    \"*://*.ksta.de/*\",\n    \"*://*.kurier.at/*\",\n    \"*://*.kw.be/*\",\n    \"*://*.labusinessjournal.com/*\",\n    \"*://*.lacote.ch/*\",\n    \"*://*.ladepeche.fr/*\",\n    \"*://*.ladiaria.com.uy/*\",\n    \"*://*.lagaceta.com.ar/*\",\n    \"*://*.lalibre.be/*\",\n    \"*://*.lalsace.fr/*\",\n    \"*://*.lamontagne.fr/*\",\n    \"*://*.lanacion.com.ar/*\",\n    \"*://*.lanazione.it/*\",\n    \"*://*.lanouvellerepublique.fr/*\",\n    \"*://*.lanuovasardegna.it/*\",\n    \"*://*.laprovincia.es/*\",\n    \"*://*.lardennais.fr/*\",\n    \"*://*.larepubliquedespyrenees.fr/*\",\n    \"*://*.larioja.com/*\",\n    \"*://*.lasprovincias.es/*\",\n    \"*://*.lastampa.it/*\",\n    \"*://*.latercera.com/*\",\n    \"*://*.latimes.com/*\",\n    \"*://*.lavanguardia.com/*\",\n    \"*://*.lavenir.net/*\",\n    \"*://*.laverdad.es/*\",\n    \"*://*.lavoixdunord.fr/*\",\n    \"*://*.lavoz.com.ar/*\",\n    \"*://*.lavozdigital.es/*\",\n    \"*://*.lc.nl/*\",\n    \"*://*.le1hebdo.fr/*\",\n    \"*://*.lecho.be/*\",\n    \"*://*.lecourrierdesstrateges.fr/*\",\n    \"*://*.ledauphine.com/*\",\n    \"*://*.ledevoir.com/*\",\n    \"*://*.lefigaro.fr/*\",\n    \"*://*.legrandcontinent.eu/*\",\n    \"*://*.lehighvalleylive.com/*\",\n    \"*://*.leidschdagblad.nl/*\",\n    \"*://*.lejdd.fr/*\",\n    \"*://*.lejsl.com/*\",\n    \"*://*.lemagit.fr/*\",\n    \"*://*.lemessager.fr/*\",\n    \"*://*.lemonde.fr/*\",\n    \"*://*.lenouveleconomiste.fr/*\",\n    \"*://*.lenouvelliste.ch/*\",\n    \"*://*.leparisien.fr/*\",\n    \"*://*.lepoint.fr/*\",\n    \"*://*.leprogres.fr/*\",\n    \"*://*.lequipe.fr/*\",\n    \"*://*.lequotidiendumedecin.fr/*\",\n    \"*://*.lequotidiendupharmacien.fr/*\",\n    \"*://*.lerevenu.com/*\",\n    \"*://*.lescienze.it/*\",\n    \"*://*.lesechos.fr/*\",\n    \"*://*.lesinrocks.com/*\",\n    \"*://*.lesoir.be/*\",\n    \"*://*.lesoleil.com/*\",\n    \"*://*.lest-eclair.fr/*\",\n    \"*://*.letelegramme.fr/*\",\n    \"*://*.levante-emv.com/*\",\n    \"*://*.levif.be/*\",\n    \"*://*.lexpress.fr/*\",\n    \"*://*.libelle.be/*\",\n    \"*://*.libelle.nl/*\",\n    \"*://*.liberation-champagne.fr/*\",\n    \"*://*.liberation.fr/*\",\n    \"*://*.limburger.nl/*\",\n    \"*://*.linda.nl/*\",\n    \"*://*.lindependant.fr/*\",\n    \"*://*.linforme.com/*\",\n    \"*://*.literaryreview.co.uk/*\",\n    \"*://*.livelaw.in/*\",\n    \"*://*.livemint.com/*\",\n    \"*://*.ln-online.de/*\",\n    \"*://*.lne.es/*\",\n    \"*://*.loebclassics.com/*\",\n    \"*://*.loeildelaphotographie.com/*\",\n    \"*://*.lopinion.fr/*\",\n    \"*://*.losandes.com.ar/*\",\n    \"*://*.lrb.co.uk/*\",\n    \"*://*.lunion.fr/*\",\n    \"*://*.luzernerzeitung.ch/*\",\n    \"*://*.lvz.de/*\",\n    \"*://*.macrobusiness.com.au/*\",\n    \"*://*.madison.com/*\",\n    \"*://*.magazyn-kuchnia.pl/*\",\n    \"*://*.mailonsunday.co.uk/*\",\n    \"*://*.mainichi.jp/*\",\n    \"*://*.mallorcazeitung.es/*\",\n    \"*://*.manager-magazin.de/*\",\n    \"*://*.mannheimer-morgen.de/*\",\n    \"*://*.manoramaonline.com/*\",\n    \"*://*.marca.com/*\",\n    \"*://*.margriet.nl/*\",\n    \"*://*.marianne.net/*\",\n    \"*://*.marketwatch.com/*\",\n    \"*://*.masslive.com/*\",\n    \"*://*.maz-online.de/*\",\n    \"*://*.mcall.com/*\",\n    \"*://*.mcclatchy.com/*\",\n    \"*://*.mcclatchydc.com/*\",\n    \"*://*.medium.com/*\",\n    \"*://*.medscape.com/*\",\n    \"*://*.menshealth.com/*\",\n    \"*://*.mercurynews.com/*\",\n    \"*://*.merkur.de/*\",\n    \"*://*.mexiconewsdaily.com/*\",\n    \"*://*.miamiherald.com/*\",\n    \"*://*.mid-day.com/*\",\n    \"*://*.midilibre.fr/*\",\n    \"*://*.milanofinanza.it/*\",\n    \"*://*.mlive.com/*\",\n    \"*://*.moda.it/*\",\n    \"*://*.modernhealthcare.com/*\",\n    \"*://*.modernretail.co/*\",\n    \"*://*.monacomatin.mc/*\",\n    \"*://*.monocle.com/*\",\n    \"*://*.mopo.de/*\",\n    \"*://*.morgenpost.de/*\",\n    \"*://*.motorradonline.de/*\",\n    \"*://*.motorsportmagazine.com/*\",\n    \"*://*.mundodeportivo.com/*\",\n    \"*://*.mv-voice.com/*\",\n    \"*://*.nation.africa/*\",\n    \"*://*.nationalgeographic.com/*\",\n    \"*://*.nationalpost.com/*\",\n    \"*://*.nationalreview.com/*\",\n    \"*://*.nature.com/*\",\n    \"*://*.nautil.us/*\",\n    \"*://*.ndtvprofit.com/*\",\n    \"*://*.neuepresse.de/*\",\n    \"*://*.newcastleherald.com.au/*\",\n    \"*://*.newcriterion.com/*\",\n    \"*://*.newrepublic.com/*\",\n    \"*://*.news-press.com/*\",\n    \"*://*.newscientist.com/*\",\n    \"*://*.newsday.com/*\",\n    \"*://*.newslaundry.com/*\",\n    \"*://*.newsobserver.com/*\",\n    \"*://*.newstatesman.com/*\",\n    \"*://*.newsweek.com/*\",\n    \"*://*.newsweek.pl/*\",\n    \"*://*.newyorker.com/*\",\n    \"*://*.nhregister.com/*\",\n    \"*://*.niagarafallsreview.ca/*\",\n    \"*://*.nicematin.com/*\",\n    \"*://*.nieuwsblad.be/*\",\n    \"*://*.nikkei.com/*\",\n    \"*://*.nj.com/*\",\n    \"*://*.nola.com/*\",\n    \"*://*.noordhollandsdagblad.nl/*\",\n    \"*://*.nordlittoral.fr/*\",\n    \"*://*.northerndailyleader.com.au/*\",\n    \"*://*.northjersey.com/*\",\n    \"*://*.noz.de/*\",\n    \"*://*.nrc.nl/*\",\n    \"*://*.nrpyrenees.fr/*\",\n    \"*://*.nrz.de/*\",\n    \"*://*.nsctotal.com.br/*\",\n    \"*://*.nv.ua/*\",\n    \"*://*.nw.de/*\",\n    \"*://*.nwitimes.com/*\",\n    \"*://*.nwzonline.de/*\",\n    \"*://*.nybooks.com/*\",\n    \"*://*.nydailynews.com/*\",\n    \"*://*.nymag.com/*\",\n    \"*://*.nysun.com/*\",\n    \"*://*.nyteknik.se/*\",\n    \"*://*.nytimes.com/*\",\n    \"*://*.nzherald.co.nz/*\",\n    \"*://*.nzz.ch/*\",\n    \"*://*.observador.pt/*\",\n    \"*://*.ocbj.com/*\",\n    \"*://*.ocregister.com/*\",\n    \"*://*.oklahoman.com/*\",\n    \"*://*.ole.com.ar/*\",\n    \"*://*.omaha.com/*\",\n    \"*://*.onet.pl/*\",\n    \"*://*.oprahdaily.com/*\",\n    \"*://*.oregonlive.com/*\",\n    \"*://*.orlandosentinel.com/*\",\n    \"*://*.ostsee-zeitung.de/*\",\n    \"*://*.otz.de/*\",\n    \"*://*.ouest-france.fr/*\",\n    \"*://*.outdoorlife.com/*\",\n    \"*://*.outlookbusiness.com/*\",\n    \"*://*.outlookindia.com/*\",\n    \"*://*.outsideonline.com/*\",\n    \"*://*.ovb-online.de/*\",\n    \"*://*.oxygenmag.com/*\",\n    \"*://*.paloaltoonline.com/*\",\n    \"*://*.paris-normandie.fr/*\",\n    \"*://*.parismatch.com/*\",\n    \"*://*.parkiet.com/*\",\n    \"*://*.parool.nl/*\",\n    \"*://*.pastemagazine.com/*\",\n    \"*://*.pb.pl/*\",\n    \"*://*.pennlive.com/*\",\n    \"*://*.petitbleu.fr/*\",\n    \"*://*.philanthropy.com/*\",\n    \"*://*.philomag.com/*\",\n    \"*://*.philomag.de/*\",\n    \"*://*.philonomist.com/*\",\n    \"*://*.philosophynow.org/*\",\n    \"*://*.pilotonline.com/*\",\n    \"*://*.pionline.com/*\",\n    \"*://*.piqd.de/*\",\n    \"*://*.piratewires.com/*\",\n    \"*://*.plasticsnews.com/*\",\n    \"*://*.politicaexterior.com/*\",\n    \"*://*.politico.com/*\",\n    \"*://*.politis.fr/*\",\n    \"*://*.polityka.pl/*\",\n    \"*://*.popsci.com/*\",\n    \"*://*.popularmechanics.com/*\",\n    \"*://*.post-gazette.com/*\",\n    \"*://*.pourlascience.fr/*\",\n    \"*://*.pourleco.com/*\",\n    \"*://*.precisionmedicineonline.com/*\",\n    \"*://*.pressenterprise.com/*\",\n    \"*://*.prevention.com/*\",\n    \"*://*.profi.de/*\",\n    \"*://*.profil.at/*\",\n    \"*://*.project-syndicate.org/*\",\n    \"*://*.prospectmagazine.co.uk/*\",\n    \"*://*.public.fr/*\",\n    \"*://*.publico.es/*\",\n    \"*://*.puck.news/*\",\n    \"*://*.pzc.nl/*\",\n    \"*://*.quora.com/*\",\n    \"*://*.quotidiano.net/*\",\n    \"*://*.quotidianodipuglia.it/*\",\n    \"*://*.qz.com/*\",\n    \"*://*.rechargenews.com/*\",\n    \"*://*.reforme.net/*\",\n    \"*://*.repubblica.it/*\",\n    \"*://*.republicain-lorrain.fr/*\",\n    \"*://*.reuters.com/*\",\n    \"*://*.reviewjournal.com/*\",\n    \"*://*.revistaoeste.com/*\",\n    \"*://*.revue21.fr/*\",\n    \"*://*.revueconflits.com/*\",\n    \"*://*.rheinpfalz.de/*\",\n    \"*://*.richmond.com/*\",\n    \"*://*.rnd.de/*\",\n    \"*://*.roadandtrack.com/*\",\n    \"*://*.rollingstone.com/*\",\n    \"*://*.rp-online.de/*\",\n    \"*://*.rp.pl/*\",\n    \"*://*.rubbernews.com/*\",\n    \"*://*.rugbypass.com/*\",\n    \"*://*.rugbyrama.fr/*\",\n    \"*://*.ruhrnachrichten.de/*\",\n    \"*://*.rundschau-online.de/*\",\n    \"*://*.runnersworld.com/*\",\n    \"*://*.saarbruecker-zeitung.de/*\",\n    \"*://*.sabado.pt/*\",\n    \"*://*.sacbee.com/*\",\n    \"*://*.saechsische.de/*\",\n    \"*://*.sandiegouniontribune.com/*\",\n    \"*://*.scholastic.com/*\",\n    \"*://*.schweizermonat.ch/*\",\n    \"*://*.science-et-vie.com/*\",\n    \"*://*.science.org/*\",\n    \"*://*.sciencenews.org/*\",\n    \"*://*.sciencesetavenir.fr/*\",\n    \"*://*.scienceshumaines.com/*\",\n    \"*://*.scientificamerican.com/*\",\n    \"*://*.scmp.com/*\",\n    \"*://*.scotsman.com/*\",\n    \"*://*.sdbj.com/*\",\n    \"*://*.seattletimes.com/*\",\n    \"*://*.sfchronicle.com/*\",\n    \"*://*.sfstandard.com/*\",\n    \"*://*.sfvbj.com/*\",\n    \"*://*.shreveportbossieradvocate.com/*\",\n    \"*://*.shz.de/*\",\n    \"*://*.si.com/*\",\n    \"*://*.silive.com/*\",\n    \"*://*.skimag.com/*\",\n    \"*://*.sky.it/*\",\n    \"*://*.slate.com/*\",\n    \"*://*.slideshare.net/*\",\n    \"*://*.sloanreview.mit.edu/*\",\n    \"*://*.sltrib.com/*\",\n    \"*://*.smartcompany.com.au/*\",\n    \"*://*.smh.com.au/*\",\n    \"*://*.sofrep.com/*\",\n    \"*://*.sourcingjournal.com/*\",\n    \"*://*.spectator.co.uk/*\",\n    \"*://*.spectator.com.au/*\",\n    \"*://*.spektrum.de/*\",\n    \"*://*.spglobal.com/*\",\n    \"*://*.spiegel.de/*\",\n    \"*://*.sportico.com/*\",\n    \"*://*.springermedizin.de/*\",\n    \"*://*.standaard.be/*\",\n    \"*://*.standard.co.uk/*\",\n    \"*://*.standard.net.au/*\",\n    \"*://*.standardmedia.co.ke/*\",\n    \"*://*.star-telegram.com/*\",\n    \"*://*.staradvertiser.com/*\",\n    \"*://*.startribune.com/*\",\n    \"*://*.statesman.com/*\",\n    \"*://*.statnews.com/*\",\n    \"*://*.stcatharinesstandard.ca/*\",\n    \"*://*.stereogum.com/*\",\n    \"*://*.stern.de/*\",\n    \"*://*.stltoday.com/*\",\n    \"*://*.stocknews.com/*\",\n    \"*://*.straitstimes.com/*\",\n    \"*://*.stratfor.com/*\",\n    \"*://*.study.com/*\",\n    \"*://*.stylist.co.uk/*\",\n    \"*://*.sudinfo.be/*\",\n    \"*://*.sudouest.fr/*\",\n    \"*://*.sueddeutsche.de/*\",\n    \"*://*.suedkurier.de/*\",\n    \"*://*.sun-sentinel.com/*\",\n    \"*://*.suomensotilas.fi/*\",\n    \"*://*.sustainableplastics.com/*\",\n    \"*://*.swarajyamag.com/*\",\n    \"*://*.sydsvenskan.se/*\",\n    \"*://*.syracuse.com/*\",\n    \"*://*.t3n.de/*\",\n    \"*://*.tagblatt.ch/*\",\n    \"*://*.tagesanzeiger.ch/*\",\n    \"*://*.tagesspiegel.de/*\",\n    \"*://*.tampabay.com/*\",\n    \"*://*.tdg.ch/*\",\n    \"*://*.techinasia.com/*\",\n    \"*://*.technologyreview.com/*\",\n    \"*://*.techtarget.com/*\",\n    \"*://*.telegraaf.nl/*\",\n    \"*://*.telegraph.co.uk/*\",\n    \"*://*.telerama.fr/*\",\n    \"*://*.tennessean.com/*\",\n    \"*://*.tes.com/*\",\n    \"*://*.texasmonthly.com/*\",\n    \"*://*.the-american-interest.com/*\",\n    \"*://*.the-independent.com/*\",\n    \"*://*.the-scientist.com/*\",\n    \"*://*.the-tls.co.uk/*\",\n    \"*://*.theadvocate.com.au/*\",\n    \"*://*.theadvocate.com/*\",\n    \"*://*.theage.com.au/*\",\n    \"*://*.theamericanconservative.com/*\",\n    \"*://*.theamericanscholar.org/*\",\n    \"*://*.theartnewspaper.com/*\",\n    \"*://*.theatlantic.com/*\",\n    \"*://*.theaustralian.com.au/*\",\n    \"*://*.thebaffler.com/*\",\n    \"*://*.thebaltimorebanner.com/*\",\n    \"*://*.theblaze.com/*\",\n    \"*://*.thebookseller.com/*\",\n    \"*://*.thebulletin.org/*\",\n    \"*://*.thechronicle.com.au/*\",\n    \"*://*.thecourier.com.au/*\",\n    \"*://*.thecritic.co.uk/*\",\n    \"*://*.thecut.com/*\",\n    \"*://*.thedailybeast.com/*\",\n    \"*://*.thediplomat.com/*\",\n    \"*://*.thedispatch.com/*\",\n    \"*://*.theepochtimes.com/*\",\n    \"*://*.theglobeandmail.com/*\",\n    \"*://*.thehill.com/*\",\n    \"*://*.thehindu.com/*\",\n    \"*://*.thehindubusinessline.com/*\",\n    \"*://*.theimpression.com/*\",\n    \"*://*.theinitium.com/*\",\n    \"*://*.theintercept.com/*\",\n    \"*://*.thejuggernaut.com/*\",\n    \"*://*.thelampmagazine.com/*\",\n    \"*://*.thelawyer.com/*\",\n    \"*://*.theleaflet.in/*\",\n    \"*://*.thelogic.co/*\",\n    \"*://*.themandarin.com.au/*\",\n    \"*://*.themarker.com/*\",\n    \"*://*.themarket.ch/*\",\n    \"*://*.themercury.com.au/*\",\n    \"*://*.thenation.com/*\",\n    \"*://*.thenewatlantis.com/*\",\n    \"*://*.theneweuropean.co.uk/*\",\n    \"*://*.thenewslens.com/*\",\n    \"*://*.thenewsminute.com/*\",\n    \"*://*.thepeterboroughexaminer.com/*\",\n    \"*://*.thepointmag.com/*\",\n    \"*://*.theprovince.com/*\",\n    \"*://*.thequint.com/*\",\n    \"*://*.therecord.com/*\",\n    \"*://*.thesaturdaypaper.com.au/*\",\n    \"*://*.thescottishsun.co.uk/*\",\n    \"*://*.thespec.com/*\",\n    \"*://*.thespectator.com/*\",\n    \"*://*.thestage.co.uk/*\",\n    \"*://*.thestar.com/*\",\n    \"*://*.thestate.com/*\",\n    \"*://*.thesun.co.uk/*\",\n    \"*://*.thetimes.com/*\",\n    \"*://*.theverge.com/*\",\n    \"*://*.theweek.com/*\",\n    \"*://*.thewest.com.au/*\",\n    \"*://*.thewrap.com/*\",\n    \"*://*.thisismoney.co.uk/*\",\n    \"*://*.thueringer-allgemeine.de/*\",\n    \"*://*.tijd.be/*\",\n    \"*://*.timeshighereducation.com/*\",\n    \"*://*.timesunion.com/*\",\n    \"*://*.tirebusiness.com/*\",\n    \"*://*.tlz.de/*\",\n    \"*://*.topagrar.com/*\",\n    \"*://*.torontosun.com/*\",\n    \"*://*.towardsdatascience.com/*\",\n    \"*://*.townandcountrymag.com/*\",\n    \"*://*.townsvillebulletin.com.au/*\",\n    \"*://*.tradewindsnews.com/*\",\n    \"*://*.trailrunnermag.com/*\",\n    \"*://*.tri-cityherald.com/*\",\n    \"*://*.triathlete.com/*\",\n    \"*://*.trouw.nl/*\",\n    \"*://*.tt.com/*\",\n    \"*://*.tubantia.nl/*\",\n    \"*://*.tucson.com/*\",\n    \"*://*.tulsaworld.com/*\",\n    \"*://*.tuttosport.com/*\",\n    \"*://*.tvn24.pl/*\",\n    \"*://*.twincities.com/*\",\n    \"*://*.unherd.com/*\",\n    \"*://*.uol.com.br/*\",\n    \"*://*.upstreamonline.com/*\",\n    \"*://*.usatoday.com/*\",\n    \"*://*.usinenouvelle.com/*\",\n    \"*://*.utech-polyurethane.com/*\",\n    \"*://*.valeursactuelles.com/*\",\n    \"*://*.vancouversun.com/*\",\n    \"*://*.vanityfair.com/*\",\n    \"*://*.variety.com/*\",\n    \"*://*.varmatin.com/*\",\n    \"*://*.vegetariantimes.com/*\",\n    \"*://*.vice.com/*\",\n    \"*://*.vikatan.com/*\",\n    \"*://*.vn.at/*\",\n    \"*://*.vn.nl/*\",\n    \"*://*.vosgesmatin.fr/*\",\n    \"*://*.vogue.co.uk/*\",\n    \"*://*.vogue.com/*\",\n    \"*://*.voguebusiness.com/*\",\n    \"*://*.vol.at/*\",\n    \"*://*.volksfreund.de/*\",\n    \"*://*.volkskrant.nl/*\",\n    \"*://*.vox.com/*\",\n    \"*://*.vulture.com/*\",\n    \"*://*.washingtonexaminer.com/*\",\n    \"*://*.washingtonpost.com/*\",\n    \"*://*.watoday.com.au/*\",\n    \"*://*.waz.de/*\",\n    \"*://*.weeklytimesnow.com.au/*\",\n    \"*://*.wellandtribune.ca/*\",\n    \"*://*.welt.de/*\",\n    \"*://*.weltkunst.de/*\",\n    \"*://*.weser-kurier.de/*\",\n    \"*://*.westernadvocate.com.au/*\",\n    \"*://*.wiesbadener-kurier.de/*\",\n    \"*://*.winnipegfreepress.com/*\",\n    \"*://*.wired.com/*\",\n    \"*://*.wochenblatt.com/*\",\n    \"*://*.womenshealth.de/*\",\n    \"*://*.womenshealthmag.com/*\",\n    \"*://*.womensrunning.com/*\",\n    \"*://*.wonderzine.com/*\",\n    \"*://*.wp.de/*\",\n    \"*://*.wr.de/*\",\n    \"*://*.wsj.com/*\",\n    \"*://*.wwd.com/*\",\n    \"*://*.wyborcza.biz/*\",\n    \"*://*.wyborcza.pl/*\",\n    \"*://*.wysokieobcasy.pl/*\",\n    \"*://*.ynet.co.il/*\",\n    \"*://*.yogajournal.com/*\",\n    \"*://*.yorkshirepost.co.uk/*\",\n    \"*://*.zeit.de/*\",\n    \"*://*.zerohedge.com/*\",\n    \"*://*.amplitude.com/*\",\n    \"*://*.ampproject.org/*\",\n    \"*://*.axate.io/*\",\n    \"*://*.blueconic.net/*\",\n    \"*://*.cxense.com/*\",\n    \"*://*.ensighten.com/*\",\n    \"*://*.evolok.net/*\",\n    \"*://*.fewcents.co/*\",\n    \"*://*.matheranalytics.com/*\",\n    \"*://*.newsmemory.com/*\",\n    \"*://*.omeda.com/*\",\n    \"*://*.onecount.net/*\",\n    \"*://*.pelcro.com/*\",\n    \"*://*.piano.io/*\",\n    \"*://*.pico.tools/*\",\n    \"*://*.poool.fr/*\",\n    \"*://*.qiota.com/*\",\n    \"*://*.sophi.io/*\",\n    \"*://*.steadyhq.com/*\",\n    \"*://*.tinypass.com/*\",\n    \"*://*.zephr.com/*\",\n    \"*://*.blink.net/*\",\n    \"*://*.bwbx.io/*\",\n    \"*://*.cedscdn.it/*\",\n    \"*://*.cedsdigital.it/*\",\n    \"*://*.corriereobjects.it/*\",\n    \"*://*.djservices.io/*\",\n    \"*://*.dowjones.io/*\",\n    \"*://*.emol.cl/*\",\n    \"*://*.epochbase.com/*\",\n    \"*://*.epochbase.eu/*\",\n    \"*://*.flip-pay.com/*\",\n    \"*://*.funkemedien.de/*\",\n    \"*://*.gjirafa.tech/*\",\n    \"*://*.go.com/*\",\n    \"*://*.hadrianpaywall.com/*\",\n    \"*://*.medscapestatic.com/*\",\n    \"*://*.ndcmediagroep.nl/*\",\n    \"*://*.nhst.tech/*\",\n    \"*://*.nyt.com/*\",\n    \"*://*.townnews.com/*\",\n    \"*://*.wallkit.net/*\",\n    \"*://*.wgchrrammzv.com/*\",\n    \"*://archive.fo/*\",\n    \"*://archive.is/*\",\n    \"*://archive.li/*\",\n    \"*://archive.md/*\",\n    \"*://archive.ph/*\",\n    \"*://archive.vn/*\",\n    \"*://codebeautify.org/*\",\n    \"*://gitflic.ru/*\"\n  ],\n  \"version\": \"4.1.4.0\"\n}\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/backup/bypass-paywalls-chrome-clean-master/sites.js",
                "filename": "sites.js",
                "content": "var defaultSites = {\n  \"* BPC settings\": {\n    domain: \"###\"\n  },\n  \"Show options on update\": {\n    domain: \"#options_on_update\"\n  },\n  \"Enable new sites by default\": {\n    domain: \"#options_enable_new_sites\"\n  },\n  \"Check for update rules at startup\": {\n    domain: \"#options_optin_update_rules\"\n  },\n  \"* Default sites\": {\n    domain: \"###\"\n  },\n  \"60 Millions de consommateurs\": {\n    domain: \"60millions-mag.com\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Aachener Zeitung (fetch from archive.is)\": {\n    domain: \"aachener-zeitung.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Abcmais.com\": {\n    domain: \"abcmais.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/,\n    cs_dompurify: 1\n  },\n  \"Actu.fr\": {\n    domain: \"actu.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Advance Local\": {\n    domain: \"###_usa_adv_local\",\n    group: [\n      \"al.com\",\n      \"cleveland.com\",\n      \"lehighvalleylive.com\",\n      \"masslive.com\",\n      \"mlive.com\",\n      \"nj.com\",\n      \"oregonlive.com\",\n      \"pennlive.com\",\n      \"silive.com\",\n      \"syracuse.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.sophi\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"Adweek\": {\n    domain: \"adweek.com\",\n    useragent: \"googlebot\"\n  },\n  \"Al-Monitor (fetch from archive.is)\": {\n    domain: \"al-monitor.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Albuquerque Journal\": {\n    domain: \"abqjournal.com\",\n    allow_cookies: 1,\n    block_regex: /\\.abqjournal\\.com\\/.+\\/tncms\\/api\\/access\\..+\\.js/,\n    cs_dompurify: 1\n  },\n  \"Algemeen Dagblad (+ regional/ADR; fetch from archive.is)\": {\n    domain: \"###_nl_dpg_adr\",\n    group: [\n      \"ad.nl\",\n      \"bd.nl\",\n      \"bndestem.nl\",\n      \"destentor.nl\",\n      \"ed.nl\",\n      \"gelderlander.nl\",\n      \"pzc.nl\",\n      \"tubantia.nl\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"temptation\\\\.{domain}\\\\/temptation\\\\.js\",\n    cs_dompurify: 1\n  },\n  \"Alternatives Economiques\": {\n    domain: \"alternatives-economiques.fr\",\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Ámbito\": {\n    domain: \"ambito.com\",\n    remove_cookies_select_drop: [\"TDNotesRead\"]\n  },\n  \"America's Test Kitchen\": {\n    domain: \"americastestkitchen.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"American Affairs\": {\n    domain: \"americanaffairsjournal.org\",\n    allow_cookies: 1,\n    block_regex: /\\/americanaffairsjournal\\.org\\/wp-content\\/mu-plugins\\/app\\/src\\/paywall\\/paywall\\.js/\n  },\n  \"American Banker (+ Arizent/opt-in to custom sites)\": {\n    domain: \"americanbanker.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"American Purpose\": {\n    domain: \"americanpurpose.com\",\n    allow_cookies: 1,\n    block_regex: /\\/steadyhq\\.com\\//\n  },\n  \"Aoc.media\": {\n    domain: \"aoc.media\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//,\n    cs_dompurify: 1\n  },\n  \"Apollo Magazine\": {\n    domain: \"apollo-magazine.com\"\n  },\n  \"ARA\": {\n    domain: \"###_cat_ara\",\n    group: [\n      \"ara.cat\",\n      \"arabalears.cat\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n    useragent: \"googlebot\"\n  },\n  \"Artforum\": {\n    domain: \"artforum.com\"\n  },\n  \"Artnet\": {\n    domain: \"artnet.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.artnet\\.com\\/paywall-ajax\\.php|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"Ärzte Zeitung\": {\n    domain: \"aerztezeitung.de\",\n    allow_cookies: 1\n  },\n  \"Atavist Magazine\": {\n    domain: \"atavist.com\"\n  },\n  \"Atlantico.fr\": {\n    domain: \"atlantico.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.tonos\\.gjirafa\\.tech\\/init\\/access/\n  },\n  \"Australia News Corp\": {\n    domain: \"###_au_news_corp\",\n    group: [\n      \"adelaidenow.com.au\",\n      \"cairnspost.com.au\",\n      \"codesports.com.au\",\n      \"couriermail.com.au\",\n      \"dailytelegraph.com.au\",\n      \"geelongadvertiser.com.au\",\n      \"goldcoastbulletin.com.au\",\n      \"heraldsun.com.au\",\n      \"theaustralian.com.au\",\n      \"thechronicle.com.au\",\n      \"themercury.com.au\",\n      \"townsvillebulletin.com.au\",\n      \"weeklytimesnow.com.au\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n  },\n  \"Australian Community Media (opt-in to custom sites for unlisted)\": {\n    domain: \"###_au_comm_media\",\n    group: [\n      \"bendigoadvertiser.com.au\",\n      \"bordermail.com.au\",\n      \"canberratimes.com.au\",\n      \"centralwesterndaily.com.au\",\n      \"dailyadvertiser.com.au\",\n      \"dailyliberal.com.au\",\n      \"examiner.com.au\",\n      \"illawarramercury.com.au\",\n      \"newcastleherald.com.au\",\n      \"northerndailyleader.com.au\",\n      \"standard.net.au\",\n      \"theadvocate.com.au\",\n      \"thecourier.com.au\",\n      \"westernadvocate.com.au\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Australia Nine Entertainment\": {\n    domain: \"###_au_nine_ent\",\n    group: [\n      \"afr.com\",\n      \"brisbanetimes.com.au\",\n      \"smh.com.au\",\n      \"theage.com.au\",\n      \"watoday.com.au\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/,\n    exception: [{\n        domain: \"afr.com\",\n        allow_cookies: 1,\n        block_regex: /\\.tinypass\\.com\\//,\n        cs_dompurify: 1\n      }\n    ]\n  },\n  \"Autocar.co.uk\": {\n    domain: \"autocar.co.uk\",\n    allow_cookies: 1\n  },\n  \"AutoHebdo.fr\": {\n    domain: \"autohebdo.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Automobilwoche\": {\n    domain: \"automobilwoche.de\",\n    allow_cookies: 1,\n    block_regex: /\\.automobilwoche\\.de\\/sites\\/camw\\/files\\/js\\/js_.+\\.js/\n  },\n  \"AutoPlus.fr\": {\n    domain: \"autoplus.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Autosport (free articles only)\": {\n    domain: \"autosport.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Axios\": {\n    domain: \"axios.com\",\n    allow_cookies: 1\n  },\n  \"Balkan Insight\": {\n    domain: \"balkaninsight.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Bar and Bench\": {\n    domain: \"barandbench.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Barron's\": {\n    domain: \"barrons.com\",\n    allow_cookies: 1,\n    block_regex: /\\.cxense\\.com\\//\n  },\n  \"BBC History Extra\": {\n    domain: \"historyextra.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Belfast Telegraph\": {\n    domain: \"belfasttelegraph.co.uk\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Benzinga\": {\n    domain: \"benzinga.com\"\n  },\n  \"Bergens Tidende\": {\n    domain: \"bt.no\",\n    allow_cookies: 1,\n    useragent: \"facebookbot\"\n  },\n  \"Berliner Zeitung\": {\n    domain: \"berliner-zeitung.de\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Berlingske\": {\n    domain: \"berlingske.dk\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Bhaskar\": {\n    domain: \"bhaskar.com\",\n    allow_cookies: 1\n  },\n  \"Bild (fetch from archive.is)\": {\n    domain: \"bild.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Blaze Media\": {\n    domain: \"theblaze.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Bloomberg\": {\n    domain: \"bloomberg.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.cm\\.bloomberg\\.com\\/|assets\\.bwbx\\.io\\/s\\d\\/javelin\\/.+\\/transporter\\/)/\n  },\n  \"Bloomberg Adria\": {\n    domain: \"bloombergadria.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\.bloombergadria\\.com\\/.+\\/news/\n  },\n  \"BNP Media (opt-in to custom sites)\": {\n    domain: \"###_usa_bnp_media\",\n    allow_cookies: 1,\n    block_regex: /\\/paywall\\/evercookie_get\\.js/\n  },\n  \"Bonnier News Group (SE; opt-in to custom sites for unlisted)\": {\n    domain: \"###_se_bonnier_group\",\n    group: [\n      \"dagensmedicin.se\",\n      \"dn.se\",\n      \"hd.se\",\n      \"sydsvenskan.se\"\n    ],\n    allow_cookies: 1,\n    useragent: \"googlebot\",\n    exception: [{\n        domain: \"dn.se\",\n        allow_cookies: 1,\n        cs_dompurify: 1\n      }\n    ]\n  },\n  \"Börsen-Zeitung\": {\n    domain: \"boersen-zeitung.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Bridge Tower Media (opt-in to custom sites)\": {\n    domain: \"###_usa_bridge_tower\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/script\\\\.js\"\n  },\n  \"Brill\": {\n    domain: \"brill.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Bulletin of the Atomic Scientists\": {\n    domain: \"thebulletin.org\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"BusinessAM.be\": {\n    domain: \"businessam.be\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"BusinessDesk.co.nz\": {\n    domain: \"businessdesk.co.nz\",\n    allow_cookies: 1,\n    useragent_custom: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n    cs_dompurify: 1\n  },\n  \"Business Insider\": {\n    domain: \"businessinsider.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.businessinsider\\.com\\/chunks\\/scripts\\/\\d.+\\.js|\\.sophi\\.io\\/)/\n  },\n  \"Business Insider Japan\": {\n    domain: \"businessinsider.jp\",\n    allow_cookies: 1,\n    block_regex: /(\\.cxense\\.com\\/|\\.piano\\.io\\/)/\n  },\n  \"Business Insider Nederland\": {\n    domain: \"businessinsider.nl\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"Business Post.ie (fetch from archive.is)\": {\n    domain: \"businesspost.ie\",\n    allow_cookies: 1,\n    block_regex: /\\.businesspost\\.ie\\/api\\/tinypass\\.min\\.js/,\n    cs_dompurify: 1\n  },\n  \"Business Standard\": {\n    domain: \"business-standard.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"California Business Journals\": {\n    domain: \"###_usa_cbj\",\n    group: [\n      \"labusinessjournal.com\",\n      \"ocbj.com\",\n      \"sdbj.com\",\n      \"sfvbj.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\/olytics\\.omeda\\.com\\//\n  },\n  \"Cambio Colombia\": {\n    domain: \"cambiocolombia.com\",\n    allow_cookies: 1,\n    block_regex: /\\.cambiocolombia\\.com\\/_next\\/static\\/chunks\\/1036\\..+\\.js/\n  },\n  \"Capital.bg\": {\n    domain: \"capital.bg\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Capital.fr\": {\n    domain: \"capital.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"CartaCapital\": {\n    domain: \"cartacapital.com.br\",\n    allow_cookies: 1\n  },\n  \"Causeur\": {\n    domain: \"causeur.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"CH Media (opt-in to custom sites for unlisted)\": {\n    domain: \"###_ch_media\",\n    group: [\n      \"aargauerzeitung.ch\",\n      \"luzernerzeitung.ch\",\n      \"tagblatt.ch\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.zephr\\.com\\/zephr-browser\\//,\n    useragent: \"googlebot\"\n  },\n  \"Challenges\": {\n    domain: \"challenges.fr\",\n    allow_cookies: 1,\n    block_regex: /(\\.poool\\.fr\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Charlie Hebdo\": {\n    domain: \"charliehebdo.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Chemical & Engineering News\": {\n    domain: \"cen.acs.org\"\n  },\n  \"Citywire\": {\n    domain: \"citywire.com\",\n    allow_cookies: 1,\n    useragent: \"facebookbot\"\n  },\n  \"CNBC (news only)\": {\n    domain: \"cnbc.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"CNHI Group (opt-in to custom sites)\": {\n    domain: \"###_usa_cnhi\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: /(\\/tncms\\/api\\/access(\\..+)?\\.js|\\.newsmemory\\.com\\/\\?meter)/,\n    cs_dompurify: 1\n  },\n  \"CNN\": {\n    domain: \"cnn.com\",\n    allow_cookies: 1\n  },\n  \"Commentary Magazine\": {\n    domain: \"commentary.org\",\n    block_regex: /\\.commentary\\.org\\/.+\\/js\\/dg-locker-public\\.js/\n  },\n  \"CommonWealth Magazine Taiwan (free articles only)\": {\n    domain: \"cw.com.tw\"\n  },\n  \"Condé Nast magazines\": {\n    domain: \"###_usa_conde_nast\",\n    group: [\n      \"architecturaldigest.com\",\n      \"bonappetit.com\",\n      \"cntraveler.com\",\n      \"epicurious.com\",\n      \"gq.com\",\n      \"newyorker.com\",\n      \"vanityfair.com\",\n      \"vogue.co.uk\",\n      \"vogue.com\",\n      \"wired.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"www\\\\.{domain}\\\\/[-\\\\w]+$\"\n  },\n  \"Connaissance des Arts\": {\n    domain: \"connaissancedesarts.com\",\n    allow_cookies: 1,\n    block_regex: /\\.connaissancedesarts\\.com\\/wp-content\\/.+\\/vendor\\/iptools-jquery-inview\\.min\\.js/\n  },\n  \"Correio do Povo\": {\n    domain: \"correiodopovo.com.br\",\n    allow_cookies: 1,\n    block_regex: /(paywall\\.correiodopovo\\.com\\.br|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Corriere della Sera\": {\n    domain: \"corriere.it\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.corriereobjects\\.it\\/.+\\/js\\/_paywall\\.sjs|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"Corriere dello Sport\": {\n    domain: \"corrieredellosport.it\",\n    allow_cookies: 1\n  },\n  \"Cosmopolitan.fr\": {\n    domain: \"cosmopolitan.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Courrier international (fetch from archive.is)\": {\n    domain: \"courrierinternational.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"Crain Communications\": {\n    domain: \"###_usa_craincomm\",\n    group: [\n      \"360dx.com\",\n      \"adage.com\",\n      \"autonews.com\",\n      \"chicagobusiness.com\",\n      \"crainscleveland.com\",\n      \"crainsdetroit.com\",\n      \"crainsgrandrapids.com\",\n      \"crainsnewyork.com\",\n      \"european-rubber-journal.com\",\n      \"genomeweb.com\",\n      \"modernhealthcare.com\",\n      \"pionline.com\",\n      \"plasticsnews.com\",\n      \"precisionmedicineonline.com\",\n      \"rubbernews.com\",\n      \"sustainableplastics.com\",\n      \"tirebusiness.com\",\n      \"utech-polyurethane.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(js\\\\.pelcro\\\\.com\\\\/|{domain}\\\\/profiles\\\\/.+\\\\/crain_pelcro_user\\\\.js)\",\n    exception: [{\n        domain: [\"adage.com\", \"autonews.com\"],\n        allow_cookies: 1,\n        block_regex: /(js\\.pelcro\\.com\\/|\\.piano\\.io\\/)/,\n        cs_dompurify: 1\n      }, {\n        domain: \"european-rubber-journal.com\",\n        allow_cookies: 1\n      }, {\n        domain: [\"pionline.com\", \"rubbernews.com\"],\n        allow_cookies: 1,\n        block_regex: /(js\\.pelcro\\.com\\/|\\.com\\/sites\\/.+\\/js_.+\\.js)/\n      }\n    ]\n  },\n  \"Crusoe.com.br\": {\n    domain: \"crusoe.com.br\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Dagens ETC\": {\n    domain: \"etc.se\",\n    allow_cookies: 1\n  },\n  \"CyclingNews\": {\n    domain: \"cyclingnews.com\",\n    allow_cookies: 1\n  },\n  \"Dagsavisen.no\": {\n    domain: \"dagsavisen.no\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Daily Mail Group UK\": {\n    domain: \"###_uk_dmg_media\",\n    group: [\n      \"dailymail.co.uk\",\n      \"mailonsunday.co.uk\",\n      \"thisismoney.co.uk\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/zephr\\\\/feature\"\n  },\n  \"De Tijd\": {\n    domain: \"tijd.be\",\n    referer: \"google\"\n  },\n  \"Decanter (not reviews)\": {\n    domain: \"decanter.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Defector\": {\n    domain: \"defector.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Denik.cz\": {\n    domain: \"denik.cz\",\n    allow_cookies: 1,\n    block_js_inline: /\\.denik\\.cz\\/.+\\.html/\n  },\n  \"Der Freitag\": {\n    domain: \"freitag.de\",\n    allow_cookies: 1\n  },\n  \"Der Spiegel (fetch from archive.is)\": {\n    domain: \"spiegel.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Der Tagesspiegel (fetch from archive.is; not background/checkpoint)\": {\n    domain: \"tagesspiegel.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Deutscher Fachverlag Mediengruppe (opt-in to custom sites)\": {\n    domain: \"###_de_dfv_medien\",\n    group: [],\n    allow_cookies: 1,\n    useragent: \"googlebot\",\n    cs_code: [{\"cond\":\"div.Ad\", \"rm_elem\":1}]\n  },\n  \"Diario de Navarra (text only)\": {\n    domain: \"diariodenavarra.es\",\n    allow_cookies: 1\n  },\n  \"Diário de Notícias (dn.pt)\": {\n    domain: \"dn.pt\",\n    allow_cookies: 1,\n    block_regex: /\\.dn\\.pt\\/.+\\/evolok\\/.+\\/ev-em\\.min\\.js/\n  },\n  \"Diario Financiero (df.cl)\": {\n    domain: \"df.cl\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Die Rheinpfalz\": {\n    domain: \"rheinpfalz.de\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    useragent: \"googlebot\"\n  },\n  \"Die Welt (fetch from archive.is)\": {\n    domain: \"welt.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Die Zeit (fetch from archive.is)\": {\n    domain: \"zeit.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Digiday Media\": {\n    domain: \"###_usa_digiday\",\n    group: [\n      \"digiday.com\",\n      \"glossy.co\",\n      \"modernretail.co\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"DigiTimes Asia\": {\n    domain: \"digitimes.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    useragent: \"googlebot\"\n  },\n  \"Discover Magazine\": {\n    domain: \"discovermagazine.com\"\n  },\n  \"DK Medier Group (opt-in to custom sites)\": {\n    domain: \"###_dk_medier\",\n    group: [],\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"DN Media Group\": {\n    domain: \"###_no_dn_media\",\n    group: [\n      \"dn.no\",\n      \"europower.no\",\n      \"fiskeribladet.no\",\n      \"hydrogeninsight.com\",\n      \"intrafish.com\",\n      \"intrafish.no\",\n      \"rechargenews.com\",\n      \"tradewindsnews.com\",\n      \"upstreamonline.com\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1,\n    exception: [{\n        domain: \"tradewindsnews.com\",\n        allow_cookies: 1,\n        block_regex: /subscription-static-global\\.nhst\\.tech\\//,\n      }\n    ]\n  },\n  \"Dnevnik.bg\": {\n    domain: \"dnevnik.bg\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Domani\": {\n    domain: \"editorialedomani.it\",\n    allow_cookies: 1,\n    block_regex: /(\\.editorialedomani\\.it\\/pelcro\\.js|js\\.pelcro\\.com\\/)/,\n    useragent: \"googlebot\"\n  },\n  \"Doorbraak.be\": {\n    domain: \"doorbraak.be\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"DPG Media (not ADR)\": {\n    domain: \"###_nl_dpg_media\",\n    group: [\n      \"demorgen.be\",\n      \"flair.nl\",\n      \"humo.be\",\n      \"libelle.nl\",\n      \"margriet.nl\",\n      \"parool.nl\",\n      \"trouw.nl\",\n      \"volkskrant.nl\"\n    ],\n    remove_cookies_select_drop: [\"TID_ID\"],\n    block_regex: \"(\\\\.{domain}\\\\/temptation\\\\/resolve|temptation\\\\.{domain}\\\\/temptation\\\\.js)\"\n  },\n  \"DVV Media International (opt-in to custom sites)\": {\n    domain: \"###_uk_dvv_media\",\n    group: [],\n    remove_cookies_select_drop: [\"AnonUserCookie\"],\n    block_regex: /\\/wp-json\\/api\\/v\\d\\/has-access/,\n    exception: [{\n        domain: \"railwaygazette.com\",\n        allow_cookies: 1,\n        useragent: \"googlebot\"\n      }\n    ]\n  },\n  \"Dwell\": {\n    domain: \"dwell.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\.dwell\\.com\\/article\\/.+\\?rel=plus/,\n    cs_dompurify: 1\n  },\n  \"Eastwest.eu\": {\n    domain: \"eastwest.eu\",\n    allow_cookies: 1\n  },\n  \"El Confidencial\": {\n    domain: \"elconfidencial.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"El Cronista\": {\n    domain: \"cronista.com\",\n    allow_cookies: 1,\n    block_regex: /\\.cronista\\.com\\/files\\/cachefiles\\/.+\\.js\\?\\d/\n  },\n  \"El Deber.com.bo\": {\n    domain: \"eldeber.com.bo\",\n    allow_cookies: 1,\n    block_regex: /cdn\\.lavoz\\.com\\.ar\\/sites\\/.+\\/paywall\\/eldeber\\/pw\\.js/\n  },\n  \"El Diario.es\": {\n    domain: \"eldiario.es\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"El Español\": {\n    domain: \"elespanol.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"El Espectador\": {\n    domain: \"elespectador.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.cxense\\.com\\/|js\\.matheranalytics\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"El Mercurio (digital only)\": {\n    domain: \"elmercurio.com\",\n    allow_cookies: 1,\n    block_regex: /\\.(elmercurio\\.com|emol\\.cl)\\/(.+\\/)?js\\/(.+\\/)?(modal|merPramV\\d|PramModal\\.min)\\.js/,\n    useragent: \"googlebot\"\n  },\n  \"El Observador.com.uy\": {\n    domain: \"elobservador.com.uy\",\n    allow_cookies: 1,\n    block_regex: /(\\.elobservador\\.com\\.uy\\/shares|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"El País\": {\n    domain: \"elpais.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\/verne\\.elpais\\.com\\/.+\\.html/,\n    block_regex: /(\\/elpais\\.com\\/arc\\/subs\\/p\\.min\\.js|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"El País.com.uy\": {\n    domain: \"elpais.com.uy\",\n    allow_cookies: 1,\n    block_regex: /(\\.elpais\\.com\\.uy\\/user\\/authStatus|\\.evolok\\.net\\/|\\.cxense\\.com\\/)/\n  },\n  \"El Tiempo\": {\n    domain: \"eltiempo.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"El Tribuno\": {\n    domain: \"eltribuno.com\",\n    allow_cookies: 1,\n    block_regex: /\\.eltribuno\\.com\\/scripts\\/Bellhop\\/dist\\/bellhop\\.min\\.js/\n  },\n  \"El Universal.com.mx\": {\n    domain: \"eluniversal.com.mx\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"El Universo (EC)\": {\n    domain: \"eluniverso.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"Elle.fr\": {\n    domain: \"elle.fr\",\n    allow_cookies: 1,\n    block_regex: /(\\.poool\\.fr\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Encyclopedia Britannica\": {\n    domain: \"britannica.com\"\n  },\n  \"eNotes\": {\n    domain: \"enotes.com\",\n    remove_cookies_select_drop: [\"ENOTESID\"]\n  },\n  \"ESPN USA (news only; fetch from archive.is)\": {\n    domain: \"espn.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Esprit\": {\n    domain: \"esprit.presse.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Estado de Minas\": {\n    domain: \"em.com.br\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n  },\n  \"EUobserver\": {\n    domain: \"euobserver.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Evening Standard (UK)\": {\n    domain: \"standard.co.uk\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Exame\": {\n    domain: \"exame.com\",\n    allow_cookies: 1\n  },\n  \"Expresso.pt (not Tribuna)\": {\n    domain: \"expresso.pt\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Fast Company\": {\n    domain: \"fastcompany.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.fastcompany\\.com\\/script\\.js)/,\n    cs_dompurify: 1\n  },\n  \"Field & Stream\": {\n    domain: \"fieldandstream.com\",\n    allow_cookies: 1\n  },\n  \"Financial News (London)\": {\n    domain: \"fnlondon.com\",\n    allow_cookies: 1,\n    block_regex: /\\.cxense\\.com\\//,\n    referer: \"google\"\n  },\n  \"Financial Times (not cn subdomain)\": {\n    domain: \"ft.com\",\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"First Things\": {\n    domain: \"firstthings.com\"\n  },\n  \"Follow the Money (ftm.nl & ftm.eu)\": {\n    domain: \"###_nl_eu_ftm\",\n    group: [\n      \"ftm.eu\",\n      \"ftm.nl\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.ftm\\.(nl|eu)\\/js\\/routing\\?/\n  },\n  \"Forbes (not newsletters)\": {\n    domain: \"forbes.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.forbes\\.com\\/zephr\\/feature|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Forbes Australia\": {\n    domain: \"forbes.com.au\",\n    remove_cookies_select_drop: [\"blaize_session\"],\n    cs_dompurify: 1\n  },\n  \"Forbes.ua (text only)\": {\n    domain: \"forbes.ua\",\n    allow_cookies: 1\n  },\n  \"Foreign Affairs (not reader)\": {\n    domain: \"foreignaffairs.com\",\n    allow_cookies: 1,\n    block_regex: /\\.foreignaffairs\\.com\\/modules\\/custom\\/fa_paywall_js\\/js\\/paywall\\.js/\n  },\n  \"Foreign Policy\": {\n    domain: \"foreignpolicy.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/)/,\n    cs_dompurify: 1\n  },\n  \"Fortune\": {\n    domain: \"fortune.com\",\n    remove_cookies_select_drop: [\"xbc\", \"pcid\"],\n    block_regex: /\\.cxense\\.com\\//\n  },\n  \"Forum Communications (opt-in to custom sites)\": {\n    domain: \"###_usa_forum_comm\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/script\\\\.js\"\n  },\n  \"Fox News (regwall)\": {\n    domain: \"foxnews.com\",\n    allow_cookies: 1\n  },\n  \"Frankfurter Allgemeine Zeitung\": {\n    domain: \"faz.net\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Funke Mediengruppe\": {\n    domain: \"###_de_funke_medien\",\n    group: [\n      \"abendblatt.de\",\n      \"braunschweiger-zeitung.de\",\n      \"harzkurier.de\",\n      \"ikz-online.de\",\n      \"morgenpost.de\",\n      \"nrz.de\",\n      \"otz.de\",\n      \"thueringer-allgemeine.de\",\n      \"tlz.de\",\n      \"waz.de\",\n      \"wp.de\",\n      \"wr.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"Gannett Group (local USA Today; opt-in to custom sites for unlisted)\": {\n    domain: \"###_usa_gannett\",\n    group: [\n      \"azcentral.com\",\n      \"cincinnati.com\",\n      \"commercialappeal.com\",\n      \"courier-journal.com\",\n      \"democratandchronicle.com\",\n      \"desmoinesregister.com\",\n      \"detroitnews.com\",\n      \"dispatch.com\",\n      \"freep.com\",\n      \"indystar.com\",\n      \"jacksonville.com\",\n      \"jsonline.com\",\n      \"knoxnews.com\",\n      \"news-press.com\",\n      \"northjersey.com\",\n      \"oklahoman.com\",\n      \"statesman.com\",\n      \"tennessean.com\"\n    ],\n    allow_cookies: 1,\n    amp_unhide: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n    useragent: \"googlebot\"\n  },\n  \"GaúchaZH\": {\n    domain: \"gauchazh.clicrbs.com.br\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Gazeta do Povo\": {\n    domain: \"gazetadopovo.com.br\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.cxense\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"GB News\": {\n    domain: \"gbnews.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Glassdoor (regwall)\": {\n    domain: \"glassdoor.com\"\n  },\n  \"Globes\": {\n    domain: \"globes.co.il\",\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Granta Magazine\": {\n    domain: \"granta.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"GremiMedia.pl Group\": {\n    domain: \"###_pl_gremi_media\",\n    group: [\n      \"parkiet.com\",\n      \"rp.pl\"\n    ]\n  },\n  \"Groene Amsterdammer\": {\n    domain: \"groene.nl\",\n    remove_cookies_select_hold: [\"accept-cookies\", \"popunder-hidden\"],\n    useragent: \"googlebot\"\n  },\n  \"Groupe Capitales Médias (+ regional/opt-in to custom sites)\": {\n    domain: \"###_ca_gcm\",\n    group: [\n      \"lesoleil.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Groupe Centre France (opt-in to custom sites for unlisted)\": {\n    domain: \"###_fr_gcf\",\n    group: [\n      \"lamontagne.fr\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Groupe EBRA\": {\n    domain: \"###_fr_groupe_ebra\",\n    group: [\n      \"bienpublic.com\",\n      \"dna.fr\",\n      \"estrepublicain.fr\",\n      \"lalsace.fr\",\n      \"ledauphine.com\",\n      \"lejsl.com\",\n      \"leprogres.fr\",\n      \"republicain-lorrain.fr\",\n      \"vosgesmatin.fr\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Groupe ESH Médias\": {\n    domain: \"###_ch_esh_medias\",\n    group: [\n      \"arcinfo.ch\",\n      \"lacote.ch\",\n      \"lenouvelliste.ch\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Groupe Infopro Digital (opt-in to custom sites for unlisted)\": {\n    domain: \"###_fr_groupe_infopro\",\n    group: [\n      \"usinenouvelle.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//,\n    exception: [{\n        domain: [\"argusdelassurance.com\", \"cahiers-techniques-batiment.fr\"],\n        allow_cookies: 1,\n        useragent: \"googlebot\"\n      }\n    ]\n  },\n  \"Groupe IPM\": {\n    domain: \"###_be_groupe_ipm\",\n    group: [\n      \"dhnet.be\",\n      \"lalibre.be\",\n      \"lavenir.net\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Groupe La Dépêche\": {\n    domain: \"###_fr_groupe_la_depeche\",\n    group: [\n      \"centrepresseaveyron.fr\",\n      \"journaldemillau.fr\",\n      \"ladepeche.fr\",\n      \"lindependant.fr\",\n      \"midilibre.fr\",\n      \"nrpyrenees.fr\",\n      \"petitbleu.fr\",\n      \"rugbyrama.fr\"\n    ],\n    allow_cookies: 1\n  },\n  \"Groupe Nice-Matin\": {\n    domain: \"###_fr_groupe_nice_matin\",\n    group: [\n      \"monacomatin.mc\",\n      \"nicematin.com\",\n      \"varmatin.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.qiota\\.com\\/|\\.nicematin\\.com\\/build\\/js\\/viewpay\\..+\\.js)/\n  },\n  \"Groupe Profession Santé\": {\n    domain: \"###_fr_groupe_prof_sante\",\n    group: [\n      \"lequotidiendumedecin.fr\",\n      \"lequotidiendupharmacien.fr\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Groupe Québecor\": {\n    domain: \"###_ca_groupe_quebecor\",\n    group: [\n      \"journaldemontreal.com\",\n      \"journaldequebec.com\"\n    ],\n    allow_cookies: 1\n  },\n  \"Groupe Rossel\": {\n    domain: \"###_fr_be_groupe_rossel\",\n    group: [\n      \"aisnenouvelle.fr\",\n      \"courrier-picard.fr\",\n      \"lardennais.fr\",\n      \"lavoixdunord.fr\",\n      \"lemessager.fr\",\n      \"lesoir.be\",\n      \"lest-eclair.fr\",\n      \"liberation-champagne.fr\",\n      \"lunion.fr\",\n      \"nordlittoral.fr\",\n      \"paris-normandie.fr\",\n      \"sudinfo.be\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Groupe Sud Ouest\": {\n    domain: \"###_fr_groupe_sud_ouest\",\n    group: [\n      \"sudouest.fr\",\n      \"charentelibre.fr\",\n      \"larepubliquedespyrenees.fr\"\n    ],\n    allow_cookies: 1,\n    exception: [{\n        domain: \"sudouest.fr\",\n        allow_cookies: 1,\n        block_regex: /\\.poool\\.fr\\//\n      }\n    ]\n  },\n  \"Groupe SynerJ Media (opt-in to custom sites)\": {\n    domain: \"###_fr_synerj\",\n    group: [],\n    allow_cookies: 1,\n    ld_json_url: \"div#encart_abo|div.article_bloc_texte\",\n    useragent: \"googlebot\"\n  },\n  \"Grupo Abril\": {\n    domain: \"abril.com.br\",\n    allow_cookies: 1,\n    block_regex: /\\.abril\\.com\\.br\\/.+\\/abril-paywall\\//\n  },\n  \"Grupo Clarín\": {\n    domain: \"###_ar_grupo_clarin\",\n    group: [\n      \"clarin.com\",\n      \"lavoz.com.ar\",\n      \"losandes.com.ar\",\n      \"ole.com.ar\"\n    ],\n    allow_cookies: 1,\n    block_regex: /zonda\\.clarin\\.com\\//,\n    exception: [{\n        domain: \"losandes.com.ar\",\n        allow_cookies: 1,\n        block_regex: /cdn\\.lavoz\\.com\\.ar\\/sites\\/.+\\/paywall\\/losandes\\/pw\\.js/\n      }\n    ]\n  },\n  \"Grupo El Comercio\": {\n    domain: \"###_pe_grupo_elcomercio\",\n    group: [\n      \"diariocorreo.pe\",\n      \"elcomercio.pe\",\n      \"gestion.pe\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(\\\\.tinypass\\\\.com\\\\/|\\\\/{domain}\\\\/pf\\\\/dist\\\\/engine\\\\/react\\\\.js)\"\n  },\n  \"Grupo Prensa Ibérica (opt-in to custom sites for unlisted)\": {\n    domain: \"###_es_epiberica\",\n    group: [\n      \"diariodemallorca.es\",\n      \"eldia.es\",\n      \"elperiodico.com\",\n      \"epe.es\",\n      \"farodevigo.es\",\n      \"informacion.es\",\n      \"laprovincia.es\",\n      \"levante-emv.com\",\n      \"lne.es\",\n      \"mallorcazeitung.es\",\n      \"superdeporte.es\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Grupo Unidad Editorial\": {\n    domain: \"###_es_unidad\",\n    group: [\n      \"elmundo.es\",\n      \"expansion.com\",\n      \"marca.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"Grupo Vocento\": {\n    domain: \"###_es_grupo_vocento\",\n    group: [\n      \"abc.es\",\n      \"canarias7.es\",\n      \"diariosur.es\",\n      \"diariovasco.com\",\n      \"elcomercio.es\",\n      \"elcorreo.com\",\n      \"eldiariomontanes.es\",\n      \"elnortedecastilla.es\",\n      \"hoy.es\",\n      \"ideal.es\",\n      \"larioja.com\",\n      \"lasprovincias.es\",\n      \"laverdad.es\",\n      \"lavozdigital.es\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"Gruppo GEDI.it\": {\n    domain: \"###_it_gedi\",\n    group: [\n      \"huffingtonpost.it\",\n      \"italian.tech\",\n      \"lastampa.it\",\n      \"lescienze.it\",\n      \"moda.it\",\n      \"repubblica.it\"\n    ],\n    remove_cookies_select_drop: [\"blaize_session\"],\n    block_regex: /scripts\\.repubblica\\.it\\/pw\\/pw\\.js/,\n    useragent: \"googlebot\",\n    exception: [{\n        domain: [\"huffingtonpost.it\", \"lastampa.it\"],\n        block_js_inline: /\\.it\\/.+\\/news\\//,\n        remove_cookies_select_drop: [\"blaize_session\"]\n      }, {\n        domain: \"repubblica.it\",\n        allow_cookies: 1,\n        block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n      }\n    ]\n  },\n  \"Gruppo SAE.it (free articles only; opt-in to custom sites for unlisted)\": {\n    domain: \"###_it_gruppo_sae\",\n    group: [\n      \"iltirreno.it\",\n      \"lanuovasardegna.it\"\n    ]\n  },\n  \"Haaretz Group (no menu/footer)\": {\n    domain: \"###_il_haaretz_group\",\n    group: [\n      \"haaretz.co.il\",\n      \"haaretz.com\",\n      \"themarker.com\"\n    ],\n    remove_cookies_select_drop: [\"ra\"],\n    headers_custom: {ismobileapp: \"true\", platform: \"app\", renderingkind: \"opened\"},\n    useragent_custom: \"Mozilla/5.0 (Linux; Android 9) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.6668.70 Safari/537.36 haaretz/5.0.49\"\n  },\n  \"Haas Mediengruppe (opt-in to custom sites for unlisted)\": {\n    domain: \"###_de_haas_medien\",\n    group: [\n      \"mannheimer-morgen.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\.{domain}\\\\/api\\\\/tinypass\\\\.min\\\\.js\",\n    useragent: \"googlebot\"\n  },\n  \"Hamburger Morgenpost\": {\n    domain: \"mopo.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Handelsblatt\": {\n    domain: \"handelsblatt.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    useragent: \"googlebot\"\n  },\n  \"Harper's Magazine\": {\n    domain: \"harpers.org\",\n    block_regex: /\\/harpers\\.org\\/wp-content\\/themes\\/timber\\/static\\/js\\/modal.+\\.js/\n  },\n  \"Harvard Business Review (do not block TinyPass-script externally)\": {\n    domain: \"hbr.org\",\n    block_regex: /(\\.cxense\\.com\\/|cdn\\.tinypass\\.com\\/)/,\n    remove_cookies_select_drop: [\"xbc\"]\n  },\n  \"Haymarket Media Group (opt-in to custom sites)\": {\n    domain: \"###_uk_haymarket\",\n    group: [],\n    useragent: \"googlebot\"\n  },\n  \"Haymarket Medical Network (opt-in to custom sites)\": {\n    domain: \"###_uk_haymarket_medical\",\n    group: [],\n    allow_cookies: 1,\n    remove_cookies: 1,\n    cs_code: [{\"cond\":\"div#modal-register-popup, div.gating-banner\", \"rm_elem\":1}, {\"cond\":\"div[data-gated]\", \"rm_attrib\":\"data-gated\"}]\n  },\n  \"Hearst Communications (newspapers; opt-in to custom sites for unlisted)\": {\n    domain: \"###_usa_hearst_comm\",\n    group: [\n      \"ctpost.com\",\n      \"expressnews.com\",\n      \"houstonchronicle.com\",\n      \"nhregister.com\",\n      \"sfchronicle.com\",\n      \"timesunion.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(\\\\.{domain}\\\\/script\\\\.js|\\\\.ensighten\\\\.com\\\\/|js\\\\.matheranalytics\\\\.com\\\\/)\"\n  },\n  \"Hearst Communications magazines\": {\n    domain: \"###_usa_hearst_comm_mag\",\n    group: [\n      \"bicycling.com\",\n      \"cosmopolitan.com\",\n      \"countryliving.com\",\n      \"delish.com\",\n      \"elle.com\",\n      \"elledecor.com\",\n      \"esquire.com\",\n      \"goodhousekeeping.com\",\n      \"harpersbazaar.com\",\n      \"housebeautiful.com\",\n      \"menshealth.com\",\n      \"oprahdaily.com\",\n      \"popularmechanics.com\",\n      \"prevention.com\",\n      \"roadandtrack.com\",\n      \"runnersworld.com\",\n      \"townandcountrymag.com\",\n      \"womenshealthmag.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.com\\/_assets\\/jam\\/|\\.ensighten\\.com\\/.+\\/Bootstrap\\.js)/\n  },\n  \"Heise online (fetch from archive.is)\": {\n    domain: \"heise.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Het Laatste Nieuws (fetch from archive.is)\": {\n    domain: \"hln.be\",\n    allow_cookies: 1,\n    block_regex: /temptation\\.hln\\.be\\/temptation\\.js/,\n    cs_dompurify: 1\n  },\n  \"Hindustan Times (not epaper)\": {\n    domain: \"hindustantimes.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"History Today (app only)\": {\n    domain: \"historytoday.com\",\n    allow_cookies: 1,\n    block_regex: /app\\.historytoday\\.com\\/pugpig-websmartbanner\\.js/,\n    cs_all_frames: 1\n  },\n  \"Honolulu Star-Advertiser\": {\n    domain: \"staradvertiser.com\",\n    allow_cookies: 1,\n    block_regex: /js\\.matheranalytics\\.com\\//\n  },\n  \"Il Fatto Quotidiano (free articles only)\": {\n    domain: \"ilfattoquotidiano.it\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n  },\n  \"Il Foglio\": {\n    domain: \"ilfoglio.it\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n  },\n  \"Il Manifesto\": {\n    domain: \"ilmanifesto.it\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Il Messaggero (+ regional)\": {\n    domain: \"###_it_ilmessaggero\",\n    group: [\n      \"corriereadriatico.it\",\n      \"ilgazzettino.it\",\n      \"ilmattino.it\",\n      \"ilmessaggero.it\",\n      \"quotidianodipuglia.it\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.(cedscdn|cedsdigital)\\.it\\/.+\\/(PaywallMeter|cmpConsentWall)\\.js|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.m?js)/\n  },\n  \"Il Sole 24 Ore (24+ only)\": {\n    domain: \"ilsole24ore.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ilsole24ore\\.com\\/zephr\\/feature/\n  },\n  \"Inc.com\": {\n    domain: \"inc.com\",\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Inc42\": {\n    domain: \"inc42.com\",\n    allow_cookies: 1,\n    block_regex: /(\\/inc42\\.com\\/wp-admin\\/admin-ajax\\.php$|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"India Today\": {\n    domain: \"indiatoday.in\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"Industry Dive (opt-in to custom sites)\": {\n    domain: \"###_usa_industrydive\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/static\\\\/js\\\\/dist\\\\/contentGate\\\\.bundle\\\\.js\"\n  },\n  \"iNews (UK)\": {\n    domain: \"inews.co.uk\",\n    allow_cookies: 1,\n    block_js_inline: /liveapp\\.inews\\.co\\.uk\\/.+\\/content\\.html/,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"InfoLibre.es\": {\n    domain: \"infolibre.es\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n    useragent: \"googlebot\"\n  },\n  \"Initium Media\": {\n    domain: \"theinitium.com\",\n    allow_cookies: 1,\n    block_regex: /\\.wallkit\\.net\\/js\\//\n  },\n  \"Inkl\": {\n    domain: \"inkl.com\"\n  },\n  \"Inside Higher Ed\": {\n    domain: \"insidehighered.com\",\n    allow_cookies: 1,\n    block_regex: /js\\.pelcro\\.com\\//\n  },\n  \"Inside Retail (opt-in to custom sites)\": {\n    domain: \"###_au_inside_retail\",\n    group: [],\n    ld_json_url: \"div#premium-box|div.article__text__holder|1\"\n  },\n  \"Interesting Engineering\": {\n    domain: \"interestingengineering.com\",\n    allow_cookies: 1\n  },\n  \"Internazionale.it\": {\n    domain: \"internazionale.it\",\n    allow_cookies: 1,\n    block_regex: /\\.internazionale\\.it\\/templates_js_ajax\\.inc\\.php/\n  },\n  \"Investors' Chronicle (UK)\": {\n    domain: \"investorschronicle.co.uk\",\n    allow_cookies: 1,\n    referer: \"google\"\n  },\n  \"iPolitics.ca\": {\n    domain: \"ipolitics.ca\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Ippen.media (opt-in to custom sites for unlisted)\": {\n    domain: \"###_de_ippen_media\",\n    group: [\n      \"fr.de\",\n      \"merkur.de\",\n      \"ovb-online.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/sub\\\\/js\\\\/pc-offer-west\\\\.js\"\n  },\n  \"Irish Independent\": {\n    domain: \"independent.ie\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Italia Oggi\": {\n    domain: \"italiaoggi.it\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Jacobin.de\": {\n    domain: \"jacobin.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Jazzwise\": {\n    domain: \"jazzwise.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Jeune Afrique (last month only)\": {\n    domain: \"jeuneafrique.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.poool\\.fr\\/|\\.jeuneafrique\\.com\\/cdn-cgi\\/trace)/,\n    cs_param: {\"x-exp\": \"1741079242710\", \"x-sig\": \"b431724e94023a6969c5427133e1614db2cbe90e\"},\n    cs_dompurify: 1\n  },\n  \"Kathimerini.gr\": {\n    domain: \"kathimerini.gr\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Kölner Stadt-Anzeiger\": {\n    domain: \"ksta.de\",\n    remove_cookies_select_drop: [\"anon_cookie\"]\n  },\n  \"Kölnische Rundschau\": {\n    domain: \"rundschau-online.de\",\n    remove_cookies_select_drop: [\"anon_cookie\"]\n  },\n  \"Kompas.id\": {\n    domain: \"kompas.id\",\n    allow_cookies: 1\n  },\n  \"Krautreporter.de\": {\n    domain: \"krautreporter.de\"\n  },\n  \"Kurier.at\": {\n    domain: \"kurier.at\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"L'Écho\": {\n    domain: \"lecho.be\",\n    referer: \"google\"\n  },\n  \"L'Équipe.fr (not Les notes)\": {\n    domain: \"lequipe.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"L'Express\": {\n    domain: \"lexpress.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\/data/\n  },\n  \"L'Informé\": {\n    domain: \"linforme.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"L'Oeil de la Photographie\": {\n    domain: \"loeildelaphotographie.com\",\n    allow_cookies: 1,\n    block_regex: /cdn\\.loeildelaphotographie\\.com\\/wp-content\\/.+\\/hague-child\\/js\\/script-.+\\.js/\n  },\n  \"L'Opinion (fetch from archive.is; not Le Journal)\": {\n    domain: \"lopinion.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"La Diaria.com.uy\": {\n    domain: \"ladiaria.com.uy\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"La Gaceta.com.ar (no menu)\": {\n    domain: \"lagaceta.com.ar\",\n    allow_cookies: 1,\n    block_regex: /\\.lagaceta\\.com\\.ar\\/ajax\\/getInfo/,\n    useragent: \"facebookbot\"\n  },\n  \"La Gazzetta dello Sport (text only)\": {\n    domain: \"gazzetta.it\",\n    allow_cookies: 1\n  },\n  \"La Nación (free articles only)\": {\n    domain: \"lanacion.com.ar\"\n  },\n  \"La Nouvelle République du Centre-Ouest\": {\n    domain: \"lanouvellerepublique.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"La Tercera\": {\n    domain: \"latercera.com\",\n    allow_cookies: 1,\n    block_regex: /\\.latercera\\.com\\/arc\\/subs\\/p\\.min\\.js/\n  },\n  \"La Vanguardia\": {\n    domain: \"lavanguardia.com\",\n    allow_cookies: 1,\n    block_regex: /\\/ev\\.lavanguardia\\.com\\//\n  },\n  \"Landwirtschaftsverlag\": {\n    domain: \"###_de_lv\",\n    group: [\n      \"profi.de\",\n      \"topagrar.com\",\n      \"wochenblatt.com\"\n    ],\n    allow_cookies: 1,\n    exception: [{\n        domain: \"topagrar.com\",\n        allow_cookies: 1,\n        block_js_inline: /\\.topagrar\\.com\\/.+\\/news\\//\n      }\n    ]\n  },\n  \"Las Vegas Review-Journal\": {\n    domain: \"reviewjournal.com\",\n    allow_cookies: 1,\n    block_regex: /\\.reviewjournal\\.com\\/wp-content\\/plugins\\/.+\\/loader_prod\\.min\\.js/\n  },\n  \"Le Courrier des Stratèges\": {\n    domain: \"lecourrierdesstrateges.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Le Devoir\": {\n    domain: \"ledevoir.com\",\n    block_regex: /\\.tinypass\\.com\\//,\n    remove_cookies_select_drop: [\"pw6\"]\n  },\n  \"Le Figaro (no video)\": {\n    domain: \"lefigaro.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Le Grand Continent\": {\n    domain: \"legrandcontinent.eu\",\n    allow_cookies: 1\n  },\n  \"Le Journal du Dimanche\": {\n    domain: \"lejdd.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Le Journal du Net\": {\n    domain: \"journaldunet.com\",\n    allow_cookies: 1\n  },\n  \"Le Monde.fr\": {\n    domain: \"lemonde.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Le Monde Diplomatique Brasil\": {\n    domain: \"diplomatique.org.br\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Le Nouvel Economiste\": {\n    domain: \"lenouveleconomiste.fr\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Le Parisien\": {\n    domain: \"leparisien.fr\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Le Point\": {\n    domain: \"lepoint.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//,\n    cs_dompurify: 1\n  },\n  \"Le Revenu\": {\n    domain: \"lerevenu.com\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Le Télégramme\": {\n    domain: \"letelegramme.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Le1Hebdo.fr\": {\n    domain: \"le1hebdo.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Lee Enterprises Group (opt-in to custom sites for unlisted)\": {\n    domain: \"###_usa_lee_ent\",\n    group: [\n      \"buffalonews.com\",\n      \"journalnow.com\",\n      \"journalstar.com\",\n      \"madison.com\",\n      \"nwitimes.com\",\n      \"omaha.com\",\n      \"richmond.com\",\n      \"stltoday.com\",\n      \"tucson.com\",\n      \"tulsaworld.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.com\\/.+\\/tncms\\/api\\/access\\..+\\.js/\n  },\n  \"Les Échos\": {\n    domain: \"lesechos.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Les Inrockuptibles\": {\n    domain: \"lesinrocks.com\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Libération.fr\": {\n    domain: \"liberation.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Linda.nl\": {\n    domain: \"linda.nl\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Literary Review (UK)\": {\n    domain: \"literaryreview.co.uk\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Live Law\": {\n    domain: \"livelaw.in\",\n    allow_cookies: 1\n  },\n  \"LiveMint (not epaper)\": {\n    domain: \"livemint.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.livemint\\.com\\/lm-img\\/subscription\\/|\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Loeb Classical Library\": {\n    domain: \"loebclassics.com\"\n  },\n  \"London Review of Books\": {\n    domain: \"lrb.co.uk\",\n    allow_cookies: 1,\n    block_js_inline: /\\.lrb\\.co\\.uk\\//\n  },\n  \"Los Angeles Times\": {\n    domain: \"latimes.com\",\n    allow_cookies: 1,\n    block_regex: /\\.latimes\\.com\\/meteringjs/\n  },\n  \"MacroBusiness.com.au\": {\n    domain: \"macrobusiness.com.au\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Madsack Mediengruppe (opt-in to custom sites for unlisted)\": {\n    domain: \"###_de_madsack\",\n    group: [\n      \"haz.de\",\n      \"kn-online.de\",\n      \"ln-online.de\",\n      \"lvz.de\",\n      \"maz-online.de\",\n      \"neuepresse.de\",\n      \"ostsee-zeitung.de\",\n      \"rnd.de\",\n      \"saechsische.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Maine Trust for Local News (opt-in to custom sites)\": {\n    domain: \"###_usa_maine_trust\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/(script|.+\\\\/loader\\\\.min)\\\\.js\"\n  },\n  \"Mainichi Shimbun\": {\n    domain: \"mainichi.jp\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Malayala Manorama\": {\n    domain: \"manoramaonline.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n  },\n  \"Manager-magazin.de (fetch from archive.is)\": {\n    domain: \"manager-magazin.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Marianne.net (last month only)\": {\n    domain: \"marianne.net\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//,\n    cs_dompurify: 1\n  },\n  \"MarketWatch\": {\n    domain: \"marketwatch.com\",\n    block_regex: /\\.cxense\\.com\\//\n  },\n  \"McClatchy Group (opt-in to custom sites for unlisted)\": {\n    domain: \"###_usa_mcc\",\n    allow_cookies: 1,\n    group: [\n      \"bnd.com\",\n      \"charlotteobserver.com\",\n      \"elnuevoherald.com\",\n      \"fresnobee.com\",\n      \"kansas.com\",\n      \"kansascity.com\",\n      \"kentucky.com\",\n      \"mcclatchydc.com\",\n      \"miamiherald.com\",\n      \"newsobserver.com\",\n      \"sacbee.com\",\n      \"star-telegram.com\",\n      \"thestate.com\",\n      \"tri-cityherald.com\"\n    ],\n    block_regex: /(\\.amplitude\\.com\\/|\\.mcclatchy\\.com\\/mcc-paywall\\.js|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"McPherson Media Group (opt-in to custom sites)\": {\n    domain: \"###_au_mmg\",\n    allow_cookies: 1\n  },\n  \"Media Group Westfalen (fetch from archive.is; opt-in to custom sites for unlisted)\": {\n    domain: \"###_de_mgw\",\n    group: [\n      \"ruhrnachrichten.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"Mediahuis België (fetch from archive.is)\": {\n    domain: \"###_be_mediahuis\",\n    group: [\n      \"gva.be\",\n      \"hbvl.be\",\n      \"nieuwsblad.be\",\n      \"standaard.be\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/extra\\\\/assets\\\\/resources\\\\/js\\\\/zephrIntegration\\\\.js\",\n    cs_dompurify: 1\n  },\n  \"Mediahuis Nederland Regional (fetch from archive.is; opt-in to custom sites for unlisted)\": {\n    domain: \"###_nl_mediahuis_region\",\n    group: [\n      \"haarlemsdagblad.nl\",\n      \"leidschdagblad.nl\",\n      \"limburger.nl\",\n      \"noordhollandsdagblad.nl\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Mediahuis Noord (+ regional/opt-in to custom sites)\": {\n    domain: \"###_nl_mediahuis_noord\",\n    group: [\n      \"dvhn.nl\",\n      \"lc.nl\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.ndcmediagroep\\.nl\\/js\\/evolok\\/|\\.nl\\/_\\/zh\\/worker)/,\n    cs_dompurify: 1\n  },\n  \"MediaNews Group (opt-in to custom sites for unlisted)\": {\n    domain: \"###_usa_mng\",\n    group: [\n      \"bostonherald.com\",\n      \"denverpost.com\",\n      \"eastbaytimes.com\",\n      \"mercurynews.com\",\n      \"ocregister.com\",\n      \"pressenterprise.com\",\n      \"sandiegouniontribune.com\",\n      \"twincities.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.com\\/(script|.+\\/loader\\.min)\\.js|\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/,\n    cs_dompurify: 1\n  },\n  \"Medium (opt-in to custom sites for custom domains)\": {\n    domain: \"medium.com\",\n    allow_cookies: 1,\n    group: [\n      \"medium.com\",\n      \"betterprogramming.pub\",\n      \"towardsdatascience.com\"\n    ]\n  },\n  \"Medscape (regwall)\": {\n    domain: \"medscape.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.medscapestatic\\.com\\/.+\\/medscape-library|\\.wbmdstatic\\.com\\/.+\\/chunk-vendors\\..+)\\.js/\n  },\n  \"Mexico News Daily\": {\n    domain: \"mexiconewsdaily.com\",\n    allow_cookies: 1,\n    block_regex: /\\/mexiconewsdaily\\.com\\/wp-content\\/plugins\\/leaky-paywall\\/js\\/leaky-paywall-cookie\\.js/\n  },\n  \"Mid-Day (not epaper)\": {\n    domain: \"mid-day.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"MilanoFinanza.it\": {\n    domain: \"milanofinanza.it\",\n    allow_cookies: 1\n  },\n  \"MIT Sloan Management Review\": {\n    domain: \"sloanreview.mit.edu\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\/sloanreview\\.mit\\.edu\\/.+\\/welcome-ad\\.js)/\n  },\n  \"MIT Technology Review\": {\n    domain: \"technologyreview.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.mjs)/\n  },\n  \"Monocle\": {\n    domain: \"monocle.com\",\n    useragent: \"googlebot\"\n  },\n  \"Motor Presse Stuttgart\": {\n    domain: \"###_de_motor_presse\",\n    group: [\n      \"aerokurier.de\",\n      \"auto-motor-und-sport.de\",\n      \"flugrevue.de\",\n      \"motorradonline.de\",\n      \"womenshealth.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/thenewsbar\\\\/config\\\\/\"\n  },\n  \"Motor Sport Magazine (UK)\": {\n    domain: \"motorsportmagazine.com\",\n    allow_cookies: 1,\n    block_regex: /\\.motorsportmagazine\\.com\\/wp-admin\\/admin-ajax\\.php/,\n    cs_dompurify: 1\n  },\n  \"Mountain View Voice\": {\n    domain: \"mv-voice.com\"\n  },\n  \"Mundo Deportivo\": {\n    domain: \"mundodeportivo.com\",\n    allow_cookies: 1,\n    block_regex: /\\/ev\\.mundodeportivo\\.com\\//\n  },\n  \"Nation Media Group (Kenya; opt-in to custom sites for unlisted)\": {\n    domain: \"###_ke_nation_media\",\n    group: [\n      \"businessdailyafrica.com\",\n      \"nation.africa\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"National Geographic USA\": {\n    domain: \"nationalgeographic.com\",\n    allow_cookies: 1,\n    block_regex: /cdn\\.registerdisney\\.go\\.com\\//,\n    random_ip: \"eu\"\n  },\n  \"National Review\": {\n    domain: \"nationalreview.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n    cs_dompurify: 1\n  },\n  \"National World Publishing (UK; opt-in to custom sites for unlisted)\": {\n    domain: \"###_uk_nat_world\",\n    group: [\n      \"scotsman.com\",\n      \"yorkshirepost.co.uk\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Nautilus\": {\n    domain: \"nautil.us\",\n    remove_cookies_select_drop: [\"arc\", \"sfa\"]\n  },\n  \"Nature (regwall only; fetch from archive.is)\": {\n    allow_cookies: 1,\n    domain: \"nature.com\",\n    cs_dompurify: 1\n  },\n  \"NDTV Profit\": {\n    domain: \"ndtvprofit.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js/\n  },\n  \"Neue Westfälische\": {\n    domain: \"nw.de\",\n    allow_cookies: 1\n  },\n  \"Neue Zürcher Zeitung (not epaper)\": {\n    domain: \"nzz.ch\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/|ens\\.nzz\\.ch\\/.+\\/Bootstrap\\.js)/\n  },\n  \"New Scientist\": {\n    domain: \"newscientist.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/|appan\\.newscientist\\.com\\/pugpig-websmartbanner\\.js)/,\n    cs_all_frames: 1,\n    cs_dompurify: 1\n  },\n  \"New Voice (nv.ua)\": {\n    domain: \"nv.ua\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"New Zealand Herald\": {\n    domain: \"nzherald.co.nz\",\n    allow_cookies: 1,\n    block_regex: /\\.nzherald\\.co\\.nz\\/sales\\/public\\/v\\d\\/entitlements/\n  },\n  \"Newsday\": {\n    domain: \"newsday.com\",\n    allow_cookies: 1,\n    block_regex: /loader\\.newsday\\.com\\//\n  },\n  \"Newslaundry\": {\n    domain: \"newslaundry.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Newsquest Media Group (UK; opt-in to custom sites)\": {\n    domain: \"###_uk_newsquest\",\n    group: [],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Newsweek\": {\n    domain: \"newsweek.com\",\n    block_regex: /(js\\.pelcro\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"Nikkei Asian Review\": {\n    domain: \"asia.nikkei.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"Nordwest Zeitung\": {\n    domain: \"nwzonline.de\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"NOZ/MHN Mediengruppe (fetch from archive.is)\": {\n    domain: \"###_de_noz_mhn\",\n    group: [\n      \"noz.de\",\n      \"shz.de\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"NRC Handelsblad\": {\n    domain: \"nrc.nl\",\n    remove_cookies_select_drop: [\"counter\"],\n    block_regex: /\\.nrc\\.nl\\/paywall-api\\/api\\/zephr/\n  },\n  \"NSC Total\": {\n    domain: \"nsctotal.com.br\",\n    allow_cookies: 1,\n    block_regex: /\\.nsctotal\\.com\\.br\\/wp-content\\/themes\\/nsctotal\\/js\\/paywall\\.min\\.js/\n  },\n  \"NWT Media.se (opt-in to custom sites)\": {\n    domain: \"###_se_nwt_media\",\n    group: [],\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"NyTeknik\": {\n    domain: \"nyteknik.se\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"O Estado de S. Paulo\": {\n    domain: \"estadao.com.br\",\n    allow_cookies: 1,\n    block_regex: /(\\.estadao\\.com\\.br\\/(paywall\\/|access\\.js)|\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"O Globo (& Valor Econômico)\": {\n    domain: \"globo.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"Observador.pt\": {\n    domain: \"observador.pt\",\n    allow_cookies: 1,\n    block_js_inline: /\\/observador\\.pt\\/(\\d{4}|especiais|opiniao)\\//\n  },\n  \"Ouest-France.fr\": {\n    domain: \"ouest-france.fr\",\n    allow_cookies: 1\n  },\n  \"Outdoor Life\": {\n    domain: \"outdoorlife.com\",\n    allow_cookies: 1,\n    block_regex: /js\\.pelcro\\.com\\//\n  },\n  \"Outlook Business\": {\n    domain: \"outlookbusiness.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Outlook India\": {\n    domain: \"outlookindia.com\",\n    allow_cookies: 1\n  },\n  \"Outside magazines\": {\n    domain: \"###_usa_outside_mag\",\n    group: [\n      \"backpacker.com\",\n      \"betamtb.com\",\n      \"betternutrition.com\",\n      \"cleaneatingmag.com\",\n      \"climbing.com\",\n      \"outsideonline.com\",\n      \"oxygenmag.com\",\n      \"skimag.com\",\n      \"trailrunnermag.com\",\n      \"triathlete.com\",\n      \"vegetariantimes.com\",\n      \"womensrunning.com\",\n      \"yogajournal.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Oxford University Press (not oup.com; opt-in to custom sites)\": {\n    domain: \"###_uk_oup\",\n    group: [],\n    allow_cookies: 1\n  },\n  \"Palo Alto Online\": {\n    domain: \"paloaltoonline.com\"\n  },\n  \"Paris Match\": {\n    domain: \"parismatch.com\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Paste Magazine\": {\n    domain: \"pastemagazine.com\",\n    allow_cookies: 1,\n    block_regex: /\\.pastemagazine\\.com\\/wp-content\\/cache\\/autoptimize\\/js\\/autoptimize_.+\\.js/\n  },\n  \"PEI Media (opt-in to custom sites)\": {\n    domain: \"###_usa_pei\",\n    group: [],\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Penske Media Corporation\": {\n    domain: \"###_usa_penske_media\",\n    allow_cookies: 1,\n    group: [\n      \"billboard.com\",\n      \"rollingstone.com\",\n      \"sourcingjournal.com\",\n      \"sportico.com\",\n      \"variety.com\",\n      \"wwd.com\"\n    ],\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"PhiloMag.com\": {\n    domain: \"philomag.com\",\n    remove_cookies_select_drop: [\"number_view_paywall\"],\n    block_regex: /\\.qiota\\.com\\//,\n    useragent: \"googlebot\"\n  },\n  \"PhiloMag.de\": {\n    domain: \"philomag.de\",\n    allow_cookies: 1\n  },\n  \"Philonomist\": {\n    domain: \"philonomist.com\",\n    allow_cookies: 1\n  },\n  \"Philosophy Now\": {\n    domain: \"philosophynow.org\"\n  },\n  \"Piqd.de\": {\n    domain: \"piqd.de\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Pirate Wires\": {\n    allow_cookies: 1,\n    domain: \"piratewires.com\",\n    block_js_inline: /\\.piratewires\\.com\\/p\\//,\n    useragent_custom: \"Mozilla/5.0 (compatible; Twitterbot/1.0)\"\n  },\n  \"Pittsburgh Post Gazette\": {\n    domain: \"post-gazette.com\",\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Política Exterior\": {\n    domain: \"politicaexterior.com\",\n    allow_cookies: 1\n  },\n  \"Politico (regwall; not pro)\": {\n    domain: \"politico.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Politis.fr\": {\n    domain: \"politis.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Polityka.pl\": {\n    domain: \"polityka.pl\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Popular Science\": {\n    domain: \"popsci.com\",\n    allow_cookies: 1,\n    block_regex: /js\\.pelcro\\.com\\//\n  },\n  \"Postmedia Network (opt-in to custom sites for unlisted)\": {\n    domain: \"###_ca_postmedia\",\n    group: [\n      \"calgaryherald.com\",\n      \"financialpost.com\",\n      \"nationalpost.com\",\n      \"theprovince.com\",\n      \"torontosun.com\",\n      \"vancouversun.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.sophi\\.io\\/|\\.amplitude\\.com\\/)/\n  },\n  \"Pour l'Éco\": {\n    allow_cookies: 1,\n    domain: \"pourleco.com\",\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Pour la Science.fr\": {\n    domain: \"pourlascience.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Private Media AU\": {\n    domain: \"###_au_private_media\",\n    group: [\n      \"crikey.com.au\",\n      \"smartcompany.com.au\",\n      \"themandarin.com.au\"\n    ],\n    remove_cookies_select_drop: [\"blaize_session\"]\n  },\n  \"Profil.at\": {\n    domain: \"profil.at\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Project Syndicate (fetch from archive.is)\": {\n    domain: \"project-syndicate.org\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"ProMedia.nl Group (opt-in to custom sites)\": {\n    domain: \"###_nl_promedia\",\n    group: [],\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"Prospect Magazine\": {\n    domain: \"prospectmagazine.co.uk\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Public.fr\": {\n    domain: \"public.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"Público.es\": {\n    domain: \"publico.es\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Puck.news (fetch from archive.is)\": {\n    domain: \"puck.news\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Puls Biznesu\": {\n    domain: \"pb.pl\",\n    allow_cookies: 1,\n    block_regex: /\\.pb\\.pl\\/api\\/tinypass\\.min\\.js/\n  },\n  \"Quartz (newsletter)\": {\n    domain: \"qz.com\",\n    allow_cookies: 1,\n    block_regex: /\\.kinja-static\\.com\\/assets\\/.+\\/regwalled-content.+\\.js/\n  },\n  \"Quora\": {\n    domain: \"quora.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Quotidiano.net (+ regional)\": {\n    domain: \"###_it_quotidiano\",\n    group: [\n      \"ilgiorno.it\",\n      \"ilrestodelcarlino.it\",\n      \"iltelegrafolivorno.it\",\n      \"lanazione.it\",\n      \"quotidiano.net\"\n    ],\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Réforme.net\": {\n    domain: \"reforme.net\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Reuters\": {\n    domain: \"reuters.com\",\n    allow_cookies: 1,\n    block_regex: /\\.reuters\\.com\\/arc\\/subs\\/p\\.min\\.js/\n  },\n  \"Revista Oeste\": {\n    domain: \"revistaoeste.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\/revistaoeste\\.com\\/revista\\//,\n    block_regex: /\\/revistaoeste\\.com\\/wp-content\\/.+\\/js\\/app\\..+\\.js/\n  },\n  \"Revue Conflits\": {\n    domain: \"revueconflits.com\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\/data/\n  },\n  \"Revue21.fr\": {\n    domain: \"revue21.fr\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Rheinische Post Mediengruppe (fetch from archive.is)\": {\n    domain: \"###_de_rp_medien\",\n    group: [\n      \"ga.de\",\n      \"rp-online.de\",\n      \"saarbruecker-zeitung.de\",\n      \"volksfreund.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    cs_dompurify: 1\n  },\n  \"Ringier Gruppe (ch)\": {\n    allow_cookies: 1,\n    domain: \"###_ch_ringier\",\n    group: [\n      \"beobachter.ch\",\n      \"blick.ch\",\n      \"handelszeitung.ch\"\n    ],\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1,\n    useragent: \"googlebot\",\n    exception: [{\n        domain: \"blick.ch\",\n        allow_cookies: 1,\n        block_regex: /\\.tinypass\\.com\\//\n      }\n    ]\n  },\n  \"Ringier Axel Springer Polska\": {\n    domain: \"###_pl_ringier\",\n    group: [\n      \"auto-swiat.pl\",\n      \"businessinsider.com.pl\",\n      \"forbes.pl\",\n      \"komputerswiat.pl\",\n      \"newsweek.pl\",\n      \"onet.pl\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"Roularta Media Group\": {\n    domain: \"###_be_roularta\",\n    group: [\n      \"artsenkrant.com\",\n      \"beleggersbelangen.nl\",\n      \"femmesdaujourdhui.be\",\n      \"flair.be\",\n      \"knack.be\",\n      \"kw.be\",\n      \"levif.be\",\n      \"libelle.be\"\n    ],\n    allow_cookies: 1,\n    block_js_inline: /\\.be\\/.+\\/(\\w+-){2,}/,\n    block_regex: \"(\\\\.|\\\\/){domain}\\\\/(script|js\\\\/responsive\\\\/rmg(Modal|Paywall))\\\\.js\",\n    exception: [{\n        domain: [\"artsenkrant.com\", \"beleggersbelangen.nl\", \"kw.be\"],\n        allow_cookies: 1,\n        block_regex: \"(\\\\.|\\\\/){domain}\\\\/(script|js\\\\/responsive\\\\/rmg(Modal|Paywall))\\\\.js\",\n      }\n    ]\n  },\n  \"RugbyPass\": {\n    domain: \"rugbypass.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\.rugbypass\\.com\\/plus\\/\\w/,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"S&P Global\": {\n    domain: \"spglobal.com\",\n    block_regex: /\\.spglobal\\.com\\/script\\.js/,\n    remove_cookies_select_drop: [\"count\"]\n  },\n  \"Sábado (not video)\": {\n    domain: \"sabado.pt\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/\n  },\n  \"Scholastic\": {\n    \"domain\": \"scholastic.com\",\n    \"allow_cookies\": 1\n  },\n  \"Schweizer Monat\": {\n    domain: \"schweizermonat.ch\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Science (free articles only)\": {\n    domain: \"science.org\",\n    allow_cookies: 1\n  },\n  \"Science & Vie\": {\n    domain: \"science-et-vie.com\",\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"ScienceNews.org\": {\n    domain: \"sciencenews.org\",\n    remove_cookies_select_drop: [\"blaize_session\"]\n  },\n  \"Sciences et Avenir\": {\n    domain: \"sciencesetavenir.fr\",\n    block_regex: /(\\.poool\\.fr\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Sciences Humaines\": {\n    domain: \"scienceshumaines.com\",\n    remove_cookies_select_drop: [\"number_view_paywall\"],\n    block_regex: /\\.qiota\\.com\\//,\n    useragent: \"googlebot\"\n  },\n  \"Scientific American\": {\n    domain: \"scientificamerican.com\",\n    remove_cookies_select_drop: [\"article_meter\"],\n    block_regex: /\\.scientificamerican\\.com\\/api\\/tinypass\\.min\\.js/\n  },\n  \"Sky.it (sport & tg24 only)\": {\n    domain: \"sky.it\",\n    allow_cookies: 1\n  },\n  \"Slate\": {\n    domain: \"slate.com\",\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"SlideShare\": {\n    domain: \"slideshare.net\",\n    allow_cookies: 1\n  },\n  \"SOFREP\": {\n    domain: \"sofrep.com\"\n  },\n  \"South China Morning Post\": {\n    domain: \"scmp.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|cdn\\.ampproject\\.org\\/v0\\/amp-(access|subscriptions)-.+\\.js)/\n  },\n  \"Southern Weekly\": {\n    domain: \"infzm.com\",\n    allow_cookies: 1\n  },\n  \"Spektrum.de\": {\n    domain: \"spektrum.de\",\n    allow_cookies: 1\n  },\n  \"SPH Media (fetch from archive.is)\": {\n    domain: \"###_sg_sph_media\",\n    group: [\n      \"businesstimes.com.sg\",\n      \"straitstimes.com\"\n    ],\n    allow_cookies: 1,\n    exception: [{\n        domain: \"straitstimes.com\",\n        allow_cookies: 1,\n        cs_dompurify: 1\n      }\n    ]\n  },\n \"Sport Life Ibérica (text only; opt-in to custom sites)\": {\n    domain: \"###_es_sport_life\",\n    group: [],\n    allow_cookies: 1,\n    ld_json: \"div.c-paywall|div.c-mainarticle__body\"\n  },\n  \"Sports Illustrated\": {\n    domain: \"si.com\",\n    allow_cookies: 1,\n    block_regex: /\\.si\\.com\\/script\\.js/\n  },\n  \"Springer Medizin\": {\n    domain: \"springermedizin.de\",\n    allow_cookies: 1\n  },\n  \"Standardmedia.co.ke (text only)\": {\n    domain: \"standardmedia.co.ke\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Star Tribune\": {\n    domain: \"startribune.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"StatNews\": {\n    domain: \"statnews.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Stereogum\": {\n    domain: \"stereogum.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Stern.de (fetch from archive.is)\": {\n    domain: \"stern.de\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Stock News\": {\n    domain: \"stocknews.com\",\n    allow_cookies: 1\n  },\n  \"Stratfor\": {\n    domain: \"stratfor.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Study.com (only lessons; no videos)\": {\n    domain: \"study.com\",\n    allow_cookies: 1\n  },\n  \"Stylist.co.uk\": {\n    domain: \"stylist.co.uk\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Suomen Sotilas\": {\n    domain: \"suomensotilas.fi\",\n    allow_cookies: 1,\n    block_regex: /\\/suomensotilas\\.fi\\/wp-content\\/plugins\\/epflpw\\/js\\/pw\\.js/\n  },\n  \"Süddeutsche Zeitung\": {\n    domain: \"sueddeutsche.de\",\n    allow_cookies: 1,\n    block_regex: /\\.sueddeutsche\\.de\\/api\\/tinypass\\.min\\.js/,\n    cs_dompurify: 1\n  },\n  \"Südkurier (fetch from archive.is)\": {\n    domain: \"suedkurier.de\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"Swarajyamag\": {\n    domain: \"swarajyamag.com\",\n    allow_cookies: 1\n  },\n  \"T3n.de (text only)\": {\n    domain: \"t3n.de\",\n    allow_cookies: 1\n  },\n  \"Tamedia.ch Group (opt-in to custom sites for unlisted)\": {\n    domain: \"###_ch_tamedia\",\n    group: [\n      \"24heures.ch\",\n      \"bazonline.ch\",\n      \"bernerzeitung.ch\",\n      \"derbund.ch\",\n      \"tagesanzeiger.ch\",\n      \"tdg.ch\"\n    ],\n    remove_cookies_select_drop: [\"xbc\"],\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"Tampa Bay Times\": {\n    domain: \"tampabay.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.zephr\\.com\\/zephr-browser\\/|js\\.matheranalytics\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"Tech in Asia\": {\n    domain: \"techinasia.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"TechTarget Group\": {\n    domain: \"###_usa_techtarget\",\n    allow_cookies: 1,\n    group: [\n      \"computerweekly.com\",\n      \"lemagit.fr\",\n      \"techtarget.com\"\n    ]\n  },\n  \"Telegraaf\": {\n    domain: \"telegraaf.nl\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Télérama.fr\": {\n    domain: \"telerama.fr\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Tes Magazine\": {\n    domain: \"tes.com\",\n    remove_cookies_select_drop: [\"tg_paywall\"]\n  },\n  \"Texas Monthly\": {\n    domain: \"texasmonthly.com\",\n    allow_cookies: 1,\n    block_regex: /\\.texasmonthly\\.com\\/script\\.js/\n  },\n  \"The (New Orleans) Advocate\": {\n    domain: \"###_usa_theadvocate\",\n    group: [\n      \"nola.com\",\n      \"shreveportbossieradvocate.com\",\n      \"theadvocate.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(\\\\.{domain}\\\\/(script|.+\\\\/tncms\\\\/api\\\\/access\\\\..+)\\\\.js|\\\\.townnews\\\\.com\\\\/.+\\\\/engage\\\\.min\\\\.js)\"\n  },\n  \"The American Conservative\": {\n    domain: \"theamericanconservative.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The American Interest\": {\n    domain: \"the-american-interest.com\",\n    allow_cookies: 1\n  },\n  \"The American Scholar\": {\n    domain: \"theamericanscholar.org\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Art Newspaper\": {\n    domain: \"theartnewspaper.com\",\n    allow_cookies: 1,\n    block_regex: /\\.theartnewspaper\\.com\\/_next\\/static\\/chunks\\/pages\\/access-allowed-.+\\.js/\n  },\n  \"The Atlanta Journal-Constitution\": {\n    domain: \"ajc.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/|\\.sophi\\.io\\/)/\n  },\n  \"The Atlantic\": {\n    domain: \"theatlantic.com\",\n    allow_cookies: 1,\n    block_regex: /\\.theatlantic\\.com\\/zephr\\//\n  },\n  \"The Baffler\": {\n    domain: \"thebaffler.com\",\n    allow_cookies: 1,\n    block_regex: /\\/blink\\.net\\/.+\\/blink-sdk\\.js/\n  },\n  \"The Baltimore Banner\": {\n    domain: \"thebaltimorebanner.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.thebaltimorebanner\\.com\\/script\\.js)/\n  },\n  \"The Boston Globe\": {\n    domain: \"bostonglobe.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.blueconic\\.net\\/|meter\\.bostonglobe\\.com\\/js\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"The Business Journals (free articles only)\": {\n    domain: \"bizjournals.com\",\n    allow_cookies: 1,\n    block_regex: /\\.cxense\\.com\\//,\n    useragent: \"googlebot\"\n  },\n  \"The Business of Fashion\": {\n    domain: \"businessoffashion.com\",\n    allow_cookies: 1,\n    block_regex: /\\.businessoffashion\\.com\\/arc-platform-proxy\\.js/\n  },\n  \"The Christian Science Monitor\": {\n    domain: \"csmonitor.com\",\n    allow_cookies: 1\n  },\n  \"The Chronicle of Higher Education (& Philanthropy)\": {\n    domain: \"###_usa_chronicle\",\n    group: [\n      \"chronicle.com\",\n      \"philanthropy.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/script\\\\.js\"\n  },\n  \"The Columbian\": {\n    domain: \"columbian.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"The Critic\": {\n    domain: \"thecritic.co.uk\",\n    block_regex: /\\.hadrianpaywall\\.com\\//\n  },\n  \"The Daily Beast\": {\n    domain: \"thedailybeast.com\",\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"The Daily Wire (news only)\": {\n    domain: \"dailywire.com\",\n    allow_cookies: 1\n  },\n  \"The Dallas Morning News\": {\n    domain: \"dallasnews.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.dallasnews\\.com\\/script\\.js|js\\.matheranalytics\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/,\n    useragent: \"googlebot\"\n  },\n  \"The Diplomat\": {\n    domain: \"thediplomat.com\",\n    useragent: \"facebookbot\",\n    cs_dompurify: 1\n  },\n  \"The Dispatch\": {\n    domain: \"thedispatch.com\",\n    allow_cookies: 1,\n    block_regex: /\\.thedispatch\\.com\\/api\\/tinypass\\.min\\.js/\n  },\n  \"The Economic Times (ET Prime)\": {\n    domain: \"###_economictimes\",\n    group: [\n      \"economictimes.com\",\n      \"economictimes.indiatimes.com\"\n    ],\n    allow_cookies: 1,\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"The Economist\": {\n    domain: \"economist.com\",\n    allow_cookies: 1,\n    block_regex: /(\\/zephr\\/feature|\\.economist\\.com\\/latest\\/wall-ui\\.js)/,\n    useragent_custom: \"Mozilla/5.0 (Linux; Android 14) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.103 Mobile Safari/537.36 Lamarr\"\n  },\n  \"The Epoch Times (+ br|cz|de|fr|jp|ro; opt-in to custom sites)\": {\n    domain: \"###_usa_epochtimes\",\n    group: [\n      \"epoch.org.il\",\n      \"theepochtimes.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.(theepochtimes\\.com|epochbase\\.(com|eu))\\/(rules\\/get|libs\\/paywall.+\\.js)/,\n    exception: [{\n        domain: \"epoch.org.il\",\n        allow_cookies: 1,\n        block_js_inline: /\\/epoch\\.org\\.il\\/.+\\/\\d{5,}\\//,\n        cs_dompurify: 1\n      }\n    ]\n  },\n  \"The Financial Express\": {\n    domain: \"financialexpress.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.financialexpress\\.com\\/.+\\/min\\/premiumStoryContent\\.js|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"The Globe and Mail\": {\n    domain: \"theglobeandmail.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.sophi\\.io\\/|\\.zephr\\.com\\/zephr-browser\\/)/\n  },\n  \"The Hill\": {\n    domain: \"thehill.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"The Hill Times\": {\n    domain: \"hilltimes.com\",\n    allow_cookies: 1,\n    block_regex: /\\.hilltimes\\.com\\/.+\\/js\\/loadingoverlay\\/loadingoverlay\\.min\\.js/,\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"The Hindu (not epaper)\": {\n    domain: \"thehindu.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.cxense\\.com\\/|\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"The Hindu BusinessLine (not epaper)\": {\n    domain: \"thehindubusinessline.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.cxense\\.com\\/|\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/\n  },\n  \"The Impression\": {\n    domain: \"theimpression.com\",\n    allow_cookies: 1\n  },\n  \"The Independent (UK & USA)\": {\n    domain: \"###_uk_independent\",\n    group: [\n      \"independent.co.uk\",\n      \"the-independent.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"The Indian Express\": {\n    domain: \"indianexpress.com\",\n    allow_cookies: 1,\n    block_regex: /(\\/indianexpress\\/js\\/evolok\\/|\\.fewcents\\.co\\/.+\\/paywall.*\\.js|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"The Intercept (regwall)\": {\n    domain: \"theintercept.com\",\n    allow_cookies: 1,\n    block_js_inline: /\\/theintercept\\.com\\//\n  },\n  \"The Irish Examiner\": {\n    domain: \"irishexaminer.com\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"The Irish News\": {\n    domain: \"irishnews.com\",\n    allow_cookies: 1,\n    block_regex: /\\.poool\\.fr\\//\n  },\n  \"The Irish Times\": {\n    domain: \"irishtimes.com\",\n    allow_cookies: 1,\n    block_regex: /\\.irishtimes\\.com\\/zephr\\/feature/\n  },\n  \"The Japan Times (do not block TinyPass-script externally)\": {\n    domain: \"japantimes.co.jp\",\n    block_regex: /\\.cxense\\.com\\//,\n    remove_cookies_select_drop: [\"xbc\"]\n  },\n  \"The Jerusalem Post\": {\n    domain: \"jpost.com\",\n    allow_cookies: 1,\n    block_regex: /\\.jpost\\.com\\/js\\/js_article\\.min\\.js/\n  },\n  \"The Juggernaut\": {\n    domain: \"###_usa_thejuggernaut\",\n    group: [\n      \"thejuggernaut.com\",\n      \"jgnt.co\"\n    ],\n    allow_cookies: 1\n  },\n  \"The Lamp Magazine\": {\n    domain: \"thelampmagazine.com\",\n    allow_cookies: 1\n  },\n  \"The Lawyer (UK; not mda)\": {\n    domain: \"thelawyer.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"The Leaflet.in\": {\n    domain: \"theleaflet.in\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Logic.co (do not block TinyPass-script externally)\": {\n    domain: \"thelogic.co\",\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/)/,\n    remove_cookies_select_drop: [\"firstarticle\"]\n  },\n  \"The Market.ch\": {\n    domain: \"themarket.ch\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/|ens\\.themarket\\.ch\\/.+\\/Bootstrap\\.js)/\n  },\n  \"The Nation\": {\n    domain: \"thenation.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js)/\n  },\n  \"The New Atlantis\": {\n    domain: \"thenewatlantis.com\",\n    allow_cookies: 1,\n    block_regex: /\\.thenewatlantis\\.com\\/.+\\/thenewatlantis\\/js\\/(gate|donate)\\.js/\n  },\n  \"The New Criterion\": {\n    domain: \"newcriterion.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The New European\": {\n    domain: \"theneweuropean.co.uk\",\n    allow_cookies: 1,\n    block_regex: /cdn\\.tinypass\\.com\\//\n  },\n  \"The New Republic\": {\n    domain: \"newrepublic.com\",\n    allow_cookies: 1,\n    block_regex: /\\/blink\\.net\\/.+\\/blink-sdk\\.js/\n  },\n  \"The New Statesman\": {\n    domain: \"newstatesman.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"The New York Review of Books\": {\n    domain: \"nybooks.com\",\n    allow_cookies: 1,\n    block_regex: /\\.nybooks\\.com\\/wp-admin\\/admin-ajax\\.php/\n  },\n  \"The New York Sun\": {\n    domain: \"nysun.com\",\n    allow_cookies: 1,\n    block_regex: /\\.nysun\\.com\\/zephr\\//\n  },\n  \"The New York Times\": {\n    domain: \"nytimes.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.nytimes\\.com\\/(meter\\.js|svc\\/onsite-messaging\\/query)|mwcm\\.nyt\\.com\\/.+\\.js|cooking\\.nytimes\\.com\\/api\\/.+\\/access)/,\n    useragent: \"googlebot\"\n  },\n  \"The News Lens\": {\n    allow_cookies: 1,\n    domain: \"thenewslens.com\"\n  },\n  \"The News Minute\": {\n    domain: \"thenewsminute.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Philadelphia Inquirer\": {\n    domain: \"inquirer.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|js\\.matheranalytics\\.com\\/)/\n  },\n  \"The Point Magazine\": {\n    domain: \"thepointmag.com\",\n    remove_cookies_select_drop: [\"monthly_history\"]\n  },\n  \"The Quint\": {\n    domain: \"thequint.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Salt Lake Tribune\": {\n    domain: \"sltrib.com\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n  },\n  \"The San Francisco Standard\": {\n    domain: \"sfstandard.com\"\n  },\n  \"The Saturday Paper\": {\n    domain: \"thesaturdaypaper.com.au\",\n    block_regex: /\\.thesaturdaypaper\\.com\\.au\\/sites\\/all\\/modules\\/custom\\/node_meter\\/pw\\.js/\n  },\n  \"The Scientist (archive)\": {\n    domain: \"the-scientist.com\",\n    allow_cookies: 1\n  },\n  \"The Seattle Times\": {\n    domain: \"seattletimes.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.seattletimes\\.com\\/.+\\/st-user-messaging.+\\.js|js\\.matheranalytics\\.com\\/)/\n  },\n  \"The Spectator (UK)\": {\n    domain: \"spectator.co.uk\",\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"The Spectator Australia\": {\n    domain: \"spectator.com.au\",\n    allow_cookies: 1,\n    useragent: \"googlebot\",\n    cs_dompurify: 1\n  },\n  \"The Spectator World\": {\n    domain: \"thespectator.com\",\n    allow_cookies: 1,\n    block_regex: /\\.thespectator\\.com\\/api\\/tinypass\\.min\\.js/\n  },\n  \"The Stage Media (UK)\": {\n    \"domain\": \"###_uk_thestage_media\",\n    \"allow_cookies\": 1,\n    \"group\": [\n      \"thebookseller.com\",\n      \"thestage.co.uk\"\n    ],\n    cs_dompurify: 1,\n    exception: [{\n        domain: \"thebookseller.com\",\n        allow_cookies: 1,\n        useragent: \"googlebot\"\n      }\n    ]\n  },\n  \"The Sun Group (UK)\": {\n    domain: \"###_uk_thesun\",\n    group: [\n      \"thescottishsun.co.uk\",\n      \"thesun.co.uk\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"\\\\.{domain}\\\\/zephr\\\\/feature\"\n  },\n  \"The Telegraph\": {\n    domain: \"telegraph.co.uk\",\n    allow_cookies: 1,\n    block_regex: /(\\.tinypass\\.com\\/|\\.telegraph\\.co\\.uk\\/martech\\/js\\/)/\n  },\n  \"The Times UK (fetch from archive.is)\": {\n    domain: \"thetimes.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Times Literary Supplement\": {\n    domain: \"the-tls.co.uk\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"The Toronto Star (+ local TorStar sites)\": {\n    domain: \"###_ca_torstar\",\n    group: [\n      \"niagarafallsreview.ca\",\n      \"stcatharinesstandard.ca\",\n      \"thepeterboroughexaminer.com\",\n      \"therecord.com\",\n      \"thespec.com\",\n      \"thestar.com\",\n      \"wellandtribune.ca\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(\\\\.{domain}\\\\/(script|.+\\\\/tncms\\\\/api\\\\/access\\\\..+)\\\\.js|\\\\.ampproject\\\\.org\\\\/v\\\\d\\\\/amp-access-.+\\\\.js)\",\n    cs_dompurify: 1\n  },\n  \"The Wall Street Journal\": {\n    domain: \"wsj.com\",\n    allow_cookies: 1,\n    referer_custom: \"https://www.drudgereport.com/\",\n    cs_dompurify: 1\n  },\n  \"The Washington Post\": {\n    domain: \"washingtonpost.com\",\n    allow_cookies: 1,\n    block_regex: /\\.washingtonpost\\.com\\/.+\\/tetro-client\\//\n  },\n  \"The Week (regwall)\": {\n    domain: \"theweek.com\",\n    allow_cookies: 1\n  },\n  \"The West Australian (+ regional/opt-in to custom sites)\": {\n    domain: \"thewest.com.au\",\n    allow_cookies: 1\n  },\n  \"The Wrap\": {\n    domain: \"thewrap.com\",\n    remove_cookies_select_drop: [\"blaize_session\"],\n    cs_dompurify: 1\n  },\n  \"Times Higher Education\": {\n    domain: \"timeshighereducation.com\",\n    allow_cookies: 1\n  },\n  \"Times of India\": {\n    domain: \"###_timesofindia\",\n    group: [\n      \"epaper.indiatimes.com\",\n      \"timesofindia.indiatimes.com\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Tiroler Tageszeitung\": {\n    domain: \"tt.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\/xbuilder\\/experience\\/execute/,\n    cs_dompurify: 1\n  },\n  \"Tribune Publishing Company\": {\n    domain: \"###_usa_tribune\",\n    group: [\n      \"baltimoresun.com\",\n      \"capitalgazette.com\",\n      \"chicagotribune.com\",\n      \"courant.com\",\n      \"dailypress.com\",\n      \"mcall.com\",\n      \"nydailynews.com\",\n      \"orlandosentinel.com\",\n      \"pilotonline.com\",\n      \"sun-sentinel.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: \"(\\\\.{domain}\\\\/(script|.+\\\\/loader-wp\\\\/static\\\\/loader\\\\.min)\\\\.js)\",\n    cs_dompurify: 1\n  },\n  \"Tuttosport\": {\n    domain: \"tuttosport.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"TVN24.pl\": {\n    domain: \"tvn24.pl\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"UnHerd\": {\n    domain: \"unherd.com\",\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//\n  },\n  \"UOL.com.br\": {\n    domain: \"uol.com.br\",\n    allow_cookies: 1,\n    block_regex: /(paywall\\.folha\\.uol\\.com\\.br\\/|\\.(tinypass|matheranalytics)\\.com\\/|\\.ampproject\\.org\\/v0\\/amp-subscriptions-.+\\.js)/,\n    useragent: \"googlebot\"\n  },\n  \"USA Today\": {\n    domain: \"usatoday.com\",\n    allow_cookies: 1,\n    block_regex: /\\.ampproject\\.org\\/v0\\/amp-access-.+\\.js/,\n    useragent: \"googlebot\"\n  },\n  \"Valeurs Actuelles\": {\n    domain: \"valeursactuelles.com\",\n    allow_cookies: 1,\n    block_regex: /\\.qiota\\.com\\//\n  },\n  \"Valnet Group (regwall; opt-in to custom sites)\": {\n    domain: \"###_ca_valnet\",\n    group: [],\n    remove_cookies_select_drop: [\"articlesLimitDepth\", \"articlesReadPerDay\"]\n  },\n  \"Verlagsgruppe Rhein Main (opt-in to custom sites for unlisted)\": {\n    allow_cookies: 1,\n    domain: \"###_de_vrm\",\n    group: [\n      \"allgemeine-zeitung.de\",\n      \"echo-online.de\",\n      \"wiesbadener-kurier.de\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.piano\\.io\\//,\n    useragent: \"googlebot\"\n  },\n  \"Vice\": {\n    domain: \"vice.com\",\n    allow_cookies: 1\n  },\n  \"Vikatan\": {\n    domain: \"vikatan.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Vogue Business\": {\n    domain: \"voguebusiness.com\",\n    block_regex: /\\.voguebusiness\\.com\\/journey\\/compiler\\/build-.+\\.js/,\n    remove_cookies_select_drop: [\"userId\"]\n  },\n  \"Vorarlberg Nachrichten\": {\n    domain: \"vn.at\",\n    allow_cookies: 1,\n    block_js_inline: /\\.vn\\.at\\/.+\\/\\d{4}\\//,\n    block_regex: /\\.tinypass\\.com\\//,\n  },\n  \"Vorarlberg Online\": {\n    domain: \"vol.at\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//,\n    cs_dompurify: 1\n  },\n  \"Vox Media Group\": {\n    domain: \"###_usa_vox_media\",\n    group: [\n      \"curbed.com\",\n      \"grubstreet.com\",\n      \"nymag.com\",\n      \"thecut.com\",\n      \"theverge.com\",\n      \"vox.com\",\n      \"vulture.com\"\n    ],\n    allow_cookies: 1,\n    block_regex: /\\.zephr\\.com\\/zephr-browser\\//\n  },\n  \"Vox\": {\n    domain: \"vox.com\",\n    allow_cookies: 1,\n    block_regex: /\\.zephr\\.com\\/zephr-browser\\//\n  },\n  \"Vrij Nederland\": {\n    domain: \"vn.nl\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Washington Examiner\": {\n    domain: \"washingtonexaminer.com\",\n    allow_cookies: 1,\n    block_regex: /\\.zephr\\.com\\/zephr-browser\\//\n  },\n  \"Weltkunst\": {\n    domain: \"weltkunst.de\",\n    allow_cookies: 1,\n    useragent: \"googlebot\"\n  },\n  \"Weser-Kurier\": {\n    domain: \"weser-kurier.de\",\n    allow_cookies: 1,\n    block_regex: /(\\.piano\\.io\\/xbuilder\\/experience\\/execute|\\.cxense\\.com\\/)/\n  },\n  \"William Reed Group (opt-in to custom sites)\": {\n    domain: \"###_uk_william_reed\",\n    group: [],\n    block_regex: /\\.tinypass\\.com\\//,\n    add_ext_link: \"div.accessMessage|div.accessContainer\",\n    add_ext_link_type: \"google_search_tool\",\n  },\n  \"Winnipeg Free Press\": {\n    domain: \"winnipegfreepress.com\",\n    allow_cookies: 1,\n    block_regex: /(\\.winnipegfreepress\\.com\\/(api\\/v\\d\\/auth\\/identify|.+\\/gdpr\\.js)|\\.cxense\\.com\\/)/\n  },\n  \"Wonderzine\": {\n    domain: \"wonderzine.com\",\n    allow_cookies: 1,\n    useragent: \"facebookbot\"\n  },\n  \"Wyborcza.pl Group (fetch from archive.is)\": {\n    domain: \"###_pl_wyborcza_group\",\n    group: [\n      \"magazyn-kuchnia.pl\",\n      \"wyborcza.biz\",\n      \"wyborcza.pl\",\n      \"wysokieobcasy.pl\"\n    ],\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"Ynet\": {\n    domain: \"ynet.co.il\",\n    allow_cookies: 1,\n    block_regex: /\\.tinypass\\.com\\//\n  },\n  \"ZeroHedge\": {\n    domain: \"zerohedge.com\",\n    allow_cookies: 1,\n    cs_dompurify: 1\n  },\n  \"* Block general paywall-scripts (opt-in to custom sites to enable also for unlisted sites)\": {\n    domain: \"###\"\n  },\n  \"Amp-access\": {\n    domain: \"cdn.ampproject.org\",\n    allow_cookies: 1,\n    block_regex_general: /\\.ampproject\\.org\\/.+\\/amp-(access|(.+-)?ad|analytics|fx-flying-carpet|subscriptions)-.+\\.m?js/,\n    excluded_domains: [\"cdn.ampproject.org\", \"cambridge.org\", \"cmjornal.pt\"]\n  },\n  \"Amplitude\": {\n    domain: \"amplitude.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\.amplitude\\.com\\//,\n    excluded_domains: [\"amplitude.com\"]\n  },\n  \"Arc XP\": {\n    domain: \"###_arcxp.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\/arc\\/subs\\/p\\.min\\.js/,\n    excluded_domains: [\"nzherald.co.nz\"]\n  },\n  \"Axate.io\": {\n    domain: \"###_uk_axate.io\",\n    allow_cookies: 1,\n    block_regex_general: /\\.axate\\.io\\//\n  },\n  \"Azure Connext Loader\": {\n    domain: \"###_azure_connext\",\n    allow_cookies: 1,\n    block_regex_general: /(cdn|loader)\\..+\\.com\\/prod\\/.+\\/loader\\.min\\.js/\n  },\n  \"BlueConic\": {\n    domain: \"blueconic.net\",\n    allow_cookies: 1,\n    block_regex_general: /(\\.blueconic\\.net\\/|[a-z]{1}[0-9]{2,3}\\.[\\w-]+\\.(co(m|\\.uk)|net|org)\\/script\\.js)/\n  },\n  \"Cxense\": {\n    domain: \"cxense.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\.cxense\\.com\\//,\n    excluded_domains: [\"journaldemontreal.com\", \"journaldequebec.com\", \"wsj.com\"]\n  },\n  \"Ensighten\": {\n    domain: \"ensighten.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\.ensighten\\.com\\/.+\\/Bootstrap\\.js/\n  },\n  \"EverCookie\": {\n    domain: \"###_evercookie\",\n    allow_cookies: 1,\n    block_regex_general: /\\/paywall\\/evercookie_get\\.js/\n  },\n  \"Evolok\": {\n    domain: \"evolok.net\",\n    allow_cookies: 1,\n    block_regex_general: /\\.evolok\\.net\\//\n  },\n  \"Evolok WordPress\": {\n    domain: \"###_wp_evolok\",\n    allow_cookies: 1,\n    block_regex_general: /\\/evolok\\/(.+\\/)?ev-(em|widgets)\\.min\\.js/,\n    excluded_domains: [\"vikatan.com\"]\n  },\n  \"FewCents\": {\n    domain: \"fewcents.co\",\n    allow_cookies: 1,\n    block_regex_general: /\\.fewcents\\.co\\/.+\\/paywall.*\\.js/\n  },\n  \"Leaky Paywall (WordPress plugin)\": {\n    domain: \"###_wp_leaky_paywall\",\n    group: [],\n    block_regex_general: /\\/wp-content\\/plugins\\/leaky-paywall\\/js\\/leaky-paywall-cookie\\.js/\n  },\n  \"MatherAnalytics\": {\n    domain: \"matheranalytics.com\",\n    allow_cookies: 1,\n    block_regex_general: /js\\.matheranalytics.com\\//\n  },\n  \"NewsMemory\": {\n    domain: \"newsmemory.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\.newsmemory\\.com\\/\\?meter/\n  },\n  \"Omeda Olytics\": {\n    domain: \"omeda.com\",\n    allow_cookies: 1,\n    block_regex_general: /olytics\\.omeda\\.com\\//,\n    excluded_domains: [\"omeda.com\"]\n  },\n  \"OneCount\": {\n    domain: \"onecount.net\",\n    allow_cookies: 1,\n    block_regex_general: /\\.onecount\\.net\\//\n  },\n  \"Pelcro\": {\n    domain: \"pelcro.com\",\n    allow_cookies: 1,\n    block_regex_general: /js\\.pelcro\\.com\\//,\n    excluded_domains: [\"pelcro.com\"]\n  },\n  \"Piano.io (+ TinyPass)\": {\n    domain: \"piano.io\",\n    allow_cookies: 1,\n    block_regex_general: /\\/xbuilder\\/experience\\/execute/,\n    excluded_domains: [\"piano.io\", \"fortune.com\", \"hbr.org\", \"japantimes.co.jp\", \"nacion.com\"]\n  },\n  \"Pico.tools\": {\n    domain: \"pico.tools\",\n    allow_cookies: 1,\n    block_regex_general: /api\\.pico\\.tools\\//\n  },\n  \"Pigeon (WordPress plugin)\": {\n    domain: \"###_wp_pigeon\",\n    allow_cookies: 1,\n    block_regex_general: /\\/c\\/assets\\/pigeon\\.js/\n  },\n  \"Poool.fr\": {\n    domain: \"poool.fr\",\n    allow_cookies: 1,\n    block_regex_general: /\\.poool\\.fr\\//,\n    excluded_domains: [\"poool.fr\"]\n  },\n  \"Qiota\": {\n    domain: \"qiota.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\.qiota\\.com\\/data/,\n    excluded_domains: [\"qiota.com\"]\n  },\n  \"RCP-View Limit (WordPress plugin)\": {\n    domain: \"###_rcp_view_limit\",\n    allow_cookies: 1,\n    block_regex_general: /\\/wp-content\\/.+\\/plugins\\/rcp-view-limit\\//\n  },\n  \"Sophi.io\": {\n    domain: \"sophi.io\",\n    allow_cookies: 1,\n    block_regex_general: /\\.sophi\\.io\\//,\n    excluded_domains: [\"sophi.io\"]\n  },\n  \"Steady\": {\n    domain: \"steadyhq.com\",\n    allow_cookies: 1,\n    block_regex_general: /\\/steadyhq\\.com\\//,\n    excluded_domains: [\"steadyhq.com\"]\n  },\n  \"TownNews sites (Blox CMS)\": {\n    domain: \"###_usa_townnews\",\n    block_regex_general: /\\/tncms\\/api\\/access(\\..+)?\\.js/,\n    cs_dompurify: 1,\n    exception: [{\n        domain: \"berkshireeagle.com\",\n        block_regex_general: /\\/tncms\\/api\\/access(\\..+)?\\.js/,\n        useragent: \"googlebot\",\n        cs_dompurify: 1\n      }\n    ]\n  },\n  \"Zephr\": {\n    domain: \"zephr.com\",\n    allow_cookies: 1,\n    block_regex_general: /(\\.zephr\\.com\\/zephr-browser\\/|\\/zephr\\/feature)/\n  },\n}\n\nif (typeof browser !== 'object') {\n  delete defaultSites['Roularta Media Group']['block_js_inline'];\n  delete defaultSites['Roularta Media Group']['exception'];\n  var ja_title = 'Jeune Afrique (last month only)';\n  defaultSites[ja_title]['headers_custom'] = defaultSites[ja_title]['cs_param'];\n}\n\nvar defaultSites_grouped_domains = Object.values(defaultSites).filter(function (value) {\n    return (value.hasOwnProperty('domain') && value.domain !== '###');\n  }).map(x => x.domain);\nvar defaultSites_groups_domains = [].concat.apply([], Object.values(defaultSites).filter(function (value) {\n    return value.hasOwnProperty('group');\n  }).map(x => x.group));\nvar defaultSites_domains = defaultSites_grouped_domains.concat(defaultSites_groups_domains);\n\nfunction expandSiteRules(sites, updated = false) {\n  for (let site in sites) {\n    let rule = sites[site];\n    if (rule.hasOwnProperty('group_rule')) {\n      let rules = sites[rule.group_rule];\n      for (key in rules) {\n        if (key !== 'group_rule_domains')\n          sites[site][key] = rules[key];\n      }\n      //delete sites[site].group_rule;\n    }\n    if (updated) {\n      if (rule.hasOwnProperty('group_rule_domains')) {\n        let domains = rule.group_rule_domains;\n        for (let domain of domains) {\n          let defaultTitle = Object.keys(defaultSites).find(key => defaultSites[key].domain === domain);\n          if (defaultTitle) {\n            for (key in rule) {\n              if (key !== 'group_rule_domains')\n                defaultSites[defaultTitle][key] = rule[key];\n            }\n          }\n        }\n      }\n    }\n    if (rule.hasOwnProperty('group')) {\n      let domain = rule.domain;\n      grouped_sites[domain] = rule.group\n    }\n  }\n}\n\nvar grouped_sites = {};\nexpandSiteRules(defaultSites);\n\n// custom domains (background)\nvar custom_flex_not = {\n  \"###_ca_postmedia\": [\"canada.com\", \"canoe.com\", \"driving.ca\"],\n  \"###_de_dfv_medien\": [\"dfv.de\"],\n  \"###_de_madsack\": [\"madsack.de\", \"madsack-medien-campus.de\"],\n  \"###_es_epiberica\": [\"sport.es\", \"stilo.es\"],\n  \"###_wp_leaky_paywall\": [\"epsilontheory.com\", \"heisenbergreport.com\", \"thewirechina.com\", \"toolkits.com\", \"uppereastsite.com\"],\n  \"###_uk_axate.io\": [\"thecricketer.com\", \"thinkofx.net\"],\n  \"###_uk_haymarket\": [\"asianinvestor.net\", \"classicandsportscar.com\", \"financeasia.com\", \"gpbusiness.co.uk\", \"scmagazineuk.com\", \"thecorporatetreasurer.com\"],\n  \"###_uk_haymarket_medical\": [\"mycme.com\"],\n  \"###_usa_hearst_comm\": [\"chron.com\", \"sfgate.com\"],\n  \"###_usa_mcc\": [\"mcclatchy.com\"],\n  \"###_usa_townnews\": [\"bloxdigital.com\", \"townnews.com\"],\n  \"thewest.com.au\": [\"perthnow.com.au\"]\n}\nvar custom_flex;\nvar custom_flex_domains;\nvar custom_flex_not_domains;\nvar custom_flex_nofix_domains = [].concat(custom_flex_not['###_wp_leaky_paywall'], custom_flex_not['###_uk_axate.io'], custom_flex_not['###_uk_haymarket']);\n\nfunction init_custom_flex_domains() {\n  custom_flex = {};\n  custom_flex_domains = [];\n  custom_flex_not_domains = [].concat.apply([], Object.values(custom_flex_not));\n}\ninit_custom_flex_domains();\n\n// sites with no fix (background)\nvar de_smn_nofix_domains = ['cannstatter-zeitung.de', 'esslinger-zeitung.de', 'frankenpost.de', 'insuedthueringen.de', 'krzbb.de', 'kurier.de', 'np-coburg.de', 'schwarzwaelder-bote.de', 'stuttgarter-nachrichten.de', 'stuttgarter-zeitung.de'];\nvar de_westfalen_medien_nofix_domains = ['muensterschezeitung.de', 'westfalen-blatt.de', 'wn.de'];\nvar fi_sanoma_nofix_domains = ['aamulehti.fi', 'hs.fi', 'is.fi'];\nvar fr_groupe_infopro_nofix_domains = ['centralbanking.com', 'lagazettedescommunes.com', 'risk.net', 'usine-digitale.fr'];\nvar fr_indigo_nofix_domains = ['africaintelligence.com', 'africaintelligence.fr', 'glitz.paris', 'intelligenceonline.com', 'intelligenceonline.fr', 'lalettre.fr'];\nvar fr_jamg_nofix_domains = ['africabusinessplus.com', 'theafricareport.com'];\nvar fr_monde_diplo_nofix_domains = ['editionarabediplo.com', 'eldiplo.org', 'lemondediplomatique.cl', 'lmd.nedeljnik.rs', 'lmd.no', 'monde-diplomatique.fr', 'mondediplo.com', 'mondediplo.fi'];\nvar it_gedi_nofix_domains = ['gelocal.it', 'limesonline.com'];\nvar it_gruppo_nem_nofix_domains = ['corrierealpi.it', 'ilnordest.it', 'ilpiccolo.it', 'mattinopadova.it', 'messaggeroveneto.it', 'nuovavenezia.it', 'tribunatreviso.it'];\nvar se_bonnier_group_nofix_domains = ['di.se', 'expressen.se'];\nvar usa_allcity_network_nofix_domains = ['allchgo.com', 'alldlls.com', 'allphly.com', 'gophnx.com', 'thednvr.com'];\nvar nofix_sites = ['11freunde.de', '24.hu', '444.hu', 'abplive.com', 'aerzteblatt.de', 'africa-confidential.com', 'aftenposten.no', 'aftonbladet.se', 'agefi.fr', 'allgaeuer-zeitung.de', 'altroconsumo.it', 'americanscientist.org', 'arkansasonline.com', 'asahi.com', 'asiatimes.com', 'augsburger-allgemeine.de', 'autocarpro.in', 'aviationweek.com', 'badische-zeitung.de', 'bisnis.com', 'bloomberglaw.com', 'bloombergtax.com', 'bmj.com', 'bnef.com', 'bnn.de', 'borsen.dk', 'breakingviews.com', 'breitbart.com', 'bunshun.jp', 'businessinsider.de', 'businesslive.co.za', 'caixin.com', 'caixinglobal.com', 'capital.de', 'caravanmagazine.in', 'catalyst-journal.com', 'chegg.com', 'cicero.de', 'cieletespace.fr', 'cmjornal.pt', 'consumerreports.org', 'cookpolitical.com', 'costar.com', 'coursehero.com', 'crunchbase.com', 'dealstreetasia.com', 'defence24.pl', 'delfi.ee', 'denikn.cz', 'deraktionaer.de', 'deutsche-wirtschafts-nachrichten.de', 'die-glocke.de', 'diepresse.com', 'donaukurier.de', 'e24.no', 'echo24.cz', 'elordenmundial.com', 'endpts.com', 'entrepreneur.com', 'epochtimes.se', 'epw.in', 'euractiv.com', 'ewmagazine.nl', 'falter.at', 'fd.nl', 'finance.si', 'finanz-szene.de', 'franc-tireur.fr', 'freiepresse.de', 'ftchinese.com', 'ftchineselive.com', 'gamestar.de', 'gazetaprawna.pl', 'gazeteoksijen.com', 'geo.de', 'golem.de', 'gp.se', 'haufe.de', 'hbr-caijing.com', 'hbrarabic.com', 'hbrfrance.fr', 'hedgehogreview.com', 'heraldo.es', 'hindutamil.in', 'history.org.uk', 'hn.cz', 'hsj.co.uk', 'humanite.fr', 'idnes.cz', 'iex.nl', 'ifre.com', 'ilsecoloxix.it', 'iltalehti.fi', 'information.dk', 'intelligentinvestor.com.au', 'investing.com', 'investors.com', 'jacobin.com', 'janes.com', 'jazziz.com', 'jn.pt', 'jota.info', 'jungefreiheit.de', 'kicker.de', 'kleinezeitung.at', 'kommunen.dk', 'krone.at', 'la-croix.com', 'laprovence.com', 'lasegunda.com', 'latribune.fr', 'laverita.info', 'lavie.fr', 'lavozdegalicia.es', 'law.com', 'law360.ca', 'law360.co.uk', 'law360.com', 'lecanardenchaine.fr', 'leconomiste.com', 'ledesk.ma', 'lefilmfrancais.com', 'lesjours.fr', 'letemps.ch', 'libertiesjournal.com', 'liga.net', 'lindipendente.online', 'lorientlejour.com', 'lr-online.de', 'lz.de', 'mailplus.co.uk', 'main-echo.de', 'mainpost.de', 'malaysiakini.com', 'maville.com', 'mediapart.fr', 'mittelbayerische.de', 'mlex.com', 'money.it', 'moneycontrol.com', 'moodys.com', 'morningstar.com', 'motorsport.com', 'moz.de', 'mz.de', 'nachrichten.at', 'naiz.eus', 'nationaljournal.com', 'nbr.co.nz', 'nejm.org', 'newleftreview.org', 'news24.com', 'newspapers.com', 'newsroom.co.nz', 'nexos.com.mx', 'next.ink', 'nikkansports.com', 'nikkei.com', 'nn.de', 'note.com', 'nouvelobs.com', 'ntnews.com.au', 'nypost.com', 'oantagonista.com.br', 'ojogo.pt', 'on3.com', 'onetz.de', 'pagina12.com.ar', 'penews.com', 'pff.com', 'pnp.de', 'politicopro.com', 'politiken.dk', 'postimees.ee', 'pressreader.com', 'publico.pt', 'quechoisir.org', 'racingpost.com', 'rbc.ru', 'reason.com', 'record.pt', 'reforma.com', 'republic.ru', 'rhein-zeitung.de', 'rivals.com', 'rnz.de', 'rtings.com', 'sciencedirect.com', 'seekingalpha.com', 'sn.at', 'springer.com', 'statista.com', 'stimme.de', 'storm.mg', 'streetinsider.com', 'studocu.com', 'substack.com', 'svd.se', 'swp.de', 'table.media', 'taxation.co.uk', 'taxjournal.com', 'telquel.ma', 'tempo.co', 'test.de', 'the-ken.com', 'thebanker.com', 'theinformation.com', 'thejakartapost.com', 'thelancet.com', 'themorningcontext.com', 'theparisreview.org', 'thestar.com.my', 'timeslive.co.za', 'tipranks.com', 'udn.com', 'vedomosti.ru', 'vi.nl', 'volksstimme.de', 'weltwoche.ch', 'weltwoche.de', 'which.co.uk', 'wissenschaft.de', 'wiwo.de', 'worldpoliticsreview.com', 'woz.ch', 'wpolityce.pl', 'wz.de', 'xakep.ru', 'zaobao.com.sg', 'zive.cz'].concat(custom_flex_nofix_domains, de_smn_nofix_domains, de_westfalen_medien_nofix_domains, fi_sanoma_nofix_domains, fr_groupe_infopro_nofix_domains, fr_indigo_nofix_domains, fr_jamg_nofix_domains, fr_monde_diplo_nofix_domains, it_gedi_nofix_domains, it_gruppo_nem_nofix_domains, se_bonnier_group_nofix_domains, usa_allcity_network_nofix_domains);\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/backup/bypass-paywalls-chrome-clean-master/contentScript.js",
                "filename": "contentScript.js",
                "content": "//\"use strict\";\nvar ext_api = (typeof browser === 'object') ? browser : chrome;\nvar mobile = window.navigator.userAgent.toLowerCase().includes('mobile');\nvar page_content;\nvar domain;\nvar func_post;\nvar fetch_headers;\nvar data_ext_fetch = [];\nvar data_ext_fetch_id = 0;\nvar csDone;\nvar csDoneOnce;\nvar cs_param = {};\nvar dompurify_loaded = (typeof DOMPurify === 'function');\nvar dompurify_options = {ADD_TAGS: ['amp-img', 'iframe', 'list'], ADD_ATTR: ['allow', 'allowfullscreen', 'frameborder', 'itemprop', 'layout', 'target']};\n\nvar ar_grupo_clarin_domains = ['clarin.com', 'lavoz.com.ar', 'losandes.com.ar', 'ole.com.ar'];\nvar be_groupe_ipm_domains = ['dhnet.be', 'lalibre.be', 'lavenir.net'];\nvar be_mediahuis_domains = ['gva.be', 'hbvl.be', 'nieuwsblad.be', 'standaard.be'];\nvar be_roularta_domains = ['artsenkrant.com', 'beleggersbelangen.nl', 'femmesdaujourdhui.be', 'flair.be', 'knack.be', 'kw.be', 'levif.be', 'libelle.be'];\nvar ca_gcm_domains = ['lesoleil.com'].concat(['latribune.ca', 'lavoixdelest.ca', 'ledroit.com', 'ledroitfranco.com', 'lenouvelliste.ca', 'lequotidien.com']);\nvar ca_torstar_domains = ['niagarafallsreview.ca', 'stcatharinesstandard.ca', 'thepeterboroughexaminer.com', 'therecord.com', 'thespec.com', 'thestar.com', 'wellandtribune.ca'];\nvar ch_media_domains = ['aargauerzeitung.ch', 'luzernerzeitung.ch', 'tagblatt.ch'];\nvar ch_tamedia_domains = ['24heures.ch', 'bazonline.ch', 'bernerzeitung.ch', 'derbund.ch', 'tagesanzeiger.ch', 'tdg.ch'];\nvar de_funke_medien_domains = ['abendblatt.de', 'braunschweiger-zeitung.de', 'harzkurier.de', 'ikz-online.de', 'morgenpost.de', 'nrz.de', 'otz.de', 'thueringer-allgemeine.de', 'tlz.de', 'waz.de', 'wp.de', 'wr.de'];\nvar de_ippen_media_domains = ['fr.de', 'merkur.de', 'ovb-online.de'];\nvar de_lv_domains = ['profi.de', 'wochenblatt.com'];\nvar de_madsack_domains = ['haz.de', 'kn-online.de', 'ln-online.de', 'lvz.de', 'maz-online.de', 'neuepresse.de', 'ostsee-zeitung.de', 'rnd.de', 'saechsische.de'];\nvar de_motor_presse_domains = ['aerokurier.de', 'auto-motor-und-sport.de', 'flugrevue.de', 'motorradonline.de', 'womenshealth.de'];\nvar de_rp_medien_domains = ['ga.de', 'rp-online.de', 'saarbruecker-zeitung.de', 'volksfreund.de'];\nvar de_vrm_domains = ['allgemeine-zeitung.de', 'echo-online.de', 'wiesbadener-kurier.de'];\nvar de_vrm_custom_domains = ['buerstaedter-zeitung.de', 'hochheimer-zeitung.de', 'lampertheimer-zeitung.de', 'lauterbacher-anzeiger.de', 'main-spitze.de', 'mittelhessen.de', 'oberhessische-zeitung.de', 'wormser-zeitung.de'];\nvar es_epiberica_domains = ['diariodemallorca.es', 'eldia.es', 'elperiodico.com', 'epe.es', 'farodevigo.es', 'informacion.es', 'laprovincia.es', 'levante-emv.com', 'lne.es', 'mallorcazeitung.es', 'superdeporte.es'];\nvar es_epiberica_custom_domains = ['diaridegirona.cat', 'diariocordoba.com', 'diariodeibiza.es', 'elcorreogallego.es', 'elcorreoweb.es', 'elperiodicodearagon.com', 'elperiodicoextremadura.com', 'elperiodicomediterraneo.com', 'emporda.info', 'laopinioncoruna.es', 'laopiniondemalaga.es', 'laopiniondemurcia.es', 'laopiniondezamora.es', 'regio7.cat'];\nvar es_grupo_vocento_domains = ['abc.es', 'canarias7.es', 'diariosur.es', 'diariovasco.com', 'elcomercio.es', 'elcorreo.com', 'eldiariomontanes.es', 'elnortedecastilla.es', 'hoy.es', 'ideal.es', 'larioja.com', 'lasprovincias.es', 'laverdad.es', 'lavozdigital.es'];\nvar es_unidad_domains = ['elmundo.es', 'expansion.com', 'marca.com'];\nvar fr_groupe_ebra_domains = ['bienpublic.com', 'dna.fr', 'estrepublicain.fr', 'lalsace.fr', 'ledauphine.com', 'lejsl.com', 'leprogres.fr', 'republicain-lorrain.fr', 'vosgesmatin.fr'];\nvar fr_groupe_la_depeche_domains = ['centrepresseaveyron.fr', 'journaldemillau.fr', 'ladepeche.fr', 'lindependant.fr', 'midilibre.fr', 'nrpyrenees.fr', 'petitbleu.fr', 'rugbyrama.fr'];\nvar fr_be_groupe_rossel_domains = ['aisnenouvelle.fr', 'courrier-picard.fr', 'lardennais.fr', 'lavoixdunord.fr', 'lemessager.fr', 'lesoir.be', 'lest-eclair.fr', 'liberation-champagne.fr', 'lunion.fr', 'nordlittoral.fr', 'paris-normandie.fr', 'sudinfo.be'];\nvar fr_groupe_nice_matin_domains = ['monacomatin.mc', 'nicematin.com', 'varmatin.com'];\nvar it_ilmessaggero_domains = ['corriereadriatico.it', 'ilgazzettino.it', 'ilmattino.it', 'ilmessaggero.it', 'quotidianodipuglia.it'];\nvar it_gedi_domains = ['huffingtonpost.it', 'italian.tech', 'lastampa.it', 'lescienze.it', 'moda.it', 'repubblica.it'];\nvar it_quotidiano_domains = ['ilgiorno.it', 'ilrestodelcarlino.it', 'iltelegrafolivorno.it', 'lanazione.it', 'quotidiano.net'];\nvar ke_nation_media_domains = ['businessdailyafrica.com', 'nation.africa'];\nvar ke_nation_media_custom_domains = ['monitor.co.ug', 'mwananchi.co.tz', 'mwanaspoti.co.tz', 'thecitizen.co.tz'];\nvar medium_custom_domains = ['betterprogramming.pub', 'towardsdatascience.com'];\nvar nl_dpg_adr_domains = ['ad.nl', 'bd.nl', 'bndestem.nl', 'destentor.nl', 'ed.nl', 'gelderlander.nl', 'pzc.nl', 'tubantia.nl'];\nvar nl_dpg_media_domains = ['demorgen.be', 'flair.nl', 'humo.be', 'libelle.nl', 'margriet.nl', 'parool.nl', 'trouw.nl', 'volkskrant.nl'];\nvar nl_mediahuis_region_domains = ['gooieneemlander.nl', 'haarlemsdagblad.nl', 'ijmuidercourant.nl', 'leidschdagblad.nl', 'limburger.nl', 'noordhollandsdagblad.nl'];\nvar no_dn_media_domains = ['dn.no', 'europower.no', 'fiskeribladet.no', 'hydrogeninsight.com', 'intrafish.com', 'intrafish.no', 'rechargenews.com', 'tradewindsnews.com', 'upstreamonline.com'];\nvar pe_grupo_elcomercio_domains = ['diariocorreo.pe', 'elcomercio.pe', 'gestion.pe'];\nvar pl_ringier_domains = ['auto-swiat.pl', 'businessinsider.com.pl', 'forbes.pl', 'komputerswiat.pl', 'newsweek.pl', 'onet.pl'];\nvar sg_sph_media_domains = ['businesstimes.com.sg', 'straitstimes.com'];\nvar timesofindia_domains = ['epaper.indiatimes.com', 'timesofindia.indiatimes.com'];\nvar uk_dmg_media_domains = ['dailymail.co.uk', 'mailonsunday.co.uk', 'thisismoney.co.uk'];\nvar uk_nat_world_domains = ['scotsman.com', 'yorkshirepost.co.uk'];\nvar usa_adv_local_domains = ['al.com', 'cleveland.com', 'lehighvalleylive.com', 'masslive.com', 'mlive.com', 'nj.com', 'oregonlive.com', 'pennlive.com', 'silive.com', 'syracuse.com'];\nvar usa_arizent_custom_domains = ['accountingtoday.com', 'benefitnews.com', 'bondbuyer.com', 'dig-in.com', 'financial-planning.com', 'nationalmortgagenews.com'];\nvar usa_conde_nast_domains = ['architecturaldigest.com', 'bonappetit.com', 'cntraveler.com', 'epicurious.com', 'gq.com' , 'newyorker.com', 'vanityfair.com', 'vogue.co.uk', 'vogue.com', 'wired.com'];\nvar usa_craincomm_domains = ['360dx.com', 'adage.com', 'autonews.com', 'chicagobusiness.com', 'crainscleveland.com', 'crainsdetroit.com', 'crainsgrandrapids.com', 'crainsnewyork.com', 'european-rubber-journal.com', 'genomeweb.com', 'modernhealthcare.com', 'pionline.com', 'plasticsnews.com', 'precisionmedicineonline.com', 'rubbernews.com', 'sustainableplastics.com', 'tirebusiness.com', 'utech-polyurethane.com'];\nvar usa_gannett_domains = ['azcentral.com', 'cincinnati.com', 'commercialappeal.com', 'courier-journal.com', 'democratandchronicle.com', 'desmoinesregister.com', 'detroitnews.com', 'dispatch.com', 'freep.com', 'indystar.com', 'jacksonville.com', 'jsonline.com', 'knoxnews.com', 'news-press.com', 'northjersey.com', 'oklahoman.com', 'statesman.com', 'tennessean.com'];\nvar usa_hearst_comm_domains = ['ctpost.com', 'expressnews.com', 'houstonchronicle.com', 'nhregister.com', 'sfchronicle.com', 'timesunion.com'];\nvar usa_lee_ent_domains = ['buffalonews.com', 'journalnow.com', 'journalstar.com', 'madison.com', 'nwitimes.com', 'omaha.com', 'richmond.com', 'stltoday.com', 'tucson.com', 'tulsaworld.com'];\nvar usa_mcc_domains = ['bnd.com', 'charlotteobserver.com', 'elnuevoherald.com', 'fresnobee.com', 'kansas.com', 'kansascity.com', 'kentucky.com', 'mcclatchydc.com', 'miamiherald.com', 'newsobserver.com', 'sacbee.com', 'star-telegram.com', 'thestate.com', 'tri-cityherald.com'];\nvar usa_mng_domains = ['bostonherald.com', 'denverpost.com', 'eastbaytimes.com', 'mercurynews.com', 'ocregister.com', 'pressenterprise.com', 'sandiegouniontribune.com', 'twincities.com'];\nvar usa_nymag_domains = ['curbed.com', 'grubstreet.com', 'nymag.com', 'thecut.com', 'vulture.com'];\nvar usa_outside_mag_domains = [\"backpacker.com\", \"betamtb.com\", \"betternutrition.com\", \"cleaneatingmag.com\", \"climbing.com\", \"outsideonline.com\", \"oxygenmag.com\", \"skimag.com\", \"trailrunnermag.com\", \"triathlete.com\", \"vegetariantimes.com\", \"womensrunning.com\", \"yogajournal.com\"];\nvar usa_penske_media_domains = ['billboard.com', 'rollingstone.com', 'sourcingjournal.com', 'sportico.com', 'variety.com', 'wwd.com'];\nvar usa_tribune_domains = ['baltimoresun.com', 'capitalgazette.com', 'chicagotribune.com', 'courant.com', 'dailypress.com', 'mcall.com', 'nydailynews.com', 'orlandosentinel.com', 'pilotonline.com', 'sun-sentinel.com'];\n\nfunction clearLocalStorage(bg2csData = '') {\n  // clean local storage (when allow cookies)\n  if (matchDomain(['bloomberg.com', 'csmonitor.com', 'exame.com', 'slideshare.net'])) {\n    window.localStorage.clear();\n  }\n  // clear local storage (when remove cookies)\n  if (bg2csData && bg2csData.cs_clear_lclstrg && !matchDomain(['britannica.com', 'nationalreview.com', 'thecritic.co.uk'].concat(usa_mcc_domains)))\n    window.localStorage.clear();\n}\n\nfunction run_custom(bg2csData, dompurify_loaded) {\n\n// custom/updated sites: load text from json (script[type=\"application/ld+json\"])\nif (bg2csData.ld_json && dompurify_loaded) {\n  let data = bg2csData.ld_json;\n  if (data.includes('|')) {\n    window.setTimeout(function () {\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      let paywall = document.querySelectorAll(paywall_sel);\n      let article = document.querySelector(article_sel);\n      // optional\n      let article_append = data_split[2];\n      let article_hold = data_split[3];\n      if (paywall.length && article) {\n        removeDOMElement(...paywall);\n        let json_script = getArticleJsonScript();\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            let json_key = findKeyJson(json, /^articlebody$/i) || findKeyJson(json, /^text$/i);\n            if (json_key) {\n              let json_text = parseHtmlEntities(json_key.replace(/[\\r\\n]/g, '').replace(/(\\\\r)?\\\\n/g, '<br>').replace(/\\[[^\\[]+]/g, ''));\n              if (!json_text.match(/\\s(src|href)=/))\n                json_text = breakText(json_text).replace(/\\n\\n/g, '<br><br>');\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div style=\"margin: 25px 0px\">' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              if (article_append || !article.parentNode) {\n                if (!article_hold)\n                  article.innerHTML = '';\n                article.appendChild(article_new);\n              } else if (article.parentNode)\n                article.parentNode.replaceChild(article_new, article);\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }, 1000);\n  }\n}\n\n// custom/updated sites: load text from json (script#__NEXT_DATA__)\nif (bg2csData.ld_json_next && dompurify_loaded) {\n  let data = bg2csData.ld_json_next;\n  if (data.includes('|')) {\n    window.setTimeout(function () {\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      let paywall = document.querySelectorAll(paywall_sel);\n      let article = document.querySelector(article_sel);\n      // optional\n      let article_append = data_split[2];\n      let article_hold = data_split[3];\n      if (paywall.length && article) {\n        removeDOMElement(...paywall);\n        let json_script = document.querySelector('script#__NEXT_DATA__');\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            let query_slug = json.query && json.query.slug;\n            if (query_slug && Array.isArray(query_slug))\n              query_slug = query_slug.pop();\n            let url_next = query_slug || findKeyJson(json, ['slug']);\n            if (url_next && (typeof url_next === 'string') && !window.location.pathname.endsWith(url_next))\n              refreshCurrentTab();\n            let json_text = findKeyJson(json, ['blocks', 'body', 'BodyPlainText', 'content', 'contentHtml', 'description', 'html'], 500);\n            if (typeof json_text === 'string')\n              json_text = parseHtmlEntities(json_text);\n            else if (Array.isArray(json_text))\n              json_text = '<p style=\"margin: 10px;\">' + json_text.map(x => (typeof x === 'string') ? x : (x.children ? x.children.map(y => y.text).join('') : x.text || x.innerHTML)).join('<br><br>') + '</p>';\n            if (json_text) {\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              if (article_append || !article.parentNode) {\n                if (!article_hold)\n                  article.innerHTML = '';\n                article.appendChild(article_new);\n              } else if (article.parentNode)\n                article.parentNode.replaceChild(article_new, article);\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }, 1000);\n  }\n}\n\n// custom/updated sites: load text from json (page source)\nif (bg2csData.ld_json_source && dompurify_loaded) {\n  let data = bg2csData.ld_json_source;\n  if (data.includes('|')) {\n    window.setTimeout(function () {\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      let paywall = document.querySelectorAll(paywall_sel);\n      let article = document.querySelector(article_sel);\n      let filter = new RegExp(data_split[2].replace(/\\./g, '\\\\.').replace('=', '\\\\s?=\\\\s?'));\n      let json_key = data_split[3];\n      // optional\n      let article_append = data_split[4];\n      let article_hold = data_split[5];\n      if (paywall.length && article) {\n        removeDOMElement(...paywall);\n        let json_script = getSourceJsonScript(filter, ':not([src])');\n        if (json_script) {\n          let script_text = json_script.text.split(filter)[1];\n          if (script_text.includes('};'))\n            script_text = script_text.split('};')[0] + '}';\n          try {\n            let json = JSON.parse(script_text);\n            if (json) {\n              let json_text = parseHtmlEntities(getNestedKeys(json, json_key));\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              if (article_append || !article.parentNode) {\n                if (!article_hold)\n                  article.innerHTML = '';\n                article.appendChild(article_new);\n              } else if (article.parentNode)\n                article.parentNode.replaceChild(article_new, article);\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }, 1000);\n  }\n}\n\n// custom/updated sites: load text from json (link[rel=\"alternate\"][type=\"application/json\"][href])\nif (bg2csData.ld_json_url && dompurify_loaded) {\n  let data = bg2csData.ld_json_url;\n  if (data.includes('|')) {\n    window.setTimeout(function () {\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      // optional\n      let article_append = data_split[2];\n      let article_hold = data_split[3];\n      let article_id_sel = data_split[4];\n      let key = data_split[5];\n      let url_rest = data_split[6];\n      let article_id;\n      if (article_id_sel) {\n        let article_id_sel_dom = document.querySelector(article_id_sel + '[content]');\n        if (article_id_sel_dom)\n          article_id = article_id_sel_dom.content;\n        else\n          return;\n      }\n      function setMediaSrc(elem) {\n        if (elem.getAttribute('data-src'))\n          elem.src = elem.getAttribute('data-src');\n        else {\n          let data_src = [...elem.attributes].find(x => x.name.endsWith('-src'));\n          if (data_src)\n            elem.src = elem.getAttribute(data_src.name);\n        }\n      }\n      func_post = function () {\n        let img_sel = 'img[src^=\"data:image/\"]';\n        let hidden_images = document.querySelectorAll('figure ' + img_sel + ', picture ' + img_sel);\n        for (let elem of hidden_images)\n          setMediaSrc(elem);\n        let iframes = document.querySelectorAll('iframe[src=\"about:blank\"]');\n        for (let elem of iframes)\n          setMediaSrc(elem);\n      }\n      getJsonUrl(paywall_sel, '', article_sel, {art_append: article_append, art_hold: article_hold, art_style: 'margin: 25px 0px;'}, article_id, key, url_rest);\n    }, 1000);\n  }\n}\n\n// custom/updated sites: load text from archive.is\nif (bg2csData.ld_archive_is && dompurify_loaded) {\n  let data = bg2csData.ld_archive_is;\n  if (data.includes('|')) {\n    window.setTimeout(function () {\n      let url = window.location.href;\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      // optional\n      let article_src_sel = data_split[2] || article_sel;\n      let article_link_sel = data_split[3] || article_sel;\n      func_post = function () {\n        if (mobile) {\n          let lazy_images = document.querySelectorAll('figure img[loading=\"lazy\"][style], picture img[loading=\"lazy\"][style]');\n          for (let elem of lazy_images)\n            elem.style = 'width: 95%;';\n        }\n        // custom\n        if (matchDomain('404media.co')) {\n          let paywall = pageContains('h2', 'This post is for paid members only');\n          if (paywall.length) {\n            removeDOMElement(paywall[0].parentNode);\n            header_nofix(article_link_sel, '', 'BPC > no archive-fix');\n          }\n          let podcast = document.querySelector('div[frameborder][old-src]');\n          if (podcast) {\n            let iframe = document.createElement('iframe');\n            iframe.src = podcast.getAttribute('old-src');\n            iframe.style = 'width: 90%; height: 250px;';\n            podcast.parentNode.replaceChild(iframe, podcast);\n          }\n        }\n      }\n      getArchive(url, paywall_sel, '', article_sel, '', article_src_sel, article_link_sel);\n    }, 1000);\n  }\n}\n\n// custom/updated sites: add link to article\nif (bg2csData.add_ext_link) {\n  let data = bg2csData.add_ext_link;\n  if (data.css && data.css.includes('|') && data.type) {\n    window.setTimeout(function () {\n      let url = window.location.href;\n      let data_split = data.css.split('|');\n      let paywall_sel = data_split[0];\n      let article_sel = data_split[1];\n      let paywall = document.querySelectorAll(paywall_sel);\n      if (paywall.length) {\n        removeDOMElement(...paywall);\n        let article = document.querySelector(article_sel);\n        if (article) {\n          switch (data.type) {\n          case 'archive.is':\n            article.firstChild.before(archiveLink(url));\n            break;\n          case 'google_search_tool':\n            article.firstChild.before(googleSearchToolLink(url));\n            break;\n          }\n        }\n      }\n    }, 1000);\n  }\n}\n\n// check for opt-in confirmation (from background.js)\nif (bg2csData.optin_setcookie) {\n  false;\n}\n\n// custom/updated sites: try to unhide text on amp-page\nif (bg2csData.amp_unhide) {\n  window.setTimeout(function () {\n    let amp_page_hide = document.querySelector('script[src*=\"/amp-access-\"], script[src*=\"/amp-subscriptions-\"]');\n    if (amp_page_hide) {\n      amp_unhide_subscr_section();\n      amp_unhide_access_hide();\n      amp_images_replace();\n      amp_iframes_replace();\n    }\n  }, 100);\n}\n\n// custom/updated sites: amp-redirect\nif (bg2csData.amp_redirect) {\n  window.setTimeout(function () {\n    let amp_script = document.querySelector('script[src^=\"https://cdn.ampproject.org/\"]');\n    let amphtml = document.querySelector('head > link[rel=\"amphtml\"]');\n    let amp_page = amp_script && !amphtml;\n    if (!amp_page) {\n      let data = bg2csData.amp_redirect;\n      let data_split = data.split('|');\n      let paywall_sel = data_split[0];\n      // optional\n      let amp_url = data_split[1];\n      if (amp_url) {\n        if (amp_url.includes('{path}'))\n          amp_url = amp_url.replace('{path}', window.location.pathname).replace(/\\/\\//g, '/');\n        if (amp_url.includes('{host}'))\n          amp_url = 'https://' + amp_url.replace('{host}', window.location.hostname.replace('www.', ''));\n      }\n      amp_redirect(paywall_sel, '', amp_url);\n    }\n  }, 500);\n}\n\nfunction cs_code_elems(elems) {\n  for (let elem of elems) {\n    if (elem.add_style)\n      addStyle(elem.add_style);\n    else if (elem.hide_elem)\n      hideDOMStyle(elem.hide_elem);\n    else if (elem.rm_elem_wait)\n      waitDOMElement(elem.rm_elem_wait, elem.rm_elem_wait.match(/^\\w+/)[0].toUpperCase(), removeDOMElement, true);\n    else if (elem.cond) {\n      let first = true;\n      let elem_dom = document.querySelectorAll(elem.cond);\n      for (let item of elem_dom) {\n        if (elem.rm_elem)\n          removeDOMElement(item);\n        if (elem.rm_class) {\n          let rm_class = elem.rm_class.split(/[,|]/).map(x => x.trim());\n          item.classList.remove(...rm_class);\n        }\n        if (elem.rm_attrib) {\n          let rm_attribs = elem.rm_attrib.split('|');\n          for (let rm_attrib of rm_attribs)\n            item.removeAttribute(rm_attrib);\n        }\n        if (elem.set_attrib && elem.set_attrib.includes('|')) {\n          let attrib = elem.set_attrib.split('|')[0];\n          let value = elem.set_attrib.split('|')[1];\n          item.setAttribute(attrib, value);\n        }\n        if (first && elem.elems) {\n          first = false;\n          cs_code_elems(elem.elems);\n        }\n      }\n    }\n  }\n}\n\n// custom/updated sites: cs_code\nif (bg2csData.cs_code) {\n  window.setTimeout(function () {\n    cs_code_elems(bg2csData.cs_code);\n  }, 1000);\n}\n\n}// run_custom\n\nfunction run_cs_default(bg2csData = '') {\n  for (let n = 0; n < 5; n++) {\n    setTimeout(function () {\n      clearLocalStorage(bg2csData);\n      if (!bg2csData.cs_block)\n        cs_default(bg2csData);\n    }, n * 200);\n  }\n}\n\nvar msg_once;\nvar msg_once_ses;\nvar url_old;\nif (ext_api.runtime) {\n  ext_api.runtime.onMessage.addListener(\n    function (request, sender) {\n    if (request.msg === 'bg2cs') {\n      let bg2csData = request.data;\n      if (!(msg_once && (url_old === window.location.href))) {\n        msg_once = true;\n        url_old = window.location.href;\n        if (Object.keys(bg2csData).filter(x => ![('cs_block', 'cs_clear_lclstrg')].includes(x)).length)\n          run_custom(bg2csData, dompurify_loaded);\n      }\n      run_cs_default(bg2csData);\n    } else if (request.msg === 'showExtSrc') {\n      if (!(msg_once_ses && url_old === window.location.href)) {\n        msg_once_ses = true;\n        url_old = window.location.href;\n        replaceDomElementExtSrc(request.data.url, request.data.url_src, request.data.html, true, false, request.data.selector, request.data.text_fail, request.data.selector_source, request.data.selector_archive);\n      }\n    } else if (request.msg === 'showExtFetch') {\n      let fetch_id = request.data.data_ext_fetch_id;\n      if (data_ext_fetch[fetch_id]) {\n        data_ext_fetch[fetch_id].func(request.data.url, request.data.html, ...data_ext_fetch[fetch_id].args);\n      } else\n        refreshCurrentTab(true, false);\n    }\n  })\n} else {\n  run_cs_default();\n}\n\nvar msg_once_page;\nif (domain = matchDomain(['lepoint.fr'].concat(fr_groupe_ebra_domains))) {\n  window.addEventListener('message', function (event) {\n    if (event.data) {\n      if (event.data.type === 'from_page') {\n        if (matchDomain(fr_groupe_ebra_domains) && dompurify_loaded) {\n          let json = event.data.data;\n          if (json.html) {\n            if (typeof browser !== 'object') {\n              let article = $(\"article.viewPartial\");\n              if (article) {\n                article.find(\".fullDetailActions\").remove();\n                article.find(\".illustration\").remove();\n                article.find(\".videoComponent\").remove();\n                article.find(\".infos\").after(DOMPurify.sanitize(json.html, dompurify_options));\n                $(\".retrievedBodyContent\").insertBefore(\n                  article.find(\".col_main #poool-widget\"));\n                article.removeClass(\"locked\");\n                $(\"div.previewContent\").remove();\n                dompurify_options.FORCE_BODY = true;\n                dompurify_options.ADD_TAGS = dompurify_options.ADD_TAGS.concat(['script']);\n                $(\"head\").append(DOMPurify.sanitize(json.js, dompurify_options));\n                formatWsContent();\n                $(\".mainContent .accroche\").addClass(\"unlocked\");\n                $(\"iframe[src=''][data-src]\").each(function () {\n                  $(this).attr(\"src\", $(this).attr(\"data-src\"))\n                });\n              }\n            } else {\n              let article = document.querySelector('article.viewPartial');\n              if (article) {\n                let full_details = article.querySelector('div.fullDetailActions');\n                let illustration = article.querySelector('div.illustration');\n                removeDOMElement(full_details, illustration);\n                let parser = new DOMParser();\n                let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json.html, dompurify_options) + '</div>', 'text/html');\n                let article_new = doc.querySelector('div');\n                let infos = article.querySelector('div.infos');\n                if (infos)\n                  infos.after(article_new);\n                let body_content = document.querySelector('div.retrievedBodyContent');\n                if (body_content) {\n                  let widget = article.querySelector('div.col_main div#poool-widget');\n                  if (widget)\n                    body_content.before(widget);\n                }\n                article.classList.remove('locked');\n                let preview = document.querySelector('div.previewContent');\n                removeDOMElement(preview);\n                let accroche = document.querySelector('.mainContent .accroche');\n                if (accroche)\n                  accroche.classList.add('unlocked');\n                let iframes_nosrc = article.querySelectorAll('iframe[src=\"\"][data-src]');\n                for (let elem of iframes_nosrc)\n                  elem.src = elem.getAttribute('data-src');\n              }\n            }\n          }\n        } else {\n          let article_options = {\n            'lepoint.fr': 'div#contenu'\n          };\n          let article_sel = article_options[domain];\n          let data = event.data.data;\n          let article = document.querySelector(article_sel);\n          if (data && article && dompurify_loaded && !msg_once_page) {\n            msg_once_page = true;\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(data, dompurify_options) + '</div>', 'text/html');\n            let article_new = doc.querySelector('div');\n            if (article_new) {\n              article.innerHTML = '';\n              article.appendChild(article_new);\n            }\n          }\n        }\n      }\n    }\n  }, false);\n}\n\nfunction cs_default(bg2csData = '') {\n\nif (bg2csData && bg2csData.cs_param)\n  cs_param = bg2csData.cs_param;\n\nvar overlay = document.querySelector('body.didomi-popup-open');\nif (overlay)\n  overlay.classList.remove('didomi-popup-open');\nvar ads = 'div.OUTBRAIN, div[id^=\"taboola-\"], div.ad-container, div[class*=\"-ad-container\"], div[class*=\"_ad-container\"], div.arc_ad, div[id^=\"poool-\"], amp-ad, amp-embed[type=\"mgid\"], amp-embed[type=\"outbrain\"], amp-embed[type=\"taboola\"]';\nhideDOMStyle(ads, 10);\n\nif (!(csDone || csDoneOnce)) {\n\nif (matchDomain('medium.com') || matchDomain(medium_custom_domains) || document.querySelector('head > link[href*=\".medium.com/\"]')) {\n  let url = window.location.href;\n  let paywall = document.querySelector('article.meteredContent');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    let header = paywall.querySelector('h1');\n    if (header) {\n      header.before(freediumLink(url));\n      //header.before(readMediumLink(url));\n    }\n  }\n  window.setTimeout(function () {\n    let banner = pageContains('div > div > p', /author made this story available to/);\n    if (banner.length)\n      removeDOMElement(banner[0].parentNode.parentNode);\n  }, 1000);\n}\n\nelse if (window.location.hostname.match(/\\.(au|nz)$/) || matchDomain(['afr.com'])) {//australia & new zealand\n\nif (matchDomain('afr.com')) {\n  let error = document.querySelector('div[data-testid=\"DefaultError\"]');\n  if (error) {\n    csDoneOnce = true;\n    refreshCurrentTab();\n  }\n  let article_sel = '#endOfArticle:not(:empty)';\n  let article = document.querySelector(article_sel);\n  if (!article) {\n    article_sel = '#body-content';\n    article = document.querySelector(article_sel);\n  }\n  if (article) {\n    window.setTimeout(function () {\n      let pars = article.querySelectorAll('p:not([class]), p[class*=\"-defaultWrapper\"], figure:not(:empty)');\n      let pagination = document.querySelector('div > span#pagination-top');\n      if (((pars.length && pars.length < 5) || pagination) && dompurify_loaded) {\n        if (pagination) {\n          removeDOMElement(pagination.parentNode);\n        } else {\n          let loading = pageContains(article_sel + ' div', 'Loading...');\n          removeDOMElement(...pars, ...loading);\n        }\n        let url = window.location.href.split(/[#\\?]/)[0];\n        fetch(url)\n        .then(response => {\n          if (response.ok) {\n            response.text().then(html => {\n              if (html.includes('__REDUX_STATE__=')) {\n                try {\n                  let json = JSON.parse(html.split('__REDUX_STATE__=')[1].split('};')[0].replace(/:undefined([,}])/g, ':\"undefined\"$1') + '}');\n                  if (json) {\n                    let placeholders;\n                    function find_item(match, p1, offset, string) {\n                      let placeholder_id = p1;\n                      let result = '';\n                      if (placeholder_id && placeholders[placeholder_id]) {\n                        let item = placeholders[placeholder_id];\n                        if (item.data) {\n                          if (['linkArticle', 'linkExternal'].includes(item.type)) {\n                            if (item.data.text) {\n                              if (item.data.url)\n                                result = '<a href=\"' + item.data.url + '\"' + (item.data.newTab ? 'target=\"_blank\"' : '') + '>' + item.data.text + '</a>';\n                              else\n                                result = item.data.text;\n                            }\n                          } else if (item.type === 'image') {\n                            if (item.data.fileName)\n                              result = '<figure><img src=\"https://static.ffx.io/images/w_960/' + item.data.fileName + '\" style=\"width: 100%;\"><figcaption>' + (item.data.caption ? item.data.caption : '') + (item.data.source ? '<span style=\"font-weight: bold;\">&nbsp;' + item.data.source + '</span>' : '') + '</figcaption></figure>';\n                          } else if (item.type === 'youtube') {\n                            if (item.data.url) {\n                              if (item.data.url.includes('watch?v='))\n                                result = '<iframe src=\"' + item.data.url.replace('watch?v=', 'embed/') + '\" style=\"width: 100%; height: 400px;\"></iframe>';\n                              else\n                                result = '<a href=\"' + item.data.url + '\" target=\"_blank\">' + item.data.url + '</a>';\n                            }\n                          } else if (['instagram', 'twitter'].includes(item.type)) {\n                            if (item.data.url)\n                              result = '<a href=\"' + item.data.url + '\" target=\"_blank\">' + item.data.url + '</a>';\n                          } else if (item.type === 'iframe') {\n                            if (item.data.url)\n                              result = '<iframe src=\"' + item.data.url + '\" style=\"width: 100%; height: 200px; border: none;\"></iframe>';\n                          } else if (!['callout', 'quote', 'relatedStory', 'video'].includes(item.type)) {\n                            console.log(item);\n                          }\n                        }\n                      }\n                      return result;\n                    }\n                    let json_text = json.page.content.asset.body;\n                    if (json_text) {\n                      placeholders = json.page.content.asset.bodyPlaceholders;\n                      if (placeholders)\n                        json_text = json_text.replace(/<x-placeholder id=\"(\\w+)\"><\\/x-placeholder>/g, find_item);\n                      let parser = new DOMParser();\n                      let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n                      let content_new = doc.querySelector('div');\n                      let widget = document.querySelector('div[class$=\"-wrapper\"] > div#WidgetContainer');\n                      if (article_sel.startsWith('#endOfArticle')) {\n                        article.parentNode.replaceChild(content_new, article);\n                        if (widget)\n                          content_new.firstChild.before(widget.parentNode);\n                        window.setTimeout(function () {\n                          content_new.id = 'endOfArticle';\n                        }, 500);\n                      } else\n                        article.firstChild.before(content_new);\n                      addStyle(article_sel + ' p {margin: 20px 0px;}');\n                    } else {\n                      let parser = new DOMParser();\n                      let first = true;\n                      let posts = json.page.content.asset.posts;\n                      for (let post of posts) {\n                        if (first) {\n                          first = false;\n                          continue;\n                        }\n                        let asset = post.asset;\n                        if (asset && asset.body) {\n                          let json_text = asset.body;\n                          placeholders = asset.bodyPlaceholders;\n                          if (placeholders)\n                            json_text = json_text.replace(/<x-placeholder id=\"(\\w+)\"><\\/x-placeholder>/g, find_item);\n                          let doc = parser.parseFromString('<section>' + DOMPurify.sanitize(json_text, dompurify_options) + '</section>', 'text/html');\n                          let par = doc.querySelector('section');\n                          let header;\n                          if (asset.headlines && asset.headlines.headline) {\n                            header = document.createElement('h2');\n                            header.innerText = asset.headlines.headline;\n                            header.id = post.id;\n                          }\n                          let byline;\n                          if (asset.byline) {\n                            byline = document.createElement('p');\n                            byline.innerText = asset.byline;\n                            byline.style = 'margin-bottom: 24px;'\n                          }\n                          article.append(header, byline, par);\n                        }\n                      }\n                      addStyle('section:not([class]) > p {margin: 24px 0px;}');\n                      let key_posts = document.querySelectorAll('li > a[href*=\"?post=\"]');\n                      for (let elem of key_posts)\n                        elem.href = elem.href.replace('?post=', '#');\n                    }\n                  }\n                } catch (err) {\n                  console.log(err);\n                }\n              }\n            });\n          }\n        }).catch(function (err) {\n          false;\n        });\n      }\n    }, 1000);\n  }\n}\n\nelse if (matchDomain('businessdesk.co.nz')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall && dompurify_loaded) {\n    paywall.classList.remove('paywall');\n    let signup_box = document.querySelector('div.signup-box-container');\n    removeDOMElement(signup_box);\n    let url = window.location.href.split(/[#\\?]/)[0];\n    fetch(url)\n    .then(response => {\n      if (response.ok) {\n        response.text().then(html => {\n          let match = html.match(/:query=\"'([^\"]+)'\"/);\n          if (match) {\n            let parser = new DOMParser();\n            let src_text = breakText(parseHtmlEntities(match[1])).replace(/\\n\\n/g, '<br><br>').replace(/\\.([^\\s\\d]|&)/g, \". $1\");\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(src_text, dompurify_options) + '</div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            paywall.innerHTML = '';\n            paywall.appendChild(content_new);\n          }\n        })\n      }\n    })\n  }\n}\n\nelse if (matchDomain(['crikey.com.au', 'smartcompany.com.au', 'themandarin.com.au'])) {\n  let ads = 'div.wp-block-pm-ad-placeholder-block';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('forbes.com.au')) {\n  getJsonUrl('div[class*=\"_gate\"]', '', 'div.article-page__content-body');\n  let fade = document.querySelector('div[style*=\"background-image: linear-gradient\"]');\n  removeDOMElement(fade);\n}\n\nelse if (matchDomain('macrobusiness.com.au')) {\n  let paywall = pageContains('div > p', 'The full text of this article is available');\n  if (paywall[0] && dompurify_loaded) {\n    let fade = document.querySelector('div.bg-gradient-to-t');\n    removeDOMElement(paywall[0].parentNode, fade);\n    let json_script = document.querySelector('script#__NUXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        let json_text = json.filter(x => typeof x === 'string' && x.match(/(<|\\\\u003C)p>/))[0];\n        let parser = new DOMParser();\n        let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n        let content_new = doc.querySelector('div');\n        let article = document.querySelector('div.content');\n        if (article) {\n          article.innerHTML = '';\n          article.appendChild(content_new);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('nzherald.co.nz')) {\n  // plus code in contentScript_once_var.js (timing)\n  let premium_toaster = '#premium-toaster';\n  hideDOMStyle(premium_toaster);\n}\n\nelse if (matchDomain('spectator.com.au')) {\n  getJsonUrl('section.paywall', '', 'div.article-body', {art_append: 1});\n}\n\nelse if (matchDomain('thesaturdaypaper.com.au')) {\n  let hide_end = document.querySelector('div.hide-end');\n  if (hide_end) {\n    refreshCurrentTab_bg();\n    csDoneOnce = true;\n  }\n  let paywall = document.querySelector('div.paywall-hard-always-show');\n  removeDOMElement(paywall);\n}\n\nelse if (matchDomain(['brisbanetimes.com.au', 'smh.com.au', 'theage.com.au', 'watoday.com.au'])) {\n  if (!window.location.hostname.startsWith('amp.')) {\n    amp_redirect('head > meta[content^=\"FOR SUBSCRIBERS\"], #paywall_prompt');\n  } else {\n    amp_unhide_subscr_section();\n  }\n}\n\nelse {\n  // Australian Community Media newspapers\n  let au_comm_media_domains = ['bendigoadvertiser.com.au', 'bordermail.com.au', 'canberratimes.com.au', 'centralwesterndaily.com.au', 'dailyadvertiser.com.au', 'dailyliberal.com.au', 'examiner.com.au', 'illawarramercury.com.au', 'newcastleherald.com.au', 'northerndailyleader.com.au', 'standard.net.au', 'theadvocate.com.au', 'thecourier.com.au', 'westernadvocate.com.au'];\n  let au_comm_media_link = document.querySelector('a[href^=\"https://austcommunitymedia.my.site.com/\"]');\n  if (matchDomain(au_comm_media_domains) || au_comm_media_link) {\n    let mask = document.querySelector('div[class^=\"gradient-mask-\"]');\n    if (mask) {\n      mask.removeAttribute('class');\n      let div_hidden = document.querySelectorAll('div.flex-col div.hidden');\n      for (let elem of div_hidden)\n        elem.classList.remove('hidden');\n    } else {\n      let subscribe_truncate = document.querySelector('.subscribe-truncate');\n      if (subscribe_truncate)\n        subscribe_truncate.classList.remove('subscribe-truncate');\n      let subscriber_hiders = document.querySelectorAll('.subscriber-hider');\n      for (let subscriber_hider of subscriber_hiders)\n        subscriber_hider.classList.remove('subscriber-hider');\n    }\n    let noscroll = document.querySelectorAll('html[style], body[style]');\n    for (let elem of noscroll)\n      elem.removeAttribute('style');\n    let story_generic_iframe = '.story-generic__iframe';\n    let blocker = 'div.blocker';\n    let overlays = 'div.transition-all, div[id^=\"headlessui-dialog\"]';\n    let ads = '.ad-placeholder, .sticky, [id*=\"-container\"], #hindsight-ads-iframe';\n    hideDOMStyle(story_generic_iframe + ', ' + blocker + ', ' + overlays + ', ' + ads);\n  } else if (window.location.hostname.endsWith('.com.au')) {\n    // Australia News Corp\n    let au_news_corp_domains = ['adelaidenow.com.au', 'cairnspost.com.au', 'codesports.com.au', 'couriermail.com.au', 'dailytelegraph.com.au', 'geelongadvertiser.com.au', 'goldcoastbulletin.com.au', 'heraldsun.com.au', 'theaustralian.com.au', 'thechronicle.com.au', 'themercury.com.au', 'townsvillebulletin.com.au', 'weeklytimesnow.com.au'];\n    if (matchDomain(au_news_corp_domains) || matchDomain('ntnews.com.au')) {\n      let url = window.location.href;\n      if (window.location.pathname.startsWith('/subscribe/') && !url.includes('/digitalprinteditions')) {\n        let og_url = document.querySelector('head > meta[property=\"og:url\"][content]');\n        if (og_url) {\n          let url_new = og_url.content;\n          if (matchDomain('ntnews.com.au')) {\n            let article = document.querySelector('div.dsf-article-preview');\n            if (article) {\n              article.before(googleSearchToolLink(url_new));\n              csDoneOnce = true;\n            }\n          } else {\n            url_new += '?amp';\n            window.setTimeout(function () {\n              window.location.href = url_new;\n            }, 500);\n          }\n        }\n      } else if (window.location.search.match(/[&\\?]amp/)) {\n        amp_unhide_subscr_section('[id^=\"ad-mrec-\"]', false);\n        let figure_stretch = document.querySelectorAll('figure.stretch');\n        for (let elem of figure_stretch)\n          elem.classList.remove('stretch');\n        let comments = document.querySelector('#comments-load, .comments-module');\n        removeDOMElement(comments);\n      } else {\n        if (window.location.pathname.includes('/video/') && document.querySelector('div.vms-premium-video'))\n          header_nofix('div.video-hub');\n        let ads = '.header_ads-container, .ad-block';\n        hideDOMStyle(ads);\n      }\n    } else {\n      // Australian Seven West Media\n      if (matchDomain('thewest.com.au') || document.querySelector('head > link[href=\"https://images.thewest.com.au\"]')) {\n        function thewest_main(node) {\n          let filter = /^window\\.PAGE_DATA\\s?=\\s?/;\n          let json_script = getSourceJsonScript(filter);\n          if (json_script) {\n            let json_text = json_script.text.split(filter)[1];\n            json_text = json_text.replace(/:undefined([,}])/g, ':\"undefined\"$1');\n            try {\n              let json_article = JSON.parse(json_text);\n              let json_pub;\n              for (let key in json_article) {\n                let json_resolution = json_article[key].data.result.resolution;\n                if (json_resolution && json_resolution.publication) {\n                  json_pub = json_resolution.publication;\n                  break;\n                }\n              }\n              let json_content = [];\n              let url_loaded;\n              if (json_pub) {\n                json_content = json_pub.content.blocks;\n                url_loaded = json_pub._self;\n              } else\n                refreshCurrentTab();\n              //let json_video = json_pub.mainVideo;\n              let url = window.location.href;\n              if (!url_loaded || !url.includes(url_loaded.slice(-10)))\n                refreshCurrentTab();\n              let par_elem, par_sub1, par_sub2;\n              let par_dom = document.createElement('div');\n              let tweet_id = 1;\n              for (let par of json_content) {\n                par_elem = '';\n                if (par.kind === 'text') {\n                  par_elem = document.createElement('p');\n                  par_elem.innerText = par.text;\n                } else if (par.kind === 'subhead') {\n                  par_elem = document.createElement('h2');\n                  par_elem.innerText = par.text;\n                } else if (par.kind === 'pull-quote') {\n                  par_elem = document.createElement('i');\n                  par_elem.innerText = (par.attribution ? par.attribution + ': ' : '') + par.text;\n                } else if (par.kind === 'embed') {\n                  if (par.reference.includes('https://omny.fm/') || par.reference.includes('https://docdro.id/')) {\n                    par_elem = document.createElement('embed');\n                    par_elem.src = par.reference;\n                    par_elem.style = 'height:500px; width:100%';\n                    par_elem.frameborder = '0';\n                  } else {\n                    par_elem = document.createElement('a');\n                    par_elem.href = par.reference;\n                    par_elem.innerText = par.reference.split('?')[0];\n                    console.log('embed: ' + par.reference);\n                  }\n                } else if (par.kind === 'unordered-list') {\n                  if (par.items) {\n                    par_elem = document.createElement('ul');\n                    for (let item of par.items)\n                      if (item.text) {\n                        par_sub1 = document.createElement('li');\n                        if (item.intentions[0] && item.intentions[0].href) {\n                          par_sub2 = document.createElement('a');\n                          par_sub2.href = item.intentions[0].href;\n                        } else {\n                          par_sub2 = document.createElement('span');\n                        }\n                        par_sub2.innerText = item.text;\n                        par_sub1.appendChild(par_sub2);\n                        par_elem.appendChild(par_sub1);\n                      }\n                  }\n                } else if (par.kind === 'inline') {\n                  if (par.asset.kind === 'image' && par.asset.original && par.asset.original.reference) {\n                    par_elem = makeFigure(par.asset.original.reference, par.asset.captionText, {style: 'width:100%'});\n                  }\n                } else if (par.kind === 'inline-related') {\n                  par_elem = document.createElement('p');\n                  if (par.publications) {\n                    for (let elem of par.publications) {\n                      let par_link = document.createElement('a');\n                      par_link.href = elem._self;\n                      par_link.innerText = elem.heading;\n                      par_elem.appendChild(par_link);\n                      par_elem.appendChild(document.createElement('br'));\n                    }\n                  }\n                } else {\n                  par_elem = document.createElement('p');\n                  par_elem.innerText = par.text;\n                  console.log(par.kind);\n                }\n                if (par_elem)\n                  par_dom.appendChild(par_elem);\n              }\n              let content = document.querySelector('div[class*=\"StyledArticleContent\"]');\n              if (content) {\n                content.innerHTML = '';\n                content.appendChild(par_dom);\n              } else {\n                par_dom.setAttribute('style', 'margin: 20px;');\n                node.before(par_dom);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          }\n          removeDOMElement(node);\n        }\n        let paywall_sel = 'div.paywall div[data-testid*=\"BreachScreen\"], div[class*=\"StyledBreachWallContent\"]';\n        let paywall = document.querySelector(paywall_sel);\n        if (paywall)\n          thewest_main(paywall);\n        else {\n          csDoneOnce = true;\n          waitDOMElement(paywall_sel, 'DIV', thewest_main, true);\n        }\n        let ads = 'div.headerAdvertisement, div.disabled-ad';\n        hideDOMStyle(ads);\n      } else if (document.querySelector('head > link[rel=\"dns-prefetch\"][href=\"//static.ew.mmg.navigacloud.com\"]')) { // McPherson Media Group\n        let paywall = document.querySelector('div#content-Load-message');\n        if (paywall) {\n          removeDOMElement(paywall);\n          let lockable = document.querySelectorAll('div[id^=\"lockable-\"]');\n          for (let elem of lockable) {\n            elem.removeAttribute('style');\n            elem.removeAttribute('id');\n          }\n          let gradient = document.querySelector('div.gradienttext');\n          if (gradient)\n            gradient.removeAttribute('class');\n        }\n      } else\n        csDone = true;\n    }\n  } else\n    csDone = true;\n}\n\n} else if (window.location.hostname.match(/\\.(de|at|ch)$/) || matchDomain(['faz.net', 'handelsblatt.com', 'tt.com', 'wochenblatt.com'])) {//germany/austria/switzerland - ch\n\nif (matchDomain('aachener-zeitung.de')) {\n  let url = window.location.href;\n  getArchive(url, 'div[data-testid=\"paywall-position-popover\"]', '', 'article');\n  let shade = document.querySelector('div.paywalled-article');\n  if (shade)\n    shade.classList.remove('paywalled-article');\n  let noscroll = document.querySelectorAll('html[class], body[class]');\n  for (let elem of noscroll)\n    elem.removeAttribute('class');\n}\n\nelse if (matchDomain('aerztezeitung.de')) {\n  let paywall = document.querySelector('div.AZLoginModule');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let content = document.querySelector('p.intro');\n        if (json_text && content) {\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          content.after(article_new);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain(['arcinfo.ch', 'lacote.ch', 'lenouvelliste.ch'])) {// Groupe ESH Médias\n  let paywall = document.querySelector('section#paywall-articles');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let url_id = window.location.pathname.match(/\\d+$/).pop();\n    let html = document.documentElement.outerHTML;\n    let json;\n    if (html.includes('window.__NUXT__=')) {\n      json = html.split('window.__NUXT__=')[1].split('</script>')[0].trim().replace(/blocs:\\[\\{.*?\\}\\],/g, '');\n      if (url_id && !json.includes('{\"' + url_id + '\":'))\n        refreshCurrentTab();\n    }\n    let article = document.querySelector('div.html-content');\n    let no_intro = false;\n    if (!article) {\n      article = document.querySelector('div.container-mobile-full');\n      no_intro = true;\n    }\n    if (article && json) {\n      let content = '';\n      if (json.includes('text_1=\"'))\n        content = json.split('text_1=\"').pop().split('\";')[0];\n      else {\n        let parts = json.split('html:\"');\n        parts.splice(0, 1);\n        for (let part of parts)\n          content += part.split('\",has_pre_content')[0];\n      }\n      if (content) {\n        content = content.replace(/\\\\u003C/g, '<').replace(/\\\\u003E/g, '>').replace(/\\\\u002F/g, '/').replace(/\\\\\"/g, '\"').replace(/\\\\r\\\\n/g, '');\n        let parser = new DOMParser();\n        let content_new = parser.parseFromString('<div class=\"html-content\">' + DOMPurify.sanitize(content, dompurify_options) + '</div>', 'text/html');\n        let iframely = content_new.querySelectorAll('div > div.fr-iframely');\n        for (let elem of iframely) {\n          let url_dom = elem.querySelector('[data-iframely-url]');\n          if (url_dom) {\n            let iframe = document.createElement('iframe');\n            iframe.src = url_dom.getAttribute('data-iframely-url');\n            iframe.style = 'width: 100%; height: 400px;';\n            elem.parentNode.replaceChild(iframe, elem);\n          }\n        }\n        let article_top;\n        if (!no_intro) {\n          article_top = article.parentNode.parentNode;\n          removeDOMElement(article.parentNode);\n        } else\n          article_top = article;\n        article_top.appendChild(content_new.querySelector('div'));\n      } else {\n        refreshCurrentTab();\n      }\n    }\n  }\n  let ads = 'div[class*=\"ads_type_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('automobilwoche.de')) {\n  let body_hidden = document.querySelector('body[class]');\n  if (body_hidden)\n    body_hidden.removeAttribute('class');\n  let lazy_images = document.querySelectorAll('img.lazy[data-src]');\n  for (let elem of lazy_images) {\n    elem.src = elem.getAttribute('data-src');\n    elem.removeAttribute('class');\n  }\n  let lazy_sources = document.querySelectorAll('source[srcset^=\"data:image\"]');\n  removeDOMElement(...lazy_sources);\n}\n\nelse if (matchDomain(['beobachter.ch', 'handelszeitung.ch'])) {\n  let paywall = document.querySelector('div#piano-inlined');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let json_script = document.querySelector('script#hydrationdata');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let url_id = json_script.text.includes('\"gcid\":\"') ? json_script.text.split('\"gcid\":\"')[1].split('\"')[0] : '';\n          if (url_id && !window.location.pathname.endsWith(url_id))\n            refreshCurrentTab();\n          let pars = json.state;\n          let paragraphs = document.querySelectorAll('div.paragraph');\n          let article = paragraphs[0];\n          if (article) {\n            article.setAttribute('class', 'paragraph text-paragraph');\n            for (let paragraph of paragraphs)\n              paragraph.innerHTML = '';\n            let parser = new DOMParser();\n            for (let par in pars) {\n              let par_elem = pars[par];\n              let elem = document.createElement('div');\n              elem.style = 'font-size: 1.7rem; margin: 25px;';\n              let sub_elem = '';\n              if (par_elem.__typename === 'TextParagraph' && par_elem.text) {\n                let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(par_elem.text) + '</div>', 'text/html');\n                sub_elem = content_new.querySelector('div');\n              } else if (par_elem.__typename === 'EmbedParagraph' && par_elem.embedCode) {\n                let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(par_elem.embedCode, dompurify_options) + '</div>', 'text/html');\n                sub_elem = content_new.querySelector('div');\n                let iframe = sub_elem.querySelector('iframe[width]');\n                if (iframe) {\n                  let ratio = iframe.width / (mobile ? 320 : 640);\n                  iframe.width = iframe.width / ratio;\n                  iframe.height = iframe.height / ratio;\n                }\n              } else if (par_elem.__typename === 'ImageFile') {\n                if (par_elem.origin) {\n                  sub_elem = document.createElement('img');\n                  sub_elem.src = par_elem.origin;\n                  sub_elem.alt = par_elem.alt;\n                  if (par_elem.width) {\n                    let ratio = par_elem.width / (mobile ? 320 : 640);\n                    sub_elem.width = par_elem.width / ratio;\n                    sub_elem.height = par_elem.height / ratio;\n                  }\n                }\n              } else if (par_elem.__typename === 'Image') {\n                if (par_elem.credit) {\n                  sub_elem = document.createElement('p');\n                  sub_elem.appendChild(document.createTextNode(par_elem.credit));\n                }\n              } else if (par_elem.__typename === 'ImageParagraph') {\n                if (par_elem.caption) {\n                  let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(par_elem.caption) + '</div>', 'text/html');\n                  sub_elem = content_new.querySelector('div');\n                }\n              } else if (!['Article', 'Author', 'Channel', 'LandingPage', 'Query'].includes(par_elem.__typename)) {\n                console.log(par_elem);\n              }\n              if (sub_elem) {\n                elem.appendChild(sub_elem);\n                article.appendChild(elem);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = 'div.ad-wrapper, div[id^=\"apn-ad-slot-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('berliner-zeitung.de')) {\n  let ads = 'div[class^=\"traffective_\"], div[class^=\"article_billboard-\"], div[class*=\"_ad_\"], div[class^=\"outbrain_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('bild.de')) {\n  func_post = function () {\n    if (mobile) {\n      let lazy_images = document.querySelectorAll('figure img[loading=\"lazy\"][style]');\n      for (let elem of lazy_images) {\n        elem.style = 'width: 95%; margin: 10px;';\n        elem.parentNode.removeAttribute('style');\n      }\n      let header = document.querySelector('article > h2 > span:last-child');\n      if (header)\n        header.style = 'margin: 10px;';\n      let content = document.querySelector('article time ~ div');\n      if (content)\n        content.style = 'margin: 10px;';\n    }\n    let div_empty = document.querySelectorAll('div[style]');\n    for (let elem of div_empty)\n      if (!elem.innerText.length)\n        removeDOMElement(elem);\n    let article = document.querySelector('main > article');\n    if (article && article.innerText.length < 1000)\n      header_nofix('h2', '', 'BPC > no archive-fix');\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.offer-module', '', 'article');\n}\n\nelse if (matchDomain('boersen-zeitung.de')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('storefront-section#paywall');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let url = window.location.href;\n      replaceDomElementExt(url, false, false, 'article');\n    }\n  }, 1000);\n}\n\nelse if (matchDomain('faz.net')) {\n  if (matchDomain('zeitung.faz.net')) { // legacy\n    let paywall_z = document.querySelector('div.c-red-carpet');\n    if (paywall_z) {\n      removeDOMElement(paywall_z);\n      let og_url = document.querySelector('head > meta[property=\"og:url\"][content]');\n      if (og_url)\n        window.location.href = og_url.content;\n      else\n        header_nofix('div.article__text');\n    }\n    let sticky_advt = document.querySelector('div.sticky-advt');\n    removeDOMElement(sticky_advt);\n  } else {\n    let ads = 'div.lay-PaySocial, div.iqadtile_wrapper, div.iqdcontainer';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('freitag.de')) {\n  let paywall = document.querySelector('aside.qa-paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let related = document.querySelector('div.c-teaser-plus-related--paywall');\n    if (related)\n      related.classList.remove('c-teaser-plus-related--paywall');\n    let article = document.querySelector('div.bo-article-text');\n    if (article) {\n      let json_script = getArticleJsonScript();\n      if (json_script) {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let json_text = breakText_headers(json.articleBody);\n          let pars = json_text.split(/\\n\\n/g);\n          if (json_text) {\n            article.innerHTML = '';\n            for (let par of pars) {\n              if (!par.startsWith('Placeholder ')) {\n                let par_new = document.createElement('p');\n                par_new.innerText = par;\n                article.appendChild(par_new);\n              }\n            }\n          }\n        }\n      } else {\n        let hidden_article = document.querySelector('div.o-paywall');\n        if (hidden_article) {\n          let par_first = true;\n          let pars = breakText_headers(hidden_article.innerText).split(/\\n\\n/g);\n          for (let par of pars) {\n            let par_new = document.createElement('p');\n            let overlap = '';\n            if (par_first) {\n              let intro = article.querySelectorAll('p');\n              let intro_last = intro[intro.length - 1];\n              par = par.trim();\n              overlap = findOverlap(intro_last.innerText, par);\n              if (overlap)\n                intro_last.innerText = intro_last.innerText.replace(new RegExp(overlap + '$'), '') + par;\n              par_first = false;\n            }\n            if (!overlap && !par.startsWith('Placeholder ')) {\n              par_new.innerText = par;\n              article.appendChild(par_new);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('handelsblatt.com')) {\n  let paywall = document.querySelector('app-paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('article');\n    if (article) {\n      let url = window.location.href;\n      article.after(googleSearchToolLink(url));\n      header_nofix('article', '', 'BPC > refresh page');\n    }\n  }\n  window.localStorage.removeItem('HB.METERING');\n  let related_topics = document.querySelector('app-storyline-related-topics');\n  let overlay = document.querySelector('div[id^=\"sp_message_container_\"]');\n  removeDOMElement(overlay, related_topics);\n  let noscroll = document.querySelector('html[class]');\n  if (noscroll)\n    noscroll.removeAttribute('class');\n  let charts = document.querySelectorAll('iframe[name^=\"iframe-\"][loading][src*=\"grafik.handelsblatt.com\"]');\n  for (let elem of charts) {\n    elem.style = 'height: 1000px;';\n    elem.removeAttribute('loading');\n    elem.scrolling = 'yes';\n  }\n}\n\nelse if (matchDomain('heise.de')) {\n  func_post = function () {\n    header_nofix('article', paywall_sel, 'BPC > no archive-fix');\n  }\n  let paywall_sel = 'a-gift:not([has-access])';\n  let url = window.location.href;\n  getArchive(url, paywall_sel, '', 'article');\n  let ads = 'div.ad-ldb-container, div.inread-cls-reduc';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('jacobin.de')) {\n  let paywall = pageContains('h3.m-auto', 'Dieser Artikel ist nur mit Abo zugänglich.');\n  if (paywall.length) {\n    let slash = document.querySelector('div.slash');\n    removeDOMElement(paywall[0].parentNode, slash);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json && json.props.pageProps.sections && json.props.pageProps.sections[1].content) {\n          let url_next = json.query.slug;\n          if (url_next && !window.location.pathname.includes(url_next))\n            refreshCurrentTab();\n          let pars = json.props.pageProps.sections[1].content;\n          let first_par = document.querySelector('body > div#__next p.bodyText');\n          if (first_par) {\n            let par_class = first_par.getAttribute('class');\n            let article = first_par.parentNode;\n            if (article) {\n              let add_par = false;\n              for (let par of pars) {\n                if (!add_par) {\n                  if (par.type === 'paywall')\n                    add_par = true;\n                } else {\n                  if (par.text) {\n                    let elem_type = 'p';\n                    let elem_class = par_class;\n                    let elem_style;\n                    if (['paragraph', 'quote'].includes(par.type)) {\n                      if (par.type === 'quote')\n                        elem_style = 'font-size: 36px; font-weight: bold;';\n                    } else if (par.type === 'header') {\n                      elem_type = 'h2';\n                      elem_class = 'content-element font-headline h2 my-1em';\n                    }\n                    let content = par.text.replace(/&nbsp;/g, '');\n                    let parser = new DOMParser();\n                    let content_new = parser.parseFromString('<' + elem_type + ' class=\"' + elem_class + (elem_style ? '\" style=\"' + elem_style : '') + '\">' + DOMPurify.sanitize(content) + '</' + elem_type + 'p>', 'text/html');\n                    article.appendChild(content_new.querySelector(elem_type));\n                  } else\n                    console.log(par);\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('krautreporter.de')) {\n  let paywall = document.querySelector('.js-article-paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    window.setTimeout(function () {\n      let paywall_divider = document.querySelector('.js-paywall-divider');\n      let steady_checkout = document.querySelector('#steady-checkout');\n      removeDOMElement(paywall_divider, steady_checkout);\n      let blurred = document.querySelectorAll('.blurred');\n      for (let elem of blurred)\n        elem.classList.remove('blurred', 'json-ld-paywall-marker', 'hidden@print');\n    }, 500);\n  }\n}\n\nelse if (matchDomain(['ksta.de', 'rundschau-online.de'])) {\n  function unhide_article(node) {\n    removeDOMElement(node);\n    let article = document.querySelector('div[data-article-content][style]');\n    if (article)\n      article.removeAttribute('style');\n  }\n  waitDOMElement('div[data-type=\"paywall\"]', 'DIV', unhide_article, true);\n  csDoneOnce = true;\n  let banners = 'div.dm-slot, div.dm-zephr-banner';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('kurier.at')) {\n  let paywall = document.querySelector('div#cfs-paywall-container');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let div_hidden = document.querySelector('div.paywall');\n    if (div_hidden) {\n      div_hidden.classList.remove('paywall');\n      div_hidden.removeAttribute('style');\n    }\n  }\n  let ads = 'div[data-ad], div[data-outbrain]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('mopo.de')) {\n  getJsonUrl('div#paywall', '', 'div.paywall-fade');\n}\n\nelse if (matchDomain('motorradonline.de')) {\n  if (window.location.pathname.endsWith('/amp/'))\n    ampToHtml();\n}\n\nelse if (matchDomain(['noz.de', 'shz.de'])) {\n  let url = window.location.href;\n  getArchive(url, 'div.paywall', '', 'article');\n  let ads = 'div.ad_label';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('nw.de')) {\n  let paywall = document.querySelector('div#paywall');\n  if (paywall) {\n    paywall.removeAttribute('id');\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = parseHtmlEntities(json.articleBody.replace(/\\n/g, '\\n\\n').replace(/\\.responsive[-@%{}()\\.:;\\w\\s]+}\\s?}/g, ''));\n        let article = paywall.querySelector('div[class*=\"paywall-overlay\"]');\n        if (json_text && article)\n          article.innerText = json_text;\n      }\n    }\n  }\n}\n\nelse if (matchDomain('nwzonline.de')) {\n  let ads = 'div.adslot';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['nzz.ch', 'themarket.ch'])) {\n  let fade = document.querySelectorAll('.nzzinteraction');\n  for (let elem of fade)\n    elem.classList.remove('nzzinteraction');\n  let ads = 'div.resor';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('philomag.de')) {\n  let paywall = document.querySelector('div[id^=\"block-paywall\"]');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articlebody.replace(/%paywall%/g, '').replace(/(\\\\r)?\\\\n/g, '<br><br>');\n        let content = document.querySelector('div.content-center > div.description');\n        if (json_text && content) {\n          content.innerHTML = '';\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          content.appendChild(article_new);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('profil.at')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    paywall.removeAttribute('style');\n    let fade = 'div#cfs-paywall-container';\n    hideDOMStyle(fade);\n  }\n  let overlay = 'div.consentOverlay';\n  hideDOMStyle(overlay, 2);\n}\n\nelse if (matchDomain('rheinpfalz.de')) {\n  let ads = 'div.nfy-banner';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('schweizermonat.ch')) {\n  getJsonUrl('div.entry-paywall-login', '', 'div.entry-main > div.entry__post-content');\n}\n\nelse if (matchDomain('spektrum.de')) {\n  let paywall = document.querySelector('article.pw-premium');\n  if (paywall)\n    paywall.classList.remove('pw-premium');\n}\n\nelse if (matchDomain(['spiegel.de', 'manager-magazin.de'])) {\n  let url = window.location.href;\n  func_post = function () {\n    let failed_iframes = document.querySelectorAll('div > div[x-show=\"!iframeIsLoaded\"]');\n    for (let elem of failed_iframes)\n      hideDOMElement(elem.parentNode);\n    let body_dark = document.querySelector('body[class*=\"dark:\"]');\n    if (body_dark)\n      removeClassesByPrefix(body_dark, 'dark:');\n    let charts = document.querySelectorAll('section div[x-data*=\"{isLoaded:\"]');\n    for (let elem of charts)\n      elem.style.height = elem.offsetHeight + 'px';\n    if (mobile) {\n      let lazy_images = document.querySelectorAll('picture img[loading=\"lazy\"][style]');\n      for (let elem of lazy_images)\n        elem.style = 'width: 95%;';\n    }\n    header_nofix('article', 'svg[id*=\"-plus-paywall-\"]', 'BPC > no archive-fix');\n  }\n  getArchive(url, 'div[data-area=\"paywall\"]', '', 'article');\n}\n\nelse if (matchDomain('springermedizin.de')) {\n  let paywall = document.querySelector('div#pay-wall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let article = document.querySelector('div > p.intro--paragraph');\n        if (json_text && article) {\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          article.parentNode.replaceChild(article_new, article);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('stern.de')) {\n  func_post = function () {\n    header_nofix(link_sel, paywall_sel, 'BPC > no archive-fix');\n    if (mobile) {\n      let article = document.querySelector(article_src_sel);\n      if (article) {\n        let lazy_images = article.querySelectorAll('figure > img[loading=\"lazy\"][style]');\n        for (let elem of lazy_images) {\n          elem.style = 'width: 95%;';\n          elem.parentNode.style = 'margin-bottom: 20px';\n          let caption = elem.parentNode.querySelector('figcaption');\n          if (caption)\n            caption.style = 'width: 95%;';\n        }\n        let article_recs = article.querySelectorAll('article');\n        for (let elem of article_recs)\n          elem.style = 'width: 95%;';\n        let article_opulent = document.querySelector('div.page-opulent__body-inner > div > div');\n        if (article_opulent)\n          article_opulent.removeAttribute('style');\n      }\n    }\n  }\n  let paywall_sel = cs_param.paywall_sel || 'ws-paywall';\n  let article_sel = cs_param.article_sel || 'div.article__body';\n  let article_src_sel = cs_param.article_src_sel || 'main > article > div:last-child';\n  let link_sel = cs_param.link_sel || 'div.page__content-inner, div.page-opulent__body';\n  let url = window.location.href;\n  getArchive(url, paywall_sel, '', article_sel, '', article_src_sel, link_sel);\n}\n\nelse if (matchDomain('sueddeutsche.de')) {\n  let url = window.location.href;\n  if (matchDomain('sz-magazin.sueddeutsche.de')) {\n    func_post = function () {\n      header_nofix('main', 'div#sz-paywall', 'BPC > no archive-fix');\n    }\n    getArchive(url, 'div.articlemain__inner--reduced', {rm_class: 'articlemain__inner--reduced'}, 'main');\n  } else if (window.location.pathname.startsWith('/projekte/artikel/')) {\n    func_post = function () {\n      let lazy_images = document.querySelectorAll('img[loading=\"lazy\"][style*=\"min-width:\"]');\n      for (let elem of lazy_images)\n        elem.style = 'width: 80%; margin: auto;';\n      let sticky = document.querySelectorAll('div > div > div[old-position=\"sticky\"]');\n      for (let elem of sticky) {\n        let div_hidden = elem.parentNode.parentNode.querySelector('div[style^=\"display:none;\"]');\n        if (div_hidden)\n          div_hidden.removeAttribute('style');\n        removeDOMElement(elem.parentNode);\n      }\n      if (intro) {\n        let intro_old = document.querySelector(intro_sel);\n        if (intro_old && intro_old.parentNode)\n          intro_old.parentNode.replaceChild(intro, intro_old);\n      }\n      header_nofix('main', 'div#sz-paywall', 'BPC > no archive-fix');\n    }\n    let intro_sel = 'section#module-0';\n    let intro = document.querySelector(intro_sel);\n    getArchive(url, 'div.offer-page', '', 'main');\n  } else {\n    let paywall = document.querySelector('head > meta[content=\"locked\"]');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article_sel = 'div[itemprop=\"articleBody\"]';\n      let article = document.querySelector(article_sel);\n      if (article) {\n        let json_script = document.querySelector('script[data-hydration-props-component-name=\"ArticleBodyDDRum\"]');\n        if (json_script) {\n          try {\n            let json = JSON.parse(decodeURIComponent(json_script.text));\n            if (json) {\n              let pars = json.uiArticleContent;\n              if (pars.length) {\n                article.innerHTML = '';\n                addStyle(article_sel + ' p {margin-bottom: 32px;}');\n              }\n              let parser = new DOMParser();\n              for (let par of pars) {\n                let elem = document.createElement('p');\n                if (['paragraph', 'datawrapper', 'youtube'].includes(par.component)) {\n                  if (par.content && par.content.html) {\n                    let elem_type = par.content.html.startsWith('<div>') ? 'div' : 'p';\n                    let content_new = parser.parseFromString('<' + elem_type + '>' + DOMPurify.sanitize(parseHtmlEntities(par.content.html), dompurify_options) + '</' + elem_type + '>', 'text/html');\n                    let iframe = content_new.querySelector('iframe');\n                    if (iframe)\n                      iframe.style = 'width: 100%; height: 400px; margin-bottom: 32px;';\n                    elem = content_new.querySelector(elem_type);\n                  }\n                } else if (par.component === 'subheading') {\n                  if (par.content && par.content.text) {\n                    elem.innerText = par.content.text;\n                    elem.style = 'font-weight: bold;';\n                  }\n                } else if (par.component === 'image') {\n                  if (par.content && par.content.image) {\n                    let caption = par.content.caption ? par.content.caption.html + ' (Foto: ' + par.content.imageSource + ')' : '';\n                    let sub_elem = makeFigure(par.content.image.url, caption);\n                    elem.appendChild(sub_elem);\n                  }\n                } else if (!(['articleHeader', 'articleTeaserM', 'newsletterEmbed'].includes(par.component) || par.component.startsWith('iqadtile')))\n                  console.log(par);\n                if (elem.hasChildNodes())\n                  article.appendChild(elem);\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n  let ads = 'er-ad-slot, div.iqdcontainer';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('suedkurier.de')) {\n  let url = window.location.href;\n  getArchive(url, 'aside.article-paywall', '', 'main > article');\n}\n\nelse if (matchDomain('t3n.de')) {\n  let paywall = document.querySelector('div.c-paywall__wrapper');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        if (json_text.includes('[embed]'))\n          json_text = json_text.replace(/\\[embed\\]([^\\[]+)\\[\\/embed\\]/g, '$1\\n');\n        json_text = json_text.replace(/\\[[^\\]]+\\]/g, '');\n        let article = document.querySelector('div.paywall-blur > p');\n        if (json_text && article) {\n          article.innerText = parseHtmlEntities(json_text);\n          article.parentNode.removeAttribute('class');\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('tagesspiegel.de')) {\n  let paywall_sel = 'div#paywall';\n  let url = window.location.href;\n  if (matchDomain('www.tagesspiegel.de')) {\n    func_post = function () {\n      let opinionary = document.querySelector('div > div#opinary-automation-placeholder');\n      if (opinionary)\n        hideDOMElement(opinionary.parentNode);\n      if (mobile) {\n        let lazy_images = document.querySelectorAll('figure img[loading=\"lazy\"][style]');\n        for (let elem of lazy_images)\n          elem.style = 'width: 95%;';\n      }\n    }\n    getArchive(url, paywall_sel, '', 'div#story-elements');\n  } else if (matchDomain('interaktiv.tagesspiegel.de')) {\n    let paywall = document.querySelector(paywall_sel);\n    if (paywall) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('div.tslr-article > p');\n      if (article)\n        article.firstChild.before(archiveLink(url));\n    }\n  }\n  let ads = 'div.iqdcontainer';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('tt.com')) {\n  window.setTimeout(function () {\n  let paywall = document.querySelector('div#piano-logwall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div[data-io-article-url]');\n    if (article) {\n      let json_script = document.querySelector('script#tt-com-www-state');\n      if (json_script) {\n        try {\n          let json_articles = JSON.parse(json_script.text).TT_COM_WWW_GLOBAL_STATE.articles;\n          let json_article_id = json_articles.ids[0];\n          if (!json_article_id || (json_article_id && !window.location.pathname.includes(json_article_id)))\n            refreshCurrentTab();\n          let parser = new DOMParser();\n          let pars = json_articles.entities[json_article_id].articleData.article.elements;\n          for (let par of pars) {\n            let elem;\n            if (['body', 'subheadline1'].includes(par.type)) {\n              if (par.content) {\n                let doc = parser.parseFromString('<p>' + DOMPurify.sanitize(par.content, dompurify_options) + '</p>', 'text/html');\n                elem = doc.querySelector('p');\n                if (par.type === 'subheadline1')\n                  elem.style = 'font-weight: bold;';\n              }\n            } else if (par.type = 'x-im/content-part') {\n              if (par.elements) {\n                elem = document.createElement('p');\n                for (let item of par.elements) {\n                  if (item.content) {\n                    let doc = parser.parseFromString('<p>' + DOMPurify.sanitize(item.content, dompurify_options) + '</p>', 'text/html');\n                    sub_elem = doc.querySelector('p');\n                    elem.appendChild(sub_elem);\n                  }\n                }\n              }\n            } else if (par.type.match(/^x-im\\//)) {\n              if (par.url) {\n                if (par.url.startsWith('https://twitter.com/')) {\n                  elem = document.createElement('p');\n                  let sub_elem = document.createElement('a');\n                  sub_elem.href = elem.innerText = par.url;\n                  sub_elem.target = '_blank';\n                  elem.appendChild(sub_elem);\n                } else {\n                  elem = document.createElement('iframe');\n                  elem.src = par.url;\n                  elem.style = 'height: ' + article.offsetWidth + 'px; width: ' + article.offsetWidth + 'px;';\n                }\n              }\n            }\n            if (elem)\n              article.appendChild(elem);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n  }, 1000);\n  let ads = 'div[class*=\"ads-container\"], div.adblock-warning';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('vn.at')) {\n  if (window.location.href.match(/\\.vn\\.at\\/.+\\/\\d{4}\\//)) {\n    let paywall = document.querySelector('div.paywalled-content');\n    if (paywall) {\n      csDoneOnce = true;\n      let par = paywall.querySelector('p');\n      if (!par) {\n        refreshCurrentTab_bg();\n      } else {\n        let lazy_images = document.querySelectorAll('img[src^=\"data:image/\"][lazy-src]');\n        for (let elem of lazy_images) {\n          elem.src = elem.getAttribute('lazy-src');\n        }\n      }\n    } else\n      refreshCurrentTab_bg();\n  }\n}\n\nelse if (matchDomain('vol.at')) {\n  if (!window.location.pathname.match(/\\/amp\\/?$/)) {\n    window.setTimeout(function () {\n      let paywall = document.querySelector('div.vodl-region-article__premium-content');\n      if (paywall && dompurify_loaded) {\n        paywall.removeAttribute('class');\n        if (!paywall.hasChildNodes()) {\n          let json_script = document.querySelector('script#externalPostDataNode');\n          if (json_script) {\n            try {\n              let json = JSON.parse(json_script.text);\n              let json_text = json.content.data.post.content;\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div class=\"entry-content\">' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              let hidden_images = article_new.querySelectorAll('img[src^=\"/\"][srcset]');\n              let json_domain = json.content.data.post.thumbnail.src.match(/https:\\/\\/(www\\.)?\\w+\\.at/)[0];\n              for (let elem of hidden_images) {\n                elem.src = elem.src.replace('https://www.vol.at', json_domain);\n                elem.removeAttribute('srcset');\n              }\n              let hidden_comments = document.querySelector('div[class*=\"backdrop-blur\"]');\n              if (hidden_comments)\n                hidden_comments.removeAttribute('class');\n              let article = document.querySelector('div.article-body');\n              if (article) {\n                article.innerHTML = '';\n                article.appendChild(article_new);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          }\n        }\n      }\n    }, 500);\n    let ads = 'div[id^=\"rm-adslot-\"], div[id^=\"piano_rec\"]';\n    hideDOMStyle(ads);\n  } else\n    ampToHtml();\n}\n\nelse if (matchDomain('welt.de')) {\n  func_post = function () {\n    if (mobile) {\n      let headers = document.querySelectorAll('main header, main header ~ div');\n      for (let elem of headers)\n        elem.removeAttribute('style');\n      let main_divs = document.querySelectorAll('main div[style] > div > div[id]');\n      for (let elem of main_divs) {\n        if (elem.querySelector('img'))\n          elem.parentNode.parentNode.removeAttribute('style');\n      }\n      let lazy_images = document.querySelectorAll('main img[loading=\"lazy\"][style]');\n      for (let elem of lazy_images)\n        elem.style = 'width: 95%;';\n    }\n    header_nofix('main header', 'img[alt=\"WELTplus\"][loading]', 'BPC > no archive-fix');\n    let ads = pageContains('span', 'Anzeige');\n    removeDOMElement(...ads);\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.contains_walled_content, div.c-article-paywall', '', 'main header + div');\n  let ads = 'div[data-component=\"Outbrain\"], div[class*=\"c-ad\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('weser-kurier.de')) {\n  let ads = 'div.ad-wrapper, div.anyad, div.msn-ads';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('zeit.de')) {\n  let header_sel = 'article > header';\n  let header = document.querySelector(header_sel);\n  func_post = function () {\n    if (header) {\n      let header_new = document.querySelector(header_sel);\n      if (header_new)\n        header_new.parentNode.replaceChild(header, header_new);\n    }\n    let comments_link = document.querySelector('div[style*=\"align-items\"] a[href$=\"#comments\"]');\n    if (comments_link)\n      comments_link.href = '#comments';\n    if (mobile) {\n      let lazy_images = document.querySelectorAll('figure img[loading=\"lazy\"][style]');\n      for (let elem of lazy_images)\n        elem.style = 'width: 95%;';\n      let span_empty = document.querySelectorAll('span:empty');\n      removeDOMElement(...span_empty);\n    }\n    let ads = 'div[style*=\";min-height:\"]:has( > div[id^=\"iqadtile\"])';\n    hideDOMStyle(ads, 2);\n  }\n  let url = window.location.href.split(/[#\\?]/)[0];\n  if (document.querySelector('head > link[rel=\"next\"]'))\n    url += '/komplettansicht';\n  getArchive(url, 'aside#paywall', '', 'main', '', 'main', 'article > div');\n  let ads = 'div[id^=\"iqadtile\"], .iqdcontainer';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(ch_tamedia_domains) || document.querySelector('div#__next > div.page-section li > a[href^=\"https://jobs.tamedia.ch/\"]')) {\n  let paywall = document.querySelector('div#piano-premium > div');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('article p');\n    if (article) {\n      let url = window.location.href;\n      article.after(googleSearchToolLink(url));\n    }\n  }\n  let ads = 'div[class^=\"TopAds_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(de_funke_medien_domains)) {\n  let paywall = document.querySelector('div#paywall-container');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let spark_script = document.querySelector('script#__SPARK__');\n    if (spark_script) {\n      let match = spark_script.text.match(/PUBLICATION:\\s?'([\\w-]+)',/);\n      if (match) {\n        func_post = function () {\n          document.querySelectorAll('div[data-carousel-id-slider]').forEach(x => x.removeAttribute('class'));\n          let twitter_templates = document.querySelectorAll('div[data-embed-id=\"twitter\"] > template[data-embedbox-id-embed-template]');\n          for (let elem of twitter_templates) {\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(elem.innerHTML, dompurify_options) + '</div>', 'text/html');\n            let blockquote = doc.querySelector('div');\n            elem.parentNode.before(blockquote);\n            removeDOMElement(elem.parentNode);\n          }\n          let charts = document.querySelectorAll('aside > div[id^=\"datawrapper-vis-\"]');\n          for (let elem of charts) {\n            let img = elem.querySelector('noscript > img[src]');\n            if (img) {\n              elem.parentNode.before(img);\n              removeDOMElement(elem.parentNode);\n            }\n          }\n        }\n        let spark_domain = match[1];\n        let url_src = 'https://app-webview.sparknews.funkemedien.de/' + spark_domain + window.location.pathname;\n        fetch_headers = {\"Authorization\": cs_param['authorization'] || \"Basic YXBpOkNTeGxxRG1YM2xCTmRsS1l6allRcWZqTnFZMkhQVUVm\"};\n        replaceDomElementExt(url_src, true, false, 'div.article-body', 'BPC > no fix (source file)');\n      }\n    }\n  }\n  let ads = 'aside.ad-slot-wrapper';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(de_lv_domains)) {\n  let paywall = document.querySelector('div[id^=\"paymentprocess-\"]');\n  if (paywall) {\n    let intro = document.querySelector('div.m-paywall__textFadeOut');\n    removeDOMElement(paywall, intro);\n    let div_hidden = document.querySelector('div.paywall-full-content[style]');\n    if (div_hidden) {\n      div_hidden.removeAttribute('class');\n      div_hidden.removeAttribute('style');\n    }\n  }\n  let ads = 'div.adZone';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(de_motor_presse_domains)) {\n  let ads = 'div#ads-container, div.va-sponsored, div.mps_markAd';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(de_rp_medien_domains)) {\n  func_post = function () {\n    header_nofix('article', 'div#park-paywall', 'BPC > no archive-fix');\n    let videos = 'glomex-player';\n    hideDOMStyle(videos, 5);\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.park-paywall-content', '', 'article');\n  let ads = 'div.portal-slot';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(de_madsack_domains) || document.querySelector('head > link[href*=\".rndtech.de/\"]')) {\n  // plus code in contentScript_once_var.js (timing)\n  if (!window.location.search.includes('outputType=valid_amp')) {\n    let ads = 'div[class^=\"Adstyled__AdWrapper\"]';\n    hideDOMStyle(ads);\n  } else {\n    ampToHtml();\n  }\n}\n\nelse if (matchDomain(de_ippen_media_domains) || matchDomain(['schwaebische-post.de']) || document.querySelector('header a[href^=\"https://www.ippen.media\"]')) {\n  let ads = 'div[class^=\"id-TBeepSlot-\"], div[data-id-advertdfpconf]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('ruhrnachrichten.de') || document.querySelector('a.mgw-logo[href^=\"https://mgw.de\"]')) {\n  func_post = function () {\n    if (mobile) {\n      let lazy_images = document.querySelectorAll('figure img[loading=\"lazy\"][style]');\n      for (let elem of lazy_images)\n        elem.style = 'width: 95%;';\n      let read_more = document.querySelectorAll('article[id] > figure');\n      for (let elem of read_more) {\n        elem.removeAttribute('style');\n        elem.parentNode.removeAttribute('style');\n      }\n    }\n  }\n  let url = window.location.href;\n  getArchive(url, 'body.is_plus_article', {rm_class: 'is_plus_article'}, 'div#premium-content');\n  if (!matchDomain('ruhrnachrichten.de')) {\n    window.setTimeout(function () {\n      let push = document.querySelector('div.cleverpush-bell');\n      removeDOMElement(push);\n    }, 1000);\n  }\n}\n\nelse if (matchDomain(de_vrm_domains) || matchDomain(de_vrm_custom_domains)) {\n  func_post = function () {\n    let article = document.querySelector(article_sel);\n    if (article) {\n      article.querySelectorAll('div > div[role=\"button\"]').forEach(e => removeDOMElement(e.parentNode));\n      if (mobile) {\n        let pictures = document.querySelectorAll('picture > img[style]');\n        for (let elem of pictures) {\n          elem.style = 'width: 95%; margin: 10px;';\n          elem.parentNode.removeAttribute('style');\n        }\n      }\n    }\n  }\n  let article_sel = 'article section';\n  let url = window.location.href;\n  window.setTimeout(function () {\n    getArchive(url, 'div[data-testid=\"paywall-blurred-content\"]', {rm_attrib: 'class'}, article_sel);\n  }, 1000);\n  let ads = 'div.adSlot, div.loadingBanner';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(ch_media_domains) || document.querySelector('head > link[href*=\"/assets.static-chmedia.ch/\"]')) {\n  let infobox_body = document.querySelector('div.infobox__body');\n  if (infobox_body)\n    infobox_body.removeAttribute('class');\n  let paywall = document.querySelector('div.dynamic-regwall');\n  removeDOMElement(paywall);\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.match(/\\.(dk|fi|se)$/)) {//denmark/finland/sweden\n\nif (matchDomain('berlingske.dk')) {\n  let paywall = document.querySelector('div#paywall');\n  removeDOMElement(paywall);\n  let ads = 'div.advert-unit';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('dn.se')) {\n  let url = window.location.href;\n  getArchive(url, 'div.paywall-wrapper', '', 'article');\n  let ads = 'div.bad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('etc.se')) {\n  let paywall = document.querySelector('section.prose-feature > section.teaser-section');\n  if (paywall) {\n    paywall.classList.remove('teaser-section');\n    paywall.parentNode.querySelectorAll('.hidden').forEach(e => e.classList.remove('hidden'));\n  }\n  let ads = 'div[class$=\"-ad\"], article section.font-sans';\n  hideDOMStyle(ads);\n  let video_iframes = document.querySelectorAll('div.embed-block > iframe[width][height]');\n  for (let elem of video_iframes) {\n    if (elem.width > 1000) {\n      let ratio = elem.width / (mobile ? 320 : 640);\n      elem.width = elem.width / ratio;\n      elem.height = elem.height / ratio;\n    }\n  }\n}\n\nelse if (matchDomain('suomensotilas.fi')) {\n  let obscured = document.querySelector('div.epfl-pw-obscured');\n  if (obscured)\n    obscured.classList.remove('epfl-pw-obscured');\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.match(/\\.(es|pt|cat)$/) || matchDomain(['diariocordoba.com', 'diariovasco.com', 'elconfidencial.com', 'elcorreo.com', 'elespanol.com', 'elpais.com', 'elperiodico.com', 'elperiodicodearagon.com', 'elperiodicoextremadura.com', 'elperiodicomediterraneo.com', 'emporda.info', 'expansion.com', 'larioja.com', 'lavanguardia.com', 'levante-emv.com', 'marca.com', 'mundodeportivo.com', 'politicaexterior.com'])) {//spain/portugal\n\nif (matchDomain(['ara.cat', 'arabalears.cat'])) {\n  if (!window.location.pathname.endsWith('.amp.html')) {\n    amp_redirect('div.paywall');\n    let ads = 'div.advertising';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('diariodenavarra.es')) {\n  let paywall = document.querySelector('div#paywall_message');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let article = document.querySelector('div.free-html');\n        if (json_text && article)\n          article.innerText = parseHtmlEntities(json_text);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('dn.pt')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    let amp_list = 'amp-list';\n    hideDOMStyle(amp_list);\n  } else {\n    let ads = document.querySelectorAll('div.sk-pub');\n    removeDOMElement(...ads);\n  }\n}\n\nelse if (matchDomain('elconfidencial.com')) {\n  let premium = document.querySelector('div.newsType__content--closed');\n  if (premium)\n    premium.classList.remove('newsType__content--closed');\n  let ads = 'div[id^=\"mega_\"], div[id^=\"roba_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('eldiario.es')) {\n  if (window.location.pathname.endsWith('.amp.html')) {\n    amp_unhide_access_hide('^=\"access\"', '=\"NOT access\"');\n  } else {\n    amp_redirect('aside.paywall');\n    let ads = 'div.edi-advertising, div.header-ad, aside.news-sponsored-content, div.report__wrapper';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('elespanol.com')) {\n  if (window.location.pathname.endsWith('.amp.html')) {\n    amp_unhide_subscr_section();\n  } else {\n    let paywall = document.querySelector('div.full-suscriptor-container');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let content_hidden = document.querySelector('div.content-not-granted-paywall');\n      if (content_hidden)\n        content_hidden.classList.remove('content-not-granted-paywall');\n    }\n    let ads = '[id*=\"superior\"], [class*=\"adv\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain(es_unidad_domains)) {\n  if (!window.location.hostname.startsWith('amp.')) {\n    let url = window.location.href;\n    if (!window.location.pathname.startsWith('/mejores-colegios')) {\n      amp_redirect('div[class^=\"ue-c-article__premium\"]', '', url.replace('/www.', '/amp.'));\n    } else if (matchDomain('elmundo.es')) {\n      header_nofix('main p', 'div.ue-c-article__premium');\n      header_nofix('table', 'div.ue-c-paywall');\n    }\n  } else {\n    amp_unhide_access_hide('=\"authorized=true\"', '=\"authorized!=true\"');\n    amp_unhide_subscr_section('.advertising, .ue-c-ad');\n  }\n}\n\nelse if (matchDomain('elpais.com')) {\n  if (window.location.pathname.endsWith('.amp.html') || window.location.search.match(/(\\?|&)outputType=amp/)) {\n    amp_unhide_access_hide('=\"vip\"], [amp-access=\"success\"', '=\"NOT vip\"], [amp-access=\"NOT success\"');\n  } else {\n    let paywall = document.querySelector('div#ctn_freemium_article, div#ctn_premium_article');\n    removeDOMElement(paywall);\n  }\n}\n\nelse if (matchDomain(es_grupo_vocento_domains)) {\n  let paywall_sel = 'div.voc-paywall, div.container-wall-exclusive__content-login';\n  let paywall = document.querySelector(paywall_sel);\n  if (!window.location.pathname.endsWith('_amp.html')) {\n    if (matchDomain('abc.es')) {\n      if (paywall) {\n        let span_break = document.querySelector('span.c-text');\n        removeDOMElement(paywall, span_break);\n        let art_hidden = document.querySelectorAll('span.paywall, div.wpb_column > span');\n        for (let elem of art_hidden) {\n          let attributes = [...elem.attributes];\n          for (let attrib of attributes)\n            elem.removeAttribute(attrib.name);\n        }\n      }\n    } else if (!matchDomain(['eldiariomontanes.es'])) {\n      amp_redirect(paywall_sel, '', window.location.pathname.replace('.html', '_amp.html'));\n    } else {\n      if (paywall) {\n        let url = window.location.href;\n        paywall.before(archiveLink(url));\n        removeDOMElement(paywall);\n      }\n    }\n    let ads = '.voc-advertising, div.voc-ob-wrapper, div.voc-discounts, div.ev-em-modal, span.mega-superior, div.v-adv';\n    hideDOMStyle(ads);\n  } else {\n    if (matchDomain('abc.es') && window.location.pathname.startsWith('/xlsemanal/')) {\n      let paywall = document.querySelector('div.voc-pw');\n      if (paywall) {\n        removeDOMElement(paywall);\n        ampToHtml();\n      }\n    } else {\n      amp_unhide_access_hide('=\"result=\\'ALLOW_ACCESS\\'\"', '=\"result!=\\'ALLOW_ACCESS\\'\"', 'div.v-adv');\n      let body_top = document.querySelector('body#top');\n      if (body_top)\n        body_top.removeAttribute('id');\n    }\n  }\n}\n\nelse if (matchDomain(es_epiberica_domains) || matchDomain(es_epiberica_custom_domains)) {\n  let paywall = document.querySelector('div.ft-helper-closenews');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    let hidden_pars = paywall.querySelectorAll('.closeContentEnd');\n    for (let elem of hidden_pars)\n      elem.classList.remove('closeContentEnd');\n  }\n  if (window.location.pathname.endsWith('.amp.html') || ['amp.elperiodico.com', 'amp.epe.es'].includes(window.location.hostname)) {\n    let amp_images = document.querySelectorAll('figure > amp-img[src]');\n    for (let amp_image of amp_images) {\n      let elem = document.createElement('img');\n      elem.src = amp_image.getAttribute('src');\n      elem.style = 'width: 75%; margin: 0px 50px;';\n      amp_image.parentNode.replaceChild(elem, amp_image);\n    }\n    document.querySelectorAll('div#the-most').forEach(e => e.removeAttribute('style'));\n    let ads = 'amp-next-page, span.ad-signature, div.wrap';\n    hideDOMStyle(ads);\n  } else {\n    let ads = 'div.commercial-up-full__wrapper, aside.ft-ad, div[class^=\"_mo_recs\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('expresso.pt')) {\n  if (!window.location.hostname.startsWith('amp.')) {\n    let article_sel = 'div.article-content';\n    let paywall = document.querySelector(article_sel + ' > div.g-premium-blocker');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article = document.querySelector(article_sel);\n      if (article) {\n        let url = window.location.href.split(/[#\\?]/)[0];\n        fetch(url)\n        .then(response => {\n          if (response.ok) {\n            response.text().then(html => {\n              if (html.match(/window\\.__INITIAL_DATA__\\s?=\\s?/)) {\n                try {\n                  article.innerHTML = '';\n                  let json = JSON.parse(html.split(/window\\.__INITIAL_DATA__\\s?=\\s?/)[1].split(';window.')[0].replace(/\":undefined([,}])/g, \"\\\":\\\"undefined\\\"$1\")).nodes;\n                  let pars = [];\n                  for (let elem in json) {\n                    let item = json[elem];\n                    if (item.type === 'Layout') {\n                      for (let elem of item.nodes) {\n                        if (elem.type === 'MainBody')\n                          pars = elem.nodes[0].data.content.contents;\n                      }\n                      break;\n                    }\n                  }\n                  let parser = new DOMParser();\n                  for (let par of pars) {\n                    let par_new;\n                    if (par.html) {\n                      let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.html, dompurify_options) + '</div>', 'text/html');\n                      par_new = doc.querySelector('div');\n                    } else if (par.type === 'PICTURE') {\n                      if (par.urlOriginal) {\n                        par_new = makeFigure(par.urlOriginal, par.caption, {style: 'width:100%'});\n                      }\n                    } else if (par.link && par.title) {\n                      if (par.contents) {\n                        par_new = document.createElement('div');\n                        for (let elem of par.contents) {\n                          let elem_new;\n                          if (elem.html) {\n                            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(elem.html, dompurify_options) + '</div>', 'text/html');\n                            elem_new = doc.querySelector('div');\n                          } else if (elem.urlOriginal) {\n                            elem_new = makeFigure(elem.urlOriginal, elem.caption, {style: 'width:100%'});\n                          }\n                          if (elem_new)\n                            par_new.appendChild(elem_new);\n                        }\n                      } else {\n                        par_new = document.createElement('p');\n                        let art_link = document.createElement('a');\n                        art_link.innerText = par.title;\n                        art_link.href = par.link;\n                        par_new.appendChild(art_link);\n                      }\n                    }\n                    if (par_new)\n                      article.appendChild(par_new);\n                    else\n                      console.log(par);\n                  }\n                } catch (err) {\n                  console.log(err);\n                }\n              }\n            });\n          }\n        }).catch(function (err) {\n          false;\n        });\n      }\n    }\n  } else\n    ampToHtml();\n}\n\nelse if (matchDomain('infolibre.es')) {\n  if (window.location.pathname.endsWith('.amp.html')) {\n    amp_unhide_access_hide('^=\"access\"', '=\"NOT access\"');\n  } else {\n    amp_redirect('div.paywall__wrapper');\n    let ads = 'div.edi-advertising, div.header-ad';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain(['lavanguardia.com', 'mundodeportivo.com'])) {\n  let ads = 'span.content-ad, span.hidden-ad, span.ad-unit, div.ad-div';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('observador.pt')) {\n  let ads = 'div.obs-ad-placeholder';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('politicaexterior.com')) {\n  let paywall = document.querySelector('div[class^=\"paywall-\"]');\n  if (paywall) {\n    let article = document.querySelector('div.entry-content-text');\n    let json = document.querySelector('script[type=\"application/ld+json\"]:not([class])');\n    if (json) {\n      let json_text = JSON.parse(json.text).description.replace(/&amp;nbsp;/g, '');\n      let article_new = document.createElement('div');\n      article_new.setAttribute('class', 'entry-content-text');\n      article_new.innerText = '\\r\\n' + json_text;\n      article.parentNode.replaceChild(article_new, article);\n    }\n    removeDOMElement(paywall);\n  }\n}\n\nelse if (matchDomain('publico.es')) {\n  let ads = 'div.pb-ads';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('sabado.pt')) {\n  if (!window.location.pathname.includes('/amp/'))\n    amp_redirect('.bloqueio_exclusivos, .container_assinatura, .bloco_bloqueio', '', window.location.href.replace('/detalhe/', '/amp/'));\n  else\n    amp_unhide_access_hide('=\"subscriber\"', '=\"NOT subscriber\"', 'div.adbox, amp-consent, .detalheAds, .exclusivos_bar');\n}\n\nelse\n  csDone = true;\n\n} else if ((window.location.hostname.endsWith('.fr') && !matchDomain(['lemagit.fr'])) || matchDomain(['aoc.media', 'bienpublic.com', 'connaissancedesarts.com', 'courrierinternational.com', 'jeuneafrique.com', 'journaldunet.com', 'ledauphine.com', 'legrandcontinent.eu', 'lejsl.com', 'lerevenu.com', 'lesinrocks.com', 'lesoir.be', 'loeildelaphotographie.com', 'marianne.net', 'parismatch.com', 'philonomist.com', 'pourleco.com', 'reforme.net', 'science-et-vie.com', 'scienceshumaines.com', 'sudinfo.be'].concat(fr_groupe_nice_matin_domains))) {//france\n\nif (matchDomain('alternatives-economiques.fr')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('#temp-paywall');\n    removeDOMElement(paywall);\n    let data_ae_poool = document.querySelector('div[data-ae-poool]');\n    if (data_ae_poool)\n      data_ae_poool.removeAttribute('style');\n  }, 500);\n}\n\nelse if (matchDomain('aoc.media')) {\n  func_post = function () {\n    let article = document.querySelector('section.bottom-article');\n    if (article)\n      article.style = 'margin-bottom: 25px;';\n  }\n  getJsonUrl('section.article-payant', '', 'div.premium-article');\n}\n\nelse if (matchDomain('atlantico.fr')) {\n  let ads = 'div#pv_atf, div#infeed';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('autohebdo.fr')) {\n  if (window.location.pathname.endsWith('.html'))\n    getJsonUrl('div.box-info.yellow', '', 'div.editor', {art_append: 1});\n}\n\nelse if (matchDomain('autoplus.fr')) {\n  let ads = 'div.placeholder-pub_dfp';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('capital.fr')) {\n  let videos = document.querySelectorAll('div > div#prisma-player-leader[data-ads-core*=\"Dailymotion\"]');\n  for (let video of videos) {\n    try {\n      let json = JSON.parse(video.getAttribute('data-ads-core'));\n      if (json && json.playerVideoId) {\n        let iframe = document.createElement('iframe');\n        iframe.src = 'https://www.dailymotion.com/embed/video/' + json.playerVideoId;\n        iframe.style = 'height: ' + video.offsetHeight + 'px; width: ' + video.offsetWidth + 'px;';\n        video.parentNode.replaceChild(iframe, video);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  let ads = 'div.containerAds, div.ads-introText, div.outbrain-ads';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['challenges.fr', 'sciencesetavenir.fr'])) {\n  if (window.location.pathname.endsWith('.amp')) {\n    amp_unhide_access_hide('=\"paywall.access OR cha.access\"', '=\"NOT (paywall.access OR cha.access)\"');\n  } else {\n    let content = document.querySelectorAll('.user-paying-content');\n    for (let elem of content) {\n      elem.classList.remove('user-paying-content');\n      elem.removeAttribute('hidden');\n    }\n    let paywall = document.querySelector('.temp-paywall');\n    removeDOMElement(paywall);\n    let amorce = 'div.amorce.manual';\n    let ads = 'div[class^=\"pub-container\"], div[id^=\"moneytag-\"]';\n    hideDOMStyle(amorce + ', ' + ads);\n  }\n}\n\nelse if (matchDomain('charliehebdo.fr')) {\n  window.setTimeout(function () {\n    let paywalled_content = document.querySelector('div.ch-paywalled-content');\n    if (paywalled_content)\n      paywalled_content.removeAttribute('style');\n  }, 500);\n}\n\nelse if (matchDomain('connaissancedesarts.com')) {\n  let ads = 'div[class*=\"banniere\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('courrierinternational.com')) {\n  let url = window.location.href;\n  getArchive(url, 'div#bloc_paywall', '', 'article');\n}\n\nelse if (matchDomain('elle.fr')) {\n  if (window.location.hostname.startsWith('amp.')) {\n    amp_unhide_access_hide('=\"poool.access OR cmi_premium.access\"');\n  } else {\n    let hidden_images = document.querySelectorAll('img[src^=\"data:image/\"][data-src]');\n    for (let hidden_image of hidden_images)\n      hidden_image.setAttribute('src', hidden_image.getAttribute('data-src'));\n    let subscription_bar = document.querySelector('.tc-subscription-bar');\n    removeDOMElement(subscription_bar);\n  }\n  let ads = 'div[class*=\"--placeholder\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(fr_be_groupe_rossel_domains)) {\n  let paywall = document.querySelector(cs_param.paywall_sel || 'r-panel.r-panel--paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    hideDOMStyle('r-mini-panel.r-mini-panel--froomle, div.r-paywall', 2);\n    let article = document.querySelector(cs_param.article_sel || 'r-article--section, div.r-content, div#article_paywall_es');\n    let match = window.location.pathname.match(/^\\/(id)?(\\d+)\\//);\n    if (article && match) {\n      article.removeAttribute('class');\n      let article_id = match[2];\n      let apps = 'apps';\n      let apps_list = {\n        'aisnenouvelle.fr': 'an',\n        'courrier-picard.fr': 'cp',\n        'lardennais.fr': 'ar',\n        'lest-eclair.fr': 'ee',\n        'liberation-champagne.fr': 'lc',\n        'lunion.fr': 'un'\n      };\n      for (let domain in apps_list) {\n        if (matchDomain(domain))\n          apps += '_' + apps_list[domain];\n      }\n      let url_src = window.location.origin + '/api/article/' + apps + '/' + article_id + '.json';\n      fetch(url_src)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            if (json.body) {\n              let parser = new DOMParser();\n              dompurify_options.ADD_TAGS = dompurify_options.ADD_TAGS.concat(['epigraph', 'i-carousel', 'r-article--section', 'r-carousel', 'r-embed', 'r-img']);\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json.body, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              article.innerHTML = '';\n              article.appendChild(article_new);\n            }\n          })\n        }\n      }).catch(err => console.log(err));\n    }\n  }\n  let ads = 'r-pub';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(fr_groupe_ebra_domains)) {\n  function ebra_main() {\n    window.setTimeout(function () {\n      let url_src = window.location.origin + \"/services/grdc/detail?key=\" + getWebContentKey();\n      fetch(url_src)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            let article = document.querySelector('article.viewPartial');\n            if (article)\n              window.postMessage({type: 'from_page', data: json});\n          })\n        }\n      }).catch(err => console.log(err));\n    }, 1000);\n  }\n  let paywall = document.querySelector('div#paywall-dynamic');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    insert_script(ebra_main);\n  }\n  let ads = 'div.wrapperPub, div[id=\"#paywall-dynamic\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(fr_groupe_la_depeche_domains)) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.article-full__body-content');\n    if (article) {\n      article.removeAttribute('style');\n      article.removeAttribute('data-state');\n    }\n  }\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(fr_groupe_nice_matin_domains)) {\n  if (window.location.pathname.startsWith('/amp/')) {\n    amp_iframes_replace();\n    let qiota_script = document.querySelector('amp-script.i-amphtml-layout-size-defined[src$=\"/qiota-amp.js\"]');\n    if (qiota_script) {\n      qiota_script.classList.remove('i-amphtml-layout-size-defined');\n      let amp_images = document.querySelectorAll('amp-img > img.i-amphtml-fill-content');\n      for (let elem of amp_images)\n        elem.removeAttribute('class');\n      let sizers = document.querySelectorAll('i-amphtml-sizer');\n      removeDOMElement(...sizers);\n    }\n  }\n  let ads = 'div[class^=\"ad-slot-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('jeuneafrique.com')) {\n  let now_date = (new Date()).toISOString().split('T')[0];\n  let ls_date = localStorage.getItem('###_json_date') || '';\n  let ls_json_articles = {};\n  function show_data(article, body) {\n    let parser = new DOMParser();\n    let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(body, dompurify_options) + '</div>', 'text/html');\n    let article_new = doc.querySelector('div');\n    article.innerHTML = '';\n    article.parentNode.replaceChild(article_new, article);\n  }\n  function store_data(json, limit, limit_low = 100, article_id = '', article = '') {\n    try {\n      let src_articles = json.articles.filter(x => !x.content_status_open);\n      if (src_articles) {\n        if (article_id) {\n          let src_article = src_articles.filter(x => x.id == article_id)[0];\n          if (src_article)\n            show_data(article, src_article.content_full);\n          else\n            header_nofix(article, '', 'BPC > no fix (source file)');\n        }\n        if (!ls_date || limit > limit_low || now_date > ls_date)\n          ls_json_articles = {};\n        else if (ls_date && !Object.keys(ls_json_articles).length) {\n          let ls_articles = localStorage.getItem('###_json');\n          ls_json_articles = JSON.parse(ls_articles);\n        }\n        for (let art of src_articles)\n          ls_json_articles[art.id] = art.content_full;\n        localStorage.setItem('###_json', JSON.stringify(ls_json_articles));\n        localStorage.setItem('###_json_date', now_date);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  if (!window.location.pathname.startsWith('/api/mobile/v6.0/featured')) {\n    let paywall = document.querySelector('div#poool-widget');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('div.article__content > div[data-mrf-recirculation]');\n      let article_id = window.location.pathname.split('/')[1];\n      if (article && article_id) {\n        let limit_low = 50 + randomInt(50);\n        let limit_high = 600 + randomInt(100);\n        function fetch_data(limit) {\n          let url_src = 'https://www.jeuneafrique.com/api/mobile/v6.0/featured/?limit=' + limit + '&rel=' + randomInt(100000);\n          fetch(url_src, {headers: cs_param})\n          .then(response => {\n            if (response.ok) {\n              response.json().then(json => {\n                store_data(json, limit, limit_low, article_id, article);\n              })\n            } else {\n              header_nofix(article, '', 'BPC > no fix (source file)');\n              if (typeof browser !== 'object') {\n                let div = document.createElement('div');\n                div.style = 'margin: 20px; font-weight: bold; color: red;';\n                let json_link = document.createElement('a');\n                json_link.href = url_src;\n                json_link.innerText = 'BPC > try to load full content by json-link & refresh current article tab';\n                json_link.target = '_blank';\n                div.appendChild(json_link);\n                article.before(div);\n              }\n            }\n          }).catch(x => header_nofix(article, '', 'BPC > no fix (source file)'))\n        }\n        let json_date;\n        let json_script = document.querySelector('script[type=\"application/ld+json\"]');\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            if (json && json['@graph']) {\n              let date_arr = json['@graph'].filter(x => x.datePublished);\n              if (date_arr.length)\n                json_date = date_arr[0].datePublished;\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n        let art_date = json_date ? json_date.split('T')[0] : now_date;\n        if (ls_date) {\n          let ls_articles = localStorage.getItem('###_json');\n          ls_json_articles = JSON.parse(ls_articles);\n          let art_data = ls_json_articles[article_id];\n          if (art_data)\n            show_data(article, art_data);\n          else if (ls_date < art_date)\n            fetch_data(limit_high);\n          else if (now_date === art_date)\n            fetch_data(limit_low);\n          else\n            header_nofix(article, '', 'BPC > no fix (source file)')\n        } else {\n          fetch_data(limit_high);\n        }\n      }\n    }\n    let ads = 'div.banner-ad, div.box-ad-brand';\n    hideDOMStyle(ads);\n  } else {\n    csDoneOnce = true;\n    let params = new URL(window.location.href).searchParams;\n    let limit = parseInt(params.get('limit'));\n    if (limit) {\n      let html = document.querySelector('body > pre');\n      if (html) {\n        try {\n          let json = JSON.parse(html.innerText);\n          store_data(json, limit);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('journaldunet.com')) {\n  let reg_wall = document.querySelector('div.reg_wall');\n  removeDOMElement(reg_wall);\n  let entry_reg_wall = document.querySelector('div.entry_reg_wall[style]');\n  if (entry_reg_wall)\n    entry_reg_wall.removeAttribute('style');\n}\n\nelse if (matchDomain('lanouvellerepublique.fr')) {\n  let ads = 'aside.dfp';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('lecourrierdesstrateges.fr')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('div.jpw-truncate-btn');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let json_script = getArticleJsonScript();\n      if (json_script) {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let json_text = json.articleBody;\n          let content = document.querySelector('div.content-inner');\n          if (json_text && content) {\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            content.parentNode.replaceChild(content_new, content);\n            let hidden_images = document.querySelectorAll('img[src][srcset]');\n            for (let elem of hidden_images)\n              elem.removeAttribute('srcset');\n            let entry_content = document.querySelector('div.entry-content[style]');\n            if (entry_content)\n              entry_content.removeAttribute('style');\n          }\n        }\n      }\n    }\n  }, 500);\n}\n\nelse if (matchDomain('lefigaro.fr')) {\n  let paywall = document.querySelector('div#fig-premium-paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div[data-component=\"fig-content-body\"]');\n    if (article) {\n      let resource_key = cs_param.resource_key || '34e68a3419a876e36729503e2107dfa556e1a105892e27010130a30018ccbe60';\n      let url = window.location.href.split([/\\?#/])[0];\n      let url_src = 'https://api-graphql.lefigaro.fr/graphql?id=FigaroCoreMobile_resourceByUrl_persistent_' + resource_key + '&variables={%22url%22:%20%22' + url + '%22}';\n      fetch(url_src)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            try {\n              let pars = json.data.resource.body.structured;\n              if (pars.length)\n                article.innerHTML = '';\n              let parser = new DOMParser();\n              for (let par of pars) {\n                let elem;\n                let sub_elem;\n                let par_type = par.__typename;\n                if (['Heading', 'Paragraph', 'ParagraphWithPaywall'].includes(par_type)) {\n                  if (par.paywall)\n                    par = par.paywall;\n                  if (par.text.replace(/&nbsp;/g, '')) {\n                    let doc = parser.parseFromString('<p class=\"fig-paragraph\">' + DOMPurify.sanitize(par.text, dompurify_options) + '</p>', 'text/html');\n                    elem = doc.querySelector('p');\n                    if (par_type === 'Heading')\n                      elem.style = 'font-weight: bold; font-size: 1.85rem;';\n                  }\n                } else if (['Photo', 'VideoFigaro'].includes(par_type)) {\n                  if (par.thumbnail)\n                    par = par.thumbnail;\n                  if (par.image) {\n                    elem = document.createElement('p');\n                    elem.className = 'fig-paragraph';\n                    let img = makeFigure(par.image.url, par.caption.replace(/<[^<]*>/g, '') + ' ' + par.credit, '', {class: 'fig-media__legend'});\n                    elem.append(img, document.createElement('br'));\n                  }\n                } else if (par_type === 'Frame') {\n                  if (par.text) {\n                    elem = document.createElement('p');\n                    elem.className = 'fig-paragraph';\n                    let title = document.createElement('p');\n                    title.innerText = par.title;\n                    title.className = 'fig-paragraph';\n                    title.style = 'font-weight: bold;';\n                    let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.text, dompurify_options) + '</div>', 'text/html');\n                    let text = doc.querySelector('div');\n                    elem.append(title, text);\n                  }\n                } else if (par_type.endsWith('Link')) {\n                  if (par.link)\n                    par = par.link;\n                  if (par.title && par.url) {\n                    elem = document.createElement('p');\n                    if (par.prefix) {\n                      let prefix = document.createElement('span');\n                      prefix.innerText = par.prefix + ' ';\n                      elem.append(prefix);\n                    }\n                    let link_elem = document.createElement('a');\n                    link_elem.href = par.url;\n                    link_elem.innerText = par.title.replace(/<[^<]*>/g, '');\n                    link_elem.target = '_blank';\n                    elem.append(link_elem);\n                  }\n                } else if (['FreeHtml', 'Tweet'].includes(par_type)) {\n                  if (par.sourceCode) {\n                    let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.sourceCode, dompurify_options) + '</div>', 'text/html');\n                    elem = doc.querySelector('div');\n                    let tweet_link = elem.querySelector('a[href^=\"https://twitter.com/\"], a[href^=\"https://x.com/\"]');\n                    if (tweet_link) {\n                      tweet_link.innerText = tweet_link.href;\n                      tweet_link.target = '_blank';\n                    }\n                  }\n                } else if (par_type === 'Youtube') {\n                  if (par.id) {\n                    elem = document.createElement('iframe');\n                    elem.src = 'https://www.youtube.com/embed/' + par.id;\n                    elem.style = 'width: 100%; height: 400px;';\n                  }\n                } else if (par_type === 'List') {\n                  if (par.list) {\n                    elem = document.createElement('ul');\n                    elem.style = 'list-style: inside;';\n                    for (let item of par.list) {\n                      let li = document.createElement('li');\n                      li.style = 'margin: 10px 0px;';\n                      let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item) + '</span>', 'text/html');\n                      let span = doc.querySelector('span');\n                      li.appendChild(span);\n                      elem.appendChild(li);\n                    }\n                  }\n                } else if (par_type === 'HorizontalRule') {\n                  elem = document.createElement('hr');\n                } else if (par_type === 'Quote') {\n                  elem = document.createElement('blockquote');\n                  elem.style = 'margin: 30px;';\n                  let qtext = document.createElement('p');\n                  qtext.innerText = parseHtmlEntities(par.text);\n                  qtext.style = 'font-weight: bold; font-size: 28px; margin: 15px 0px;';\n                  let qcredit = document.createElement('p');\n                  qcredit.innerText = par.credit ? parseHtmlEntities(par.credit) : '';\n                  elem.append(qtext, qcredit);\n                } else if (!['Brightcove'].includes(par_type)) {\n                  console.log(par);\n                }\n                if (elem)\n                  article.appendChild(elem);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          })\n        }\n      }).catch(x => header_nofix(article, '', 'BPC > no fix (source file)'))\n    }\n  }\n}\n\nelse if (matchDomain('legrandcontinent.eu')) {\n  let paywall = document.querySelector('body.paywall, body.pw, body.softwall');\n  if (paywall)\n    paywall.classList.remove('paywall', 'pw', 'softwall');\n  let banners = document.querySelectorAll('div#fix-pw, div.disposableBanner');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain(['lejdd.fr', 'parismatch.com', 'public.fr'])) {\n  let banners = '.forbidden';\n  let ads = 'div[class^=\"lmn-\"], div.premium-hidden, div.p-aside--placeholder, section.outbrain-container';\n  hideDOMStyle(banners + ', ' + ads);\n  let bottom_hide = document.querySelector('.cnt[data-poool-mode=\"hide\"]');\n  if (bottom_hide) {\n    bottom_hide.removeAttribute('data-poool-mode');\n    bottom_hide.removeAttribute('style');\n  }\n}\n\nelse if (matchDomain('lemonde.fr')) {\n  let url = window.location.href.split(/[\\?#]/)[0];\n  let paywall = document.querySelector('section.lmd-paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('.article__content');\n    if (article) {\n      let match = url.match(/article.*_(\\d+)_/);\n      if (match) {\n        let id = match[1];\n        let url_base = 'https://apps.lemonde.fr/aec/v1/' + (window.location.pathname.startsWith('/en/') ? 'en/' : '') + 'premium-android-phone/article/';\n        let url_src = url_base + id;\n        let json_key = 'template_vars.content';\n        getExtFetch(url_src, json_key, {}, main_lemonde);\n        function main_lemonde(url, data) {\n          try {\n            if (data) {\n              let parser = new DOMParser();\n              let doc = parser.parseFromString(DOMPurify.sanitize(data, dompurify_options), 'text/html');\n              let article_new = doc.querySelector('.article_content');\n              if (article_new) {\n                article_new.className = 'article__content';\n                article_new.querySelectorAll('p').forEach(e => e.className = 'article__paragraph');\n                article_new.querySelectorAll('h2').forEach(e => e.className = 'article__sub-title');\n                article_new.querySelectorAll('h3.question').forEach(e => e.className = 'article__question');\n                article_new.querySelectorAll('figure').forEach(e => e.style = 'margin: 0px 10px;');\n                article_new.querySelectorAll('div.see-also-container, div.reference').forEach(e => e.style = 'margin: 20px 0px;');\n                let image_divs = article_new.querySelectorAll('div.image');\n                for (let elem of image_divs) {\n                  elem.style = 'margin: 20px 0px;';\n                  let img = elem.querySelector('a > img[data-src]');\n                  if (img) {\n                    if (img.src.startsWith('data:image/'))\n                      img.src = img.getAttribute('data-src');\n                    img.parentNode.before(img);\n                  }\n                }\n                let videos = article_new.querySelectorAll('div.video-container');\n                for (let video of videos) {\n                  let video_id_dom = video.querySelector('div[data-provider=\"dailymotion\"][data-id]');\n                  if (video_id_dom) {\n                    let iframe = document.createElement('iframe');\n                    iframe.src = 'https://www.dailymotion.com/embed/video/' + video_id_dom.getAttribute('data-id');\n                    iframe.style = 'height: 400px; width: 100%; margin: 20px 0px;';\n                    video.parentNode.replaceChild(iframe, video);\n                  }\n                }\n                let cartes = article_new.querySelectorAll('div.cartes > div.carte > img[src_700][src_350]');\n                for (let elem of cartes) {\n                  elem.parentNode.parentNode.removeAttribute('class');\n                  elem.src = mobile ? elem.getAttribute('src_350') : elem.getAttribute('src_700');\n                  elem.style = 'width: 90%; margin: auto;';\n                }\n                let inread = article_new.querySelectorAll('div.inread-container');\n                removeDOMElement(...inread);\n                let links = article_new.querySelectorAll('div.link-container > a[href^=\"lmfr://\"]');\n                function link_lemonde(url, data, elem) {\n                  if (data)\n                    elem.href = data;\n                }\n                for (let elem of links) {\n                  let url_link = elem.href;\n                  let url_match = url_link.split(/[\\?#]/)[0].match(/^lmfr:\\/\\/.*element\\/article\\/(\\d+)/);\n                  if (url_match) {\n                    let id = url_match[1];\n                    let url_src = url_base + id;\n                    let json_key = 'element.url';\n                    getExtFetch(url_src, json_key, {}, link_lemonde, data_ext_fetch_id++, [elem]);\n                  } else if (url_link.match(/^lmfr:\\/.*\\/live\\/\\d+\\?/) && url_link.includes('www.lemonde.fr')) {\n                    url_link = decodeURIComponent('https://www.lemonde.fr' + url_link.replace(/%25/g, '%').split('www.lemonde.fr')[1].split('.html')[0] + '.html');\n                    link_lemonde(url, url_link, elem);\n                  }\n                }\n                article.innerHTML = '';\n                article.parentNode.replaceChild(article_new, article);\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n  let ads = 'div.dfp-slot, div.dfp__container, div.media-notice';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('leparisien.fr')) {\n  if (window.location.pathname.startsWith('/amp/'))\n    ampToHtml();\n}\n\nelse if (matchDomain('lepoint.fr')) {\n  function lepoint_main() {\n    function decryptVariable(a) {\n      var t = [\"point\", \"les\", \"payants\", \"top\"],\n      n = [\"le\", \"avec\", \"articles\", \"c\"],\n      o = (function () {\n        var o = [];\n        for (var e = 0; e < 4; e++)\n          o.push(n[e]), o.push(t[e]);\n        return o\n      })(),\n      e = {\n        stringify: function (o) {\n          var e = {\n            ct: o.ciphertext.toString(CryptoJS.enc.Base64)\n          };\n          return o.iv && (e.iv = o.iv.toString()),\n          o.salt && (e.s = o.salt.toString()),\n          JSON.stringify(e)\n        },\n        parse: function (o) {\n          var e = JSON.parse(o),\n          t = CryptoJS.lib.CipherParams.create({\n            ciphertext: CryptoJS.enc.Base64.parse(e.ct)\n          });\n          return e.iv && (t.iv = CryptoJS.enc.Hex.parse(e.iv)),\n          e.s && (t.salt = CryptoJS.enc.Hex.parse(e.s)),\n          t\n        }\n      };\n      return JSON.parse(CryptoJS.AES.decrypt(JSON.stringify(a), o.join(\" \"), {\n          format: e\n        }).toString(CryptoJS.enc.Utf8))\n    }\n    let article = document.querySelector('div#contenu');\n    if (article && window.variable_article_poool)\n      window.postMessage({type: 'from_page', data: decryptVariable(window.variable_article_poool)});\n  }\n  if (!matchDomain(['journal.lepoint.fr'])) {\n    let paywall = document.querySelectorAll('aside.paywall');\n    if (paywall.length) {\n      removeDOMElement(...paywall);\n      insert_script(lepoint_main);\n    }\n    let ads = 'div[id*=\"WRAP_\"], div#StickyPaywall, div#paywall-sticky, #article-body div.slotpub, div.sticky-block';\n    hideDOMStyle(ads);\n  } else {\n    let url = window.location.href;\n    getArchive(url, 'div.accnt-cmp', '', 'article');\n  }\n}\n\nelse if (matchDomain('lequipe.fr')) {\n  let paywall = document.querySelector('div.Article__gradient');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    hideDOMStyle('div.Article__paywall', 2);\n    addStyle('p.Article__paragraph--limited {visibility: visible !important; height: auto !important; margin: 0 0 20px !important;}');\n    let article_id = window.location.pathname.match(/\\d+$/)[0];\n    let article = document.querySelector('div.article__body');\n    let notes = window.location.pathname.includes('Article/Les-notes-');\n    if (notes)\n      header_nofix(article, '', 'BPC > no fix');\n    else if (article_id && article) {\n      let url_src = 'https://dwh.lequipe.fr/api/v4/efr/news/' + article_id;\n      fetch(url_src)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            try {\n              let pars = json.items.filter(x => x.layout === 'article_body')[0].objet.paragraphs;\n              pars.shift();\n              article.innerHTML = '';\n              article.className += ' Article__paragraph';\n              article.appendChild(document.createElement('br'));\n              addStyle('div.article__body > p.Paragraph {font-family: \"DINNextLTPro-Regular\", sans-serif; font-size: 18px; font-weight: 400; line-height: 26px;}');\n              let parser = new DOMParser();\n              for (let par of pars) {\n                let elem;\n                if (par.content) {\n                  if ((par.content.match(/(^<div|\\/div>$)/g) || []).length !== 1) {\n                    let elem_type = par.content.includes('div>') ? 'div' : 'p';\n                    let doc = parser.parseFromString('<' + elem_type + ' class=\"Paragraph\">' + DOMPurify.sanitize(par.content, dompurify_options) + '</' + elem_type + '>', 'text/html');\n                    elem = doc.querySelector(elem_type);\n                  }\n                } else if (par.title) {\n                  elem = document.createElement('h2');\n                  elem.innerText = par.title;\n                } else if (par.media) {\n                  if (par.media.url && par.media.ratio) {\n                    let ratio = par.media.ratio;\n                    if (!parseInt(ratio))\n                      ratio = 1.5;\n                    let url = par.media.url.replace(/\\\\u002F/g, '/').replace('{width}', '400').replace('{height}', parseInt(400 / ratio)).replace('{quality}', '75');\n                    let caption = par.media.legende && par.media.legende.length > 2 ? par.media.legende : '';\n                    elem = makeFigure(url, caption, {}, {'style': 'font-weight: bold;'});\n                  } else if (par.media.__type === 'video' && par.media.id) {\n                    let url = par.media.image.url.replace('{width}', '400').replace('{height}', 400).replace('{quality}', '75');\n                    elem = makeFigure(url, par.media.legend);\n                    let video_link = document.createElement('a');\n                    video_link.href = video_link.innerText = 'https://geo.dailymotion.com/player.html?video=' + par.media.id;\n                    video_link.style = 'text-decoration: underline;';\n                    video_link.target = '_blank';\n                    elem.appendChild(video_link);\n                  }\n                } else if (!['article_paragraph_pub'].includes(par.__type))\n                  console.log(par);\n                if (elem)\n                  article.appendChild(elem);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          })\n        }\n      }).catch(x => header_nofix(article, '', 'BPC > no fix (source file)'))\n    }\n  }\n  let ads = 'div.AmPlaceholder, div.Modal[data-modal=\"amsBlock\"]';\n  hideDOMStyle(ads);\n  let noscroll = document.querySelector('html');\n  if (noscroll)\n    noscroll.style.overflow = 'auto';\n}\n\nelse if (matchDomain('lerevenu.com')) {\n  let ads = 'div.wrapperAd';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('lesechos.fr')) {\n  if (window.location.pathname.startsWith('/amp/')) {\n    ampToHtml();\n  } else {\n    window.setTimeout(function () {\n      let paywall = document.querySelector('div#paywall, div#registerWall');\n      if (paywall && dompurify_loaded) {\n        removeDOMElement(paywall);\n        let filter = /window\\.__REACT_QUERY_STATE__\\s?=\\s?/;\n        let json_script = getSourceJsonScript(filter);\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text.split(filter)[1].split('};')[0] + '}');\n            let data_article = json.queries.filter(x => x.state.data.stripes)[0].state;\n            let url = window.location.href;\n            let url_loaded = data_article.data.path;\n            if (url_loaded && (!url_loaded.slice(-7).match(/\\d+/) || !url.includes(url_loaded.slice(-7))))\n              refreshCurrentTab();\n            else {\n              let json_text = data_article.data.stripes[0].mainContent[0].data.description;\n              let article = document.querySelector('div.post-paywall');\n              if (article) {\n                let contentNode = document.createElement('div');\n                let parser = new DOMParser();\n                let doc = parser.parseFromString('<div class=\"' + article.className + '\">' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n                let article_new = doc.querySelector('div');\n                let error_iframes = article_new.querySelectorAll('iframe[allow*=\"fullscreen\"][allowfullscreen]');\n                for (let iframe of error_iframes)\n                  iframe.removeAttribute('allowfullscreen');\n                if (article.parentNode && article_new) {\n                  article.parentNode.replaceChild(article_new, article);\n                  let article_lastnode = document.querySelector('.post-paywall  > :last-child');\n                  if (article_lastnode) {\n                    article_lastnode.setAttribute('style', 'height: auto !important; overflow: hidden !important; max-height: none !important;');\n                  }\n                }\n              }\n              let styleElem = document.head.appendChild(document.createElement('style'));\n              styleElem.innerText = \".post-paywall::after {height: auto !important;}\";\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n      let ads = 'div.sc-1u9r8h-0';\n      hideDOMStyle(ads);\n    }, 500);\n  }\n}\n\nelse if (matchDomain('lesinrocks.com')) {\n  if (window.location.search.match(/(\\?|&)amp/)) {\n    let size_defined = document.querySelector('amp-script.i-amphtml-layout-size-defined');\n    if (size_defined)\n      size_defined.style = 'overflow:visible !important;';\n    let overlays = document.querySelectorAll('section.learn_more, div.sidebar, div.menu-footer, div.tooltip_bib, footer.content-info');\n    removeDOMElement(...overlays);\n  }\n}\n\nelse if (matchDomain('letelegramme.fr')) {\n  let paywall = document.querySelectorAll('div.tlg-paywalled');\n  for (let elem of paywall)\n    elem.classList.remove('tlg-paywalled');\n  let ads = 'div[id^=\"pub_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('lexpress.fr')) {\n  let ads = 'div[class^=\"block_pub\"], div[class^=\"bottom-bar\"], div.teads__block, div.ban-bottom, div[class^=\"placeholder--ban-atf\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('liberation.fr')) {\n  let paywall = document.querySelector(cs_param.paywall_sel || 'div.article-body-paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector(cs_param.article_sel || 'article[data-datawall-status]');\n    if (article) {\n      let url_src = 'https://arc.api.liberation.fr/content/v4/?website=liberation&website_url=' + encodeURIComponent(window.location.pathname);\n      let x_api_key = cs_param['x-api-key'] || 'ejeePeingeitaegho3weengeeyohpu';\n      fetch(url_src, {headers: {\"x-api-key\": x_api_key}})\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            if (json && json.content_elements) {\n              let pars = json.content_elements;\n              if (pars.length)\n                article.innerHTML = '';\n              let parser = new DOMParser();\n              for (let par of pars) {\n                let elem = document.createElement('p');\n                let sub_elem;\n                if (['header', 'raw_html', 'text'].includes(par.type)) {\n                  if (par.content) {\n                    let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.content, dompurify_options) + '</div>', 'text/html');\n                    sub_elem = doc.querySelector('div');\n                    if (par.type === 'header')\n                      sub_elem.style = 'font-weight: bold; font-size: 1.85rem;';\n                  }\n                } else if (par.type === 'correction') {\n                  if (par.text) {\n                    sub_elem = document.createElement('span');\n                    elem.innerText = par.text;\n                  }\n                } else if (par.type === 'image') {\n                  if (par.url) {\n                    sub_elem = document.createElement('img');\n                    sub_elem.src = par.url;\n                  }\n                } else if (par.type === 'custom_embed') {\n                  if (par.embed && par.embed.config) {\n                    let config = par.embed.config;\n                    sub_elem = document.createElement('div');\n                    sub_elem.style = 'border: 1px solid black;';\n                    if (config.title) {\n                      let sub_item = document.createElement('p');\n                      sub_item.innerText = config.title;\n                      sub_item.style = 'font-weight: bold; margin: 20px;';\n                      sub_elem.appendChild(sub_item);\n                    }\n                    if (config.content) {\n                      let sub_item = document.createElement('p');\n                      sub_item.innerText = config.content;\n                      sub_item.style = 'margin: 20px;';\n                      sub_elem.appendChild(sub_item);\n                    }\n                  } else\n                    console.log(par);\n                } else if (par.type === 'oembed_response') {\n                  if (par.raw_oembed && par.raw_oembed.html) {\n                    if (!par.subtype === 'twitter') {\n                      let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.raw_oembed.html, dompurify_options) + '</div>', 'text/html');\n                      sub_elem = doc.querySelector('div');\n                    } else if (par.raw_oembed.url) {\n                      sub_elem = document.createElement('a');\n                      sub_elem.href = sub_elem.innerText = par.raw_oembed.url;\n                      sub_elem.target = '_blank';\n                    }\n                  }\n                } else if (par.type === 'link_list') {\n                  if (par.items) {\n                    sub_elem = document.createElement('p');\n                    sub_elem.appendChild(document.createElement('hr'));\n                    sub_elem.appendChild(document.createTextNode('Lire aussi'));\n                    sub_elem.appendChild(document.createElement('br'));\n                    for (let item of par.items) {\n                      if (item.content && item.url) {\n                        let item_link = document.createElement('a');\n                        item_link.href = item.url;\n                        item_link.innerText = item.content;\n                        sub_elem.appendChild(item_link);\n                        sub_elem.appendChild(document.createElement('br'));\n                      }\n                    }\n                    sub_elem.appendChild(document.createElement('hr'));\n                  }\n                } else if (!['quote'].includes(par.type)) {\n                  console.log(par);\n                }\n                if (sub_elem) {\n                  elem.appendChild(sub_elem);\n                  article.appendChild(elem);\n                }\n              }\n            }\n          })\n        }\n      }).catch(x => header_nofix(article, '', 'BPC > no fix (source file)'))\n    }\n  }\n  let ads = 'div[class^=\"StickyAd\"], div[class^=\"default__OutbrainWrapper\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('loeildelaphotographie.com')) {\n  let paywall = document.querySelector('.paywall');\n  if (paywall) {\n    paywall.removeAttribute('class');\n  }\n  let premium_pic_boxes = document.querySelectorAll('.premium-pic-box');\n  let banners = document.querySelectorAll('.membership-promo-container, .login_form_litle');\n  removeDOMElement(...premium_pic_boxes, ...banners);\n  let blurred_images = document.querySelectorAll('img[style*=\"blur\"]');\n  for (let blurred_image of blurred_images)\n    blurred_image.removeAttribute('style');\n}\n\nelse if (matchDomain('lopinion.fr')) {\n  let url = window.location.href;\n  getArchive(url, 'div.paywall-premium', '', 'div.mainBody', '', cs_param['article_src_sel'] || 'div[style*=\";line-height:1.8;\"] div[style*=\";line-height:1.8;\"]');\n}\n\nelse if (matchDomain('marianne.net')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div > div.js-poool-wrapper');\n    if (article) {\n      let limit_low = 50;\n      let limit_high = 400;\n      function show_data(article, body) {\n        let parser = new DOMParser();\n        let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(body, dompurify_options) + '</div>', 'text/html');\n        let article_new = doc.querySelector('div');\n        let lazy_images = article_new.querySelectorAll('img.lazyload[data-src]:not([src])');\n        for (let elem of lazy_images) {\n          elem.src = elem.getAttribute('data-src');\n          elem.classList.remove('lazyload');\n        }\n        article.innerHTML = '';\n        article.parentNode.replaceChild(article_new, article);\n      }\n      function fetch_data(limit, offset = 0) {\n        let url_src = 'https://mobile.marianne.net/premium?limit=' + limit + '&offset=' + offset;\n        fetch(url_src)\n        .then(response => {\n          if (response.ok) {\n            response.json().then(json => {\n              try {\n                let src_articles = json.feed_auto;\n                if (src_articles) {\n                  let src_article = src_articles.filter(x => x.urlWeb === url)[0];\n                  let ls_update = true;\n                  if (src_article)\n                    show_data(article, src_article.body);\n                  else if (limit === limit_low) {\n                    ls_update = false;\n                    fetch_data(limit_high);\n                  } else\n                    header_nofix(article, '', 'BPC > no fix (source file)');\n                  if (ls_update) {\n                    let now_date = (new Date()).toISOString().split('T')[0];\n                    if (!ls_date || limit > limit_low || now_date > ls_date)\n                      ls_json_articles = {};\n                    for (let art of src_articles)\n                      ls_json_articles[art.urlWeb] = art.body;\n                    localStorage.setItem('###_json_date', now_date);\n                    localStorage.setItem('###_json', JSON.stringify(ls_json_articles));\n                  }\n                }\n              } catch (err) {\n                console.log(err);\n              }\n            })\n          }\n        }).catch(x => header_nofix(article, '', 'BPC > no fix (source file)'))\n      }\n      let url = window.location.href.split(/[#\\?]/)[0];\n      let meta_date = document.querySelector('head > meta[property=\"article:published_time\"][content]');\n      let art_date = '';\n      if (meta_date)\n        art_date = meta_date.content.split('T')[0];\n      let ls_date = localStorage.getItem('###_json_date') || '';\n      let ls_json_articles = {};\n      if (ls_date) {\n        let ls_articles = localStorage.getItem('###_json');\n        ls_json_articles = JSON.parse(ls_articles);\n        if (ls_date <= art_date)\n          fetch_data(limit_low);\n        else {\n          let art_data = ls_json_articles[url];\n          if (art_data)\n            show_data(article, art_data);\n          else if (Object.keys(ls_json_articles).length <= limit_low)\n            fetch_data(limit_high);\n          else\n            header_nofix(article, '', 'BPC > no fix (source file)')\n        }\n      } else {\n        fetch_data(limit_low);\n      }\n    }\n  }\n  let ads = 'div[class*=\"--placeholder\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('ouest-france.fr')) {\n  if (matchDomain('www.ouest-france.fr')) {\n    function ouest_france_main() {\n      window.cmsfetch.push({\n        url: window.cms_bypass_rpc_url,\n        params: {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: 'platform/bypass-payant/get',\n            jsonrpc: '2.0',\n            method: 'getToken',\n            params: {\n              publicitaire: !0,\n              id_contenu: window.dataLayer[0].mdId\n            }\n          })\n        },\n        fn: function (e) {\n          let data = JSON.parse(e);\n          let newURL = new URL(window.location.href);\n          newURL.searchParams.append('token', data.result.token);\n          window.location.href = newURL.toString();\n        }\n      });\n    }\n    let paywall = document.querySelector('div.mur');\n    if (paywall && !window.location.search.includes('token=')) {\n      removeDOMElement();\n      insert_script(ouest_france_main);\n    }\n  } else {\n    function ouest_france_sub(app_id = cs_param.app_id || 'c8kp7jv01t') {\n      let title_dom = document.querySelector('meta[name=\"twitter:title\"][content]');\n      if (title_dom) {\n        let title = encodeURIComponent(title_dom.content);\n        fetch('https://' + app_id + '-dsn.algolia.net/1/indexes/*/queries', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-algolia-api-key\": window.bp_algolia_articles,\n            \"x-algolia-application-id\": app_id.toUpperCase()\n          },\n          body: JSON.stringify({\n            requests: [{\n                indexName: \"articles\",\n                params: 'query=' + title\n              }\n            ]\n          })\n        })\n        .then(response => {\n          if (response.ok) {\n            response.json().then(json => {\n              let results = json.results[0].hits;\n              let article = results.find((result) => result.articleId == window.dataLayer[0].mdId);\n              if (article) {\n                let body = document.querySelector('div#article-detail');\n                if (body)\n                  body.innerText = article.texte;\n              }\n            })\n          }\n        }).catch(err => console.log(err));\n      }\n    }\n    let paywall = document.querySelector('div.mur');\n    if (paywall) {\n      removeDOMElement(paywall);\n      insert_script(ouest_france_sub);\n    }\n  }\n  let ads = 'div.pub';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('philonomist.com')) {\n  let paywall = document.querySelector('div.content-bandeau');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = parseHtmlEntities(findKeyJson(json, ['articleBody'])).replace(/\\s{2,}/g, '\\r\\n\\r\\n');\n        let article = document.querySelector('div.main-body');\n        if (json_text && article) {\n          let par_last = article.querySelector('div > p:last-child');\n          if (par_last) {\n            let par_last_str = par_last.innerText.substring(0, 50);\n            if (json_text.replace(/<[^<]*>/g, '').includes(par_last_str)) {\n              par_last.innerText = json_text.substring(json_text.indexOf(par_last_str));\n            } else {\n              article.innerHTML = ' ';\n              let article_new = document.createElement('p');\n              article_new.innerText = json_text;\n              article.appendChild(article_new);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('pourleco.com')) {\n  let paywall = document.querySelector('div[data-pleco-poool^=\"paywall\"]');\n  if (paywall) {\n    let intro = document.querySelector('div[data-pleco-transition=\"fade\"]');\n    removeDOMElement(paywall, intro);\n    let article = document.querySelector('div[class*=\"article-\"][style]');\n    if (article)\n      article.removeAttribute('style');\n  }\n}\n\nelse if (matchDomain('reforme.net')) {\n  let article_sel = 'div.elementor-widget-theme-post-content';\n  getJsonUrl(article_sel + ' section', '', article_sel);\n  let banner = 'div.free-access-banner';\n  hideDOMStyle(banner);\n}\n\nelse if (matchDomain('science-et-vie.com')) {\n  if (window.location.hostname.startsWith('amp.')) {\n    let pars = document.querySelectorAll('.qiota_reserve > p, .qiota_reserve > h2');\n    let pars_text = [];\n    for (let par of pars) {\n      if (pars_text.includes(par.innerText))\n        removeDOMElement(par);\n      else\n        pars_text.push(par.innerText);\n    }\n    let sizer = document.querySelector('div.article-content > amp-script > i-amphtml-sizer');\n    removeDOMElement(sizer);\n    let replaced_content = document.querySelector('div.i-amphtml-replaced-content');\n    if (replaced_content)\n      replaced_content.removeAttribute('class');\n  }\n}\n\nelse if (matchDomain('scienceshumaines.com')) {\n  let ads = 'div.banner-ad-section, div[class^=\"add-block-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['sudouest.fr', 'charentelibre.fr', 'larepubliquedespyrenees.fr'])) {\n  let paywall = document.querySelectorAll('.visible-not-premium');\n  if (paywall.length) {\n    removeDOMElement(...paywall);\n    let visible_premium = document.querySelectorAll('div.visible-premium');\n    for (let elem of visible_premium)\n      elem.classList.remove('visible-premium');\n  }\n  let footer_premium = '.footer-premium';\n  let ads = 'div.pub, div.ph-easy-subscription';\n  hideDOMStyle(footer_premium + ', ' + ads);\n}\n\nelse if (matchDomain('telerama.fr')) {\n  let paywall = document.querySelector('section.paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article_sel = 'article.article__page-content';\n    let article = document.querySelector(article_sel);\n    if (article) {\n      let url_src = 'https://apps.telerama.fr/tlr/v1/premium-android-tablet/element?id=' + encodeURIComponent(window.location.pathname);\n      let json_key = 'templates.raw_content.content';\n      getExtFetch(url_src, json_key, {}, main_telerama);\n      function main_telerama(url, data) {\n        try {\n          if (data) {\n            let parser = new DOMParser();\n            let doc = parser.parseFromString(DOMPurify.sanitize(data, dompurify_options), 'text/html');\n            let article_new = doc.querySelector(article_sel);\n            if (article_new && article.parentNode) {\n              article_new.querySelectorAll('a[href^=\"tlrm://element?id=\"]').forEach(e => e.href = decodeURIComponent(e.href.split('tlrm://element?id=')[1]));\n              article_new.querySelectorAll('figure > img[data-src]:not([src])').forEach(e => e.src = e.getAttribute('data-src'));\n              article.parentNode.replaceChild(article_new, article);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n  let ads = 'div.dfp-slot';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('lamontagne.fr') || document.querySelector('head > meta[name=\"google-play-app\"][content^=\"app-id=com.centrefrance\"]')) {// Groupe Centre France\n  let paywall = document.querySelector('div#poool-widget');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let content = document.querySelector('div.entry-content');\n        if (json_text && content) {\n          content.innerHTML = '';\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          content.appendChild(article_new);\n        }\n      }\n    }\n  }\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.endsWith('.it') || matchDomain(['eastwest.eu', 'ilsole24ore.com', 'italian.tech', 'limesonline.com', 'quotidiano.net', 'tuttosport.com'])) {//italy\n\nif (matchDomain('corriere.it')) {\n  if (window.location.pathname.endsWith('_amp.shtml')) {\n    amp_unhide_subscr_section('iframe[src^=\"https://ads.\"]');\n  } else {\n    if (window.location.pathname.includes('_preview.shtml') && !window.location.pathname.startsWith('/podcast/')) {\n      window.setTimeout(function () {\n        window.location.href = window.location.pathname.replace('_preview.shtml', '.shtml');\n      }, 500);\n    }\n  }\n  let ads = 'div.bck-adv, div.boxADVmanuale';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('corrieredellosport.it')) {\n  if (!window.location.pathname.startsWith('/amp/')) {\n    amp_redirect('div[class^=\"MainTextTruncated_paragraph__\"]');\n    let ads = 'div[class^=\"AdUnit_placeholder\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('eastwest.eu')) {\n  let paywall = document.querySelector('.paywall');\n  if (paywall) {\n    paywall.removeAttribute('style');\n    paywall.classList.remove('paywall');\n    let intro = document.querySelectorAll('div#testo_articolo > p, div#testo_articolo > h3');\n    let offerta = document.querySelectorAll('div.offerta_abbonamenti');\n    removeDOMElement(...intro, ...offerta);\n  }\n}\n\nelse if (matchDomain('editorialedomani.it')) {\n  if (window.location.search.startsWith('?amp=1'))\n    ampToHtml();\n}\n\nelse if (matchDomain('gazzetta.it')) {\n  if (window.location.pathname.endsWith('_preview.shtml')) {\n    let paywall = document.querySelector('section.bck-freemium__wall');\n    if (paywall) {\n      removeDOMElement(paywall);\n      if (!window.location.search.startsWith('?reason=unauthenticated')) {\n        window.location.href = window.location.pathname.replace('_preview', '') + '?gaa_at=g';\n      } else {\n        let json_script = getArticleJsonScript();\n        let header = 'div.content > h2';\n        if (json_script) {\n          let json = JSON.parse(json_script.text);\n          if (json) {\n            let json_text = json.articleBody.replace(/(\\s{3}|&nbsp;)/g, '\\r\\n\\r\\n');\n            let content = document.querySelector('div.content > p.has-first-letter');\n            if (json_text && content) {\n              let content_new = document.createElement('p');\n              content_new.innerText = json_text;\n              content.parentNode.replaceChild(content_new, content);\n              let article_body = document.querySelector('section.body-article');\n              if (article_body)\n                article_body.style = 'height: auto;';\n            } else\n              header_nofix(header);\n          }\n        } else\n          header_nofix(header);\n      }\n    }\n  } else if (window.location.pathname.endsWith('_amp.shtml'))\n    ampToHtml();\n}\n\nelse if (matchDomain('ilfattoquotidiano.it')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    amp_unhide_subscr_section('div#_4sVideoContainer, div#post-consent-ui');\n    let logo = document.querySelector('a > amp-img[src$=\"/svg/logo-tablet.svg\"]');\n    if (logo) {\n      let logo_new = document.createElement('img');\n      logo_new.src = logo.getAttribute('src').replace('/svg/logo-tablet.svg', '/fq-www/logo-ifq-it.svg');\n      logo_new.height = logo.getAttribute('height');\n      logo_new.width = logo.getAttribute('width');\n      logo.parentNode.replaceChild(logo_new, logo);\n    }\n  } else {\n    let paywall = document.querySelector('div#ifq-paywall-metered');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let art_hidden = document.querySelector('article[id].cropped');\n      if (art_hidden)\n        art_hidden.classList.remove('cropped');\n    } else\n      header_nofix('div.ifq-post__content', 'div#ifq-paywall-hard');\n  }\n  let ads = 'div.adv, div.st-adunit, div[id^=\"ifq-adv-\"], div.mgbox';\n  hideDOMStyle(ads);\n  let ad_units = document.querySelectorAll('div[id^=\"div-flx-\"] > div[data-adunit]');\n  for (let elem of ad_units)\n    hideDOMElement(elem.parentNode);\n}\n\nelse if (matchDomain('ilfoglio.it')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    amp_unhide_subscr_section('amp-ad, [class^=\"adv-\"], div#gmpVideoContainer');\n  } else {\n    amp_redirect('div.paywall');\n    let ads = '.advertisement';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('ilmanifesto.it')) {\n  let paywall = document.querySelector('div[class*=\"before:bg-gradient-to-t\"]');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('article div.prose');\n    if (article) {\n      let filter = /^self\\.__next_f\\.push\\(\\[1,\"/;\n      let scripts = document.querySelectorAll('script:not([src], [type])');\n      for (let script of scripts) {\n        if (script.text.match(filter) && script.text.includes('canonical_url')) {\n          if (!script.text.includes(window.location.href))\n            refreshCurrentTab();\n          break;\n        }\n      }\n      let source_script = getSourceJsonScript(/^self\\.__next_f\\.push\\(\\[1,\"\\\\u003c/);\n      if (source_script) {\n        let source_text = source_script.text.split(filter)[1].split('\"])')[0].replace(/\\\\u003c/g, '<').replace(/\\\\u003e/g, '>').replace(/\\\\\"/g, '\"').replace(/\\\\n/g, '');\n        let parser = new DOMParser();\n        let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(source_text) + '</div>', 'text/html');\n        let article_new = doc.querySelector('div');\n        let figures = article_new.querySelectorAll('figure[style]');\n        for (let elem of figures)\n          elem.removeAttribute('style');\n        article.innerHTML = '';\n        article.appendChild(article_new);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('ilsole24ore.com')) {\n  header_nofix('div.paywalltext', 'div.lock');\n  waitDOMAttribute('body', 'BODY', 'style', node => node.removeAttribute('style'), true);\n  csDoneOnce = true;\n  let ads = 'div.background-adv, div.abox, div.ob-smartfeed-wrapper, div.s24_adb';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['iltirreno.it', 'lanuovasardegna.it']) || matchDomain(['gazzettadimodena.it', 'gazzettadireggio.it', 'lanuovaferrara.it'])) {\n  if (window.location.pathname.includes('/news/')) {\n    let paywall = document.querySelector('span > img[alt*=\"Paywall\"]');\n    if (paywall) {\n      let header = paywall.parentNode.parentNode;\n      header_nofix(header);\n      removeDOMElement(paywall.parentNode);\n    }\n    window.setTimeout(function () {\n      let banners = document.querySelectorAll('div.MuiSnackbar-root, div.css-16cchgy');\n      removeDOMElement(...banners);\n    }, 1000);\n  }\n}\n\nelse if (matchDomain(it_ilmessaggero_domains)) {\n  if (window.location.pathname.toLowerCase().includes('/amp/')) {\n    amp_unhide_subscr_section();\n  } else {\n    let noscroll = document.querySelector('html[style]');\n    if (noscroll)\n      noscroll.removeAttribute('style');\n    let ads = 'div.adv_banner, div.inread_adv, div#outbrain';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain(it_quotidiano_domains)) {\n  if (window.location.pathname.endsWith('/amp') || window.location.search.startsWith('?amp')) {\n    amp_unhide_access_hide('=\"c.customGranted\"', '=\"NOT c.customGranted\"', 'amp-fx-flying-carpet, .watermark-adv, .amp__watermark');\n  } else {\n    amp_redirect('div[data-testid=\"paywall-container\"], div[class^=\"Paywall_paywall_\"]', '', window.location.pathname + '/amp');\n    let ads = 'div[id^=\"div-gpt-ad\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('italiaoggi.it')) {\n  let paywall = document.querySelector('div.boxAbb');\n  if (paywall && dompurify_loaded) {\n    let overlay = document.querySelector('div.article-locked-overlay');\n    removeDOMElement(paywall, overlay);\n    let article_locked = document.querySelector('div.article-locked');\n    if (article_locked) {\n      article_locked.classList.remove('article-locked');\n      let json_script = getArticleJsonScript();\n      if (json_script) {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let json_text = json.articleBody;\n          let content = article_locked.querySelector('section');\n          if (json_text && content) {\n            let parser = new DOMParser();\n            json_text = json_text.replace(/&amp;apos;/g, \"'\").replace(/;/g, '');\n            let doc = parser.parseFromString('<div><section>' + DOMPurify.sanitize(json_text) + '</section></div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            content.parentNode.replaceChild(content_new, content);\n          }\n        }\n      }\n    }\n  }\n}\n\nelse if (domain = matchDomain(it_gedi_domains)) {\n  let amp = window.location.pathname.match(/\\/amp(\\/)?$/);\n  if (matchDomain(['huffingtonpost.it', 'lastampa.it'])) {\n    if (window.location.pathname.includes('/news/')) {\n      if (!amp) {\n        csDoneOnce = true;\n        let paywall = document.querySelector('iframe[id^=\"__limio_frame\"]');\n        if (paywall) {\n          ext_api.runtime.sendMessage({request: 'clear_cookies_domain', data: {domain: domain}});\n          refreshCurrentTab(false);\n        }\n        let modal = document.querySelector('aside#widgetDP');\n        removeDOMElement(modal);\n      } else\n        ampToHtml();\n    }\n  } else if (matchDomain('repubblica.it')) {\n    if (!amp)\n      amp_redirect('iframe[id^=\"__limio_frame\"]', '', window.location.pathname + 'amp/');\n    else {\n      amp_unhide_subscr_section();\n      if (!mobile)\n        addStyle('img.i-amphtml-fill-content {min-height: 50% !important; min-width: 50% !important;}');\n      let paywall = document.querySelector('div.not_granted__content');\n      if (paywall) {\n        removeDOMElement(paywall);\n        let article = document.querySelector('div.story__wrapper');\n        if (article) {\n          let url = window.location.href.split(/[#\\?]/)[0].replace(/\\/amp\\/$/, '');\n          article.before(googleSearchToolLink(url));\n        }\n      }\n    }\n  } else {\n    if (!amp) {\n      let paywall = document.querySelector('div#ph-paywall');\n      removeDOMElement(paywall);\n    } else\n      ampToHtml();\n  }\n  let ads = 'div[id^=\"adv\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('milanofinanza.it')) {\n  let paywall = document.querySelector('div.paywall-content, section.payment');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text.replace(/!=/g, '').replace(/!function\\(\\){[^!]+(\\(\\);|0;[a-z])/g, ''));\n        if (json) {\n          let json_text = parseHtmlEntities(json.articleBody);\n          let article = document.querySelector('div.article-locked');\n          if (json_text && article) {\n            article.innerHTML = '';\n            let article_new = document.createElement('p');\n            article_new.innerText = json_text;\n            article.appendChild(article_new);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        header_nofix('div.article-locked', '', 'BPC > no fix (json-error)');\n      }\n    }\n  }\n}\n\nelse if (matchDomain('sky.it')) {\n  let paywall = document.querySelector('div.c-paywall');\n  if (paywall && window.location.hostname.match(/^(sport|tg24)\\./)) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div > div.c-article-abstract');\n    let json_script = getArticleJsonScript();\n    if (article && json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let json_text = json[0].articleBody;\n          if (json_text) {\n            let par_new = document.createElement('p');\n            par_new.innerText = json_text;\n            article.parentNode.appendChild(par_new);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = 'div.c-adv';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('tuttosport.com')) {\n  if (!window.location.pathname.startsWith('/amp/')) {\n    let paywall = document.querySelector('div[class^=\"MainTextTruncated_premium\"]');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('div > div[class^=\"MainTextTruncated_truncatedContent\"]');\n      if (article) {\n        let json_script = document.querySelector('script#__NEXT_DATA__');\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            if (json && json.props.pageProps.news && json.props.pageProps.news.content) {\n              let url_next = json.props.pageProps.news.href;\n              if (url_next && !window.location.pathname.includes(url_next))\n                window.location.href = window.location.pathname;\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json.props.pageProps.news.content, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              article.parentNode.replaceChild(article_new, article);\n            } else\n              refreshCurrentTab();\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n    let ads = 'div[class^=\"AdUnit_\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.match(/\\.(be|nl)$/) || matchDomain(['artsenkrant.com', 'lavenir.net', 'projectcargojournal.com', 'railfreight.cn', 'railfreight.com', 'railtech.com'])) {//belgium/netherlands\n\nif (matchDomain('adformatie.nl')) {// custom\n  document.querySelectorAll('iframe[uc-src]').forEach(e => e.src = e.getAttribute('uc-src'));\n  let ads = 'div.c-ad-slot';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(be_groupe_ipm_domains)) {\n  let paywall = document.querySelector('div.is-preview');\n  if (paywall) {\n    paywall.classList.remove('is-preview');\n    window.setTimeout(function () {\n      let div_hidden = document.querySelector('div.is-hidden');\n      if (div_hidden)\n        div_hidden.classList.remove('is-hidden');\n    }, 1000);\n  }\n  let ads = 'div.ap-AdContainer, div.ap-Outbrain';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(be_mediahuis_domains)) {\n  window.setTimeout(function () {\n    let video = document.querySelector('div.video, div[data-testid=\"article-video\"]');\n    func_post = function () {\n      let article = document.querySelector(article_sel);\n      if (article) {\n        if (video) {\n          let video_new = article.querySelector('div[id$=\"-streamone\"], div[id^=\"video-player-\"], div[id^=\"player_\"]');\n          if (video_new && video_new.parentNode)\n            video_new.parentNode.replaceChild(video, video_new);\n          else {\n            let header = article.querySelector('h1');\n            let br = document.createElement('br');\n            if (header)\n              header.after(br, video, br);\n          }\n        }\n        if (mobile) {\n          if (article_main) {\n            let div_next = document.querySelector('div[id=\"__next\"]');\n            if (div_next)\n              article.style.width = div_next.offsetWidth + 'px';\n          }\n          let lazy_images = article.querySelectorAll('figure img[loading=\"lazy\"][style]');\n          for (let elem of lazy_images)\n            elem.style = 'width: 95%;';\n          let figures = article.querySelectorAll('figure div');\n          for (let elem of figures) {\n            elem.removeAttribute('style');\n            let svg = elem.querySelector('svg');\n            removeDOMElement(svg);\n          }\n        }\n        let pars = article.querySelectorAll('div[style*=\"font-size\"]');\n        if (pars.length < 5)\n          article.before(googleSearchToolLink(url));\n      }\n    }\n    let url = window.location.href;\n    let paywall_sel = 'head > meta[name$=\"article_ispaidcontent\"][content=\"true\"]';\n    let article_sel = 'main > article';\n    let article_main = document.querySelector(article_sel);\n    if (!article_main)\n      article_sel = 'article[role=\"article\"] div[id]';\n    getArchive(url, cs_param.paywall_sel || paywall_sel, '', cs_param.article_sel || article_sel);\n    let popup = document.querySelector('div[data-testid=\"close-popup-button\"]');\n    if (popup)\n      popup.click();\n  }, 1500);\n}\n\nelse if (matchDomain('businessam.be')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.text-gradient');\n    if (article) {\n      let filter = /window\\.fullcontent64\\s?=\\s?\"/;\n      let content_script = getSourceJsonScript(filter);\n      if (content_script) {\n        try {\n          let content = decode_utf8(atob(content_script.text.split(filter)[1].split('\";')[0]));\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(content, dompurify_options) + '</div>', 'text/html');\n          let content_new = doc.querySelector('div');\n          article.parentNode.replaceChild(content_new, article);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('businessinsider.nl')) {\n  getJsonUrl('div.piano-article__paywall', '', 'div.piano-article__content');\n}\n\nelse if (matchDomain('doorbraak.be')) {\n  let paywall_sel = 'div.paywall';\n  let paywall = document.querySelector(paywall_sel);\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    waitDOMElement(paywall_sel, 'DIV', removeDOMElement, false);\n    let json_script = document.querySelector('script#__NUXT_DATA__');\n    if (json_script) {\n      try {\n        if (!json_script.text.substr(0, 500).includes(window.location.pathname))\n          refreshCurrentTab();\n        let json = JSON.parse(json_script.text);\n        json = json.filter(x => typeof x === 'string' && x.startsWith('<p>'));\n        let json_text = json[0];\n        if (json_text) {\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n          let content_new = doc.querySelector('div');\n          let article = document.querySelector('div > div.prose');\n          if (article) {\n            article.appendChild(content_new);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('ftm.nl')) {\n  let videos = document.querySelectorAll('div.body > div.video-pp');\n  for (let video of videos) {\n    let video_id_dom = video.querySelector('a.video[data-youtube-id]');\n    if (video_id_dom) {\n      video_new = document.createElement('iframe');\n      video_new.src = 'https://www.youtube.com/embed/' + video_id_dom.getAttribute('data-youtube-id');\n      video_new.style = 'width: 95%; height: 400px; margin: 0px 20px;';\n      video.parentNode.replaceChild(video_new, video);\n    }\n  }\n  let audio_controls = document.querySelectorAll('audio[controls][style]');\n  for (let elem of audio_controls)\n    elem.removeAttribute('style');\n  document.querySelectorAll('div.foldable').forEach(e => e.classList.remove('foldable'));\n  let banners = 'div.banner-pp';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain(be_roularta_domains)) {\n  if (matchDomain('beleggersbelangen.nl')) {\n    let paywall = document.querySelector('div.unlimited-access');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let no_account = document.querySelector('div.no-account');\n      if (no_account)\n        no_account.classList.remove('no-account');\n      let content_inner = document.querySelector('div.content-inner[style]');\n      if (content_inner)\n        content_inner.removeAttribute('style');\n    }\n  } else {\n    let paywall = document.querySelector('div[id*=\"wall-modal\"]');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let html = document.querySelector('html[class]');\n      if (html)\n        html.removeAttribute('class');\n      function roularta_noscroll(node) {\n        node.removeAttribute('style');\n        node.removeAttribute('class');\n      }\n      waitDOMAttribute('html', 'html', 'class', roularta_noscroll, true);\n      let intro = document.querySelectorAll('div.article-body > p, div.article-body > style');\n      removeDOMElement(...intro);\n      let locked = document.querySelector('body.locked');\n      if (locked)\n        locked.classList.remove('locked');\n    }\n    if (!window.navigator.userAgent.toLowerCase().includes('chrome') && !matchDomain(['artsenkrant.com', 'kw.be']) && window.location.href.match(/\\/(\\w+-){2,}/)) {\n      let lazy_images = document.querySelectorAll('img[src^=\"data:image/\"][data-lazy-src]');\n      for (let elem of lazy_images) {\n        elem.src = elem.getAttribute('data-lazy-src');\n      }\n    }\n  }\n  let ads = 'div.rmgAd, div.c-header__ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('groene.nl')) {\n  let more = pageContains('div.wrapper > h2', 'Verder lezen?');\n  if (more.length) {\n    let link_text = 'https://www.groene.nl/populair';\n    let a_link = document.createElement('a');\n    a_link.href = link_text;\n    a_link.innerText = 'BPC > ' + link_text.split('www.')[1];\n    more[0].parentNode.append(document.createElement('br'), a_link);\n    csDoneOnce = true;\n  }\n}\n\nelse if (matchDomain(['lc.nl', 'dvhn.nl']) || document.querySelector('head > link[href*=\".ndcmediagroep.nl/\"]')) {\n  let paywall = document.querySelector('div.signupPlus, div.pw-wrapper');\n  if (paywall && dompurify_loaded) {\n    let intro = document.querySelector('div.startPayWall');\n    let html = document.documentElement.outerHTML;\n    if (html.includes('window.__NUXT__=')) {\n      removeDOMElement(paywall, intro);\n      try {\n        let json = html.split('window.__NUXT__=')[1].split('</script>')[0].trim();\n        let json_match = json.includes('type:\"article\",');\n        if (json_match) {\n          let path_match = window.location.pathname.match(/-(\\d+)\\./);\n          if (path_match) {\n            let article_id = path_match[1];\n            json_match = json.includes(',id:\"' + article_id + '\",');\n            if (!json_match && json.match(/[(,]null,/)) {\n              let art_match = json.split(/[(,]null,/)[1].match(new RegExp('-' + article_id + '\\\\.', 'g'));\n              json_match = art_match && art_match.length > 1;\n            }\n          }\n        }\n        if (!json_match)\n          refreshCurrentTab();\n        else if (json.includes(',body:')) {\n          let intro;\n          let intro_match = json.match(/,leadtext_raw:\"([^\"]+)\",/);\n          if (intro_match) {\n            intro = document.createElement('p');\n            intro.innerText = intro_match[1];\n            intro.style = 'font-weight: bold;';\n          }\n          let json_text = json.split(',body:')[1].split(/,(leadText|brand_key|tts|pianoKeywords):/)[0].replace(/([{,])(\\w+)(?=:([\"\\{\\[]|[\\w$]{1,2}[,\\}]))/g, \"$1\\\"$2\\\"\").replace(/(Image\\\\\":)(\\d)([,}])/g, '$1\\\\\"$2\\\\\"$3').replace(/\\\":(\\[)?([\\w\\$\\.]+)([\\]},])/g, \"\\\":$1\\\"$2\\\"$3\");\n          let article = document.querySelector('div.content');\n          if (article) {\n            article.innerHTML = '';\n            if (intro)\n              article.appendChild(intro);\n            let pars = JSON.parse(json_text);\n            function addParText(elem, par_text, add_br = false) {\n              if (par_text) {\n                if (par_text.length <= 2)\n                  par_text = ' ... ';\n                let span = document.createElement('span');\n                span.innerText = par_text;\n                elem.appendChild(span);\n                if (add_br)\n                  elem.appendChild(document.createElement('br'));\n              }\n            }\n            function addLink(elem, link_text, href, add_br = false) {\n              let par_link = document.createElement('a');\n              par_link.href = href;\n              par_link.innerText = link_text;\n              elem.appendChild(par_link);\n              if (add_br)\n                elem.appendChild(document.createElement('br'));\n            }\n            function addImage(elem, child) {\n              let figure = document.createElement('figure');\n              let img = document.createElement('img');\n              img.src = child.relation.href;\n              figure.appendChild(img);\n              if (child.relation.caption && child.relation.caption.length > 2) {\n                let caption = document.createElement('figcaption');\n                caption.innerText = child.relation.caption;\n                figure.appendChild(caption);\n              }\n              elem.appendChild(figure);\n            }\n            function addChildren(elem, children, add_br = false) {\n              for (let child of children) {\n                if (child.text) {\n                  addParText(elem, child.text, add_br);\n                } else if (child.relation && (child.type === 'img' || child.relation.caption) && child.relation.href) {\n                  let img_par = document.createElement('p');\n                  addImage(img_par, child);\n                  elem.appendChild(img_par);\n                } else if (child.relation && child.relation.link && child.relation.link.length > 2) {\n                  addLink(elem, decodeURIComponent(child.relation.title.length > 2 ? child.relation.title : child.relation.link), child.relation.link);\n                } else if (child.children && child.children[0]) {\n                  if (child.children[0].text) {\n                    if ((child.href && child.href.length > 2) || (child.relation && child.relation.follow && child.relation.follow.url)) {\n                      if (child.children[0].text.length > 2)\n                        addLink(elem, child.children[0].text, child.href || child.relation.follow.url, add_br);\n                    } else\n                      addParText(elem, child.children[0].text);\n                  } else\n                    addChildren(elem, child.children);\n                }\n              }\n            }\n            for (let par of pars) {\n              let elem = document.createElement('p');\n              if (par.code) {\n                let parser = new DOMParser();\n                let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.code, dompurify_options) + '</div>', 'text/html');\n                elem = doc.querySelector('div');\n              } else if (par.insertbox_head || par.insertbox_text) {\n                if (par.insertbox_head && par.insertbox_head.length > 2)\n                  addParText(elem, par.insertbox_head, true);\n                if (par.insertbox_text) {\n                  for (let item of par.insertbox_text) {\n                    if (item.children)\n                      addChildren(elem, item.children, true);\n                  }\n                }\n              } else if (par.text) {\n                addParText(elem, par.text);\n              } else if (par.children) {\n                addChildren(elem, par.children);\n              } else if (par.typename.length > 2)\n                console.log(par);\n              if (elem.hasChildNodes()) {\n                article.appendChild(elem);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = 'div.top__ad, div.marketingblock-article';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('linda.nl')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('div.premium-login-box_login-box');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('article');\n      if (article) {\n        let filter = /^window\\.__INITIAL_PROPS__\\s?=\\s?/;\n        let json_script = getSourceJsonScript(filter);\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text.split(filter)[1]);\n            if (json) {\n              let slug = json.slug;\n              if ((slug && !window.location.pathname.includes(slug)) || !json.viewData)\n                refreshCurrentTab();\n              if (json && json.viewData.article && json.viewData.article.modules) {\n                let modules = json.viewData.article.modules;\n                for (let elem of modules) {\n                  let type = elem.acf_fc_layout;\n                  if (type) {\n                    let item = document.createElement('div');\n                    if (['body_text', 'intro', 'quote'].includes(type)) {\n                      if (elem.text) {\n                        let parser = new DOMParser();\n                        let doc = parser.parseFromString('<div style=\"margin: 20px;\">' + DOMPurify.sanitize((elem.title ? elem.title : '') + elem.text.replace(/\\r\\n/g, '<br>'), dompurify_options) + '</div>', 'text/html');\n                        item = doc.querySelector('div');\n                        if (type === 'intro') {\n                          let intro = item.querySelector('p');\n                          if (intro)\n                            intro.style = 'font-weight: bold; ';\n                        } else if (type === 'quote')\n                          item.style['text-align'] = 'center';\n                        article.append(item);\n                      }\n                    } else if (type === 'image') {\n                      let elem_images = elem.images_portrait || elem.images_landscape;\n                      if (elem_images && elem_images.length) {\n                        for (let img of elem_images) {\n                          let url = img.image.sizes.large;\n                          let caption_text = img.credits ? img.credits.replace(/(\\n|<[^<]*>)/g, '') : '';\n                          item = makeFigure(url, caption_text, {style: 'width: 100%;'});\n                          article.append(item);\n                        }\n                      }\n                    } else\n                      console.log(elem);\n                  }\n                }\n              } else\n                header_nofix('div.article-content_base');\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }, 1000);\n}\n\nelse if (matchDomain(nl_dpg_adr_domains.concat(['hln.be']))) {\n  let sub_sel = 'article[id^=\"PURCHASE\"]';\n  let sub = document.querySelector(sub_sel + ' > button');\n  if (sub)\n    sub.click();\n  func_post = function () {\n    let shades = document.querySelectorAll('div[style*=\"background-color\"][style*=\";width\"]');\n    for (let elem of shades)\n      elem.style.width = '85%';\n    let lazy_images = document.querySelectorAll('picture img[loading=\"lazy\"][style]');\n    for (let elem of lazy_images)\n      elem.style = 'width: 95%;';\n    let widgets = document.querySelectorAll('div[old-src^=\"https://valley.ad.nl/widgets/\"]:not([src])');\n    for (let elem of widgets) {\n      let iframe = document.createElement('iframe');\n      iframe.src = elem.getAttribute('old-src');\n      iframe.style = 'height: 400px; border: none;';\n      elem.parentNode.replaceChild(iframe, elem);\n    }\n    header_nofix('footer', sub_sel, 'BPC > no archive-fix');\n  }\n  let article_sel = 'div#remaining-paid-content';\n  let url = window.location.href;\n  getArchive(url, article_sel + '[data-reduced=\"true\"]', {rm_attrib: 'data-reduced'}, article_sel);\n}\n\nelse if (matchDomain(nl_dpg_media_domains)) {\n  let banners = 'aside[data-temptation-position^=\"ARTICLE_\"], div[data-temptation-position^=\"PAGE_\"], div[class^=\"ad--\"], div[id^=\"article_paragraph_\"]';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain(nl_mediahuis_region_domains)) {\n  let video = document.querySelector('div.video, div[data-testid=\"article-video\"]');\n  func_post = function () {\n    let article = document.querySelector(article_sel);\n    if (article) {\n      if (video) {\n        let video_new = article.querySelector('div[id$=\"-streamone\"], div[id^=\"video-player-\"], div[id^=\"player_\"]');\n        if (video_new && video_new.parentNode)\n          video_new.parentNode.replaceChild(video, video_new);\n        else {\n          let header = article.querySelector('h1');\n          let br = document.createElement('br');\n          if (header)\n            header.after(br, video, br);\n        }\n      }\n      if (mobile) {\n        let div_next = document.querySelector('div[id=\"__next\"]');\n        if (div_next)\n          article.style.width = div_next.offsetWidth - 20 + 'px';\n        let lazy_images = article.querySelectorAll('figure img[loading=\"lazy\"][style]');\n        for (let elem of lazy_images)\n          elem.style = 'width: 95%;';\n        let figures = article.querySelectorAll('figure div');\n        for (let elem of figures) {\n          elem.removeAttribute('style');\n          let svg = elem.querySelector('svg');\n          removeDOMElement(svg);\n        }\n      }\n      if (article.innerText.length < 1000) {\n        let header = article.querySelector('hgroup');\n        if (header)\n          header.before(googleSearchToolLink(url));\n      }\n    }\n  }\n  let paywall_sel = cs_param.paywall_sel || 'head > meta[name$=\"article_ispaidcontent\"][content=\"true\"]';\n  let article_sel = cs_param.article_sel || 'main > article';\n  let url = window.location.href;\n  getArchive(url, paywall_sel, '', article_sel);\n  window.setTimeout(function () {\n    let noscroll = document.querySelector('body[class*=\"style_disable-scroll-popup\"]');\n    if (noscroll)\n      noscroll.style = 'position: static !important; overflow: visible !important';\n  }, 500);\n  let banners = 'div[class*=\"style_popover\"]';;\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('nrc.nl')) {\n  let banners = document.querySelectorAll('div[id$=\"modal__overlay\"], div.header__subscribe-bar, div.banner');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain('telegraaf.nl')) {\n  let premium = document.querySelector('div[class^=\"Article__premium\"] > label, div.PopupWrapper__paywall');\n  let paywall = document.querySelector('data-hydrate[data-name=\"PaywallHandler\"]');\n  let article = document.querySelector('section > div.DetailArticleImage') || document.querySelector('section > p.Article__intro');\n  if (paywall && window.location.pathname.startsWith('/video/'))\n    removeDOMElement(paywall);\n  if (premium && paywall && article && dompurify_loaded) {\n    let div_main = document.createElement('div');\n    div_main.style = 'margin: 20px 0px;';\n    let div_elem = document.createElement('div');\n    let par_style = 'font-weight: normal; font-size: 16px; line-height: 1.5;';\n    function show_text(window_text, div_main) {\n      window_text = window_text.split('window.telegraaf.')[0].replace(/(^\\s?=\\s?\"|\";$|\\\\\")/gm, '').replace(/\\\\\\\\u003c/gm, '<');\n      let parser = new DOMParser();\n      let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(window_text, dompurify_options) + '</div>', 'text/html');\n      let article_new = doc.querySelector('div');\n      let pars = article_new.querySelectorAll('p');\n      for (let par of pars)\n        par.style = 'margin: 10px 0px;';\n      let placeholders = article_new.querySelectorAll('div.TeaserImage__placeholder');\n      for (let elem of placeholders)\n        elem.removeAttribute('class');\n      let media = article_new.querySelectorAll('div.NewsletterForm, div.DetailArticleVideo');\n      removeDOMElement(...media);\n      let twitter_quotes = article_new.querySelectorAll('blockquote.twitter-tweet > a[href]');\n      for (let elem of twitter_quotes) {\n        if (!elem.innerText) {\n          elem.innerText = elem.href;\n          elem.target = '_blank';\n        }\n      }\n      if (mobile) {\n        let art_images = article_new.querySelectorAll('div.DetailArticleImage > div > img');\n        for (let elem of art_images)\n          elem.style.width = '95%';\n      }\n      let error_iframes = article_new.querySelectorAll('iframe[allow*=\"fullscreen\"][allowfullscreen]');\n      for (let iframe of error_iframes)\n        iframe.removeAttribute('allowfullscreen');\n      div_main.appendChild(article_new);\n    }\n    let window_script = document.querySelector('script#scr-tlg-body');\n    if (window_script && window_script.text.includes('window.telegraaf.articleBodyBlocks')) {\n      removeDOMElement(paywall);\n      let window_text = window_script.text.split('window.telegraaf.articleBodyBlocks')[1];\n      if (window_text)\n        show_text(window_text, div_main);\n    } else {\n      removeDOMElement(paywall);\n      let url = window.location.href.split(/[#\\?]/)[0];\n      fetch(url)\n      .then(response => {\n        if (response.ok) {\n          response.text().then(html => {\n            if (html.includes('window.telegraaf.articleBodyBlocks')) {\n              let window_text = html.split('window.telegraaf.articleBodyBlocks')[1].split('</script>')[0];\n              if (window_text)\n                show_text(window_text, div_main);\n            }\n          })\n        }\n      })\n    }\n    article.after(div_main);\n  }\n  let ads = 'div.WebpushOptin, div[data-ad-position]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('tijd.be')) {\n  if (matchDomain('belegger.tijd.be')) {\n    let noscroll = document.querySelector('body.js-overflow-hidden');\n    if (noscroll)\n      noscroll.classList.remove('js-overflow-hidden');\n    let inert = document.querySelectorAll('[inert]');\n    for (let elem of inert)\n      elem.removeAttribute('inert');\n    let banners = document.querySelectorAll('div[class^=\"paywall-banner__\"]');\n    removeDOMElement(...banners);\n  } else {\n    let paywall = document.querySelector('html.paywall-active');\n    if (paywall) {\n      paywall.classList.remove('paywall-active');\n      let popup = document.querySelector('div[data-id=\"react-paywall-auth0\"]');\n      removeDOMElement(popup);\n    }\n    let overlay = document.querySelector('body[style]');\n    if (overlay)\n      overlay.removeAttribute('style');\n  }\n}\n\nelse if (matchDomain('vn.nl')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelectorAll('section[class^=\"c-paywall\"]');\n    if (paywall.length && dompurify_loaded) {\n      removeDOMElement(...paywall);\n      let article = document.querySelector('div.c-article-content__container');\n      if (article) {\n        let json_script = document.querySelector('script#__NEXT_DATA__');\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            if (json && json.props.pageProps.article && json.props.pageProps.article.content) {\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json.props.pageProps.article.content, dompurify_options) + '</div>', 'text/html');\n              let content_new = doc.querySelector('div');\n              article.innerHTML = '';\n              article.appendChild(content_new);\n            } else\n              refreshCurrentTab();\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n    let noscroll = document.querySelector('html[class]');\n    if (noscroll)\n      noscroll.removeAttribute('class');\n  }, 1000);\n}\n\nelse if (document.querySelector('head > link[href=\"//ppt.promedia.nl\"]') || document.querySelector('head > script[src*=\"/pmgnews/scripts/promedia.js\"]')) {\n  let paywall = document.querySelector('div.pmgsub');\n  if (paywall) {\n    if (paywall.className.includes('pmgsub-nag-2')) {\n      let article = document.querySelector('div.post-body, div.text');\n      if (article) {\n        let url = window.location.href;\n        article.firstChild.before(archiveLink(url));\n      }\n    }\n    removeDOMElement(paywall);\n  }\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.match(/\\.pl$/) || matchDomain(['parkiet.com', 'wyborcza.biz'])) {//poland\n\nif (matchDomain('pb.pl')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.classList.remove('paywall');\n    let article_hidden = paywall.querySelector('section.o-article-content');\n    if (article_hidden)\n      article_hidden.removeAttribute('class');\n    let loader = document.querySelector('div.o-piano-template-loader-box');\n    removeDOMElement(loader);\n  }\n}\n\nelse if (matchDomain(pl_ringier_domains)) {\n  if (matchDomain('businessinsider.com.pl')) {\n    let paywall = document.querySelector('div#content-premium-offer');\n    removeDOMElement(paywall);\n  }\n  let premium = document.querySelector('div.contentPremium[style]');\n  if (premium) {\n    premium.removeAttribute('class');\n    premium.removeAttribute('style');\n  }\n  let ads = 'div.adPlaceholder , div[class^=\"Ad\"][class*=\"Placeholder_\"], div[data-placeholder-caption], div[data-run-module$=\".floatingAd\"], aside[data-ad-container], aside.adsContainer, [class^=\"pwAds\"], .hide-for-paying, div.onet-ad, div.bottomBar, ad-default';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('polityka.pl')) {\n  let paywall = document.querySelector('div.cg-article-salebox');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let elem_hidden = document.querySelectorAll('div.cg_article_meat > [style]');\n    for (let elem of elem_hidden)\n      elem.removeAttribute('style');\n    let fade = document.querySelector('article.article_status-cut');\n    if (fade)\n      fade.classList.remove('article_status-cut');\n  }\n}\n\nelse if (matchDomain(['rp.pl', 'parkiet.com'])) {\n  let paywall = document.querySelector('div.paywallComp');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.article--content');\n    if (article) {\n      let url = window.location.href;\n      article.firstChild.before(googleSearchToolLink(url));\n    }\n  }\n}\n\nelse if (matchDomain(['wyborcza.biz', 'wyborcza.pl', 'wysokieobcasy.pl', 'magazyn-kuchnia.pl'])) {\n  func_post = function () {\n    let empty_spans = document.querySelectorAll('figure > a > span:empty');\n    removeDOMElement(...empty_spans);\n    let paywall = document.querySelector('span[style*=\"linear-gradient\"]');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('div.mrf-article-body');\n      if (article)\n        article.before(googleSearchToolLink(url));\n    }\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.article--content-fadeout', {rm_attrib: 'class'}, 'div.container[class*=\"pt\"]', '', 'div.body > div:not([style*=\"background-color:\"]):not([old-position]):not([name])');\n  let ads = 'div[id^=\"adUnit\"], div[id^=\"ads-\"]';\n  hideDOMStyle(ads);\n}\n\nelse\n  csDone = true;\n\n} else if ((window.location.hostname.match(/\\.(ie|uk)$/) && !matchDomain(['vogue.co.uk'])) || matchDomain(['apollo-magazine.com', 'autosport.com', 'decanter.com', 'fnlondon.com', 'ft.com', 'gbnews.com', 'granta.com', 'motorsportmagazine.com', 'newstatesman.com', 'scotsman.com', 'tes.com', 'thelawyer.com', 'thetimes.com', 'unherd.com'])) {//united kingdom/ireland\n\nif (matchDomain('apollo-magazine.com')) {\n  let banner = document.querySelector('#subscribe-ribbon');\n  removeDOMElement(banner);\n}\n\nelse if (matchDomain('autocar.co.uk')) {\n  let paywall = document.querySelector('div.ms-block, div.register-block');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let article = document.querySelector('div.block-node');\n        if (json_text && article) {\n          article.innerHTML = '';\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          let fade = document.querySelector('div.article-section > div[style*=\"max-height\"]');\n          removeDOMElement(fade);\n          let url = window.location.href;\n          article.append(article_new, 'Text-only > for missing media/links: ', googleSearchToolLink(url));\n        }\n      }\n    }\n  }\n  let ads = 'div[class*=\"-ads-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('autosport.com')) {\n  header_nofix('div.ms-article-content > p', 'div.ms-piano_article-banner');\n}\n\nelse if (matchDomain(['belfasttelegraph.co.uk', 'independent.ie'])) {\n  let paywall = document.querySelector('div[class*=\"_fadetowhite\"]');\n  if (paywall && dompurify_loaded) {\n    let content = document.querySelector('script[data-fragment-type=\"ArticleContent\"]');\n    if (content) {\n      removeDOMElement(paywall);\n      let flip_pay = 'div#flip-pay';\n      hideDOMStyle(flip_pay, 5);\n      let intro = document.querySelector('div > div[data-auth-intro=\"article\"]');\n      if (intro) {\n        let intro_par = intro.querySelector('p[class]');\n        let intro_par_class;\n        if (intro_par)\n          intro_par_class = intro_par.getAttribute('class');\n        let content_text = content.innerText;\n        if (content_text.includes('__PRELOADED_STATE_GRAPH')) {\n          content_text = content_text.replace(/window\\[\"__PRELOADED_STATE_GRAPH__.+\"\\]\\s=\\s/, '');\n          try {\n            let json = JSON.parse(content_text);\n            if (Object.keys(json).length) {\n              let key = Object.keys(json)[0];\n              let pars = json[key].data.article.body;\n              let parser = new DOMParser();\n              for (let par of pars) {\n                for (let type in par) {\n                  let item = par[type];\n                  let elem = document.createElement('p');\n                  elem.setAttribute('style', \"margin: 10px;\");\n                  if (type === 'bullet_list') {\n                    let ul = document.createElement('ul');\n                    for (let sub_item of item) {\n                      let li = document.createElement('li');\n                      li.innerText = parseHtmlEntities(sub_item.replace(/<[^<]*>/g, ''));\n                      ul.appendChild(li);\n                    }\n                    elem.appendChild(ul);\n                  } else if (type === 'image') {\n                    let url = item.url;\n                    if (item.cropped && item.cropped.url)\n                      url = item.cropped.url;\n                    let figure = makeFigure(url, item.caption);\n                    elem.appendChild(figure);\n                  } else if (type === 'related') {\n                    if (item.articles) {\n                      let articles = item.articles;\n                      for (let article of articles) {\n                        let elem_link = document.createElement('a');\n                        elem_link.href = article.webcmsRelativeUrl;\n                        elem_link.innerText = article.title;\n                        elem_link.style = 'text-decoration: underline;';\n                        elem.append(elem_link, document.createElement('br'));\n                      }\n                    }\n                  } else if (!['ad', 'quote', 'streamone'].includes(type)) {\n                    let html = parser.parseFromString('<p class=\"' + intro_par_class + '\">' + DOMPurify.sanitize(item, dompurify_options) + '</p>', 'text/html');\n                    elem = html.querySelector('p');\n                    let error_iframes = elem.querySelectorAll('iframe[allow*=\"fullscreen\"][allowfullscreen]');\n                    for (let iframe of error_iframes)\n                      iframe.removeAttribute('allowfullscreen');\n                    if (!['p', 'subhead', 'legacy-ml'].includes(type)) {\n                      console.log(type);\n                      console.log(item);\n                    }\n                  }\n                  window.setTimeout(function () {\n                    if (elem)\n                      intro.parentNode.appendChild(elem);\n                  }, 500);\n                }\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('businesspost.ie')) {\n  func_post = function () {\n    if (mobile) {\n      document.querySelectorAll('img[loading=\"lazy\"][style]').forEach(e => e.style = 'width: 95%;');\n    }\n  }\n  let url = window.location.href;\n  getArchive(url, 'div#bp_piano_article_subscription_offer', '', 'div[itemprop=\"articleBody\"]');\n  let ads = 'div[id^=\"Inline-MPU-article-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('decanter.com')) {\n  let paywall = document.querySelector('div[id^=\"react_subscriber_content_\"]');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let data = document.querySelector('div[data-dom-id^=\"react_subscriber_content_\"][data-props]');\n    if (data) {\n      try {\n        let json = JSON.parse(data.getAttribute('data-props'));\n        if (json && json.content) {\n          let content = decode_utf8(atob(json.content));\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(content, dompurify_options) + '</div>', 'text/html');\n          let content_new = doc.querySelector('div');\n          data.before(content_new);\n          header_nofix('div.collection-wrapper', '', 'BPC > no fix for reviews');\n          let fade = 'div.piano-container-fade';\n          hideDOMStyle(fade);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('fnlondon.com')) {\n  let signin_links = 'div.fn-snippet-login-container';\n  hideDOMStyle(signin_links);\n  let unfade = 'section[class^=\"css-\"] {position: static !important;}';\n  addStyle(unfade);\n  csDoneOnce = true;\n}\n\nelse if (matchDomain('ft.com')) {\n  func_post = function () {\n    let lazy_images = document.querySelectorAll('figure > picture > img[loading=\"lazy\"][src^=\"data:image/gif\"][new-cursrc]');\n    for (let elem of lazy_images) {\n      elem.removeAttribute('loading');\n      elem.style = 'width: 100%;';\n      let figure = elem.parentNode.parentNode;\n      if (figure.parentNode && figure.parentNode.nodeName === 'DIV')\n        figure.parentNode.removeAttribute('style');\n      elem.src = elem.getAttribute('new-cursrc');\n    }\n    if (mobile) {\n      let grids = document.querySelectorAll('div[style*=\"grid-template-areas\"], article#site-content');\n      for (let elem of grids)\n        elem.style = 'margin: 10px;';\n    }\n  }\n  let url = window.location.href;\n  getArchive(url, 'div#barrier-page', '', 'div.n-layout__row--content', '', 'div[style*=\"article-body\"]', 'body');\n  let banners = '.o-cookie-message, .js-article-ribbon, .o-ads, .o-banner';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('gbnews.com')) {\n  let ads = 'div.ad--billboard, div.ad--placeholder, div.video-inbody';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('granta.com')) {\n  getJsonUrl('div.article-sign-up-container', '', 'div.article-excerpt');\n}\n\nelse if (matchDomain('investorschronicle.co.uk')) {\n  let paywall = document.querySelector('div#hard-barrier');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let url = window.location.href;\n    let article = document.querySelector('div.summary');\n    if (article)\n      article.before(googleSearchToolLink(url));\n  }\n  let ads = 'div[id$=\"ad-wrapper\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('literaryreview.co.uk')) {\n  getJsonUrl('p.subscribe-for-more', '', 'div#_articlereview');\n}\n\nelse if (matchDomain('motorsportmagazine.com')) {\n  getJsonUrl('aside.paywall', '', 'div[data-behaviour=\"post-content\"]');\n  let banner = document.querySelector('div[data-behaviour=\"react-paywall-threshold\"]');\n  removeDOMElement(banner);\n  let ads = 'aside.ad-space';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('newstatesman.com')) {\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('spectator.co.uk')) {\n  let paywall_sel = 'section.paywall, div.paywall-magazine';\n  let entry_content = document.querySelector('div.entry-content');\n  if (entry_content)\n    getJsonUrl(paywall_sel, '', 'div.entry-content', {art_append: 1});\n  else\n    getJsonUrl(paywall_sel, '', 'div.entry-content__wrapper', {art_append:1, art_hold:1, art_class: 'entry-content'});\n  let ads = '#subscribe-ribbon, div.ad-slot, div[style*=\"background-image: linear-gradient\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('stylist.co.uk')) {\n  let paywall = document.querySelector('div[data-testid=\"paywall-component\"]');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json.props.pageProps.data.post.acf.widgets) {\n          let url_next = json.props.pageProps.data.post.id;\n          if (url_next && !window.location.pathname.endsWith(url_next))\n            refreshCurrentTab();\n          let pars = json.props.pageProps.data.post.acf.widgets;\n          let first_par = document.querySelector('main div[data-column=\"true\"] > p');\n          if (first_par) {\n            let article = first_par.parentNode;\n            let teaser = article.querySelectorAll('div > p:not([class])');\n            removeDOMElement(...teaser);\n            if (article) {\n              let parser = new DOMParser();\n              for (let par of pars) {\n                let elem = document.createElement('p');\n                if (par.paragraph) {\n                  let content = par.paragraph;\n                  let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(content) + '</div>', 'text/html');\n                  elem = content_new.querySelector('div');\n                } else if (par.acf_fc_layout === 'heading') {\n                  if (par.text)\n                    elem.appendChild(document.createTextNode(par.text));\n                } else if (['image', 'interactive_image'].includes(par.acf_fc_layout)) {\n                  let image_array = [];\n                  if (par.image)\n                    image_array = [par.image];\n                  else if (par.image_collection)\n                    image_array = par.image_collection;\n                  for (let img_elem of image_array) {\n                    let figure = makeFigure(img_elem.url, img_elem.caption ? (img_elem.caption + ' ' + img_elem.description) : img_elem.alt, {alt: img_elem.alt, style: 'width: 95%;'});\n                    elem.appendChild(figure);\n                  }\n                } else if (par.acf_fc_layout === 'listicle') {\n                  let ul = document.createElement('ul');\n                  for (let sub_item of par.item) {\n                    let li = document.createElement('li');\n                    if (sub_item.url) {\n                      let par_link = document.createElement('a');\n                      par_link.href = sub_item.url;\n                      par_link.innerText = sub_item.title;\n                      par_link.target = '_blank';\n                      li.appendChild(par_link);\n                    } else\n                      li.innerText = sub_item.title;\n                    if (sub_item.paragraph) {\n                      let content = sub_item.paragraph;\n                      let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(content) + '</div>', 'text/html');\n                      let par_elem = content_new.querySelector('div');\n                      li.appendChild(par_elem);\n                    }\n                    if (sub_item.image) {\n                      let img = document.createElement('img');\n                      img.src = sub_item.image.url;\n                      img.alt = sub_item.image.alt;\n                      img.style = 'width: 95%;';\n                      li.appendChild(img);\n                      li.appendChild(document.createElement('br'));\n                    }\n                    li.style = 'font-size: 20px; margin: 20px 0px;';\n                    ul.appendChild(li);\n                  }\n                  elem.appendChild(ul);\n                } else if (par.embed_link) {\n                  let par_link = document.createElement('a');\n                  par_link.href = par.embed_link;\n                  par_link.innerText = 'Embedded link: ' + par.embed_link;\n                  par_link.target = '_blank';\n                  elem.appendChild(par_link);\n                } else if (par.acf_fc_layout === 'divider') {\n                  elem.appendChild(document.createElement('hr'));\n                } else if (par.acf_fc_layout === 'related_articles') {\n                  if (par.posts) {\n                    for (let post of par.posts) {\n                      if (post.link && post.title.rendered) {\n                        let par_link = document.createElement('a');\n                        par_link.href = post.link;\n                        par_link.innerText = 'You may also like: ' + post.title.rendered;\n                        elem.appendChild(par_link);\n                        elem.appendChild(document.createElement('br'));\n                      }\n                    }\n                  }\n                } else if (!['newsletter_signup', 'pull-quote'].includes(par.acf_fc_layout))\n                  console.log(par);\n                if (elem.hasChildNodes()) {\n                  elem.style = 'font-family: \"Source Serif Pro\"; font-size: 20px; line-height: 34px;';\n                  article.appendChild(elem);\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('telegraph.co.uk')) {\n  let subwall = '[class^=\"subwall\"]';\n  let ads = '.advert, .commercial-unit';\n  hideDOMStyle(subwall + ', ' + ads);\n}\n\nelse if (matchDomain('tes.com')) {\n  let paywall = document.querySelector('div.tg-paywall-message');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let overlay = document.querySelector('div.tg-paywall-body-overlay');\n    if (overlay)\n      overlay.removeAttribute('class');\n  }\n  let banner = document.querySelector('div.js-paywall-info');\n  removeDOMElement(banner);\n}\n\nelse if (matchDomain('the-tls.co.uk')) {\n  getJsonUrl('div.tls-single-article__closed-paywall', '', 'div.tls-article-body', {art_class: 'tls-article-body'});\n  let fade = 'div.tls-single-article__closed-paywall-wrapper';\n  let ads = 'div[class*=\"tls-single-article__ad-slot\"]';\n  hideDOMStyle(fade + ', ' + ads);\n}\n\nelse if (matchDomain('thelawyer.com')) {\n  if (window.location.pathname.startsWith('/mda/')) {\n    header_nofix('div.sf-content__post', 'div.sf-login-form', 'BPC > no fix');\n  } else if (dompurify_loaded) {\n    let body = document.querySelector('body[class*=\"postid-\"]');\n    if (body) {\n      let article_id = body.className.split('postid-')[1].split(' ')[0];\n      if (article_id) {\n        func_post = function () {\n          let lazy_images = document.querySelectorAll('img.lazy[data-src]:not([src])');\n          for (let elem of lazy_images) {\n            elem.src = elem.getAttribute('data-src');\n            elem.removeAttribute('class');\n          }\n        }\n        getJsonUrl('div.sf-login-form', '', 'div.sf-content-body__text', {art_append: 1}, article_id, '', false, true);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('theneweuropean.co.uk')) {\n  let paywall = document.querySelector('div[data-show-fade-on-noaccess]');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let content = document.querySelector('div[data-show-has-access]');\n    if (content)\n      content.removeAttribute('data-show-has-access');\n  }\n  let banners = document.querySelectorAll('div[data-show-subs-blocked]');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain('thestage.co.uk')) {\n  func_post = function () {\n    let paywall = document.querySelector(paywall_sel);\n    if (paywall) {\n      removeDOMElement(paywall);\n      let article = document.querySelector(article_sel);\n      if (article)\n        article.before(googleSearchToolLink(url));\n    }\n  }\n  let paywall_sel = 'div#ao-MeteringDNAllow';\n  let article_sel = 'div[id^=\"aos-FeatureArticle2Col-\"], div[id^=\"aos-ReviewArticle-\"]';\n  let url = window.location.href;\n  getArchive(url, paywall_sel, '', article_sel);\n}\n\nelse if (matchDomain(['thesun.co.uk', 'thescottishsun.co.uk'])) {\n  let ads = 'div.billboard, div.advert-wrapper';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('thetimes.com')) {\n  if (!matchDomain('epaper.thetimes.com')) {\n    func_post = function () {\n      let article = document.querySelector(article_sel);\n      if (article) {\n        if (mobile) {\n          let inline_images = article.querySelectorAll('img[style]');\n          for (let elem of inline_images) {\n            elem.style = 'display: block; margin-left: auto; margin-right: auto; width: 90%;';\n            let parent_node = elem.parentNode;\n            if (parent_node.tagName === 'PICTURE')\n              parent_node = parent_node.parentNode;\n            parent_node.removeAttribute('style');\n          }\n          article.querySelectorAll('div[style*=\";width:\"]').forEach(e => e.style.width = '90%');\n        }\n        let embed_iframes = article.querySelectorAll('div > times-embed-iframe-max[src]');\n        for (let elem of embed_iframes) {\n          let iframe_link = document.createElement('a');\n          iframe_link.href = iframe_link.innerText = elem.getAttribute('src');\n          iframe_link.target = '_blank';\n          let container = elem.parentNode;\n          container.parentNode.replaceChild(iframe_link, container);\n        }\n      }\n    }\n    let article_sel = cs_param.article_sel || 'article:not([id]) > div';\n    if (!window.location.search.startsWith('?shareToken=')) {\n      let teaser = document.querySelector('body[data-view-name=\"teaser-article\"]');\n      if (teaser) {\n        let url = window.location.href;\n        getArchive(url, 'div#paywall-portal-article-footer', '', article_sel);\n        let scroll_style = 'html, body {overflow: auto !important;}';\n        addStyle(scroll_style);\n      }\n    }\n    let banners = 'div#paywall-portal-page-footer, .subscription-block';\n    let ads = 'div.channel-header-ad, div[id^=\"advert-\"], div[class*=\"InlineAdWrapper\"], div:has(> div > div#ad-header)';\n    hideDOMStyle(banners + ', ' + ads);\n  }\n}\n\nelse if (matchDomain('unherd.com')) {\n  let preview = document.querySelector('div#premiumpreview');\n  if (preview) {\n    removeDOMElement(preview);\n    let premium = document.querySelector('div#premiumcontent');\n    if (premium)\n      premium.removeAttribute('id');\n  }\n}\n\nelse if (matchDomain(uk_dmg_media_domains)) {\n  let paywall = document.querySelector('body.is-paywalled-article');\n  if (paywall)\n    paywall.classList.remove('is-paywalled-article');\n  let ads = 'ad-slot, div.billboard-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(uk_nat_world_domains) || document.querySelector('footer > div a[href^=\"https://www.nationalworldplc.com\"]')) {\n  let premium = document.querySelector('div.premium.no-entitlement');\n  if (premium)\n    premium.classList.remove('premium', 'no-entitlement');\n  let ads = 'div[class^=\"MarkupAds__Container-\"], div[class*=\"_AdContainer-\"], div[class^=\"Dailymotion__Wrapper-\"], div.banner, div#mantis-carousel-wrapper:has( > mantis-ui-widget:empty)';\n  hideDOMStyle(ads);\n}\n\nelse\n  csDone = true;\n\n} else if (window.location.hostname.match(/\\.(ar|br|cl|mx|pe|uy)$/) || matchDomain(['abcmais.com', 'cambiocolombia.com', 'clarin.com', 'cronista.com', 'elespectador.com', 'elmercurio.com', 'eltiempo.com', 'eltribuno.com', 'eluniverso.com', 'exame.com', 'globo.com', 'latercera.com', 'revistaoeste.com'])) {//south america\n\nif (matchDomain('abcmais.com')) {\n  if (!window.location.pathname.endsWith('/amp/')) {\n    getJsonUrl('section#section-iframe-assinante', '', 'div.degressing-opacity');\n  } else {\n    let paywall = document.querySelector('div.b-vindo');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let template = document.querySelector('template');\n      if (template) {\n        let article = document.querySelector('section > div.resumo');\n        if (article) {\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(template.innerHTML, dompurify_options) + '</div>', 'text/html');\n          let article_new = doc.querySelector('div');\n          article.parentNode.replaceChild(article_new, article);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('abril.com.br')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    let paywall = document.querySelector('.piano-modal');\n    removeDOMElement(paywall);\n  } else {\n    let ads = 'div.ads, div[class^=\"ads-\"], div.MGID';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain(ar_grupo_clarin_domains)) {\n  let ads = 'div.ad-slot, div.box-adv, div.wrapperblock, div.banner, div[id^=\"div-gpt-ad-flotante\"]';\n  hideDOMStyle(ads);\n  let ads_inline = document.querySelectorAll('div > div.sticky, div > div.SRA, div > div[id^=\"div-gpt-ad-inread\"], div > div[id^=\"div-gpt-ad-caja\"], div > div[id^=\"div-gpt-ad-horizontal\"]');\n  for (let ad of ads_inline)\n    hideDOMElement(ad.parentNode);\n}\n\nelse if (matchDomain('cambiocolombia.com')) {\n  let author = document.querySelector('head > meta[name=\"author\"]');\n  if (author && !document.querySelector('article section'))\n    refreshCurrentTab();\n  let ads = 'div[role=\"banner\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('cartacapital.com.br')) {\n  if (!window.location.pathname.endsWith('/amp/')) {\n    let paywall = document.querySelector('aside.paywall');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let json_script = getArticleJsonScript();\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.text);\n          if (json) {\n            let json_text = json[1].articleBody.replace(/\\s{2,}/g, '\\r\\n\\r\\n');\n            let content = document.querySelector('section.s-content__text');\n            if (json_text && content) {\n              content.innerHTML = '';\n              let article_new = document.createElement('p');\n              article_new.innerText = json_text;\n              content.appendChild(article_new);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    } else {\n      let content_soft = document.querySelector('div.contentSoft');\n      if (content_soft) {\n        content_soft.removeAttribute('class');\n        let freemium = document.querySelectorAll('div[class^=\"s-freemium\"], div.maggazine-add');\n        removeDOMElement(...freemium);\n      }\n    }\n    let ads = 'div.div_ros_topo';\n    hideDOMStyle(ads);\n  } else\n    ampToHtml();\n}\n\nelse if (matchDomain('cronista.com')) {\n  let ads = 'div#ad-slot-header, div.ad-slot-intext, div#selectMediaNota, div.b-suscription-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('crusoe.com.br')) {\n  getJsonUrl('section.paywall', '', 'div#content_post', {art_append: 1});\n  let ads = 'div#gpt-leaderboard, div.ads_desktop, div[class^=\"container-banner-\"], div.catchment-box';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('diplomatique.org.br')) {\n  getJsonUrl('div.entry-content div.module_row', '', 'div.entry-content');\n}\n\nelse if (matchDomain(pe_grupo_elcomercio_domains)) {\n  let paywall = document.querySelector('.paywall');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    paywall.removeAttribute('style');\n    let fade = document.querySelector('p.story-contents--fade');\n    if (fade)\n      fade.classList.remove('story-contents--fade');\n  }\n  let ads = 'div[class^=\"content_gpt\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('elespectador.com')) {\n  if (window.location.search.includes('outputType=amp')) {\n    amp_unhide_subscr_section('[class^=\"Widget\"], amp-fx-flying-carpet', false);\n    let googledoc_iframes = document.querySelectorAll('div > amp-iframe[src^=\"https://docs.google.com/viewer\"][class]');\n    for (let elem of googledoc_iframes) {\n      let a_link = document.createElement('a');\n      a_link.href = elem.getAttribute('src');\n      a_link.innerText = 'pdf-link';\n      a_link.target = '_blank';\n      elem.removeAttribute('class');\n      elem.parentNode.before(a_link);\n    }\n  } else {\n    amp_redirect('div.exclusive_validation');\n  }\n}\n\nelse if (matchDomain('elmercurio.com')) {\n  if (window.location.hostname.startsWith('digital.')) {\n    window.setTimeout(function () {\n      let elem_hidden = document.querySelectorAll('[style=\"visibility:hidden\"]');\n      for (let elem of elem_hidden)\n        elem.removeAttribute('style');\n      let page_pdf_content = document.querySelector('div.page_pdf_content');\n      let close_html = document.querySelector('div.close_html');\n      let cont_page_full = document.querySelector('div.cont_page_full');\n      removeDOMElement(page_pdf_content, close_html, cont_page_full);\n    }, 1000);\n    window.setTimeout(function () {\n      let cont_articlelight = document.querySelector('div.cont_articlelight');\n      if (cont_articlelight)\n        cont_articlelight.setAttribute('style', 'height: 100% !important; width: 90% !important');\n    }, 3000);\n    if (window.location.pathname.startsWith('/mobile')) {\n      let lessreadmore = document.querySelectorAll('article.lessreadmore');\n      for (let article of lessreadmore)\n        article.classList.remove('lessreadmore');\n      let bt_readmore = document.querySelectorAll('div[id*=\"bt_readmore_\"]');\n      removeDOMElement(...bt_readmore);\n    }\n  } else if (window.location.pathname.endsWith('/Registro/Login.aspx')) {\n    header_nofix('body');\n  }\n}\n\nelse if (matchDomain('elobservador.com.uy')) {\n  if (window.location.pathname.endsWith('/amp')) {\n    amp_unhide_access_hide('=\"observador.mostrarNota\"');\n    let amp_images = document.querySelectorAll('div.fixed-container > amp-img.null');\n    for (let amp_image of amp_images) {\n      let elem = document.createElement('img');\n      Object.assign(elem, {\n        src: amp_image.getAttribute('src'),\n        alt: amp_image.getAttribute('alt'),\n        title: amp_image.getAttribute('title')\n      });\n      amp_image.parentNode.replaceChild(elem, amp_image);\n    }\n  } else {\n    amp_redirect('div.mensaje_member', '', window.location.pathname + '/amp');\n  }\n}\n\nelse if (matchDomain('eltiempo.com')) {\n  let modulos = document.querySelector('div.modulos');\n  if (modulos)\n    modulos.classList.remove('modulos');\n  let ads = '[class^=\"c-add\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('eltribuno.com')) {\n  let lazy_images = document.querySelectorAll('img.lazyload[data-src]:not([src])');\n  for (let elem of lazy_images) {\n    elem.src = elem.getAttribute('data-src');\n    elem.classList.remove('lazyload');\n  }\n}\n\nelse if (matchDomain('eluniversal.com.mx')) {\n  let ads = 'div.dfp-tag-wrapper-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('eluniverso.com')) {\n  let paywall = document.querySelectorAll('head > meta[name][content=\"premium\"]');\n  let article = document.querySelector('section.article-body');\n  if (paywall.length && article && dompurify_loaded) {\n    removeDOMElement(...paywall);\n    let fusion_script = document.querySelector('script#fusion-metadata');\n    if (fusion_script && fusion_script.text.includes('Fusion.globalContent=')) {\n      try {\n        let json = JSON.parse(fusion_script.text.split('Fusion.globalContent=')[1].split(';Fusion.')[0]);\n        if (json) {\n          article.innerHTML = '';\n          let parser = new DOMParser();\n          let pars = json.content_elements;\n          for (let par of pars) {\n            let par_new;\n            if (['header', 'text'].includes(par.type)) {\n              if (par.content) {\n                let doc = parser.parseFromString('<p class=\"prose-text\">' + DOMPurify.sanitize(par.content) + '</p>', 'text/html');\n                par_new = doc.querySelector('p');\n              }\n            } else if (par.type === 'interstitial_link') {\n              if (par.url && par.content) {\n                par_new = document.createElement('p');\n                int_link = document.createElement('a');\n                int_link.href = par.url;\n                int_link.innerText = par.content;\n                par_new.appendChild(int_link);\n              }\n            } else if (par.type === 'image') {\n              if (par.url) {\n                let caption_text = par.caption;\n                if (par.credits && par.credits.by && par.credits.by[0] && par.credits.by[0].name)\n                  caption_text += ' - ' + par.credits.by[0].name;\n                par_new = makeFigure(par.url, caption_text);\n              }\n            } else if (par.type === 'raw_html') {\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.content, dompurify_options) + '</div>', 'text/html');\n              par_new = doc.querySelector('div');\n            } else if (par.raw_oembed) {\n              if (par.raw_oembed.html) {\n                let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.raw_oembed.html, dompurify_options) + '</div>', 'text/html');\n                par_new = doc.querySelector('div');\n              }\n            } else if (par.type === 'list') {\n              if (par.items) {\n                par_new = document.createElement('ul');\n                for (let item of par.items) {\n                  let li = document.createElement('li');\n                  let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item.content) + '</span>', 'text/html');\n                  let span = doc.querySelector('span');\n                  li.appendChild(span);\n                  par_new.appendChild(li);\n                }\n              }\n            } else if (par.type === 'table') {\n              if (par.header && par.rows) {\n                par_new = document.createElement('table');\n                let h_row = document.createElement('tr');\n                for (let item of par.header) {\n                  let th = document.createElement('th');\n                  let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item.content) + '</span>', 'text/html');\n                  let span = doc.querySelector('span');\n                  th.appendChild(span);\n                  h_row.appendChild(th);\n                }\n                par_new.appendChild(h_row);\n                for (let row of par.rows) {\n                  let tr = document.createElement('tr');\n                  for (let item of row) {\n                    let td = document.createElement('td');\n                    let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item.content) + '</span>', 'text/html');\n                    let span = doc.querySelector('span');\n                    td.appendChild(span);\n                    tr.appendChild(td);\n                  }\n                  par_new.appendChild(tr);\n                }\n              }\n            } else if (!['quote'].includes(par.type)) {\n              console.log(par);\n            }\n            if (par_new)\n              article.appendChild(par_new);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    let banner = pageContains('div > span', /Contenido exclusivo para suscriptores/);\n    if (banner.length)\n      removeDOMElement(banner[0].parentNode);\n  }\n  let ads = 'div[id^=\"ad-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('em.com.br')) {\n  if (!window.location.pathname.endsWith('/amp.html')) {\n    amp_redirect('.news-blocked-content');\n    let ads = 'div.ads, div.containerads';\n    hideDOMStyle(ads);\n  } else {\n    amp_unhide_subscr_section('amp-fx-flying-carpet');\n    let compress_text = document.querySelector('div.compress-text');\n    if (compress_text)\n      compress_text.classList.remove('compress-text');\n  }\n}\n\nelse if (matchDomain('estadao.com.br')) {\n  if (window.location.pathname.match(/(\\.amp$|^\\/amp\\/)/) || window.location.search.startsWith('?amp')) {\n    amp_unhide_access_hide('=\"outputValue=\\'hide_paywall\\'\"', '=\"outputValue=\\'show_paywall\\'\"', 'amp-fx-flying-carpet, div[class^=\"pAd\"], div.ads-container');\n  } else {\n    let paywall = document.getElementById('paywall-wrapper-iframe-estadao');\n    removeDOMElement(paywall);\n    let ads = 'div[class^=\"styles__Container-sc-\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('exame.com')) {\n  window.localStorage.removeItem('pywllcount');\n  let ads = 'div[id^=\"ads_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('uol.com.br')) {\n  if (matchDomain('folha.uol.com.br')) {\n    if (matchDomain('piaui.folha.uol.com.br')) {\n      header_nofix('div.paywall__content', 'div.revista--interna__assineonly');\n    } else if (window.location.pathname.startsWith('/amp/')) {\n      amp_unhide_subscr_section('amp-sticky-ad');\n    } else {\n      let signup = document.querySelector('.c-top-signup');\n      removeDOMElement(signup);\n    }\n  } else if (matchDomain('blogfolha.uol.com.br')) {\n    let hidden_images = document.querySelectorAll('div[id^=\"attachment_\"] > a > img[src^=\"http:\"][srcset]');\n    for (let hidden_image of hidden_images) {\n      hidden_image.src = hidden_image.src.replace('http:', 'https:');\n      hidden_image.srcset = '';\n    }\n  }\n  let ads = 'div[class*=\"advertising\"], div.jupiter-ads, div.up-floating, div[data-cp-id$=\"asfads\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('gauchazh.clicrbs.com.br')) {\n  window.setTimeout(function () {\n    let blink = document.querySelector('div:not(.hidden) > div:not([class]) > div.animate-pulse');\n    if (blink) {\n      csDoneOnce = true;\n      refreshCurrentTab();\n    }\n  }, 2000);\n  let ads = 'div.ad-banner';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('gazetadopovo.com.br')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    amp_unhide_subscr_section('div.ads-amp, div.tpl-wrapper', false);\n  } else {\n    let ads = 'div[class*=\"c-ads\"]';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('globo.com')) {\n  if (matchDomain('valor.globo.com')) {\n    if (!window.location.pathname.startsWith('/google/amp/')) {\n      amp_redirect('div.paywall');\n    } else {\n      amp_unhide_subscr_section();\n      amp_images_replace();\n    }\n  } else if (window.location.pathname.includes('/amp/'))\n    ampToHtml();\n  if (!window.location.pathname.includes('/amp/')) {\n    let ads = 'div[id^=\"ad-container\"], div.content-ads, div[class^=\"block__advertising\"], div#pub-in-text-wrapper, div.area_publicidade_container';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('ladiaria.com.uy')) {\n  if (window.location.search.startsWith('?display=amp')) {\n    csDoneOnce = true;\n    ampToHtml();\n  } else {\n    let banners = document.querySelectorAll('div.softwall, div.subscribe-notice');\n    removeDOMElement(...banners);\n  }\n}\n\nelse if (matchDomain('lagaceta.com.ar')) {\n  let ads = 'div.add';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('lanacion.com.ar')) {\n  let ads = 'div.ln-banner-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('latercera.com')) {\n  let ads = 'div.ads-block';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('nsctotal.com.br')) {\n  let ads = 'div.ad, div[id^=\"floater\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('revistaoeste.com')) {\n  if (window.location.pathname.startsWith('/revista/')) {\n    let loading_content = document.querySelector('div.loading_content');\n    if (loading_content)\n      loading_content.removeAttribute('class');\n    let spinner = document.querySelector('svg.spinner-eclipse');\n    removeDOMElement(spinner);\n    let lazy_images = document.querySelectorAll('img[src^=\"data:image/\"][data-src]');\n    for (let elem of lazy_images)\n      elem.src = elem.getAttribute('data-src');\n  } else {\n    let div_expandable = document.querySelector('div.expandable');\n    if (div_expandable)\n      div_expandable.classList.remove('expandable');\n    let ads = 'section.ad-wrapper, div.autozep-outer';\n    hideDOMStyle(ads);\n  }\n}\n\nelse\n  csDone = true;\n\n} else {//other (like com/org & not ar/at/au/be/br/cat/ch/cl/de/dk/fi/fr/es/ie/nl/pe/pt/se/uk/uy))\n\nif (matchDomain(usa_adv_local_domains)) {\n  if (!window.location.search.startsWith('?outputType=amp')) {\n    let paywall_sel = 'div.paywall';\n    let paywall = document.querySelector(paywall_sel);\n    let article = document.querySelector('div.entry-content');\n    if (paywall && article && dompurify_loaded) {\n      function fusionGetContent(fusion_text) {\n        try {\n          let json = JSON.parse(fusion_text.split('Fusion.globalContent=')[1].split(';Fusion.')[0]);\n          if (json) {\n            let section = article.querySelector('div[style=\"display: none;\"] > section');\n            article.innerHTML = '';\n            let parser = new DOMParser();\n            let pars = json.content_elements;\n            for (let par of pars) {\n              let par_new;\n              if (['header', 'text'].includes(par.type)) {\n                if (par.content) {\n                  let doc = parser.parseFromString('<p class=\"article__paragraph\">' + DOMPurify.sanitize(par.content) + '</p>', 'text/html');\n                  par_new = doc.querySelector('p');\n                }\n              } else if (par.image_type) {\n                if (par.url) {\n                  let caption_text = par.caption;\n                  if (par.credits && par.credits.by && par.credits.by[0] && par.credits.by[0].byline)\n                    caption_text += ' - ' + par.credits.by[0].byline;\n                  par_new = makeFigure(par.url, caption_text, {alt: par.alt_text}, {'class': 'article__image-caption'});\n                  par_new.className = 'article__image';\n                  par_new.style = 'width: 75%; margin-left: auto; margin-right: auto;';\n                }\n              } else if (par.type === 'custom_embed') {\n                if (par.subtype === 'custom-image' && par.embed && par.embed.config) {\n                  let config = par.embed.config;\n                  if (config.image_src) {\n                    let caption_text = config.image_caption;\n                    if (config.image_credit)\n                      caption_text += ' ' + config.image_credit;\n                    par_new = makeFigure(config.image_src, caption_text, {}, {'class': 'article__image-caption'});\n                    par_new.className = 'article__image';\n                  }\n                }\n              } else if (par.raw_oembed) {\n                if (par.raw_oembed.html) {\n                  let doc = parser.parseFromString('<p>' + DOMPurify.sanitize(par.raw_oembed.html, dompurify_options) + '</p>', 'text/html');\n                  par_new = doc.querySelector('p');\n                }\n              } else if (par.type === 'list') {\n                if (par.items) {\n                  par_new = document.createElement('ul');\n                  for (let item of par.items) {\n                    let li = document.createElement('li');\n                    let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item.content) + '</span>', 'text/html');\n                    let span = doc.querySelector('span');\n                    li.appendChild(span);\n                    par_new.appendChild(li);\n                  }\n                }\n              } else if (!['quote', 'raw_html'].includes(par.type)) {\n                console.log(par);\n              }\n              if (par_new)\n                article.appendChild(par_new);\n            }\n            if (section) {\n              section.parentNode.removeAttribute('style');\n              article.appendChild(section);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n      let fusion_script = document.querySelector('script#fusion-metadata');\n      if (fusion_script) {\n        paywall.classList.remove('paywall');\n        if (fusion_script.text.includes('Fusion.globalContent=')) {\n          fusionGetContent(fusion_script.text);\n        } else {\n          let url = window.location.href.split(/[#\\?]/)[0];\n          fetch(url)\n          .then(response => {\n            if (response.ok) {\n              response.text().then(html => {\n                if (html.includes('Fusion.globalContent='))\n                  fusionGetContent(html);\n              });\n            }\n          });\n        }\n      } else\n        amp_redirect(paywall_sel, '', window.location.pathname + '?outputType=amp');\n    }\n  }\n  let ads = 'div.ad, div.ad-inner, div.ad-unit, div#below-toprail, div[id^=\"taboola\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('ajc.com')) {\n  let paygate = document.querySelector('div.story-paygate_placeholder');\n  if (paygate)\n    paygate.removeAttribute('class');\n  let video_blocker = document.querySelector('div.video-blocker');\n  removeDOMElement(video_blocker);\n}\n\nelse if (matchDomain('al-monitor.com')) {\n  func_post = function () {\n    if (mobile) {\n      let article = document.querySelector(article_sel);\n      if (article) {\n        let lazy_images = article.querySelectorAll('picture > img[loading=\"lazy\"][style]');\n        for (let elem of lazy_images) {\n          elem.style = 'width: 95%;';\n          elem.parentNode.removeAttribute('style');\n        }\n        let art_width = article.offsetWidth - 20 + 'px';\n        let header = document.querySelector('header');\n        if (header)\n          header.style.width = art_width;\n        let elems = article.querySelectorAll(':not(a, svg)[style*=\"width\"]');\n        for (elem of elems) {\n          elem.style.width = art_width;\n          elem.style['grid-template-columns'] = '';\n        }\n        let lang = article.querySelector('div[style] > ul[style*=\"align-items\"]');\n        if (lang)\n          lang.parentNode.removeAttribute('style');\n        let par = article.querySelector('div[style] > div[dir=\"ltr\"]');\n        if (par)\n          par.parentNode.style = 'width: ' + art_width;\n      }\n    }\n  }\n  let url = window.location.href;\n  let article_sel = 'article';\n  getArchive(url, 'div.node__paywall-cta', '', article_sel, '', article_sel, article_sel + ' > div');\n}\n\nelse if (matchDomain('americanbanker.com') || matchDomain(usa_arizent_custom_domains)) {\n  let inline_gate = document.querySelector('.inline-gate');\n  if (inline_gate) {\n    inline_gate.classList.remove('inline-gate');\n    let inline_gated = document.querySelectorAll('.inline-gated');\n    for (let elem of inline_gated)\n      elem.classList.remove('inline-gated');\n  }\n}\n\nelse if (matchDomain('artnet.com')) {\n  if (window.location.pathname.endsWith('/amp-page')) {\n    amp_unhide_subscr_section();\n  } else {\n    let body_hidden = document.querySelector('.article-body');\n    if (body_hidden)\n      body_hidden.style = 'display:block;';\n    let banner = document.querySelector('div[id^=\"issuem-leaky-paywall-\"]');\n    removeDOMElement(banner);\n  }\n}\n\nelse if (matchDomain('asia.nikkei.com')) {\n  let paywall = document.querySelector('div#paywall-offer');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div#article-body-preview > div');\n    if (article) {\n      let json_script = document.querySelector('script#__NEXT_DATA__');\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.text);\n          if (json && json.props.pageProps.data.body) {\n            let json_text = json.props.pageProps.data.body;\n            if (!json_text.includes('<div>'))\n              json_text = '<div>' + json_text + '</div>';\n            let parser = new DOMParser();\n            let doc = parser.parseFromString(DOMPurify.sanitize(json_text, dompurify_options), 'text/html');\n            let article_new = doc.querySelector('div');\n            article.parentNode.replaceChild(article_new, article);\n          } else\n            refreshCurrentTab();\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n  let banners = 'div#pianoj_ribbon, div#paywall-offer';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('axios.com')) {\n  function axios_noscroll(node) {\n    node.removeAttribute('style');\n    let overlay = 'div[class^=\"Modal_paywall\"], div[class^=\"Modal_cta\"]';\n    hideDOMStyle(overlay, 2);\n  }\n  let noscroll = document.querySelector('html[style]');\n  if (noscroll)\n    axios_noscroll(noscroll);\n  waitDOMAttribute('html', 'HTML', 'style', axios_noscroll, true);\n  let banners = 'div[data-cy=\"pro-paywall\"], div.apexAd, div[class*=\"NativeAd\"], span[data-ad-type]';\n  hideDOMStyle(banners);\n  csDoneOnce = true;\n}\n\nelse if (matchDomain('balkaninsight.com')) {\n  getJsonUrl('div.subscribeWrapper', '', 'div.post_teaser', {art_append: 1, art_hold: 1});\n}\n\nelse if (matchDomain(['barandbench.com', 'theleaflet.in', 'thenewsminute.com'])) {\n  let paywall = document.querySelector('div[id*=\"paywall-banner\"]');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.paywall');\n    if (article) {\n      let article_new = getArticleQuintype();\n      if (article_new && article.parentNode)\n        article.parentNode.replaceChild(article_new, article);\n    }\n  }\n}\n\nelse if (matchDomain('barrons.com')) {\n  if (window.location.pathname.startsWith('/livecoverage/')) {\n    window.setTimeout(function () {\n      fix_dowjones_live();\n    }, 1500);\n  } else {\n    let paywall = document.querySelector('div#cx-interstitial-snippet, div[data-id^=\"ArticleRoadblock_\"]');\n    if (paywall) {\n      removeDOMElement(paywall);\n      window.setTimeout(function () {\n        let articles = document.querySelectorAll('article > div.crawler');\n        let article;\n        for (let elem of articles) {\n          let paragraph = elem.querySelector('p[class*=\"Paragraph\"]');\n          if (paragraph) {\n            article = elem;\n            break;\n          }\n        }\n        if (article) {\n          let article_id_dom = document.querySelector('head > meta[name=\"article.id\"][content]');\n          if (article_id_dom) {\n            let article_id = article_id_dom.content;\n            let url_src = 'https://barrons.djmedia.djservices.io/apps/barrons/theaters/default-article?screen_ids=' + article_id;\n            let x_access_token = cs_param['x-access-token'] || \"eyJhbGciOiJSUzI1NiJ9.WFZsaHN3MXd3Smw0V3kwRXBzclQ.qwwBedAUNXHTQchowQZ5zMwmnXqDKeMhoRJlkB7drjWmb0ktZCScIhq5lpIiWaMyNJA_ODYgHAfIoi7DKWkS8g8GunFNAXpJDUOLdI2rtQkTEi_E3o90rdZHunPR7p0ULjRmHCnDofAdpTQdJtTXjQ9eEDZT2xoooVGdBpoVKhE\";\n            getExtFetch(url_src, '', {\"app-identifier\": \"http://com.news.screens\", \"device-type\": \"phone\", \"x-access-token\": x_access_token}, main_barrons);\n            function main_barrons(url_src, data) {\n              try {\n                if (data) {\n                  let json = JSON.parse(data);\n                  if (json && json.screens[0] && json.screens[0].frames) {\n                    let pars = json.screens[0].frames;\n                    let par_class;\n                    let intro = article.querySelector('p[class]');\n                    if (intro)\n                      par_class = intro.className;\n                    let body_first = true;\n                    article.innerHTML = '';\n                    for (let par of pars) {\n                      let elem = document.createElement('p');\n                      if (par_class)\n                        elem.className = par_class;\n                      if (par.type === 'body') {\n                        if (par.body && par.styleID !== 'article-summary-body') {\n                          if (body_first && intro) {\n                            elem = intro;\n                            body_first = false;\n                          } else\n                            elem.innerText = par.body.text.replace(/\\s_/g, '');\n                        }\n                      } else if (par.type === 'listelement') {\n                        if (par.body)\n                          elem.innerText = ' • ' + par.body.text;\n                      } else if (par.type === 'image') {\n                        if (par.image && par.image.url) {\n                          let caption = (par.caption ? par.caption.text + ' - ' : '') + (par.credit ? par.credit.text : '');\n                          elem = makeFigure(par.image.url, caption, {style: 'width: 80%; margin: auto;'});\n                        }\n                      } else if (par.type === 'dynamicinset') {\n                        if (par.webview && par.webview.value) {\n                          let iframe = document.createElement('iframe');\n                          iframe.src = par.webview.value;\n                          iframe.style = 'height: 600px; width: 100%; border: none;';\n                          elem.appendChild(iframe);\n                        }\n                      } else if (par.type === 'video') {\n                        let video_thumbnail = makeFigure(par.thumbnail.url, par.description.text, {style: 'width: 80%; margin: auto;'});\n                        let video_link = document.createElement('a');\n                        video_link.href = par.url;\n                        video_link.innerText = 'Video-link (open in media player): ' + par.url;\n                        elem.append(video_thumbnail, video_link);\n                      } else if (!['ad', 'audioplayer', 'byline', 'caption', 'title'].includes(par.type)) {\n                        console.log(par);\n                      }\n                      if (elem.hasChildNodes())\n                        article.appendChild(elem);\n                    }\n                  }\n                }\n              } catch (err) {\n                console.log(err);\n              }\n            }\n          }\n        }\n      }, 2000);\n    }\n  }\n  let signin_links = document.querySelectorAll('p > a[href^=\"https://www.barrons.com/client/login\"][href*=\"target=\"]');\n  for (let elem of signin_links) {\n    elem.href = decodeURIComponent(elem.href.split('target=')[1].split('&')[0]);\n    elem.innerText = 'Open';\n    elem.target = '_top';\n  }\n  let ads = document.querySelectorAll('div[class] > div.uds-ad-container');\n  for (let ad of ads)\n    hideDOMElement(ad.parentNode);\n}\n\nelse if (matchDomain('benzinga.com')) {\n  function benz_main(node) {\n    removeDOMElement(node);\n    if (!window.location.pathname.startsWith('/report/')) {\n      let blurred = document.querySelector('div.article-content-paywalled');\n      if (blurred) {\n        blurred.classList.remove('article-content-paywalled');\n        let key_points = document.querySelectorAll('li.blur-sm');\n        for (let elem of key_points)\n          elem.classList.remove('blur-sm');\n        let article = document.querySelector('div#article-body');\n        if (article) {\n          let json_script = document.querySelector('script#__NEXT_DATA__');\n          if (json_script) {\n            try {\n              let json = JSON.parse(json_script.text);\n              if (json && json.props.pageProps.article.primaryImage) {\n                let img_data = json.props.pageProps.article.primaryImage;\n                if (img_data.url) {\n                  let img = document.createElement('img');\n                  img.src = img_data.url;\n                  img.alt = img_data.alt;\n                  article.before(img);\n                }\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          }\n        }\n      }\n    } else {\n      let blurred = document.querySelector('div.blur-lg');\n      if (blurred)\n        blurred.classList.remove('blur-lg');\n    }\n  }\n  waitDOMElement('div.paywall-content', 'DIV', benz_main, false);\n  csDoneOnce = true;\n}\n\nelse if (matchDomain('bhaskar.com')) {\n  if (!window.location.pathname.startsWith('/amp/')) {\n    let paywall_sel = 'div.paywallBlockedContent';\n    let paywall = document.querySelector(paywall_sel);\n    if (paywall) {\n      let banner = document.querySelector(paywall_sel + ' ~ div');\n      if (banner)\n        removeDOMElement(banner);\n      paywall.removeAttribute('class');\n    }\n    let ads = document.querySelectorAll('div[style*=\"overflow:hidden\"][style*=\"max-height:\"], div[id^=\"Ad--\"], article  div:empty');\n    if (ads)\n      removeDOMElement(...ads);\n  } else\n    ampToHtml();\n}\n\nelse if (matchDomain('bizjournals.com')) {\n  if (window.location.pathname.includes('/subscriber-only/')) {\n    header_nofix('div.primary');\n  } else {\n    let paywall_content = document.querySelectorAll('.paywall-content[style]');\n    for (let elem of paywall_content)\n      elem.removeAttribute('style');\n    window.setTimeout(function () {\n      let dialog = document.querySelector('div[id^=\"headlessui-dialog-\"], div.sheet-overlay');\n      if (dialog) {\n        removeDOMElement(dialog);\n        let html = document.querySelector('html[style]');\n        if (html)\n          html.removeAttribute('style');\n        let overlays = document.querySelectorAll('html.is-overlaid, body.is-overlaid');\n        for (let elem of overlays)\n          elem.classList.remove('is-overlaid');\n        let nuxt_inert = document.querySelector('div#__nuxt[inert]');\n        if (nuxt_inert)\n          nuxt_inert.removeAttribute('inert');\n      }\n    }, 1000);\n  }\n  let ads = 'div.adwrap, div[data-dev=\"MovableAd\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('bloomberg.com')) {\n  let paywall_sel = 'div[id^=\"fortress-\"]';\n  let leaderboard = 'div[id^=\"leaderboard\"], div[class^=\"leaderboard\"], div.canopy-container';\n  let ads = 'div[data-ad-status], div[data-ad-type], div[class*=\"FullWidthAd_\"], div.adWrapper';\n  hideDOMStyle(paywall_sel + ', ' + leaderboard + ', ' + ads);\n  csDoneOnce = true;\n  waitDOMElement(paywall_sel, 'DIV', removeDOMElement, true);\n  waitDOMAttribute('body', 'BODY', 'data-paywall-overlay-status', node => node.removeAttribute('data-paywall-overlay-status'), true);\n  if (window.location.pathname.startsWith('/live/')) {\n    setInterval(function () {\n      window.localStorage.clear();\n    }, 15 * 60 * 1000);\n  }\n  window.setTimeout(function () {\n    let shimmering = document.querySelector('article.first-story div[class*=\"Placeholder_placeholderParagraphWrapper-\"]');\n    if (shimmering) {\n      header_nofix(shimmering.parentNode, '', 'BPC > disable Dark Reader or enable JavaScript for site');\n    }\n  }, 5000);\n}\n\nelse if (matchDomain('bloombergadria.com')) {\n  let article_hidden = document.querySelector('article.single-news[style]');\n  if (article_hidden)\n    article_hidden.removeAttribute('style');\n  let ads = '.banner';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('bostonglobe.com')) {\n  if (window.location.search.startsWith('?outputType=amp'))\n    amp_unhide_subscr_section();\n}\n\nelse if (matchDomain('bt.no')) {\n  let ads = 'div[class^=\"advertory-bt-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('business-standard.com')) {\n  function bs_main(node) {\n    removeDOMElement(node);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json && json.props.pageProps.data.htmlContent) {\n          let json_text = json.props.pageProps.data.htmlContent;\n          let content = document.querySelector('div[class^=\"MainStory_storycontent__\"');\n          if (json_text && content) {\n            content.innerHTML = '';\n            let intro = content.querySelectorAll('div:not([class]');\n            removeDOMElement(...intro);\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            window.setTimeout(function () {\n              content.appendChild(content_new);\n            }, 1000);\n          }\n        } else\n          refreshCurrentTab();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  if (!window.location.pathname.startsWith('/amp/')) {\n    if (dompurify_loaded) {\n      let paywall_sel = 'div.subscribe-page';\n      let paywall = document.querySelector(paywall_sel);\n      if (paywall) {\n        bs_main(paywall)\n      } else {\n        csDoneOnce = true;\n        waitDOMElement(paywall_sel, 'DIV', bs_main, false);\n      }\n    }\n    let banner = 'section.sbcrbtmlfull';\n    let ads = 'div.advertisement-bg, div[id^=\"between_article_content_\"]';\n    hideDOMStyle(banner + ', ' + ads);\n  } else\n    ampToHtml();\n}\n\nelse if (matchDomain('businessinsider.com')) {\n  let ads = 'div.masthead-ad, div.l-ad, div.in-post-sticky, aside.has-video-ad, div.ad-callout-wrapper';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('businessinsider.jp')) {\n  let paywall = document.querySelector('div.piano-paywall-container[hidden]');\n  if (paywall)\n    paywall.removeAttribute('hidden');\n}\n\nelse if (matchDomain('businessoffashion.com')) {\n  let ads = 'div[class^=\"default__AdsBlockWrapper\"], div[data-test=\"common-nbabanner\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(ca_gcm_domains)) {\n  let paywall = document.querySelector('div._block_1dgevo');\n  if (paywall) {\n    removeDOMElement(paywall);\n    refreshCurrentTab();\n  }\n  let counter = document.querySelector('div#paywall-banner-content');\n  removeDOMElement(counter);\n}\n\nelse if (matchDomain('capital.bg')) {\n  let paywall = document.querySelector('div.paywall-story');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let img_main = document.querySelector('div.story--header picture > img[src]');\n        let article = document.querySelector('div.story-content');\n        if (json_text && article) {\n          let article_new = document.createElement('p');\n          let json_pars = parseHtmlEntities(json_text).replace(/\\s{2,}/g, '\\r\\n\\r\\n').split(/[\\[\\]]{2}/);\n          for (let elem of json_pars) {\n            let par;\n            if (!elem.match(/[\\[\\]]{2}/)) {\n              if (elem.match(/img:\\d+/)) {\n                if (img_main) {\n                  let img_new_id = elem.split('img:')[1];\n                  if (img_new_id) {\n                    par = document.createElement('img');\n                    par.src = img_main.src.replace(/_\\d+\\./, '_' + img_new_id + '.').split('?')[0];\n                    par.style = 'margin: 20px; width: 90%;';\n                  }\n                }\n              } else if (!elem.match(/quote:\\d+/)) {\n                par = document.createElement('p');\n                par.innerText = elem;\n              }\n            }\n            if (par)\n              article.appendChild(par);\n          }\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('cen.acs.org')) {\n  let meteredBar = document.querySelector('.meteredBar');\n  removeDOMElement(meteredBar);\n}\n\nelse if (matchDomain(['chronicle.com', 'philanthropy.com'])) {\n  let preview = document.querySelector('div[data-content-summary]');\n  removeDOMElement(preview);\n  let article_hidden = document.querySelector('div[class~=\"contentBody\" i][hidden]');\n  if (article_hidden) {\n    let attributes = [...article_hidden.attributes].filter(x => x.name !== 'class');\n    for (let elem of attributes)\n      article_hidden.removeAttribute(elem.name);\n  }\n  let ads = 'div.GoogleDfpAd-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('citywire.com')) {\n  let ads = 'div.cw-top-advert';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('cnbc.com')) {\n  let paywall = document.querySelector('div.ArticleGate-proGate');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.ArticleBody-articleBody');\n    if (article)\n      article.style = \"margin: 20px; font-family: Lyon,Helvetica,Arial,sans-serif; font-size: 18px; line-height: 1.66\";\n    let span_hidden = document.querySelectorAll('span[hidden]');\n    for (let elem of span_hidden) {\n      elem.removeAttribute('hidden');\n      elem.removeAttribute('class');\n      if (elem.innerText)\n        elem.innerText = elem.innerText.split('DISCLOSURES: (None)')[0];\n    }\n    let inline_image = document.querySelector('div[data-test=\"InlineImage\"]');\n    if (inline_image)\n      article.firstChild.before(inline_image);\n  }\n}\n\nelse if (matchDomain('cnn.com')) {\n  let subwall = document.querySelector('div[data-component-id=\"subwall\"]');\n  if (subwall) {\n    removeDOMElement(subwall);\n    let noscroll = document.querySelectorAll('html[style], body[style]');\n    for (let elem of noscroll)\n      elem.removeAttribute('style');\n    waitDOMAttribute('html', 'HTML', 'style', node => node.removeAttribute('style'), true);\n    waitDOMAttribute('body', 'BODY', 'style', node => node.removeAttribute('style'), true);\n  }\n  let regwall_keys = Object.keys(window.localStorage).filter(x => x.match(/reg_?wall/i));\n  for (let item of regwall_keys)\n    window.localStorage.removeItem(item);\n  let ads = 'div[class^=\"ad-slot-\"], div.container__ads';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('csmonitor.com')) {\n  let paywall = document.querySelector('div.paywall');\n  removeDOMElement(paywall);\n}\n\nelse if (matchDomain('cw.com.tw')) {\n  header_nofix('div.article__content', 'div.paywall', 'BPC > no fix');\n}\n\nelse if (matchDomain('cyclingnews.com')) {\n  let paywall = document.querySelector('div.paywall-locker');\n  if (paywall) {\n    paywall.classList.remove('paywall-locker');\n    let banner = 'div.kiosq-main-layer';\n    hideDOMStyle(banner);\n  }\n}\n\nelse if (matchDomain('dagsavisen.no')) {\n  // plus code in contentScript_once_var.js (timing)\n  header_nofix('div#paywall', '', 'BPC > hard refresh page');\n  let ads = 'div.arcad-block-container';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('dailywire.com')) {\n  let paywall = document.querySelector('div#payed-article-paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let div_hidden = document.querySelector('#post-body-text > div > div[class]');\n    if (div_hidden)\n      div_hidden.removeAttribute('class');\n  }\n  let ads = 'div.ad-wrapper';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('dallasnews.com')) {\n  if (window.location.search.startsWith('?outputType=amp')) {\n    amp_unhide_subscr_section();\n  }\n}\n\nelse if (matchDomain('defector.com')) {\n  let paywall = document.querySelector('div[class^=\"ContentGate_wrapper__\"]');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let article_sel = 'div[class^=\"PostContent_wrapper__\"]';\n    let article = document.querySelector(article_sel);\n    if (article) {\n      window.setTimeout(function () {\n        let pars = article.querySelectorAll('p');\n        if (pars.length < 3) {\n          let url = window.location.href.split('?')[0];\n          replaceDomElementExt(url, false, false, article_sel);\n        }\n      }, 1000);\n    }\n  }\n}\n\nelse if (matchDomain('denik.cz')) {\n  let video_sources = document.querySelectorAll('video[id] > source[src]');\n  for (let elem of video_sources) {\n    let iframe = document.createElement('iframe');\n    iframe.src = elem.src;\n    iframe.style = 'width: 100%; height: 100%;';\n    let video = elem.parentNode;\n    video.parentNode.replaceChild(iframe, video);\n  }\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['digiday.com', 'glossy.co', 'modernretail.co'])) {\n  let ads = 'div[class^=\"ad_\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('discovermagazine.com')) {\n  window.setTimeout(function () {\n    let mammoth = document.querySelector('.iXVGnF');\n    if (mammoth)\n      refreshCurrentTab();\n    let body = document.querySelector('body');\n    if (body)\n      body.style = 'overflow: auto !important;';\n    let banners = 'div.fIkXwQ, div[style*=\"fadeIn\"], div[role=\"button\"][aria-label=\"Dismiss Dialog\"]';\n    hideDOMStyle(banners);\n  }, 1000);\n}\n\nelse if (matchDomain('dnevnik.bg')) {\n  window.setTimeout(function () {\n    let article_lock = document.querySelector('div.article-lock');\n    if (article_lock && dompurify_loaded) {\n      let intro = article_lock.querySelector('div[role=\"paragraph\"]');\n      let intro_start;\n      if (intro)\n        intro_start = intro.innerText.substring(0, 25);\n      let scripts = document.querySelectorAll('script:not([src], [type])');\n      let json_script;\n      let link_script;\n      let script_start = 'self.__next_f.push([1,\"';\n      for (let script of scripts) {\n        if (script.text.startsWith(script_start)) {\n          if (!link_script && script.text.includes('significantLink\\\\\":'))\n            link_script = script;\n          else if (!json_script && script.text.includes('[storyid:') || (intro_start && script.text.replace(/\\\\\"/g, '\"').startsWith(script_start + intro_start)))\n            json_script = script;\n          if (json_script && link_script)\n            break;\n        }\n      }\n      if (json_script) {\n        article_lock.classList.remove('article-lock');\n        let banner = 'div.paywall-content';\n        hideDOMStyle(banner);\n        let img_main = document.querySelector('div.story-gallery-main figure > img[src]');\n        let links;\n        if (link_script)\n          links = link_script.text.split('significantLink\\\\\":[')[1].split('\\\\\"],')[0].replace(/\\\\\"/g, '').split(',');\n        let json_pars = json_script.text.split('self.__next_f.push([1,\"')[1].split('\"])')[0].replace(/\\\\u003c/g, '<').replace(/\\\\u003e/g, '>').replace(/\\\\\"/g, '\"').replace(/<br \\/>/g, '').split(/[\\[\\]]{2}/);\n        if (json_pars.length)\n          article_lock.innerHTML = '';\n        let parser = new DOMParser();\n        for (let elem of json_pars) {\n          let par;\n          if (!elem.match(/[\\[\\]]{2}/)) {\n            if (elem.match(/img:\\d+/)) {\n              if (img_main) {\n                let img_new_id = elem.split('img:')[1];\n                if (img_new_id) {\n                  par = document.createElement('img');\n                  par.src = img_main.src.replace(/_\\d+\\./, '_' + img_new_id + '.').split('?')[0];\n                  par.style = 'margin: 20px; width: 90%;';\n                }\n              }\n            } else if (elem.match(/storyid:\\d+/)) {\n              if (links) {\n                let story_id = elem.split('storyid:')[1];\n                if (story_id) {\n                  let story = links.find(x => x.includes(story_id + '_'));\n                  if (story) {\n                    par = document.createElement('a');\n                    par.href = story;\n                    par.innerText = story.split(story_id + '_')[1].replace(/_/g, ' ').replace('/', '');\n                    par.className = 'story-related';\n                    if (!matchUrlDomain(window.location.hostname, story))\n                      par.target = '_blank';\n                  }\n                }\n              }\n            } else if (!elem.match(/quote:\\d+/)) {\n              let doc = parser.parseFromString('<div role=\"paragraph\">' + DOMPurify.sanitize(elem, dompurify_options) + '</div>', 'text/html');\n              par = doc.querySelector('div');\n            }\n            if (par)\n              article_lock.appendChild(par);\n          }\n        }\n      }\n    }\n  }, 1000);\n}\n\nelse if (matchDomain('dwell.com')) {\n  if (window.location.pathname.match(/^(\\/amp)?\\/article\\//)) {\n    if (!window.location.search.startsWith('?rel=plus')) {\n      let paywall = pageContains('div > a', /Try Dwell\\+ for FREE/);\n      if (paywall.length) {\n        removeDOMElement(paywall[0]);\n        window.location.href = window.location.pathname.replace(/^\\/amp/, '') + '?rel=plus';\n      }\n    } else {\n      let paywall = document.querySelector('div#mainPanel div[class^=\"FCR_\"]');\n      let article = document.querySelector('div > section[class]');\n      if (paywall && article && dompurify_loaded) {\n        removeDOMElement(paywall);\n        article.classList.remove('_2S7l9_l2eDI5b8DSR29ijf');\n        let filter = /^window\\.INITIAL_STATE\\s?=\\s?/;\n        let json_script = getSourceJsonScript(filter);\n        if (json_script) {\n          let split1 = json_script.text.split(filter)[1];\n          let state = (split1.split('};')[0] + '}');\n          if (state) {\n            try {\n              let json = JSON.parse(state);\n              if (json) {\n                let items = json.articles.items;\n                let id = Object.keys(items)[0];\n                let photos = json.photos ? json.photos.items : '';\n                let json_text = items[id].attributes.body.replace(/(<br>|<span style=\".+;\">|<\\/span>)/g, '');\n                function find_img_url(match, p1, p2, offset, string) {\n                  let contributorId;\n                  let format;\n                  if (photos && photos[p1]) {\n                    contributorId = photos[p1].attributes.userId;\n                    format = photos[p1].attributes.format;\n                  }\n                  let result = '<p>missing photo: ' + p1 + '</p>';\n                  if (contributorId)\n                    result = '<figure><img src=\"https://images2.dwell.com/photos/' + contributorId + '/' + p1 + '/original.' + format + '?auto=format&q=35&w=1280\"><figcaption>' + p2 + '</figcaption></figure>';\n                  return result;\n                }\n                json_text = json_text.replace(/<dwell-photo photoId=\"(\\d+)\"\\scaption=\"([^\"]+)\"[^<]+photoUserId=\"\\d*\"\\/>/g, find_img_url);\n                let parser = new DOMParser();\n                let doc = parser.parseFromString('<section class=\"' + article.className + '\">' + DOMPurify.sanitize(json_text, dompurify_options) + '</section>', 'text/html');\n                let article_new = doc.querySelector('section');\n                article.parentNode.replaceChild(article_new, article);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          }\n        }\n      }\n      let photo_links = document.querySelectorAll('div > a[href^=\"' + window.location.pathname.replace(/\\/\\d{8,}/, '') + '\"]');\n      for (let elem of photo_links)\n        elem.href += '?rel=plus';\n      let close_button = document.querySelector('header > div > span > svg');\n      if (!document.querySelector('a#bpc_close') && close_button) {\n        let elem = document.createElement('a');\n        elem.href = window.location.pathname.split('?')[0].replace(/\\/\\d{8,}/, '');\n        elem.id = 'bpc_close';\n        elem.innerText = 'close';\n        elem.style.color = 'white';\n        close_button.parentNode.parentNode.appendChild(elem);\n      }\n    }\n  }\n  let ads = 'div.EYrS5iukqzJMkNAcFQ0ho';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('economictimes.com')) {\n  if (window.location.pathname.includes('/amp_')) {\n    let paywall = document.querySelector('.paywall_wrap');\n    if (paywall && dompurify_loaded) {\n      let content = document.querySelector('.paywall[style=\"display:none;\"]');\n      if (content) {\n        let parser = new DOMParser();\n        let doc = parser.parseFromString('<div style=\"margin: 20px 0px;\">' + DOMPurify.sanitize(content.innerText, dompurify_options) + '</div>', 'text/html');\n        let content_new = doc.querySelector('div');\n        if (content_new && content.parentNode)\n          content.parentNode.replaceChild(content_new, content);\n      } else\n        window.location.href = 'https://economictimes.indiatimes.com' + window.location.pathname.replace('amp_prime', 'prime');\n      let intro = document.querySelector('.art_wrap');\n      let article_blocker = document.querySelector('.articleBlocker');\n      removeDOMElement(paywall, intro, article_blocker);\n      let ads = 'amp-ad';\n      hideDOMStyle(ads);\n    }\n  } else {\n    window.setTimeout(function () {\n      let paywall = document.querySelector('div#blocker_layer');\n      let data_prime = document.querySelector('div[data-prime=\"1\"]');\n      let amphtml = document.querySelector('head > link[rel=\"amphtml\"]');\n      if (paywall || data_prime) {\n        removeDOMElement(paywall);\n        if (data_prime)\n          data_prime.removeAttribute('data-prime');\n        if (amphtml)\n          amp_redirect_not_loop(amphtml);\n        else if (window.location.pathname.startsWith('/epaper/'))\n          window.location.href = 'https://economictimes.indiatimes.com' + window.location.pathname;\n      } else {\n        let ads = '.adContainer';\n        hideDOMStyle(ads);\n      }\n    }, 500);\n  }\n}\n\nelse if (matchDomain('economictimes.indiatimes.com')) {\n  let paywall = document.querySelector('section.prime_paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let content = document.querySelector('div.content1, div.artText');\n    let full_text = document.querySelector('div.paywall.p1');\n    if (content && full_text)\n      content.innerText = full_text.innerText;\n    addStyle('div.pageContent {height: auto !important;}');\n    let article_wrap = document.querySelector('div.article_wrap[style]');\n    if (article_wrap)\n      article_wrap.removeAttribute('style');\n  }\n  if (mobile) {\n    let pageholder = document.querySelector('main.pageHolder');\n    if (pageholder) {\n      pageholder.classList.remove('pageHolder');\n      let header = document.querySelector('header');\n      if (header)\n        header.style = 'width: 100% !important;';\n      let f_col = document.querySelector('div.f_col');\n      removeDOMElement(f_col);\n    }\n  }\n}\n\nelse if (matchDomain('economist.com')) {\n  let ads = 'div[class*=\"adComponent\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('enotes.com')) {\n  let paywall = document.querySelector('section#enotes-paywall');\n  if (paywall) {\n    let section_words = pageContains('p', /\\(This entire section contains/);\n    removeDOMElement(paywall, ...section_words);\n    ext_api.runtime.sendMessage({request: 'clear_cookies_domain', data: {domain: 'enotes.com'}});\n    let blurred = document.querySelectorAll('div.u-paywall');\n    for (let elem of blurred)\n      elem.className = 'o-rte-text u-space--top';\n    let ads = document.querySelectorAll('div:not([class]) > div[id^=\"div-gpt-ad-\"]');\n    for (let ad of ads)\n      hideDOMElement(ad.parentNode);\n  }\n}\n\nelse if (matchDomain('epoch.org.il')) {\n  getJsonUrl('div.register-login-box', '', 'div.paywall');\n}\n\nelse if (matchDomain('espn.com')) {\n  let url = window.location.href;\n  getArchive(url, 'aside.espn-plus-container-wrapper', '', 'section#article-feed > article');\n}\n\nelse if (matchDomain('euobserver.com')) {\n  let paywall = pageContains('div > div > button > div > span', /^Register$/);\n  if (paywall.length && dompurify_loaded) {\n    let article = paywall[0].parentNode.parentNode.parentNode.parentNode;\n    if (article) {\n      let filter = /^window\\.__basedcache__\\s?=\\s?/;\n      let json_script = getSourceJsonScript(filter);\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.text.split(filter)[1]);\n          if (json) {\n            let body = findKeyJson(json, ['body']);\n            if (body) {\n              article.innerHTML = '';\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div class=\"w\" style=\"font-size: 18px; line-height: 30px; position: relative;\">' + DOMPurify.sanitize(body, dompurify_options) + '</div>', 'text/html');\n              let article_new = doc.querySelector('div');\n              let pars = article_new.querySelectorAll('p.rte-p');\n              for (let par of pars)\n                par.style = 'margin: 20px 0px;';\n              article.appendChild(article_new);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('fastcompany.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let filter = /\\\\\"content\\\\\":\\[/;\n    let json_script = getSourceJsonScript(filter, ':not([id], [src], [type])');\n    if (json_script) {\n      try {\n        let json = JSON.parse('[' + json_script.text.split(filter)[1].split(/\\],\\\\\"/)[0].replace(/\\\\\\\\\\\\\"/g, '\\\\\"').replace(/(\\[|,)\\\\\"/g, '$1\"').replace(/\\\\\"(\\]|,)/g, '\"$1').replace(/\\\\\\\\n/g, '') + ']');\n        if (json) {\n          let article = document.querySelector('article');\n          if (article) {\n            article.innerHTML = '';\n            article.className = 'article-container';\n            let parser = new DOMParser();\n            for (let pars of json)\n              for (let par of pars) {\n                if (!par.match(/^\\$\\w{2}$/)) {\n                  let content_new = parser.parseFromString('<div class=\"content-chunk\">' + DOMPurify.sanitize(par, dompurify_options) + '</div>', 'text/html');\n                  let elem = content_new.querySelector('div');\n                  let img_srcset_drop = elem.querySelectorAll('figure > img[srcset]');\n                  for (let img of img_srcset_drop)\n                    img.removeAttribute('srcset');\n                  article.appendChild(elem);\n                }\n              }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = 'div[class*=\"ad-wrapper\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('fieldandstream.com')) {\n  let overlay = document.querySelectorAll('div[class^=\"mailmunch-\"]');\n  removeDOMElement(...overlay);\n  let noscroll = document.querySelector('html.mailmunch-pop-open');\n  if (noscroll)\n    noscroll.removeAttribute('class');\n}\n\nelse if (matchDomain('financialexpress.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall)\n    paywall.classList.remove('paywall');\n  let register = 'div.pcl-wrap';\n  let ads_selector = window.location.pathname.endsWith('/lite/') ? '.ad-bg-container' : 'div[class*=\"-ads-blocks-ad-unit\"]';\n  hideDOMStyle(register + ', ' + ads_selector);\n}\n\nelse if (matchDomain('firstthings.com')) {\n  let paywall = document.querySelector('.paywall');\n  removeDOMElement(paywall);\n}\n\nelse if (matchDomain('forbes.com')) {\n  waitDOMAttribute('html', 'HTML', 'class', node => node.removeAttribute('class'), true);\n  waitDOMAttribute('body', 'BODY', 'class', node => node.removeAttribute('class'), true);\n  csDoneOnce = true;\n  if (window.location.pathname.startsWith('/newsletters/')) {\n    let paywall = document.querySelector('div > div.newsletter-teaser');\n    if (paywall) {\n      paywall.classList.remove('newsletter-teaser');\n      let header = paywall.parentNode;\n      header_nofix(header);\n    }\n  }\n  let ads = 'fbs-ad, div.inlineAdContainer';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('forbes.ua')) {\n  let paywall = document.querySelector('div.js-closed-part');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = parseHtmlEntities(json.articleBody).replace(/\\n/g, \"$&\\r\\n\");\n        let article = document.querySelector('div.c-post-text');\n        if (json_text && article)\n          article.innerText = json_text;\n      }\n    }\n  }\n}\n\nelse if (matchDomain('foreignaffairs.com')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('.paywall');\n    let loading_indicator = document.querySelector('.loading-indicator');\n    let msg_bottom = document.querySelector('.messages--container--bottom');\n    removeDOMElement(paywall, loading_indicator, msg_bottom);\n    let article_dropcap = document.querySelectorAll('.article-dropcap');\n    for (let elem of article_dropcap)\n      elem.classList.add('loaded');\n  }, 1000);\n}\n\nelse if (matchDomain('foreignpolicy.com')) {\n  let content_ungated = document.querySelector('div.content-ungated');\n  if (content_ungated && dompurify_loaded) {\n    removeDOMElement(content_ungated);\n    let content_gated = document.querySelector('div.content-gated');\n    if (content_gated) {\n      let insider = document.querySelector('body.is-fp-insider');\n      if (insider) {\n        getJsonUrl('div.content-gated', {rm_class: 'content-gated'}, 'div.content-gated');\n        window.setTimeout(function () {\n          let lazy_images = document.querySelectorAll('img[loading=\"lazy\"]');\n          for (let elem of lazy_images)\n            elem.removeAttribute('loading');\n        }, 1000);\n      } else\n        content_gated.classList.remove('content-gated');\n    }\n  }\n}\n\nelse if (matchDomain('fortune.com')) {\n  let paywall = document.querySelector('div.paywallActive');\n  if (paywall)\n    paywall.removeAttribute('class');\n  let banners = 'div.tp-container-inner, div[class^=\"sc-\"]:has( > div[data-cy=\"leaderboard\"]), div[class^=\"sc-\"]:has( > div.nativo-tout)';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('foxnews.com')) {\n  let paywall = document.querySelector('div.article-gating-wrapper');\n  removeDOMElement(paywall);\n  let overlay = document.querySelector('div[class*=\"gated-overlay\"]');\n  if (overlay)\n    overlay.removeAttribute('class');\n}\n\nelse if (matchDomain('ftm.eu')) {\n  let videos = document.querySelectorAll('div.body > div.video-pp');\n  for (let video of videos) {\n    let video_id_dom = video.querySelector('a.video[data-youtube-id]');\n    if (video_id_dom) {\n      video_new = document.createElement('iframe');\n      video_new.src = 'https://www.youtube.com/embed/' + video_id_dom.getAttribute('data-youtube-id');\n      video_new.style = 'width: 95%; height: 400px; margin: 0px 20px;';\n      video.parentNode.replaceChild(video_new, video);\n    }\n  }\n  let audio_controls = document.querySelectorAll('audio[controls][style]');\n  for (let elem of audio_controls)\n    elem.removeAttribute('style');\n  document.querySelectorAll('div.foldable').forEach(e => e.classList.remove('foldable'));\n  let banners = 'div.banner-pp';\n  hideDOMStyle(banners);\n}\n\nelse if (domain = matchDomain(['haaretz.co.il', 'haaretz.com', 'themarker.com'])) {\n  if (window.location.pathname.match(/\\/ty-article/)) {\n    let mh = document.querySelector('div[data-test=\"masthead\"]');\n    if (!mh) {\n      let article = document.querySelector('main');\n      if (article) {\n        let mh_new = document.createElement('div');\n        mh_new.style = 'font-size: 20px; font-weight: bold; text-align: center; margin: 20px;';\n        mh_new.setAttribute('data-test', 'masthead');\n        let main = document.createElement('a');\n        main.href = 'https://www.' + domain;\n        main.innerText = domain.toUpperCase();\n        mh_new.appendChild(main);\n        article.before(mh_new);\n      }\n    }\n  }\n  let history_keys = Object.keys(window.localStorage).filter(x => x.match(/^(reading(Count)?History|raData)/i));\n  for (let item of history_keys)\n    window.localStorage.removeItem(item);\n}\n\nelse if (matchDomain('hbr.org')) {\n  if (window.location.pathname.startsWith('/data-visuals')) {\n    let feed_entries = document.querySelectorAll('li.feed-entry');\n    for (let feed_entry of feed_entries) {\n      let download = feed_entry.querySelector('span.entry-download > a[href*=\"/undefined/\"]');\n      if (download) {\n        let figure = feed_entry.querySelector('figure.entry-image > img[src]');\n        if (figure) {\n          download.href = figure.src;\n          download.setAttribute('download', '');\n        }\n      }\n    }\n  } else {\n    function hbr_main() {\n      window.top.postMessage({type: 'article-paywall:full-content'}, '*');\n    }\n    let popup = document.querySelector('.persistent-banner');\n    removeDOMElement(popup);\n    let paywall = document.querySelector('div[id^=\"paywall\"]');\n    if (paywall) {\n      removeDOMElement(paywall);\n      insert_script(hbr_main);\n    }\n  }\n}\n\nelse if (matchDomain('hilltimes.com')) {\n  function hilltimes_main(node) {\n    getJsonUrl('div.paywallcont', '', 'div#entry-content');\n  }\n  let paywall_sel = 'div.paywallcont';\n  let paywall = document.querySelector(paywall_sel);\n  if (dompurify_loaded) {\n    if (paywall)\n      hilltimes_main(paywall);\n    else\n      waitDOMElement(paywall_sel, 'DIV', hilltimes_main, false);\n    csDoneOnce = true;\n  }\n  let banner = 'section.hide_this_section';\n  hideDOMStyle(banner);\n}\n\nelse if (matchDomain('hindustantimes.com')) {\n  document.querySelectorAll('.freemiumText').forEach(e => e.classList.remove('freemiumText'));\n  let noscroll = document.querySelector('body.open-popup');\n  if (noscroll)\n    noscroll.classList.remove('open-popup');\n  let banners = 'div[class^=\"sub-paywall-version\"], div[class^=\"adHeight\"], .closeStory';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('historyextra.com')) {\n  let article_masked = document.querySelector('.template-article__masked');\n  if (article_masked) {\n    let extra_pars = document.querySelectorAll('div.template-article__masked > p');\n    removeDOMElement(...extra_pars);\n    article_masked.classList.remove('template-article__masked');\n  }\n  let ads = 'div.ad-slot, div.ad-banner, div.stitcher-ad--dai-placeholder';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('historytoday.com')) {\n  if (window.location.hostname.startsWith('app.')) {\n    restorePugpigPage();\n  } else {\n    let paywall = document.querySelector('div.nopremium-message');\n    if (paywall) {\n      let app_link = document.createElement('a');\n      let app_url = 'app.historytoday.com';\n      app_link.href = 'https://' + app_url;\n      app_link.innerText = 'BPC > no fix, search article on: ' + app_url;\n      app_link.style = 'color: red; font-weight: bold;';\n      let app_div = document.createElement('div');\n      app_div.style = 'margin: 20px;';\n      app_div.appendChild(app_link);\n      paywall.before(app_div);\n      removeDOMElement(paywall);\n    }\n  }\n}\n\nelse if (matchDomain('inc.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let locked = document.querySelector('div.article-container--locked');\n    if (locked)\n      locked.className = 'article-container';\n  }\n  let ads = 'div.second-scroll-border';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('inc42.com')) {\n  if (window.location.pathname.endsWith('/amp/')) {\n    amp_unhide_access_hide('=\"status\"', '=\"NOT status\"', 'div.wru-widget');\n  } else {\n    let banner = document.querySelector('div[id*=\"_leaderboard_\"]');\n    removeDOMElement(banner);\n  }\n}\n\nelse if (matchDomain('indianexpress.com')) {\n  if (window.location.pathname.endsWith('/lite/'))\n    amp_unhide_access_hide('=\"metering.result=\\'ALLOW_ACCESS\\'\"', '');\n  else {\n    let ads = 'div[class^=\"adsbox\"], div.adboxtop, div.add-first, div.osv-ad-class, div.ie-int-campign-ad';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('indiatoday.in')) {\n  if (window.location.pathname.match(/(\\/amp)?\\/magazine\\//)) {\n    let url = window.location.href;\n    if (!url.includes('/amp/')) {\n      amp_redirect('div#csc-paywall');\n    } else {\n      amp_unhide_access_hide('=\"granted\"', '=\"NOT NOT granted\"');\n    }\n  }\n}\n\nelse if (matchDomain('infzm.com')) {\n  let url = window.location.href;\n  if (url.includes('.com/wap/#/content/')) {\n    let container = document.querySelector('section.container');\n    if (container)\n      container.classList.remove('container');\n    let overlay = document.querySelector('div.article-content[style]');\n    if (overlay)\n      overlay.removeAttribute('style');\n  } else if (url.includes('.com/contents/')) {\n    let paywall = document.querySelector('div.nfzm-article-jumbotron--unauth');\n    if (paywall) {\n      removeDOMElement(paywall);\n      window.location.href = url.replace('.com/contents/', '.com/wap/#/content/').split('?')[0];\n    }\n  }\n}\n\nelse if (matchDomain('inkl.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    let gradient_container = document.querySelector('div.gradient-container');\n    removeDOMElement(gradient_container);\n  }\n  let what_is_inkl = document.querySelector('.what-is-inkl-container, .features-panel');\n  let signup = document.querySelectorAll('.article-signup-container, .locked-sign-up-container, div[class*=\"/inkl-watermark.svg\"]');\n  let shared_banner = document.querySelector('div.shared-article-inline-banner');\n  removeDOMElement(what_is_inkl, ...signup, shared_banner);\n  let dismiss_button = document.querySelector('div.dismiss-button-container button.btn');\n  if (dismiss_button)\n    dismiss_button.click();\n  let dive_deeper_summary_bodies = document.querySelectorAll('div.dive-deeper-container div.summary-body');\n  if (dive_deeper_summary_bodies) {\n    for (let summary_body of dive_deeper_summary_bodies) {\n      if (!summary_body.querySelector('a')) {\n        let ng_click = summary_body.getAttribute('ng-click').replace(\"showArticle('\", '').replace(\"')\", '');\n        let weblink = document.createElement('a');\n        weblink.text = 'open';\n        weblink.href = 'https://www.inkl.com/news/' + ng_click;\n        summary_body.appendChild(weblink);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('insidehighered.com')) {\n  let ads = 'div[id^=\"block-dfptag\"], div.wp-block-ihe-ad, section.section-ad_slot, div#roadblock';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('interestingengineering.com')) {\n  let paywall = document.querySelector('div.paywall-main-wrapper');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let blurred = document.querySelectorAll('.blurFilter');\n    for (let elem of blurred)\n      elem.classList.remove('blurFilter');\n  }\n}\n\nelse if (matchDomain('ipolitics.ca')) {\n  let login = document.querySelector('div.login');\n  if (login && dompurify_loaded) {\n    removeDOMElement(login);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.innerText);\n        if (json && json.props.pageProps.post && json.props.pageProps.post.content) {\n          let url_next = json.props.pageProps.post.slug;\n          if (url_next && !window.location.pathname.includes(url_next))\n            refreshCurrentTab();\n          let article_new = json.props.pageProps.post.content;\n          let article = document.querySelector('.post-body');\n          if (article) {\n            article.innerHTML = '';\n            article.classList.remove('locked');\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(article_new) + '</div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            article.appendChild(content_new);\n          }\n        } else {\n          refreshCurrentTab();\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('japantimes.co.jp')) {\n  window.setTimeout(function () {\n    let url = window.location.href;\n    let paywall = document.querySelector('div.blocker');\n    if (paywall) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('div#jtarticle');\n      if (article)\n        article.firstChild.before(document.createTextNode('Refresh page or'), googleSearchToolLink(url), archiveLink(url));\n    }\n  }, 5000);\n  let banner = document.querySelector('div.subscribe');\n  removeDOMElement(banner);\n  let ads = 'div.DisplayAd';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('jpost.com')) {\n  let premium_banners = document.querySelectorAll('.hide-for-premium, #hiddenPremiumForm, #hiddenLink');\n  removeDOMElement(...premium_banners);\n}\n\nelse if (matchDomain('kathimerini.gr')) {\n  let ads = 'div.nx-billboard-ad-row';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('kompas.id')) {\n  let url_artikel = window.location.pathname.startsWith('/artikel/');\n  let delay = url_artikel ? 2500 : 0;\n  window.setTimeout(function () {\n    let paywall = document.querySelector('kompasid-paywall');\n    if (paywall) {\n      removeDOMElement(paywall);\n      if (url_artikel) {\n        let intro = document.querySelector('div.paywall');\n        removeDOMElement(intro);\n        let art_hidden = document.querySelector('div.non-paywall[style]');\n        if (art_hidden)\n          art_hidden.removeAttribute('style');\n      } else {\n        let art_hidden = document.querySelector('section.paywall.hidden');\n        if (art_hidden)\n          art_hidden.classList.remove('hidden');\n      }\n    }\n  }, delay);\n}\n\nelse if (matchDomain('latimes.com')) {\n  let subscribers = pageContains('div.infobox > p.infobox-title', /subscribers/i);\n  if (subscribers.length)\n    removeDOMElement(subscribers[0].parentNode);\n  let ads = 'div.google-dfp-ad-wrapper, div.revcontent';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('ledevoir.com')) {\n  let counter = document.querySelector('.paywall-breakpoint-wrapper');\n  removeDOMElement(counter);\n}\n\nelse if (matchDomain('livelaw.in')) {\n  let amp = window.location.pathname.startsWith('/amp/');\n  let paywall = document.querySelector(amp ? 'div.subscribeNow' : 'div#subscription_paid_message');\n  if (paywall) {\n    let intro = document.querySelector(amp ? 'div.story' : 'div.details-story-wrapper');\n    removeDOMElement(paywall, intro);\n    let paywall_content = document.querySelector('div.paywall-content.hide');\n    if (paywall_content)\n      paywall_content.className = amp ? '' : 'news_details_page_row2 details-story-wrapper';\n  }\n  let ads = 'inside-post-ad, amp-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('livemint.com')) {\n  if (window.location.pathname.includes('/amp-')) {\n    let paywall = document.querySelectorAll('[amp-access=\"NOT subscribed\"]');\n    removeDOMElement(...paywall);\n  } else {\n    let paywall = document.querySelector('div.paywall');\n    if (paywall)\n      paywall.classList.remove('paywall');\n    let ads = '[class^=\"ad\"], [id^=\"ad\"], #subscribeAd, .taboolaHeight';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('magazine.atavist.com')) {\n  let bottom_notification = document.querySelector('div.bottom-notification');\n  let overlay = document.querySelector('div.notification-overlay');\n  removeDOMElement(bottom_notification, overlay);\n  let paywall = document.querySelector('body.paywall-notification-visible');\n  if (paywall)\n    paywall.classList.remove('paywall-notification-visible');\n}\n\nelse if (matchDomain('manoramaonline.com')) {\n  if (!window.location.pathname.endsWith('.amp.html')) {\n    amp_redirect('ev-engagement');\n  } else {\n    amp_unhide_access_hide(\"=\\\"result='ALLOW_ACCESS'\\\"\");\n  }\n}\n\nelse if (matchDomain('marketwatch.com')) {\n  let ads = 'div.element--ad, div.j-ad, div.adWrapper, div#cx-articlecover';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('medscape.com')) {\n  let ads = '.AdUnit, [id^=\"ads-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('mexiconewsdaily.com')) {\n  let div_hidden = document.querySelector('body.single div.td-post-content > div.tdb-block-inner');\n  if (div_hidden)\n    div_hidden.classList.remove('tdb-block-inner');\n}\n\nelse if (matchDomain('mid-day.com')) {\n  if (window.location.pathname.startsWith('/amp/')) {\n    amp_unhide_access_hide('=\"granted\"', '=\"NOT granted\"', '[class*=\"BannerAd\"], div.midday-wrapper');\n  } else {\n    amp_redirect('div#myModalFullscreen');\n    let read_more = document.querySelector('#read-more-my');\n    if (read_more)\n      read_more.click();\n  }\n}\n\nelse if (matchDomain('nationalgeographic.com')) {\n  function natgeo_func(node) {\n    removeDOMElement(node);\n    let body = document.querySelector('body[class]');\n    if (body) {\n      body.removeAttribute('class');\n      body.removeAttribute('style');\n    }\n  }\n  let paywall = document.querySelector('div[id^=\"fittPortal\"]');\n  if (paywall)\n    natgeo_func(paywall);\n  waitDOMElement('div[id^=\"fittPortal\"]', 'DIV', natgeo_func, false);\n  csDoneOnce = true;\n  window.setTimeout(function () {\n    let url = window.location.href;\n    let subscribed = document.querySelector('div.Article__Content--gated');\n    let msg = document.querySelector('div#bpc_archive');\n    if (subscribed && !msg) {\n      subscribed.appendChild(archiveLink(url));\n      subscribed.setAttribute('style', 'overflow: visible !important;');\n    }\n    let overlay = document.querySelector('div.Article__Content__Overlay--gated');\n    if (overlay)\n      overlay.classList.remove('Article__Content__Overlay--gated');\n  }, 2000);\n  let ads = 'div.ad-slot, div.InsertedAd, div.natgeo-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('nationalreview.com')) {\n  if (!window.location.pathname.endsWith('/amp/')) {\n    let paywall_sel = 'div.continue-reading';\n    let paywall = document.querySelector(paywall_sel);\n    if (paywall) {\n      let amphtml = document.querySelector('head > link[rel=\"amphtml\"][href]');\n      if (amphtml && !amphtml.href.includes(window.location.pathname)) {\n        removeDOMElement(paywall);\n        refreshCurrentTab();\n      } else\n        getJsonUrl(paywall_sel, '', 'div.article-content', {art_class: 'article-content article-content--headless'});\n    }\n  }\n  let banners = 'div.zephr-wrapper, div#bc-root, div.cookie-text';\n  let ads = 'amp-ad, .ad-unit, .ad-skeleton, amp-connatix-player, div[class*=\"-connatix-\"]';\n  hideDOMStyle(banners + ', ' + ads);\n}\n\nelse if (matchDomain('nature.com')) {\n  func_post = function () {\n    header_nofix('article', 'h2#access-options', 'BPC > no archive-fix');\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.app-access-wall, h2#access-options', '', 'article');\n}\n\nelse if (matchDomain('nautil.us')) {\n  let banners = document.querySelectorAll('div[class^=\"a__sc-np\"], div.subscibe-bar');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain('ndtvprofit.com')) {\n  if (window.location.pathname.startsWith('/amp/')) {\n    amp_unhide_subscr_section();\n  } else {\n    window.setTimeout(function () {\n      amp_redirect('div[class^=\"hard-paywall\"], div[class*=\"geotag-container_\"]');\n    }, 1000);\n  }\n  let ads = 'div.responsive-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('newcriterion.com')) {\n  getJsonUrl('div.paywall-overlay', '', 'div.entry-content');\n}\n\nelse if (matchDomain('newrepublic.com')) {\n  let modal = document.querySelector('div.article-scheduled-modal');\n  let pw_popups = document.querySelector('div#pwPopups');\n  removeDOMElement(modal, pw_popups);\n  let ads = '.ad-unit';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('newscientist.com')) {\n  if (!window.location.hostname.startsWith('appan.')) {\n    let paywall = document.querySelector('section#subscription-barrier');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let json_script = document.querySelector('script#ns-seo-schema');\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.text);\n          if (json && json.datePublished) {\n            let date = json.datePublished.split(/T\\d/)[0].replace(/-/g, '/');\n            let path_new = window.location.pathname.split(/\\/article\\/(\\d+-|mg\\d+-\\d+-)/)[2];\n            if (path_new) {\n              let url = 'https://appan.newscientist.com/' + date + '/' + path_new + 'content.html';\n              func_post = function () {\n                let lazy_images = document.querySelectorAll('img[src^=\"../\"][data-src]');\n                for (let elem of lazy_images) {\n                  elem.src = elem.getAttribute('data-src');\n                  elem.removeAttribute('height');\n                  elem.removeAttribute('width');\n                }\n                let videos = document.querySelectorAll('figure > div.pugpig-video[data-video-url]');\n                for (let elem of videos) {\n                  let iframe = document.createElement('iframe');\n                  iframe.src = elem.getAttribute('data-video-url');\n                  iframe.style = 'width: 100%; height: 400px; margin: 20px 0px;';\n                  elem.parentNode.replaceChild(iframe, elem);\n                }\n              }\n              replaceDomElementExt(url, false, false, 'section.ArticleContent', 'BPC > no fix (source file)', 'section[class$=\"-article__body\"]');\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n    let ads = 'div[class*=\"Advert\"]';\n    hideDOMStyle(ads);\n  } else {\n    restorePugpigPage();\n  }\n}\n\nelse if (matchDomain('newsday.com')) {\n  let nd_lock = document.querySelector('html[class]');\n  if (nd_lock)\n    nd_lock.removeAttribute('class');\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('newslaundry.com')) {\n  let paywall = document.querySelector('div > div > img[alt^=\"paywall\"]');\n  if (paywall && dompurify_loaded) {\n    let banner = document.querySelector('div.FrsvM');\n    removeDOMElement(paywall.parentNode.parentNode, banner);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = parseHtmlEntities(json.articleBody).replace(/<\\/p>\\./g, '</p>');\n        let article = document.querySelector('div.story-element-text');\n        if (json_text && article) {\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n          let article_new = doc.querySelector('div');\n          article.innerHTML = '';\n          article.appendChild(article_new);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('newsweek.com')) {\n  let ads = 'div#topad, div[id^=\"dfp-ad-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(['nola.com', 'shreveportbossieradvocate.com', 'theadvocate.com'])) {\n  if (window.location.pathname.endsWith('.amp.html')) {\n    let body_hidden = document.querySelector('.site-container');\n    if (body_hidden)\n      body_hidden.setAttribute('style', 'display:block;');\n  } else {\n    let ads = 'div.tnt-ads-container, div.asset-breakout-ads';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('nv.ua')) {\n  if (!window.location.pathname.includes('/amp/')) {\n    amp_redirect('div[id^=\"media_paywall\"]');\n  } else {\n    let paywall = document.querySelector('div.paywall-area');\n    if (paywall) {\n      paywall.removeAttribute('class');\n      let subscr = paywall.querySelector('div.make-subscription');\n      removeDOMElement(subscr);\n    }\n    let article = document.querySelector('div.article__content');\n    if (article)\n      article.removeAttribute('class');\n  }\n}\n\nelse if (matchDomain('nybooks.com')) {\n  let paywall_article = document.querySelector('.paywall-article');\n  if (paywall_article)\n    paywall_article.classList.remove('paywall-article');\n  let banners = 'div.toast-cta, div.inline-ad';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('nytimes.com')) {\n  if (!window.location.pathname.startsWith('/athletic/')) {\n    waitDOMElement('div#dock-container', 'DIV', removeDOMElement, false);\n    csDoneOnce = true;\n    let ads = 'div[data-testid=\"inline-message\"], div[id^=\"ad-\"], div.pz-ad-box, div[class^=\"css-\"]:has( > div#top-wrapper)';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain('outlookbusiness.com')) {\n  let paywall = document.querySelector('div#csc-paywall');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      let json = JSON.parse(json_script.innerText);\n      if (json && json.props.initialState.dashboard.ARTICLE_POST_DETAIL_API.data.article_data.description) {\n        let article_new = json.props.initialState.dashboard.ARTICLE_POST_DETAIL_API.data.article_data.description;\n        let article = document.querySelector('div.story-content');\n        if (article) {\n          article.innerHTML = '';\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(article_new) + '</div>', 'text/html');\n          let content_new = doc.querySelector('div');\n          article.appendChild(content_new);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('outlookindia.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = parseHtmlEntities(json.articleBody).replace(/\\n/g, \"$&\\r\\n\");\n        let content = document.querySelector('div#articleBody');\n        if (json_text && content) {\n          content.innerHTML = '';\n          let article_new = document.createElement('p');\n          article_new.innerText = json_text;\n          content.appendChild(article_new);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('piratewires.com')) {\n  if (window.location.pathname.startsWith('/pw/')) {\n    let url_script = getSourceJsonScript(/successButton/);\n    let filter = /window\\.location\\.href\\s?=\\s?\"/;\n    if (url_script && url_script.text.match(filter)) {\n      let url = url_script.text.split(filter)[1].split(/[\\?\"]/)[0];\n      removeDOMElement(url_script);\n      window.location.href = url;\n    }\n  } else if (window.location.pathname.startsWith('/p/')) {\n    let header = document.querySelector('header');\n    if (!header) {\n      let main = document.querySelector('main');\n      if (main) {\n        let home = document.createElement('header');\n        home.style = 'font-size: 20px; font-weight: bold; text-align: center; margin: 20px;';\n        let pw_link = document.createElement('a');\n        pw_link.innerText = 'PIRATE WIRES';\n        pw_link.href = 'https://www.piratewires.com';\n        home.appendChild(pw_link);\n        main.before(home);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('politico.com')) {\n  let ads = 'div.ad, div[class^=\"leaderboardAd\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('project-syndicate.org')) {\n  func_post = function () {\n    let hidden_images = document.querySelectorAll('img[src][new-cursrc]');\n    for (let elem of hidden_images) {\n      if (elem.src.startsWith('data:image/'))\n        elem.src = elem.getAttribute('new-cursrc');\n      elem.style = 'width: 95%;';\n    }\n  }\n  let url = window.location.href;\n  getArchive(url, 'div.paywall--base', '', 'main > article');\n}\n\nelse if (matchDomain('puck.news')) {\n  let url = window.location.href;\n  getArchive(url, 'div[class*=\"paywall\"]', '', 'article');\n  let modal = document.querySelector('div#paywall-modal');\n  removeDOMElement(modal);\n  let overlay = document.querySelector('body.paywall-active');\n  if (overlay)\n    overlay.classList.remove('paywall-active');\n}\n\nelse if (matchDomain('quora.com')) {\n  let overlays = document.querySelectorAll('div[class*=\"_overlay\"]');\n  removeDOMElement(...overlays);\n  let mask_image = document.querySelector('div.jhqnqh');\n  if (mask_image)\n    mask_image.classList.remove('jhqnqh');\n  let read_more_buttons = document.querySelectorAll('button.puppeteer_test_read_more_button.qu-bg--gray_ultralight');\n  for (let elem of read_more_buttons)\n    elem.click();\n  let overlay_cards = document.querySelectorAll('div[class*=\"OverlayCard\"]');\n  for (let elem of overlay_cards)\n    elem.removeAttribute('class');\n  window.setTimeout(function () {\n    let answers = document.querySelectorAll('div[class*=\"dom_annotate_question_answer_item_\"]');\n    for (let answer of answers) {\n      let wall = answer.querySelector('div.content-monetization-wall');\n      if (wall) {\n        wall.classList.remove('content-monetization-wall');\n        let timestamp_link = answer.querySelector('a.answer_timestamp[href]');\n        if (timestamp_link) {\n          let answer_link = document.createElement('a');\n          answer_link.innerText = 'BPC > open Quora+ answer';\n          answer_link.href = timestamp_link.href;\n          wall.appendChild(answer_link);\n        }\n      }\n    }\n  }, 500);\n}\n\nelse if (matchDomain('reuters.com')) {\n  let ads = 'div[data-testid=\"ResponsiveAdSlot\"], div[data-testid=\"Dianomi\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('rugbypass.com')) {\n  if (window.location.pathname.match(/^\\/plus\\/\\w/)) {\n    let paywall = document.querySelector('.premium-fold-bottom');\n    if (paywall) {\n      paywall.classList.remove('premium-fold-bottom');\n      let offer = document.querySelector('.plus-article-offer');\n      removeDOMElement(offer);\n      let fade = document.querySelector('.fade');\n      if (fade)\n        fade.classList.remove('fade');\n    }\n    let lazy_images = document.querySelectorAll('figure > img.lazy[data-src]:not([src])');\n    for (let elem of lazy_images) {\n      elem.src = elem.getAttribute('data-src');\n      elem.removeAttribute('class');\n    }\n  } else\n    csDoneOnce = true;\n}\n\nelse if (matchDomain('scholastic.com')) {\n  let paywall = document.querySelector('div.paywallModalElement');\n  if (paywall) {\n    let modal = document.querySelector('div.modal-backdrop');\n    removeDOMElement(paywall, modal);\n    let body_modal = document.querySelector('body.modal-open');\n    if (body_modal)\n      body_modal.removeAttribute('class');\n  }\n}\n\nelse if (matchDomain('science.org')) {\n  let paywall = document.querySelector('div.alert-read-limit');\n  removeDOMElement(paywall);\n  let overlay = document.querySelector('body.alert-read-limit__overlay');\n  if (overlay)\n    overlay.classList.remove('alert-read-limit__overlay');\n}\n\nelse if (matchDomain('scmp.com')) {\n  window.setTimeout(function () {\n    if (matchDomain('amp.scmp.com')) {\n      amp_unhide_subscr_section('div.ad-banner, div.advert-fly-carpet-container, div.inline-advert');\n      let amp_images = document.querySelectorAll('section.article-body amp-img[src]');\n      for (let elem of amp_images) {\n        let img = document.createElement('img');\n        img.src = elem.getAttribute('src');\n        img.alt = elem.getAttribute('alt');\n        img.style = 'width: 90%;';\n        elem.parentNode.replaceChild(img, elem);\n      }\n      let default_meters = document.querySelectorAll('div[id^=\"default-meter-page-views\"]');\n      removeDOMElement(...default_meters);\n    } else {\n      let paywall = document.querySelectorAll('div[data-qa=\"GenericArticle-PaywallContainer\"], div.js-reading-0-percent-completion-tracker');\n      if (paywall.length) {\n        removeDOMElement(...paywall);\n        let article = document.querySelector('section[data-qa=\"ContentBody-ContentBodyContainer\"]');\n        if (article) {\n          let json_script = document.querySelector('script#__NEXT_DATA__');\n          if (json_script) {\n            try {\n              let json = JSON.parse(json_script.text);\n              if (json && json.props.pageProps.payload.data.article.body.json) {\n                let pars = json.props.pageProps.payload.data.article.body.json;\n                if (pars && pars.length)\n                  article.innerHTML = '';\n                for (let par of pars) {\n                  let elem = document.createElement('p');\n                  if (window.location.pathname.startsWith('/magazines/'))\n                    elem.style = 'margin: 20px 0px;';\n                  if (['p', 'h3'].includes(par.type)) {\n                    for (let sub_elem of par.children) {\n                      if (sub_elem.type === 'text') {\n                        if (sub_elem.data)\n                          elem.appendChild(document.createTextNode(sub_elem.data));\n                      } else if (['a', 'em', 'span', 'strong'].includes(sub_elem.type)) {\n                        let first_child = sub_elem.children && sub_elem.children[0];\n                        if (sub_elem.children && sub_elem.children.length > 1) {\n                          let elem_text = sub_elem.children.map(x => x.data || x.children[0].data).join('');\n                          first_child = {type: 'text', data: elem_text};\n                        }\n                        if (first_child) {\n                          if (first_child.type === 'text') {\n                            if (first_child.data) {\n                              let a_link = document.createElement('span');\n                              if (sub_elem.attribs && sub_elem.attribs.href) {\n                                a_link = document.createElement('a');\n                                a_link.style = 'text-decoration: underline;';\n                                a_link.href = sub_elem.attribs.href;\n                                if (!matchUrlDomain(window.location.hostname, sub_elem.attribs.href))\n                                  a_link.target = '_blank';\n                              } else if (sub_elem.type === 'em')\n                                a_link.style = 'font-style: italic;';\n                              else if (sub_elem.type === 'strong')\n                                a_link.style = 'font-weight: bold;';\n                              a_link.innerText = first_child.data;\n                              elem.appendChild(a_link);\n                            }\n                          }\n                        }\n                      } else if (sub_elem.type === 'img') {\n                        if (sub_elem.attribs) {\n                          let attribs = sub_elem.attribs;\n                          if (attribs.src)\n                            elem = makeFigure(attribs.src, attribs.title, {alt: attribs.alt, style: 'width: 100%;'}, {style: 'font-size: 80%;'});\n                        }\n                      } else {\n                        console.log(sub_elem);\n                      }\n                    }\n                  } else if (par.type === 'div') {\n                    if (par.attribs) {\n                      if (par.attribs.class === 'image-inline-container') {\n                        if (par.children && par.children[0]) {\n                          let attribs = par.children[0].attribs;\n                          if (attribs.src)\n                            elem = makeFigure(attribs.src, attribs.title, {alt: attribs.alt, style: 'width: 100%;'}, {style: 'font-size: 80%;'});\n                        }\n                      } else if (par.attribs.class.match(/(methode-html|oembed|video)-wrapper/) && par.children) {\n                        addIframe(par.children);\n                        function addIframe(par_children) {\n                          for (let sub_elem of par_children) {\n                            if (sub_elem.children)\n                              addIframe(sub_elem.children);\n                            if (sub_elem.type === 'iframe') {\n                              let attribs = sub_elem.attribs;\n                              if (attribs.src) {\n                                let figure = document.createElement('figure');\n                                let iframe = document.createElement('iframe');\n                                iframe.src = attribs.src;\n                                if (attribs.width && attribs.height) {\n                                  if (!attribs.width.includes('%')) {\n                                    let ratio = attribs.width / (article.offsetWidth);\n                                    iframe.width = attribs.width / ratio;\n                                    iframe.height = attribs.height / ratio;\n                                  } else {\n                                    iframe.width = attribs.width;\n                                    iframe.height = attribs.height;\n                                  }\n                                } else if (attribs.style) {\n                                  iframe.style = attribs.style;\n                                  if (attribs.height)\n                                    iframe.height = attribs.height;\n                                }\n                                figure.appendChild(iframe);\n                                if (attribs.title) {\n                                  let iframe_title = document.createElement('figcaption');\n                                  iframe_title.innerText = attribs.title;\n                                  iframe_title.style = 'font-size: 80%;';\n                                  figure.appendChild(iframe_title);\n                                }\n                                elem.appendChild(figure);\n                              }\n                            }\n                          }\n                        }\n                      } else if (par.attribs.class)\n                        console.log(par);\n                    }\n                  } else if (!['blockquote-quote', 'inline-ad-slot', 'track-viewed-percentage'].includes(par.type))\n                    console.log(par);\n                  if (elem.hasChildNodes())\n                    article.appendChild(elem);\n                }\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          }\n        }\n      }\n    }\n  }, 1000);\n  let ads = 'div[data-qa*=\"AdSlot\"], div.adblock-message';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('seattletimes.com')) {\n  let ads = 'div.top-ad-wrapper, div.ad, div.native-ad-article';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('sfstandard.com')) {\n  let ads = 'div.sticky';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(sg_sph_media_domains)) {\n  if (matchDomain('straitstimes.com')) {\n    func_post = function () {\n      header_nofix('main', 'div#sph_cdp_4:not(:empty)', 'BPC > no archive-fix');\n    }\n    let url = window.location.href;\n    getArchive(url, 'div[id][data-sdkids-campaigntype=\"pay_wall\"]', '', 'main');\n  } else if (matchDomain('businesstimes.com.sg')) {\n    let article = document.querySelector('div.body-content > div[class]');\n    if (article) {\n      let par_hidden = article.querySelectorAll('p.hidden');\n      if (par_hidden.length) {\n        par_hidden[0].parentNode.removeAttribute('class');\n        for (let elem of par_hidden)\n          elem.classList.remove('hidden');\n        let fade = article.querySelector('p[class*=\"bg-gradient-to-t\"]');\n        if (fade)\n          fade.className = par_hidden[0].className;\n      }\n    }\n  }\n  let ads = 'div.ads, div[id^=\"dfp-ad-\"], div.cx_paywall_placeholder, div[data-testid=\"cas-block-component\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('slate.com')) {\n  let slate_roadblock = '.slate-roadblock';\n  let ads = 'section[class*=\"-ad\"]';\n  hideDOMStyle(slate_roadblock + ', ' + ads);\n}\n\nelse if (matchDomain('slideshare.net')) {\n  let limit_overlay = document.querySelector('.limit-overlay');\n  if (limit_overlay)\n    limit_overlay.classList.remove('limit-overlay');\n}\n\nelse if (matchDomain('sltrib.com')) {\n  let ads = 'div.ad, div.stickyAd, div[class^=\"sltrib_medrec\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('sloanreview.mit.edu')) {\n  if (window.location.pathname.startsWith('/article/')) {\n    window.setTimeout(function () {\n      let pars = document.querySelectorAll('div.article-content > p');\n      if (pars.length && pars.length < 7)\n        refreshCurrentTab_bg();\n    }, 1000);\n  }\n}\n\nelse if (matchDomain('sofrep.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    let intro = document.querySelector('div.non-paywall');\n    removeDOMElement(intro);\n    waitDOMElement('div#paywall_wrap', 'DIV', node => removeDOMElement(node.parentNode));\n  }\n  let banners = document.querySelectorAll('#scrollerCTA, #botCta');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain('spglobal.com')) {\n  let overlay = document.querySelector('.article__overlay');\n  removeDOMElement(overlay);\n  let html_noscroll = document.querySelector('html[class]');\n  if (html_noscroll)\n    html_noscroll.removeAttribute('class');\n}\n\nelse if (matchDomain('standardmedia.co.ke')) {\n  let paywall = document.querySelector('div.fade-out-container');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text.replace(/[\\r\\n]/g, ''));\n        if (json) {\n          let json_text = parseHtmlEntities(breakText(json.articleBody)).replace(/[\\r\\n]/g, '<br>').replace(/[^<]+<br><br>/, '');\n          let article = document.querySelector('div.content');\n          if (json_text && article) {\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<p>' + DOMPurify.sanitize(json_text) + '</p>', 'text/html');\n            let article_new = doc.querySelector('p');\n            let pars_old = article.querySelectorAll('p:not([class])');\n            removeDOMElement(...pars_old);\n            article.appendChild(article_new);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = 'div.ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('staradvertiser.com')) {\n  let paywall = document.querySelectorAll('div.fade');\n  if (paywall.length) {\n    removeDOMElement(...paywall);\n    let div_hidden = document.querySelector('div#hsa-paywall-content[style]');\n    if (div_hidden)\n      div_hidden.removeAttribute('style');\n    let noscroll = document.querySelector('body.overflow-hidden');\n    if (noscroll)\n      noscroll.classList.remove('overflow-hidden');\n  }\n  let ads = 'div.promo-container, div.teads-inread';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('startribune.com')) {\n  let ads = 'div[data-testid$=\"-ad\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('statnews.com')) {\n  let paywall = document.querySelector('div.restricted-content-breaker');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let article = document.querySelector('div.entry-content, section.the-content');\n    if (article) {\n      let url = window.location.href;\n      article.before(googleSearchToolLink(url));\n    }\n  }\n  let ads = 'div.header-ad-wrap, div[class*=\"dfp-ad\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('stereogum.com')) {\n  let paywall = document.querySelector('div.members-only-overlay-wrapper');\n  if (paywall && dompurify_loaded) {\n    removeDOMElement(paywall);\n    let json_url_dom = document.querySelector('head > link[rel=\"alternate\"][type=\"application/json\"][href]');\n    if (json_url_dom) {\n      let json_url = json_url_dom.href;\n      fetch(json_url)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            try {\n              let json_text = json.acf.article_modules[0].copy.replace(/data-src/g, 'src');\n              let content = document.querySelector('div.article__content div.text-block__inner');\n              if (json_text && content) {\n                let parser = new DOMParser();\n                let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text, dompurify_options) + '</div>', 'text/html');\n                let content_new = doc.querySelector('div');\n                content.innerHTML = '';\n                content.appendChild(content_new);\n              }\n            } catch (err) {\n              console.log(err);\n            }\n          });\n        }\n      });\n    }\n  }\n}\n\nelse if (matchDomain('stocknews.com')) {\n  let hideme = document.querySelector('div#hideme');\n  removeDOMElement(hideme);\n  let blurmes = document.querySelectorAll('div[id^=\"blurme\"]');\n  for (let i = 0; i < blurmes.length; i++)\n    blurmes[i].setAttribute('id', 'blurmenot' + i);\n}\n\nelse if (matchDomain('study.com')) {\n  let faded_content = document.querySelector('div.faded-content');\n  if (faded_content)\n    faded_content.removeAttribute('class');\n  let div_hidden = document.querySelector('div.hidden[ng-non-bindable]');\n  if (div_hidden)\n    div_hidden.removeAttribute('class');\n  let banners = document.querySelectorAll('div.article-cutoff-div');\n  removeDOMElement(...banners);\n}\n\nelse if (matchDomain('swarajyamag.com')) {\n  if (!window.location.pathname.startsWith('/amp/')) {\n    let paywall = pageContains('h2', /Please Sign In To Continue Reading/);\n    let amphtml = document.querySelector('head > link[rel=\"amphtml\"]');\n    if (paywall.length) {\n      removeDOMElement(...paywall);\n      if (amphtml)\n        amp_redirect_not_loop(amphtml);\n    }\n  }\n}\n\nelse if (matchDomain('techinasia.com')) {\n  let paywall = document.querySelector('div.paywall-content');\n  if (paywall && dompurify_loaded) {\n    csDoneOnce = true;\n    hideDOMStyle('div.paywall-content');\n    let content_new = paywall.querySelector('div.content');\n    let empty_par = content_new.querySelector('a.flourish-credit:not(img), h2:not(:has(~ p))');\n    if (!empty_par) {\n      let div = document.createElement('div');\n      div.className = paywall.className.replace('paywall-content', '');\n      div.append(content_new);\n      paywall.before(div);\n      let container = document.querySelector('div.col div > div.container');\n      if (container)\n        container.classList.remove('container');\n    } else {\n      let url = window.location.href;\n      let url_xhr = url.replace('.com/', '.com/wp-json/techinasia/2.0/posts/').replace('/visual-story/', '/');\n      fetch(url_xhr)\n      .then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            let json_text = json.posts[0].content;\n            json_text = json_text.replace(/width\\=\\\"(\\d){3,}\\\"/g, 'width=\"100%\"').replace(/height\\=\\\"(\\d){3,}\\\"/g, 'height=\"100%\"');\n            if (json_text) {\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div class=\"content\">' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n              let content_new = doc.querySelector('div.content');\n              let content = document.querySelector('div.content');\n              if (content)\n                content_new.className = content.className;\n              paywall.before(content_new);\n            }\n          });\n        }\n      });\n    }\n  }\n  let splash_subscribe = document.querySelector('div.splash-subscribe');\n  let paywall_hard = document.querySelector('div.paywall-hard');\n  removeDOMElement(splash_subscribe, paywall_hard);\n}\n\nelse if (matchDomain(['techtarget.com', 'computerweekly.com', 'lemagit.fr'])) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.classList.remove('paywall');\n    let banners = document.querySelectorAll('p#firstP, div#inlineRegistrationWrapper');\n    removeDOMElement(...banners);\n  }\n}\n\nelse if (matchDomain('texasmonthly.com')) {\n  let ads = 'div.promo-in-body';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('the-american-interest.com')) {\n  let counter = document.getElementById('article-counter');\n  removeDOMElement(counter);\n}\n\nelse if (matchDomain('the-scientist.com')) {\n  let paywall = document.querySelector('div.paywall');\n  if (paywall) {\n    paywall.classList.remove('paywall');\n    let fader = document.querySelector('div.gated-fader');\n    let modal = document.querySelector('div#Modal');\n    removeDOMElement(fader, modal);\n  }\n}\n\nelse if (matchDomain('theamericanconservative.com')) {\n  let paywall_sel = 'section.c-blog-post__body--locked';\n  let paywall = document.querySelector(paywall_sel);\n  if (paywall) {\n    let art_options = {\n      art_append: 1,\n      func_text: function (json_text) {\n        if (json_text.includes('<p class=\"has-drop-cap\">')) {\n          let split = json_text.split(/(<p class=\"has-drop-cap\">)/);\n          json_text = split[1] + split[2];\n        };\n        return json_text;\n      }\n    };\n    getJsonUrl(paywall_sel, {rm_class: 'c-blog-post__body--locked'}, 'div.c-blog-post__content', art_options);\n  } else {\n    let img_dark = document.querySelector('div.c-hero-article__image-img.o-image');\n    if (img_dark)\n      img_dark.removeAttribute('class');\n  }\n  let modal = document.querySelector('div#emailsub-modal');\n  removeDOMElement(modal);\n  let noscroll = document.querySelector('body.modal-open');\n  if (noscroll)\n    noscroll.classList.remove('modal-open');\n}\n\nelse if (matchDomain('theamericanscholar.org')) {\n  getJsonUrl('div.ssagk-form', '', 'div.post_summary');\n}\n\nelse if (matchDomain('theatlantic.com')) {\n  let banners = 'aside#paywall, div[class^=\"LostInventoryMessage_\"]';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain('thebaltimorebanner.com')) {\n  let ads = 'div.article-body__inline-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('thebulletin.org')) {\n  getJsonUrl('div.article--cropped', '', 'div#body-copy', {art_append: 1});\n}\n\nelse if (matchDomain('thedailybeast.com')) {\n  let paywall = document.querySelector('div.Body__paywall-container');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = document.querySelector('script[displayName=\"initialState\"]');\n    if (json_script) {\n      let json_str = json_script.text.substring(json_script.textContent.indexOf('{'));\n      try {\n        let json = JSON.parse(json_str);\n        if (json.body) {\n          let pars = json.body.sections;\n          let cards = json.body.cards;\n          if (pars) {\n            let mobile_doc = document.querySelector('div.Mobiledoc');\n            if (mobile_doc) {\n              let mobile_doc_text = mobile_doc.innerText.replace(/(\\r|\\n)/g, '');\n              for (let elem of pars) {\n                let par_elem = '';\n                if (elem[0] === 1) {\n                  if (elem[1] === 'p') {\n                    let par = '';\n                    for (let part of elem[2])\n                      par += part[3];\n                    if (par && !mobile_doc_text.includes(par)) {\n                      par_elem = document.createElement('p');\n                      par_elem.innerText = par;\n                    }\n                  }\n                } else if (elem[0] === 10) {\n                  if (cards && cards[elem[1]]) {\n                    let card = cards[elem[1]];\n                    if (card[0] === 'pt-image') {\n                      par_elem = document.createElement('p');\n                      let par_fig = makeFigure(card[1].url, card[1].title + ' ' + card[1].credit);\n                      par_elem.appendChild(par_fig);\n                    } else if (card[0] === 'pt-fancy-links-card') {\n                      par_elem = document.createElement('p');\n                      let par_link = document.createElement('a');\n                      par_link.href = card[1].links;\n                      par_link.innerText = card[1].linksData[0].long_headline;\n                      par_elem.appendChild(par_link);\n                    }\n                  }\n                }\n                if (par_elem)\n                  mobile_doc.appendChild(par_elem);\n              }\n            }\n          }\n        }\n        csDoneOnce = true;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n  let ads = document.querySelectorAll('div > div.tdb-ads-block');\n  for (let ad of ads)\n    hideDOMElement(ad.parentNode);\n}\n\nelse if (matchDomain('thediplomat.com')) {\n  if (matchDomain('magazine.thediplomat.com')) {\n    let article = document.querySelector('article > section.h-96');\n    if (article && dompurify_loaded) {\n      article.classList.remove('h-96');\n      let art_body = article.querySelector('div.prose');\n      if (art_body) {\n        let art_img = article.parentNode.querySelector('figure > picture > img[src]');\n        let art_img_src;\n        let art_img_match;\n        if (art_img) {\n          art_img_src = art_img.getAttribute('src');\n          let match = art_img.getAttribute('src').match(/\\/media\\/\\d+\\/(\\w+)\\.\\w+/);\n          if (match)\n            art_img_match = match[1];\n        }\n        let url = window.location.href.split(/[#\\?]/)[0];\n        fetch(url)\n        .then(response => {\n          if (response.ok) {\n            response.text().then(html => {\n              if (html.includes('<script>window.__remixContext.streamController.enqueue(\"')) {\n                try {\n                  let source = (html.split('<script>window.__remixContext.streamController.enqueue(\"')[1].split(/\\](\\\\n)?\"\\);<\\/script>/)[0] + ']').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\\"/g, '\\\\\"');\n                  let json = JSON.parse(source);\n                  if (json) {\n                    let body_index = json.indexOf('body') + 1;\n                    if (body_index) {\n                      art_body.innerHTML = '';\n                      let parser = new DOMParser();\n                      for (let i = body_index; i < json.length; i++) {\n                        let par = json[i];\n                        if (typeof par === 'string') {\n                          if (par.startsWith('<p>')) {\n                            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par, dompurify_options) + '</div>', 'text/html');\n                            let par_new = doc.querySelector('div');\n                            let pars = par_new.querySelectorAll('p');\n                            for (let par of pars)\n                              art_body.appendChild(par);\n                          } else if (art_img_match && par !== art_img_match && par.includes(art_img_match.slice(0, -1))) {\n                            let caption;\n                            for (let n = i - 5; n < i; n++) {\n                              let item = json[n];\n                              if (typeof item === 'string' && !item.startsWith('<p>') && !['caption', 'credit_name', 'file', 'image'].includes(item) && !item.match(/\\d+_\\d+/))\n                                caption = caption ? caption + '\\r\\n' + item : item;\n                            }\n                            let figure = makeFigure(art_img_src.replace(art_img_match, par), caption);\n                            figure.style = 'margin: 20px 0px;';\n                            art_body.appendChild(figure);\n                          }\n                        }\n                      }\n                    }\n                  }\n                } catch (err) {\n                  console.log(err);\n                }\n              }\n            });\n          }\n        })\n      }\n      let fade = 'aside.bg-gradient-to-b';\n      hideDOMStyle(fade, 2);\n      let banner = document.querySelector('section > a[href^=\"https://thediplomat.com/subscriptions\"]');\n      if (banner)\n        removeDOMElement(banner.parentNode);\n    }\n  }\n  let ads = 'aside.td-ad-container--labeled, div[data-actirise]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('theglobeandmail.com')) {\n  let lazy_images = document.querySelectorAll('img[src^=\"data:image/\"][data-src]');\n  for (let elem of lazy_images)\n    elem.src = elem.getAttribute('data-src');\n  let ads = 'div.c-ad--base';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('thehill.com')) {\n  let banners = 'div.civic-science-article-container:empty, aside.ad-unit, iframe#instaread_iframe:not([src])';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain(['thehindu.com', 'thehindubusinessline.com'])) {\n  if (!window.location.pathname.endsWith('/amp/')) {\n    let counter = '#test';\n    let ads = 'div.ad, div.article-ad, div.dfp-ad, div#paywallbox, div[id^=\"piano-art-\"]';\n    hideDOMStyle(counter + ', ' + ads);\n  } else {\n    let ads = '[class^=\"height\"], [class^=\"advt\"], [id^=\"piano\"]';\n    hideDOMStyle(ads);\n  }\n  function hindu_main() {\n    if (window) {\n      window.Adblock = false;\n      window.isNonSubcribed = false;\n    }\n  }\n  insert_script(hindu_main);\n}\n\nelse if (matchDomain('theimpression.com')) {\n  let paywall = document.querySelector('div#modalpostsubscribe');\n  if (paywall) {\n    let blureffect = document.querySelectorAll('div.blureffect');\n    for (let elem of blureffect)\n      elem.classList.remove('blureffect');\n  }\n}\n\nelse if (matchDomain(['thejuggernaut.com', 'jgnt.co'])) {\n  let paywall = pageContains('div.font-mono', /(Read this article and many more by subscribing today|Join today to read the full story)/);\n  if (paywall.length) {\n    removeDOMElement(paywall[0].parentNode);\n    let json_script = document.querySelector('script#__NEXT_DATA__');\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json && json.props.pageProps.post.fields) {\n          let url_next = json.query.slug;\n          if (url_next && !window.location.pathname.includes(url_next))\n            refreshCurrentTab();\n          let fields = json.props.pageProps.post.fields;\n          let pars = fields.fullText ? fields.fullText.content : fields.textEssay.fields.body.content;\n          window.setTimeout(function () {\n          let article = document.querySelector('div[class*=\"opacity-\"]');\n          if (article) {\n            article.innerHTML = '';\n            article.removeAttribute('class');\n            let fade = document.querySelectorAll('div.bg-gradient-to-b');\n            for (let elem of fade)\n              elem.removeAttribute('class');\n            let modal = document.querySelector('div#headlessui-portal-root');\n            removeDOMElement(modal);\n            let par_first = true;\n            function attach_text(sub_item, elem) {\n              if (sub_item.value) {\n                let sub_elem = document.createElement('span');\n                sub_elem.innerText = sub_item.value;\n                if (sub_item.marks && sub_item.marks.length) {\n                  let style = '';\n                  for (let mark of sub_item.marks) {\n                    if (mark.type === 'bold')\n                      style += 'font-weight: bold;';\n                    else if (mark.type === 'italic')\n                      style += 'font-style: italic;';\n                    else if (mark.type === 'underline')\n                      style += 'text-decoration: underline;';\n                  }\n                  sub_elem.style = style;\n                }\n                elem.appendChild(sub_elem);\n              }\n            }\n            function attach_hyperlink(sub_item, elem) {\n              if (sub_item.content && sub_item.content[0] && sub_item.content[0].value && sub_item.data && sub_item.data.uri) {\n                let sub_elem = document.createElement('a');\n                sub_elem.href = sub_item.data.uri;\n                sub_elem.innerText = sub_item.content[0].value;\n                if (!matchUrlDomain(['thejuggernaut.com', 'jgnt.co'], sub_item.data.uri))\n                  sub_elem.target = '_blank';\n                sub_elem.style = 'text-decoration: underline;';\n                elem.appendChild(sub_elem);\n              }\n            }\n            function attach_paragraph(par, elem) {\n              if (par.content && par.content.length) {\n                let span_elem = document.createElement('span');\n                for (let item of par.content) {\n                  if (item.nodeType === 'text') {\n                    attach_text(item, span_elem);\n                  } else if (item.nodeType === 'hyperlink') {\n                    attach_hyperlink(item, span_elem);\n                  } else\n                    console.log(item);\n                }\n                elem.appendChild(span_elem);\n              }\n            }\n            for (let par of pars) {\n              let elem = document.createElement('p');\n              if (par.nodeType.match(/^(paragraph|heading-\\d)$/)) {\n                attach_paragraph(par, elem);\n              } else if (['blockquote'].includes(par.nodeType)) {\n                if (par.content && par.content.length) {\n                  for (let item of par.content) {\n                    if (item.nodeType === 'paragraph') {\n                      elem.style = 'margin: 0px 20px; font-style: italic;';\n                      attach_paragraph(item, elem);\n                    } else\n                      console.log(item);\n                  }\n                }\n              } else if (par.nodeType === 'hr') {\n                elem.appendChild(document.createElement('hr'));\n              } else if (par.nodeType === 'embedded-asset-block') {\n                if (!par_first) {\n                  if (par.data && par.data.target && par.data.target.fields) {\n                    if (par.data.target.fields.file && par.data.target.fields.file.url) {\n                      let figure = makeFigure(par.data.target.fields.file.url, par.data.target.fields.description);\n                      elem.appendChild(figure);\n                    }\n                  }\n                } else\n                  par_first = false;\n              } else if (par.nodeType === 'unordered-list') {\n                if (par.content && par.content.length) {\n                  let ul = document.createElement('ul');\n                  for (let item of par.content) {\n                    if (item.nodeType === 'list-item') {\n                      if (item.content) {\n                        for (let sub_item_par of item.content) {\n                          if (sub_item_par.nodeType === 'paragraph') {\n                            let li = document.createElement('li');\n                            attach_paragraph(sub_item_par, li);\n                            ul.appendChild(li);\n                          }\n                        }\n                      }\n                    } else\n                      console.log(item);\n                  }\n                  elem.appendChild(ul);\n                }\n              } else {\n                console.log(par);\n              }\n              if (elem.hasChildNodes()) {\n                article.appendChild(document.createElement('br'));\n                article.appendChild(elem);\n              }\n            }\n          }\n          }, 1000);\n        } else\n          refreshCurrentTab();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('thelampmagazine.com')) {\n  let paywall = document.querySelector('div.paywall-gradient');\n  if (paywall) {\n    paywall.removeAttribute('class');\n    let banner = document.querySelector('section.p-8');\n    removeDOMElement(banner);\n  }\n  let login = document.querySelectorAll('a.js-login-modal-trigger');\n  for (let elem of login) {\n    elem.removeAttribute('class');\n    let url_search = '/search?q=' + elem.innerText.replace(/\\s/g, '+');\n    elem.href = url_search;\n    elem.onclick = x => window.location.href = url_search;\n  }\n}\n\nelse if (matchDomain('thenewatlantis.com')) {\n  let article_gated = document.querySelector('.article-gated');\n  if (article_gated)\n    article_gated.classList.remove('article-gated');\n}\n\nelse if (matchDomain('thenewslens.com')) {\n  let paywall = document.querySelector('div.article-mask-box');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      let json = JSON.parse(json_script.text);\n      if (json) {\n        let json_text = json.articleBody;\n        let article = document.querySelector('section.article-body');\n        if (json_text && article) {\n          let article_text = article.innerText.replace(/\\n/g, '');\n          let split = json_text.split('。');\n          for (let elem of split) {\n            if (!elem.includes('(function(') && !article_text.includes(elem)) {\n              let par_new = document.createElement('p');\n              par_new.innerText = elem + '。';\n              article.append(par_new);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('thepointmag.com')) {\n  let overlay = document.querySelectorAll('div.overlay, div#tpopup-');\n  removeDOMElement(...overlay);\n}\n\nelse if (matchDomain('thequint.com')) {\n  window.setTimeout(function () {\n    let lock = document.querySelector('div > img[alt^=\"lock\"]');\n    if (lock && dompurify_loaded) {\n      lock.removeAttribute('alt');\n      let paywall = document.querySelector('div#paywall-widget');\n      if (paywall) {\n        removeDOMElement(paywall);\n        let article = document.querySelector('div.story-element');\n        if (article) {\n          let article_new = getArticleQuintype();\n          if (article_new && article.parentNode)\n            article.parentNode.replaceChild(article_new, article);\n        }\n      }\n      let body_hidden = document.querySelector('div#story-body-wrapper');\n      if (body_hidden) {\n        body_hidden.removeAttribute('class');\n        body_hidden.removeAttribute('style');\n      }\n      function thequint_unhide(node) {\n        node.removeAttribute('style');\n      }\n      waitDOMAttribute('div#story-body-wrapper', 'DIV', 'style', thequint_unhide, true);\n    }\n  }, 4000);\n}\n\nelse if (matchDomain('thespectator.com')) {\n  let div_hidden = document.querySelector('div.ev-meter-content-class');\n  if (div_hidden)\n    div_hidden.classList.remove('ev-meter-content-class');\n  let newsletter = pageContains('p', /^\\[special_offer\\]/);\n  removeDOMElement(...newsletter);\n  let ads = 'ins.adsbygoogle';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('theweek.com')) {\n  let paywall = document.querySelector('div.kiosq-main-layer');\n  removeDOMElement(paywall);\n  let locker = document.querySelector('div.paywall-locker');\n  if (locker)\n    locker.classList.remove('paywall-locker');\n}\n\nelse if (matchDomain('thewrap.com')) {\n  getJsonUrl('div#zephr-payment-form-root', '', 'div.entry-content', {art_append: 1});\n  let fade = document.querySelector('div.content-area div[style*=\"background-image: linear-gradient\"]');\n  removeDOMElement(fade);\n}\n\nelse if (matchDomain('timeshighereducation.com')) {\n  let paywall = document.querySelector('div.paywall-active');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let fade = document.querySelectorAll('div.paywall-fade');\n    for (let elem of fade)\n      elem.classList.remove('paywall-fade');\n  }\n  let hidden_images = document.querySelectorAll('img.b-lazy[src^=\"data:image/\"][data-src]');\n  for (let hidden_image of hidden_images) {\n    hidden_image.setAttribute('src', hidden_image.getAttribute('data-src'));\n    hidden_image.classList.remove('b-lazy');\n    hidden_image.parentElement.classList.remove('media--loading');\n  }\n  let ads = 'div[data-ad-page], section.block-the-dfp';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(timesofindia_domains)) {\n  if (matchDomain('epaper.indiatimes.com')) {\n    let blocker = document.querySelector('div.epaperBlockerWrap');\n    removeDOMElement(blocker);\n    if (window.location.pathname.startsWith('/english-news-paper-today-toi-print-edition/')) {\n      let paywall = document.querySelector('section#blocker');\n      if (paywall) {\n        let fq = document.querySelector('section#fq');\n        removeDOMElement(paywall, fq);\n        let json_script = getArticleJsonScript();\n        if (json_script) {\n          let json = JSON.parse(json_script.text);\n          if (json) {\n            let json_text = json.articleBody;\n            let content = document.querySelector('section[type=\"synopsis\"]');\n            if (json_text && content) {\n              let article_new = document.createElement('p');\n              article_new.innerText = breakText(json_text);\n              content.innerHTML = '';\n              addStyle('[type=\"synopsis\"]::after {background: none !important;}');\n              content.appendChild(article_new);\n            }\n          }\n        }\n      }\n    }\n  } else {\n    let url = window.location.href;\n    let region_block = document.querySelector('div.plan-popup.active');\n    if (region_block) {\n      removeDOMElement(region_block);\n      let overflow = document.querySelector('html[style]');\n      if (overflow)\n        overflow.removeAttribute('style');\n    }\n    if (!window.location.pathname.includes('/amp_')) {\n      let paywall = document.querySelector('div[id^=\"story-blocker\"]');\n      if (paywall && dompurify_loaded) {\n        removeDOMElement(paywall);\n        let json_script = getArticleJsonScript();\n        if (json_script) {\n          try {\n            let json = JSON.parse(json_script.text);\n            if (json) {\n              let json_text = json.articleBody;\n              let article = document.querySelector('div.paywall');\n              if (json_text && article) {\n                if (!json_text.match(/\\s(src|href)=/))\n                  json_text = breakText(json_text).replace(/\\n\\n/g, '<br><br>');\n                window.setTimeout(function () {\n                  let parser = new DOMParser();\n                  let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(parseHtmlEntities(json_text), dompurify_options) + '</div>', 'text/html');\n                  let article_new = doc.querySelector('div');\n                  if (article_new) {\n                    article.innerHTML = '';\n                    article.appendChild(article_new);\n                  }\n                }, 1500);\n                addStyle('div.paywall::after {background-image: none !important;}');\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n        window.setTimeout(function () {\n          let popup_button = document.querySelector('div.primeshow button:not([data-type])');\n          if (popup_button)\n            popup_button.click();\n        }, 1000);\n        let banners = 'div.bannerBenefitsWrapper';\n        hideDOMStyle(banners);\n      }\n    } else {\n      ampToHtml();\n    }\n  }\n}\n\nelse if (matchDomain(no_dn_media_domains)) {\n  if (matchDomain('tradewindsnews.com')) {\n    if (window.location.pathname.startsWith('/markets/')) {\n      let paywall = document.querySelector('iframe[src]');\n      removeDOMElement(paywall);\n      let overflow = document.querySelector('body[style]');\n      if (overflow)\n        overflow.removeAttribute('style');\n      let blurred = document.querySelector('body > div[style]');\n      if (blurred)\n        blurred.removeAttribute('style');\n    } else {\n       header_nofix('div.article-body > div', 'div[style*=\"background-image: linear-gradient\"]');\n    }\n  } else {\n    window.setTimeout(function () {\n      let paywall = document.querySelector('div.dn-paywall > div#sub-paywall-container');\n      if (paywall && dompurify_loaded) {\n        removeDOMElement(paywall.parentNode);\n        let article = document.querySelector('div#dn-content');\n        let json_script = document.querySelector('script#__NUXT_DATA__');\n        if (json_script) {\n          try {\n            let pars = JSON.parse(json_script.text);\n            let article_id_index = pars.indexOf('global-article') + 1;\n            if (article_id_index) {\n              let article_id = pars[article_id_index];\n              if (article_id && !window.location.pathname.endsWith(article_id)) {\n                refreshCurrentTab();\n                return;\n              }\n            }\n            article.innerHTML = '';\n            article.classList.remove('shadow');\n            let img_first = true;\n            let parser = new DOMParser();\n            for (let par of pars) {\n              let elem;\n              if (par && par.type) {\n                let type = pars[par.type];\n                if (['text', 'subhead'].includes(type)) {\n                  if (par.html || par.value) {\n                    let index = par.html || par.value;\n                    let json_text = pars[index];\n                    let content_new = parser.parseFromString('<p class=\"dn-text\">' + DOMPurify.sanitize(json_text) + '</p>', 'text/html');\n                    elem = content_new.querySelector('p');\n                    if (par.value)\n                      elem.style = 'font-weight: bold;';\n                  }\n                } else if (type === 'picture') {\n                  if (img_first)\n                    img_first = false;\n                  else {\n                    let caption_text = pars[par.caption];\n                    if (par.credit)\n                      caption_text += ' (' + pars[par.credit] + ')';\n                    elem = makeFigure(pars[par.src], caption_text);\n                    elem.className = 'dn-image';\n                  }\n                } else if (type === 'factbox') {\n                  elem = document.createElement('p');\n                  if (par.title)\n                    elem.innerText = pars[par.title];\n                  if (par.html) {\n                    let content_new = parser.parseFromString('<div>' + DOMPurify.sanitize(pars[par.html]) + '</div>', 'text/html');\n                    let box = content_new.querySelector('div');\n                    elem.appendChild(box);\n                  }\n                } else if (type === 'news' && par.title && par.url) {\n                  elem = document.createElement('p');\n                  let sub_elem = document.createElement('a');\n                  sub_elem.href = pars[par.url];\n                  sub_elem.innerText = 'Related: ' + pars[par.title];\n                  sub_elem.style = 'font-weight: bold;';\n                  elem.appendChild(sub_elem);\n                } else if (!['ad', 'adobetarget', 'author', 'break', 'embed', 'Emne', 'Location', 'news', 'Organisasjon', 'Organisation', 'Organization', 'promobox', 'Person', 'Personer', 'Region', 'Regions', 'related', 'Sector', 'Sectors', 'Selskap', 'Sted', 'Topic'].includes(type)) {\n                  for (let item in par) {\n                    console.log(item);\n                    console.log(pars[par[item]]);\n                  }\n                }\n                if (elem)\n                  article.appendChild(elem);\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      } else if (matchDomain('dn.no') && window.location.pathname.match(/^\\/(d2|magasinet|smak)\\//)) {\n        let paywall = document.querySelector('div#sub-paywall-container');\n        if (paywall) {\n          removeDOMElement(paywall);\n          let article = document.querySelector('p.vrs-article-header__summary');\n          if (article) {\n            let url = window.location.href;\n            article.firstChild.before(googleSearchToolLink(url));\n          }\n        }\n      }\n    }, 1000);\n  }\n}\n\nelse if (matchDomain(usa_conde_nast_domains)) {\n  let maps = document.querySelectorAll('div.map_wrapper');\n  for (let elem of maps)\n    elem.style.visibility = 'visible';\n  let banners = 'div.ad, aside.paywall-bar, div[class^=\"MessageBannerWrapper-\"], div.ad-stickyhero, div.ad_wrapper';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain(usa_craincomm_domains)) {\n  if (domain = matchDomain(['adage.com', 'autonews.com'])) {\n    let paywall = document.querySelector('div#piano-paywall-container');\n    let article = document.querySelector('article.b-article-body');\n    if (paywall && article && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let fusion_script = document.querySelector('script#fusion-metadata');\n      if (fusion_script && fusion_script.text.includes('Fusion.globalContent=')) {\n        try {\n          let json = JSON.parse(fusion_script.text.split('Fusion.globalContent=')[1].split(';Fusion.')[0]);\n          if (json) {\n            article.innerHTML = '';\n            let parser = new DOMParser();\n            let pars = json.content_elements;\n            for (let par of pars) {\n              let par_new;\n              if (['header', 'text'].includes(par.type)) {\n                if (par.content) {\n                  let doc = parser.parseFromString('<p class=\"c-paragraph\">' + DOMPurify.sanitize(par.content) + '</p>', 'text/html');\n                  par_new = doc.querySelector('p');\n                }\n              } else if (par.type === 'image') {\n                if (par.url) {\n                  let caption_text = par.caption;\n                  if (par.credits && par.credits.affiliation && par.credits.affiliation[0] && par.credits.affiliation[0].name)\n                    caption_text += ' (' + par.credits.affiliation[0].name + ')';\n                  par_new = makeFigure(par.url, caption_text);\n                }\n              } else if (par.type === 'raw_html') {\n                let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(par.content, dompurify_options) + '</div>', 'text/html');\n                par_new = doc.querySelector('div');\n              } else if (par.raw_oembed) {\n                if (par.raw_oembed._id) {\n                  par_new = document.createElement('p');\n                  let par_link = document.createElement('a');\n                  par_link.href = par_link.innerText = par.raw_oembed._id.replace(/\\/$/, '');\n                  par_link.target = '_blank';\n                  par_new.appendChild(par_link);\n                }\n              } else if (par.type === 'video') {\n                if (par.canonical_url) {\n                  if (domain.startsWith(par.canonical_website)) {\n                    par_new = document.createElement('p');\n                    let par_link = document.createElement('a');\n                    par_link.href = par_link.innerText = 'https://www.' + domain + par.canonical_url.replace(/\\/$/, '');\n                    par_link.target = '_blank';\n                    par_new.appendChild(par_link);\n                  } else\n                    console.log(par);\n                }\n              } else if (par.type === 'list') {\n                if (par.items) {\n                  par_new = document.createElement('ul');\n                  for (let item of par.items) {\n                    let li = document.createElement('li');\n                    let doc = parser.parseFromString('<span>' + DOMPurify.sanitize(item.content) + '</span>', 'text/html');\n                    let span = doc.querySelector('span');\n                    li.appendChild(span);\n                    par_new.appendChild(li);\n                  }\n                }\n              } else if (!['custom_embed'].includes(par.type)) {\n                console.log(par);\n              }\n              if (par_new)\n                article.appendChild(par_new);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  } else if (matchDomain('european-rubber-journal.com')) {\n    let paywall = document.querySelector('div.article-overlay');\n    if (paywall) {\n      let fade = document.querySelector('div.gradient');\n      removeDOMElement(paywall, fade);\n      let truncated = document.querySelector('div.truncated');\n      if (truncated)\n        truncated.classList.remove('truncated');\n    }\n  } else if (matchDomain(['pionline.com', 'rubbernews.com'])) {\n    let body_hidden = document.querySelector('body[class]');\n    if (body_hidden)\n      body_hidden.removeAttribute('class');\n    let lazy_images = document.querySelectorAll('img.lazy[data-src]');\n    for (let lazy_image of lazy_images) {\n      lazy_image.src = lazy_image.getAttribute('data-src');\n      lazy_image.removeAttribute('class');\n    }\n    let lazy_sources = document.querySelectorAll('source[srcset^=\"data:image\"]');\n    removeDOMElement(...lazy_sources);\n  } else {\n    let sponsored_article = document.querySelector('div.sponsored-article');\n    if (sponsored_article)\n      sponsored_article.classList.remove('sponsored-article');\n  }\n  let ads = 'div.footer__ads-footer';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(usa_nymag_domains)) {\n  let ads = 'div.m-ad, section.ad-splash, aside.ad_static';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(usa_outside_mag_domains)) {\n  let ads = 'div.js-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(usa_penske_media_domains)) {\n  let ads = 'div.admz';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(usa_tribune_domains)) {\n  getJsonUrl('div.paywall-container', '', 'div.body-copy', {art_class: 'body-copy'});\n  let ads = 'div.dfp-ad';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('usatoday.com')) {\n  if (window.location.hostname.startsWith('amp.')) {\n    amp_unhide_access_hide('=\"gup.hasAssetAccess\"', '', 'div[class*=\"ad-\"]');\n  } else {\n    let roadblock = document.querySelector('.roadblock-container');\n    if (roadblock) {\n      removeDOMElement(roadblock);\n      article_next = document.querySelector('article.next-in-depth-story > div.article-inner');\n      if (article_next) {\n        let url = article_next.getAttribute('data-url');\n        let weblink = document.createElement('a');\n        weblink.href = url;\n        weblink.innerText = 'open next in-depth story';\n        article_next.appendChild(weblink);\n      }\n    }\n  }\n}\n\nelse if (matchDomain('vice.com')) {\n  let paywall = document.querySelectorAll('iframe.swg-dialog, swg-popup-background');\n  removeDOMElement(...paywall);\n  let noscroll = document.querySelector('body.swg-disable-scroll');\n  if (noscroll)\n    noscroll.classList.remove('swg-disable-scroll');\n  let ads = 'div.lngtd-dyn-ph';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('vikatan.com')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('div#paywallDisplay');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let json_script = getArticleJsonScript();\n      if (json_script) {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let json_text = parseHtmlEntities(json.articleBody);\n          let content = document.querySelector('div.story-element > div');\n          if (json_text && content) {\n            let parser = new DOMParser();\n            let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(json_text) + '</div>', 'text/html');\n            let content_new = doc.querySelector('div');\n            content.parentNode.replaceChild(content_new, content);\n          }\n        }\n      }\n    }\n    let story_hidden = document.querySelector('div[class^=\"styles-m__story-card-wrapper_\"]');\n    if (story_hidden)\n      story_hidden.removeAttribute('class');\n  }, 500);\n}\n\nelse if (matchDomain('voguebusiness.com')) {\n  let article = document.querySelector('article');\n  if (article) {\n    let pars = article.querySelectorAll('p:not([class]), p.paywall');\n    if (pars.length < 5) {\n      removeDOMElement(...pars);\n      let filter = /^window\\.__PRELOADED_STATE__\\s?=\\s?/;\n      let json_script = getSourceJsonScript(filter, '[type]:not([src])');\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.text.split(filter)[1].split('};')[0] + '}');\n          let body = document.querySelector('div.body__inner-container');\n          if (body) {\n            let pars = json.transformed.article.body;\n            function makeElem(elem, par_elem) {\n              if (Array.isArray(elem) && elem.length) {\n                let elem_new;\n                let item = elem[0];\n                if (typeof item === 'string') {\n                  if (['p', 'h2', 'em', 'strong'].includes(item)) {\n                    elem_new = document.createElement(item);\n                    par_elem.appendChild(elem_new);\n                    elem.shift();\n                    makeElem(elem, elem_new);\n                  } else if (item === 'a' && elem.length > 2) {\n                    elem_new = document.createElement('a');\n                    let a_data = elem[1];\n                    elem_new.href = a_data.href;\n                    if (a_data.isExternal)\n                      elem_new.target = '_blank';\n                    makeElem(elem.slice(2), elem_new);\n                    par_elem.appendChild(elem_new);\n                  } else if (item === 'inline-embed' || !(['ad', 'cm-unit', 'inline-newsletter', 'journey-inline-newsletter', 'native-ad'].includes(item) || (item.length < 30 && item.includes('inline-embed')))) {\n                    if (item === 'inline-embed') {\n                      let img_data = elem[1];\n                      if (img_data && img_data.type === 'image') {\n                        if (img_data.props && img_data.props.image && img_data.props.image.sources) {\n                          let caption_text;\n                          if (img_data.props.dangerousCaption) {\n                            caption_text = img_data.props.dangerousCaption.replace(/<\\/?\\w+>/g, '');\n                            if (img_data.props.dangerousCredit)\n                              caption_text += ' ' + img_data.props.dangerousCredit;\n                          }\n                          let figure = makeFigure(img_data.props.image.sources.lg.url, caption_text);\n                          par_elem.appendChild(figure);\n                        }\n                      }\n                    } else {\n                      elem_new = document.createTextNode(item);\n                      par_elem.appendChild(elem_new);\n                      elem.shift();\n                      makeElem(elem, par_elem);\n                    }\n                  }\n                } else if (Array.isArray(item)) {\n                  if (['a', 'em', 'strong'].includes(item[0])) {\n                    makeElem(item, par_elem);\n                    elem.shift();\n                    makeElem(elem, par_elem);\n                  } else {\n                    console.log(item);\n                  }\n                } else if (typeof item === 'object') {\n                  if (!item.class)\n                    console.log(item);\n                  elem.shift();\n                  makeElem(elem, par_elem);\n                }\n              } else if (typeof elem === 'string' && !['div'].includes(elem)) {\n                par_elem.appendChild(document.createTextNode(elem));\n              }\n            }\n            for (let par of pars)\n              makeElem(par, body);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }\n}\n\nelse if (matchDomain('vox.com')) {\n  let ads = 'div[id^=\"div-gpt-ad-\"]';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('washingtonpost.com')) {\n  let leaderboard = '#leaderboard-wrapper';\n  let ads = 'div[data-qa$=\"-ad\"], div[data-component=\"Ad\"], div[data-qa=\"outbrain\"]';\n  hideDOMStyle(leaderboard + ', ' + ads);\n}\n\nelse if (matchDomain('winnipegfreepress.com')) {\n  let ads = '.billboard-ad-space, .ad, .article-ad, .fixed-sky';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('wsj.com')) {\n  if (!matchDomain('cn.wsj.com'))\n    blockJsReferrer();\n  if (window.location.pathname.startsWith('/livecoverage/')) {\n    window.setTimeout(function () {\n      fix_dowjones_live();\n    }, 1500);\n  } else {\n    let paywall = document.querySelector('.snippet-promotion, div[id*=\"-snippet-overlay\"]');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let article = document.querySelector('article section');\n      let article_id_dom = document.querySelector('head > meta[name=\"article.id\"][content]');\n      if (article && article_id_dom) {\n        article.removeAttribute('class');\n        let article_id = article_id_dom.content;\n        let url_src = 'https://mats.mobile.dowjones.io/translate/' + article_id + '/jpml';\n        let x_api_key = cs_param['x-api-key'] || 'e05995ff442143255eb8381f72d4913bf7503d6c';\n        getExtFetch(url_src, '', {\"x-api-key\": x_api_key}, main_wsj_pro);\n        function main_wsj_pro(url_src, data) {\n          try {\n            if (data) {\n              let intro = article.querySelectorAll('p[class][data-type=\"paragraph\"]');\n              let par_class;\n              if (intro[0]) {\n                par_class = intro[0].className;\n                removeDOMElement(...intro);\n              }\n              let parser = new DOMParser();\n              let doc = parser.parseFromString(data, \"application/xml\");\n              let body = doc.querySelector('panel#body');\n              if (body) {\n                let media_bucket = doc.querySelector('panel#metadata > p#media-bucket');\n                let media_items = [];\n                let schema_data = [];\n                if (media_bucket) {\n                  media_items = JSON.parse(media_bucket.innerHTML).items.filter(x => ['image', 'video', 'youtube'].includes(x.type));\n                  if (media_items.length) {\n                    let video = document.querySelector('div[data-type=\"video\"]');\n                    if (!(video && media_items[0].type !== 'video'))\n                      media_items = media_items.slice(1);\n                    let schema_script = document.querySelector('script#articleschema');\n                    if (schema_script)\n                      schema_data = JSON.parse(schema_script.text);\n                  }\n                }\n                let pars = body.querySelectorAll('p[class], h2, h3, panel.media-item');\n                let par_first = true;\n                let image_nr = 0;\n                let par_new;\n                for (let par of pars) {\n                  if (par.tagName === 'p') {\n                    if (par_first)\n                      par_first = false;\n                    let doc = parser.parseFromString('<p class=\"' + par_class + '\" data-type=\"paragraph\">' + DOMPurify.sanitize(par.innerHTML.replace(/(<\\/?mark([^>]+)?>)/g, ''), dompurify_options) + '</p>', 'text/html');\n                    par_new = doc.querySelector('p');\n                    if (par_new) {\n                      let app_links = par_new.querySelectorAll('a[data-canonical-url][href^=\"wsj:\"], a[data-canonical-url]:not([href])');\n                      for (let elem of app_links)\n                        elem.href = elem.getAttribute('data-canonical-url');\n                    }\n                  } else if (!par_first && par.tagName === 'panel') {\n                    if (media_items[image_nr]) {\n                      let media_item = media_items[image_nr];\n                      if (media_item.type === 'image' && media_item['manifest-url']) {\n                        par_new = makeFigure(media_item['manifest-url'], media_item.caption + ' PHOTO: ' + media_item.credit.toUpperCase(), {style: 'width: 100%;'});\n                      } else if (media_item.type === 'video' && media_item.sourceid) {\n                        par_new = document.createElement('p');\n                        par_new.className = par_class;\n                        let title = document.createTextNode(media_item.title);\n                        let video = document.createElement('iframe');\n                        video.src = schema_data.find(x => x['@type'] === 'VideoObject' && x.embedUrl.includes(media_item.sourceid)).embedUrl;\n                        video.style = 'width: ' + article.offsetWidth + 'px; height: ' + article.offsetWidth * 3 / 4 + 'px;';\n                        let caption = document.createTextNode(media_item.caption + ' ' + media_item.credit);\n                        par_new.append(title, video, caption);\n                      } else if (media_item.type === 'youtube' && media_item['sourceid']) {\n                        par_new = document.createElement('iframe');\n                        par_new.src = 'https://www.youtube.com/embed/' + media_item['sourceid'];\n                        par_new.style = 'width: 100%; height: 400px;';\n                      } else {\n                        console.log(media_item);\n                      }\n                      image_nr++;\n                    }\n                  } else if (!par_first && par.tagName) {\n                    let doc = parser.parseFromString('<' + par.tagName + '>' + DOMPurify.sanitize(par.innerHTML, dompurify_options) + '</' + par.tagName + '>', 'text/html');\n                    par_new = doc.querySelector(par.tagName);\n                  }\n                  if (par_new)\n                    article.appendChild(par_new);\n                }\n              }\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n  let ads = 'div.wsj-ad, div.adWrapper, div.css-xgokil-Box, div#cx-article-cover-overlay';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain('zerohedge.com')) {\n  window.setTimeout(function () {\n    let paywall = document.querySelector('div[class^=\"PremiumOverlay_container__\"]');\n    if (paywall && dompurify_loaded) {\n      removeDOMElement(paywall);\n      let json_script = document.querySelector('script#__NEXT_DATA__');\n      if (json_script) {\n        try {\n          let json = JSON.parse(json_script.innerText);\n          if (json && json.props.pageProps.node.body) {\n            let article_new = parseHtmlEntities(decode_utf8(atob(json.props.pageProps.node.body.substring(21))));\n            let article = document.querySelector('div[class^=\"NodeContent_mainContent__\"');\n            if (article) {\n              article.innerHTML = '';\n              let parser = new DOMParser();\n              let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(article_new) + '</div>', 'text/html');\n              let content_new = doc.querySelector('div');\n              article.appendChild(content_new);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }, 1000);\n}\n\nelse if (matchDomain(ke_nation_media_domains) || matchDomain(ke_nation_media_custom_domains)) {\n  let paywall = document.querySelectorAll('div.modal, [id*=\"wall\"], section.wall-guard');\n  if (paywall.length && dompurify_loaded) {\n    removeDOMElement(...paywall);\n    func_post = function () {\n      let div_hidden = document.querySelectorAll('div.article-page .nmgp');\n      for (let elem of div_hidden)\n        elem.classList.remove('nmgp');\n      let page_hidden = document.querySelector('div.article-page .hidden');\n      if (page_hidden)\n        page_hidden.classList.remove('hidden');\n      let lazy_images = document.querySelectorAll('img.lazy-img[data-srcset]:not([src])');\n      for (let elem of lazy_images) {\n        elem.src = elem.getAttribute('data-srcset').split(',').pop().split(' ')[0];\n        elem.classList.remove('lazy-img');\n        elem.style = 'margin: 0px 20px';\n      }\n      let videos = document.querySelectorAll('iframe.lazy-iframe_iframe[data-src]:not([src])');\n      for (let elem of videos) {\n        elem.src = elem.getAttribute('data-src');\n        elem.removeAttribute('class');\n      }\n    }\n    let url = window.location.href;\n    replaceDomElementExt(url, false, false, 'div.blk-txt');\n  }\n  let banners = 'div.banner, div.spinner';\n  hideDOMStyle(banners);\n}\n\nelse if (matchDomain(['oed.com']) || (window.location.hostname.replace(/^www\\./, '').startsWith('oxford') && document.querySelector('div[id^=\"footer\"] a[href=\"http://www.oup.com/\"]'))) {\n  let paywall_sel = 'div.contentRestrictedMessage';\n  let article_sel = 'div#readPanel > div';\n  if (matchDomain('oed.com')) {\n    paywall_sel = 'div.paywallOptions';\n    article_sel = 'div#entry_content';\n  }\n  header_nofix(article_sel, paywall_sel, cs_param.signin_text || 'BPC > Sign in with library card 12345678 or 11111111 & library of Royal Bor. of Kensington and Chelsea');\n}\n\nelse if (matchDomain(usa_gannett_domains) || document.querySelector('head > link[href*=\".gannettdigital.com/\"], head > link[href*=\".gannett-cdn.com/\"]')) {\n  if (window.location.pathname.endsWith('/restricted/') && window.location.search.startsWith('?return='))\n    window.location.href = decodeURIComponent(window.location.href.split('?return=')[1]);\n}\n\nelse if (matchDomain(usa_hearst_comm_domains) || document.querySelector('head > script[src*=\"/treg.hearstnp.com/\"]')) {\n  let overlay = document.querySelector('div > div#modalOuter');\n  if (overlay) {\n    hideDOMElement(overlay.parentNode);\n    let noscroll = document.querySelector('body[style]');\n    if (noscroll)\n      noscroll.removeAttribute('style');\n  }\n  let ads = pageContains('div > div > p', 'Article continues below this ad');\n  for (let elem of ads)\n    hideDOMElement(elem.parentNode.parentNode);\n}\n\nelse if ((domain = matchDomain(usa_lee_ent_domains)) || matchDomain(ca_torstar_domains.concat(['abqjournal.com'])) || document.querySelector('head > meta[name=\"tncms-access-version\"]')) {\n  if (window.location.pathname.endsWith('.amp.html')) {\n    amp_unhide_access_hide('=\"hasAccess\"', '=\"NOT hasAccess\"', '.amp-ads-container');\n    let elem_hidden = document.querySelectorAll('html[class], body[class]');\n    for (let elem of elem_hidden)\n      elem.removeAttribute('class');\n    let amp_images = document.querySelectorAll('div.main-content amp-img[src^=\"https://\"]');\n    for (let amp_image of amp_images) {\n      let elem = document.createElement('img');\n      Object.assign(elem, {\n        src: amp_image.getAttribute('src'),\n        alt: amp_image.getAttribute('alt'),\n        height: '400'\n      });\n      amp_image.parentNode.replaceChild(elem, amp_image);\n    }\n  } else {\n    if (!domain) {\n      function unscramble(t) {\n        for (var n = \"\", i = 0, r = t.length; i < r; i++) {\n          var s = t.charCodeAt(i);\n          if (s >= 33 && s <= 126) {\n            var sTmp = String.fromCharCode(33 + (s - 33 + 47) % 94);\n            n += sTmp;\n          } else\n            n += t.charAt(i);\n        }\n        return n;\n      }\n      let paywall = document.querySelector('div.subscriber-offers');\n      removeDOMElement(paywall);\n      let subscriber_only = document.querySelectorAll('div.subscriber-only');\n      for (let elem of subscriber_only) {\n        if (elem.classList.contains('encrypted-content') && dompurify_loaded) {\n          let parser = new DOMParser();\n          let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(unscramble(elem.innerText)) + '</div>', 'text/html');\n          let content_new = doc.querySelector('div');\n          elem.parentNode.replaceChild(content_new, elem);\n        }\n        elem.removeAttribute('style');\n        elem.removeAttribute('class');\n      }\n      let banners = document.querySelectorAll('div.subscription-required, div.redacted-overlay');\n      removeDOMElement(...banners);\n    }\n    let ads = 'div.tnt-ads-container, div[class*=\"adLabelWrapper\"], div.globalHeaderBillboard';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (matchDomain(usa_mcc_domains) || document.querySelector('section.bottom-nav > a[href^=\"https://www.mcclatchy.com/privacy-policy\"]')) {\n  if (window.location.hostname.startsWith('amp.')) {\n    amp_unhide_subscr_section();\n    let subscriptions_action = document.querySelector('div[subscriptions-action][subscriptions-display=\"NOT data.hasError\"]');\n    if (subscriptions_action)\n      subscriptions_action.removeAttribute('subscriptions-action');\n    let art_cropped = document.querySelector('div.article-body.cropped');\n    if (art_cropped)\n      art_cropped.classList.remove('cropped');\n    let subscr_tag = document.querySelector('div#subscriber-exclusive-tag');\n    let amp_players = document.querySelectorAll('amp-connatix-player, amp-iframe.trinity-player');\n    removeDOMElement(subscr_tag, ...amp_players);\n    let amp_images = document.querySelectorAll('amp-img[srcset]:not([src])');\n    for (let elem of amp_images) {\n      let img = document.createElement('img');\n      img.src = elem.getAttribute('srcset').split(' ')[0],\n      img.alt = elem.getAttribute('alt'),\n      img.style = 'width: 100%;';\n      elem.parentNode.replaceChild(img, elem);\n    }\n  } else {\n    window.setTimeout(function () {\n      let paywall = document.querySelector('p#yzwall');\n      if (paywall) {\n        removeDOMElement(paywall);\n        let pars_hidden = document.querySelectorAll('.yzfade, .yzarret');\n        for (let elem of pars_hidden)\n          elem.removeAttribute('class');\n      }\n    }, 1000);\n  }\n  let ads = 'div[data-type=\"ad\"], div.vf-promo, div#ymovrly';\n  hideDOMStyle(ads);\n}\n\nelse if (matchDomain(usa_mng_domains) || document.querySelector('head > link[rel=\"stylesheet\"][id^=\"dfm-accuweather-\"], footer li > a[href^=\"https://www.medianewsgroup.com\"]')) {\n  if (window.location.pathname.endsWith('/amp/'))\n    amp_unhide_subscr_section('div.ampWrapperInside, div#paywall');\n  else if (dompurify_loaded) {\n    let paywall_sel = '#server-paywall';\n    let paywall = document.querySelector(paywall_sel);\n    let article_sel = 'div.body-copy';\n    let article = document.querySelector(article_sel);\n    if (paywall && article) {\n      func_post = function () {\n        let slideshow = article.querySelector('div.article-slideshow');\n        if (slideshow) {\n          slideshow.removeAttribute('class');\n          let image_wrappers = slideshow.querySelectorAll('div.image-wrapper');\n          for (let elem of image_wrappers) {\n            elem.removeAttribute('class');\n            elem.style = 'margin: 20px 0px;';\n          }\n          let caption = 'div.mng-gallery-information-container, button.icon-close';\n          hideDOMStyle(caption, 2);\n        }\n        if (iframe)\n          article.appendChild(iframe);\n      }\n      let iframe = article.querySelector('iframe');\n      getJsonUrl(paywall_sel, '', article_sel, {art_append: 1, art_class: 'body-copy'});\n    }\n    let ads = 'div.dfp-ad';\n    hideDOMStyle(ads);\n  }\n}\n\nelse if (document.querySelector('head > script[src*=\".axate.io/\"]')) {\n  let premium = document.querySelector('.premium, div[class*=\"-premium\"]');\n  if (premium)\n    premium.removeAttribute('class');\n}\n\nelse if (document.querySelector('head > meta[property][content^=\"https://cdn.forumcomm.com/\"]')) {\n  let ads = 'div.GoogleDfpAd-Content';\n  hideDOMStyle(ads);\n}\n\nelse if (document.querySelector('head > script[src*=\".postmedia.digital/\"], head > meta[content*=\".postmedia.digital/\"]')) {\n  let ads = 'div.ad__section-border, div[id^=\"tbl_\"], div.js-widget-content';\n  hideDOMStyle(ads);\n}\n\nelse\n  csDone = true;\n}\n\n} // end csDone(Once)\n\n} // end cs_default function\n\nif (document.querySelector('head > link[href*=\"/leaky-paywall\"], script[src*=\"/leaky-paywall\"], div[id^=\"issuem-leaky-paywall-\"]')) {\n  let js_cookie = document.querySelector('script#leaky_paywall_cookie_js-js-extra');\n  if (js_cookie && js_cookie.text.includes('\"post_container\":\"')) {\n    let post_sel = js_cookie.text.split('\"post_container\":\"')[1].split('\"')[0];\n    if (post_sel) {\n      let post = document.querySelector(post_sel);\n      if (post)\n        post.removeAttribute('class');\n    }\n  }\n}\n\n// General Functions\nfunction removeDOMElement(...elements) {\n  for (let element of elements) {\n    if (element)\n      element.remove();\n  }\n}\n\nfunction hideDOMElement(...elements) {\n  for (let element of elements) {\n    if (element)\n      element.style = 'display:none !important;';\n  }\n}\n\nfunction hideDOMStyle(selector, id = 1) {\n  let style = document.querySelector('head > style#ext'+ id);\n  if (!style && document.head) {\n    let sheet = document.createElement('style');\n    sheet.id = 'ext' + id;\n    sheet.innerText = selector + ' {display: none !important;}';\n    document.head.appendChild(sheet);\n  }\n}\n\nfunction addStyle(css, id = 1) {\n  let style = document.querySelector('head > style#add'+ id);\n  if (!style && document.head) {\n    let sheet = document.createElement('style');\n    sheet.id = 'add' + id;\n    sheet.innerText = css;\n    document.head.appendChild(sheet);\n  }\n}\n\nfunction waitDOMElement(selector, tagName = '', callback, multiple = false) {\n  new window.MutationObserver(function (mutations) {\n    for (let mutation of mutations) {\n      for (let node of mutation.addedNodes) {\n        if (!tagName || (node.tagName === tagName)) {\n          if (node.matches(selector)) {\n            callback(node);\n            if (!multiple)\n              this.disconnect();\n          }\n        }\n      }\n    }\n  }).observe(document, {\n    subtree: true,\n    childList: true\n  });\n}\n\nfunction waitDOMAttribute(selector, tagName = '', attributeName = '', callback, multiple = false) {\n  let targetNode = document.querySelector(selector);\n  if (!targetNode)\n    return;\n  new window.MutationObserver(function (mutations) {\n    for (let mutation of mutations) {\n      if (mutation.target.attributes[attributeName]) {\n        callback(mutation.target);\n        if (!multiple)\n          this.disconnect();\n      }\n    }\n  }).observe(targetNode, {\n    attributes: true,\n    attributeFilter: [attributeName]\n  });\n}\n\nfunction matchDomain(domains, hostname = window.location.hostname) {\n  let matched_domain = false;\n  if (typeof domains === 'string')\n    domains = [domains];\n  domains.some(domain => (hostname === domain || hostname.endsWith('.' + domain)) && (matched_domain = domain));\n  return matched_domain;\n}\n\nfunction urlHost(url) {\n  if (/^http/.test(url)) {\n    try {\n      return new URL(url).hostname;\n    } catch (e) {\n      console.log(`url not valid: ${url} error: ${e}`);\n    }\n  }\n  return url;\n}\n\nfunction matchUrlDomain(domains, url) {\n  return matchDomain(domains, urlHost(url));\n}\n\nfunction makeFigure(url, caption_text, img_attrib = {}, caption_attrib = {}) {\n  let elem = document.createElement('figure');\n  let img = document.createElement('img');\n  img.src = url;\n  for (let attrib in img_attrib)\n    if (img_attrib[attrib])\n      img.setAttribute(attrib, img_attrib[attrib]);\n  elem.appendChild(img);\n  if (caption_text) {\n    let caption = document.createElement('figcaption');\n    for (let attrib in caption_attrib)\n      if (caption_attrib[attrib])\n        caption.setAttribute(attrib, caption_attrib[attrib]);\n    let cap_par = document.createElement('p');\n    cap_par.innerText = caption_text;\n    caption.appendChild(cap_par);\n    elem.appendChild(caption);\n  }\n  return elem;\n}\n\nfunction header_nofix(header, cond_sel = '', msg = 'BPC > no fix') {\n  if (header && typeof header === 'string')\n    header = document.querySelector(header);\n  if (header && !document.querySelector('div#bpc_nofix')) {\n    if (cond_sel) {\n      let elem = document.querySelectorAll(cond_sel);\n      if (elem.length)\n        removeDOMElement(...elem);\n      else\n        return false;\n    }\n    let nofix_div = document.createElement('div');\n    nofix_div.id = 'bpc_nofix';\n    nofix_div.style = 'margin: 20px; font-size: 20px; font-weight: bold; color: red;';\n    nofix_div.innerText = msg;\n    header.before(nofix_div);\n  }\n}\n\nfunction blockJsReferrer() {\n  if (document.head && !document.querySelector('head > meta[name=\"referrer\"][content=\"no-referrer\"]')) {\n    var meta = document.createElement('meta');\n    meta.name = \"referrer\";\n    meta.content = \"no-referrer\";\n    document.head.appendChild(meta);\n  }\n}\n\nfunction clearPaywall(paywall, paywall_action) {\n  if (paywall) {\n    if (!paywall_action)\n      removeDOMElement(...paywall);\n    else {\n      for (let elem of paywall) {\n        if (paywall_action.rm_class)\n          elem.classList.remove(paywall_action.rm_class);\n        else if (paywall_action.rm_attrib)\n          elem.removeAttribute(paywall_action.rm_attrib);\n      }\n    }\n  }\n}\n\nfunction getArchive(url, paywall_sel, paywall_action = '', selector, text_fail = '', selector_source = selector, selector_archive = selector) {\n  let url_archive = 'https://' + archiveRandomDomain() + '/' + url.split(/[#\\?]/)[0];\n  let paywall = document.querySelectorAll(paywall_sel);\n  if (paywall.length && dompurify_loaded) {\n    clearPaywall(paywall, paywall_action);\n    csDoneOnce = true;\n    replaceDomElementExt(url_archive, true, false, selector, text_fail, selector_source, selector_archive);\n  }\n}\n\nfunction getExtFetch(url, json_key = '', headers = {}, callback, data_ext_fetch_id = 0, args = []) {\n  data_ext_fetch[data_ext_fetch_id] = {func: callback, args: args};\n  ext_api.runtime.sendMessage({request: 'getExtFetch', data: {url: url, json_key: json_key, headers: headers, data_ext_fetch_id: data_ext_fetch_id}});\n}\n\nvar selector_level;\nfunction replaceDomElementExt(url, proxy, base64, selector, text_fail = '', selector_source = selector, selector_archive = selector) {\n  let article = document.querySelector(selector);\n  if (!article)\n    return;\n  if (proxy) {\n    selector_level = true;\n    if (!text_fail) {\n      if (url.startsWith('https://archive.'))\n        text_fail = 'BPC > Try for full article text (no need to report issue for external site):\\r\\n';\n      else if (!matchUrlDomain(window.location.hostname, url))\n        text_fail = 'BPC > failed to load from external site:\\r\\n';\n    }\n    ext_api.runtime.sendMessage({request: 'getExtSrc', data: {url: url, selector: selector, selector_source: selector_source, selector_archive: selector_archive, base64: base64, text_fail: text_fail, headers: fetch_headers}});\n  } else {\n    fetch(url, {headers: fetch_headers})\n    .then(response => {\n      let article = document.querySelector(selector);\n      if (response.ok) {\n        response.text().then(html => {\n          replaceDomElementExtSrc(url, '', html, false, base64, selector, text_fail, selector_source);\n        });\n      } else {\n        replaceTextFail(url, article, proxy, text_fail);\n      }\n    }).catch(function (err) {\n      replaceTextFail(url, article, proxy, text_fail);\n    });\n  }\n}\n\nfunction getSelectorLevel(selector) {\n  if (selector.replace(/,\\s+/g, ',').match(/[>\\s]+/))\n    selector = selector.replace(/,\\s+/g, ',').split(',').map(x => x.match(/[>\\s]+/) ? x + ', ' + x.split(/[>\\s]+/).pop() : x).join(', ');\n  return selector;\n}\n\nfunction replaceDomElementExtSrc(url, url_src, html, proxy, base64, selector, text_fail = '', selector_source = selector, selector_archive = selector) {\n  let article = document.querySelector(selector);\n  let article_link = document.querySelector(selector_archive);\n  let no_content_msg = '&nbsp;| no article content found! | :';\n  if (html) {\n    if (!proxy && base64) {\n      html = decode_utf8(atob(html));\n      selector_source = 'body';\n    }\n    let parser = new DOMParser();\n    window.setTimeout(function () {\n      if (url.startsWith('https://archive.') && url_src) {\n        let domain_archive = url.match(/^https:\\/\\/(archive\\.\\w{2})/)[1];\n        let pathname = new URL(url_src).pathname;\n        html = html.replace(new RegExp('https:\\\\/\\\\/' + domain_archive.replace('.', '\\\\.') + '\\\\/o\\\\/\\\\w+\\\\/', 'g'), '').replace(new RegExp(\"(src=\\\"|background-image:url\\\\(')\" + pathname.replace('/', '\\\\/'), 'g'), \"$1\" + 'https://' + domain_archive + pathname);\n      }\n      let doc = parser.parseFromString(DOMPurify.sanitize(html, dompurify_options), 'text/html');\n      //console.log(DOMPurify.removed);\n      if (selector_level)\n        selector_source = getSelectorLevel(selector_source);\n      let article_new = doc.querySelector(selector_source);\n      if (article_new) {\n        if (article && article.parentNode) {\n          if (url.startsWith('https://archive.')) {\n            let arch_dom = (selector_archive !== selector) ? (article_new.querySelector(selector_archive) || document.querySelector(selector_archive)) : article_new;\n            if (arch_dom) {\n              if (arch_dom.firstChild)\n                arch_dom = arch_dom.firstChild;\n              let arch_div = document.createElement('div');\n              arch_div.appendChild(archiveLink_renew(url_src));\n              arch_div.appendChild(archiveLink(window.location.href.split(/[#\\?]/)[0], 'BPC > Full article text fetched from (no need to report issue for external site):\\r\\n'));\n              arch_div.style = 'margin: 0px 0px 50px;';\n              arch_dom.before(arch_div);\n            }\n            let targets = article_new.querySelectorAll('a[target=\"_blank\"][href^=\"' + window.location.origin + '\"]');\n            for (let elem of targets)\n              elem.removeAttribute('target');\n            let invalid_links = article_new.querySelectorAll('link[rel*=\"preload\"]:not([href])');\n            removeDOMElement(...invalid_links);\n          }\n          window.setTimeout(function () {\n            if (article.parentNode) {\n              article.parentNode.replaceChild(article_new, article);\n              if (func_post)\n                func_post();\n            }\n          }, 200);\n        }\n      } else\n        replaceTextFail(url, article_link, proxy, text_fail.replace(':', no_content_msg));\n    }, 200);\n  } else {\n    replaceTextFail(url, article_link, proxy, url_src ? text_fail.replace(':', no_content_msg) : text_fail);\n  }\n}\n\nfunction replaceTextFail(url, article, proxy, text_fail) {\n  if (text_fail && article) {\n    let text_fail_div = document.createElement('div');\n    text_fail_div.id = 'bpc_fail';\n    text_fail_div.setAttribute('style', 'margin: 0px 50px; font-weight: bold; color: red;');\n    text_fail_div.appendChild(document.createTextNode(text_fail));\n    if (proxy) {\n      if (url.startsWith('https://archive.')) {\n        text_fail_div = archiveLink(url.replace(/^https:\\/\\/archive\\.\\w{2}\\//, ''), text_fail);\n      } else {\n        let a_link = document.createElement('a');\n        a_link.innerText = url;\n        a_link.href = url;\n        a_link.target = '_blank';\n        text_fail_div.appendChild(a_link);\n      }\n    }\n    if (article.firstChild)\n      article.firstChild.before(text_fail_div);\n    else\n      article.appendChild(text_fail_div);\n  }\n}\n\nfunction amp_images_replace() {\n  window.setTimeout(function () {\n    let amp_images = document.querySelectorAll('figure amp-img[src^=\"http\"]');\n    for (let amp_image of amp_images) {\n      let elem = document.createElement('img');\n      elem.src = amp_image.getAttribute('src');\n      elem.alt = amp_image.getAttribute('alt');\n      elem.style = 'width: 100%;';\n      amp_image.parentNode.replaceChild(elem, amp_image);\n    }\n  }, 1000);\n}\n\nfunction amp_iframes_replace(weblink = false, source = '') {\n  let amp_iframes = document.querySelectorAll('amp-iframe' + (source ? '[src*=\"' + source + '\"]' : ''));\n  let par, elem;\n  for (let amp_iframe of amp_iframes) {\n    if (!weblink) {\n      if (amp_iframe.offsetHeight > 10) {\n        elem = document.createElement('iframe');\n        elem.src = amp_iframe.getAttribute('src').replace(/^http:/, 'https:');\n        elem.style = 'height: ' + amp_iframe.offsetHeight + 'px; width: 100%; border: 0px;';\n        if (amp_iframe.getAttribute('sandbox'))\n          elem.sandbox = amp_iframe.getAttribute('sandbox');\n        amp_iframe.parentNode.replaceChild(elem, amp_iframe);\n      }\n    } else {\n      par = document.createElement('p');\n      par.style = 'margin: 20px 0px;';\n      elem = document.createElement('a');\n      elem.innerText = 'Media-link';\n      elem.setAttribute('href', amp_iframe.getAttribute('src'));\n      elem.setAttribute('target', '_blank');\n      par.appendChild(elem);\n      amp_iframe.parentNode.replaceChild(par, amp_iframe);\n    }\n  }\n}\n\nfunction amp_redirect_not_loop(amphtml) {\n  if (!check_loop()) {\n    window.location.href = amphtml.href;\n  } else {\n    let header = (document.body && document.body.firstChild) || document.documentElement;\n    header_nofix(header, '', 'BPC > redirect to amp failed (disable amp-to-html extension/add-on or browser setting)');\n  }\n}\n\nfunction amp_redirect(paywall_sel, paywall_action = '', amp_url = '') {\n  let paywall = document.querySelectorAll(paywall_sel);\n  let amphtml = document.querySelector('head > link[rel=\"amphtml\"]');\n  if (!amphtml && amp_url)\n    amphtml = {href: amp_url};\n  if (paywall.length && amphtml) {\n    clearPaywall(paywall, paywall_action);\n    amp_redirect_not_loop(amphtml);\n  }\n}\n\nfunction amp_unhide_subscr_section(amp_ads_sel = '', replace_iframes = true, amp_iframe_link = false, source = '') {\n  let preview = document.querySelectorAll('[subscriptions-section=\"content-not-granted\"]');\n  removeDOMElement(...preview);\n  let subscr_section = document.querySelectorAll('[subscriptions-section=\"content\"]');\n  for (let elem of subscr_section)\n    elem.removeAttribute('subscriptions-section');\n  if (amp_ads_sel)\n    hideDOMStyle(amp_ads_sel, 5);\n  if (replace_iframes)\n    amp_iframes_replace(amp_iframe_link, source);\n}\n\nfunction amp_unhide_access_hide(amp_access = '', amp_access_not = '', amp_ads_sel = '', replace_iframes = true, amp_iframe_link = false, source = '') {\n  let access_hide = document.querySelectorAll('[amp-access' + amp_access + '][amp-access-hide]:not([amp-access=\"error\"], [amp-access^=\"message\"], .piano)');\n  for (let elem of access_hide)\n    elem.removeAttribute('amp-access-hide');\n  if (amp_access_not) {\n    let amp_access_not_dom = document.querySelectorAll('[amp-access' + amp_access_not + ']');\n    removeDOMElement(...amp_access_not_dom);\n  }\n  if (amp_ads_sel)\n    hideDOMStyle(amp_ads_sel, 6);\n  if (replace_iframes)\n    amp_iframes_replace(amp_iframe_link, source);\n}\n\nfunction ampToHtml() {\n  window.setTimeout(function () {\n    let canonical = document.querySelector('head > link[rel=\"canonical\"][href]');\n    if (canonical)\n      window.location.href = canonical.href;\n  }, 1000);\n}\n\nfunction check_loop(interval = 2000) {\n  let loop = true;\n  let loop_date = Number(sessionStorage.getItem('###_loop'));\n  if (!(loop_date && (Date.now() - loop_date < interval))) {\n    sessionStorage.setItem('###_loop', Date.now());\n    loop = false;\n  }\n  return loop;\n}\n\nfunction refreshCurrentTab(not_loop = true, not_loop_msg = true) {\n  if (!not_loop || !check_loop(5000)) {\n    window.setTimeout(function () {\n      window.location.reload(true);\n    }, 500);\n  } else if (not_loop_msg) {\n    let header = (document.body && document.body.firstChild) || document.documentElement;\n    header_nofix(header, '', 'BPC > refresh loop stopped');\n  }\n}\n\nfunction refreshCurrentTab_bg() {\n  ext_api.runtime.sendMessage({request: 'refreshCurrentTab'});\n}\n\nfunction archiveRandomDomain() {\n  let tld_array = ['fo', 'is', 'li', 'md', 'ph', 'vn'];\n  let tld = tld_array[randomInt(6)];\n  return 'archive.' + tld;\n}\n\nfunction archiveLink(url, text_fail = 'BPC > Try for full article text (no need to report issue for external site):\\r\\n') {\n  return externalLink(['archive.today', archiveRandomDomain()], 'https://{domain}?run=1&url={url}', url, text_fail);\n}\n\nfunction archiveLink_renew(url, text_fail = 'BPC > Only use to renew if text is incomplete or updated:\\r\\n') {\n  return externalLink([new URL(url).hostname], '{url}/again?url=' + window.location.href.split(/[#\\?]/)[0], url, text_fail);\n}\n\nfunction googleSearchToolLink(url, text_fail = 'BPC > Try for full article text (test url & copy html (tab) code to [https://codebeautify.org/htmlviewer]):\\r\\n') {\n  return externalLink(['search.google.com'], 'https://search.google.com/test/rich-results?url={url}', encodeURIComponent(url), text_fail);\n}\n\nfunction freediumLink(url, text_fail = 'BPC > Try for full article text:\\r\\n') {\n  return externalLink(['freedium.cfd'], 'https://{domain}/{url}', url, text_fail);\n}\n\nfunction readMediumLink(url, text_fail = 'BPC > Try for full article text:\\r\\n') {\n  return externalLink(['readmedium.com'], 'https://{domain}/{url}', url, text_fail);\n}\n\nfunction externalLink(domains, ext_url_templ, url, text_fail = 'BPC > Full article text:\\r\\n') {\n  let text_fail_div = document.createElement('div');\n  text_fail_div.id = 'bpc_archive';\n  text_fail_div.setAttribute('style', 'margin: 20px; font-size: 20px; font-weight: bold; color: red;');\n  let parser = new DOMParser();\n  text_fail = text_fail.replace(/\\[(?<url>[^\\]]+)\\]/g, function (match, url) {\n    return \"<a href='\" + url + \"' target='_blank' style='color: red'>\" + new URL(url).hostname + \"</a>\";\n  });\n  let doc = parser.parseFromString('<span>' + text_fail + '</span>', 'text/html');\n  let elem = doc.querySelector('span');\n  text_fail_div.appendChild(elem);\n  for (let domain of domains) {\n    let ext_url = ext_url_templ.replace('{domain}', domain).replace('{url}', url.split('?')[0]);\n    let a_link = document.createElement('a');\n    a_link.innerText = domain;\n    a_link.href = ext_url;\n    a_link.target = '_blank';\n    text_fail_div.appendChild(document.createTextNode(' | '));\n    text_fail_div.appendChild(a_link);\n  }\n  return text_fail_div;\n}\n\nfunction removeClassesByPrefix(el, prefix) {\n  let el_classes = el.classList;\n  for (let el_class of el_classes) {\n    if (el_class.startsWith(prefix))\n      el_classes.remove(el_class);\n  }\n}\n\nfunction removeClassesList(list) {\n  for (let class_item of list) {\n    let elems = document.querySelectorAll('.' + class_item);\n    for (let elem of elems)\n      elem.classList.remove(class_item);\n  }\n}\n\nfunction cookieExists(name) {\n  return document.cookie.split(';').some(function (item) {\n    return item.trim().indexOf(name + '=') === 0\n  })\n}\n\nfunction setCookie(name, value, domain, path, days) {\n  let max_age = days * 24 * 60 * 60;\n  document.cookie = name + \"=\" + (value || \"\") + \"; domain=\" + domain + \"; path=\" + path + \"; max-age=\" + max_age;\n}\n\nfunction insert_script(func, insertAfterDom) {\n  let bpc_script = document.querySelector('script#bpc_script');\n  if (!bpc_script) {\n    let script = document.createElement('script');\n    script.setAttribute('id', 'bpc_script');\n    script.appendChild(document.createTextNode('(' + func + ')();'));\n    let insertAfter = insertAfterDom ? insertAfterDom : (document.body || document.head || document.documentElement);\n    insertAfter.appendChild(script);\n  }\n}\n\nfunction getSourceJsonScript(filter, attributes = ':not([src], [type])') {\n  if (typeof filter === 'string')\n    filter = new RegExp(filter);\n  let scripts = document.querySelectorAll('script' + attributes);\n  for (let script of scripts) {\n    if (script.text.match(filter))\n      return script;\n  }\n  return false;\n}\n\nfunction getArticleJsonScript() {\n  let scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n  let json_script;\n  for (let script of scripts) {\n    if (script.innerText.match(/\"(articlebody|text)\":/i)) {\n      json_script = script;\n      break;\n    }\n  }\n  return json_script;\n}\n\nfunction restorePugpigLink(node, art_link_sel = '') {\n  let art_link = !art_link_sel ? node : node.querySelector(art_link_sel);\n  if (art_link)\n    art_link.onmousedown = x => window.location.href = art_link.href;\n}\n\nfunction restorePugpigPage() {\n  let art_link_sel = 'a.pp-widget-article, a.pp-related__link';\n  document.querySelectorAll(art_link_sel).forEach(e => restorePugpigLink(e));\n  waitDOMElement(art_link_sel, 'A', restorePugpigLink, true);\n  waitDOMElement('li[class^=\"collection_type-\"]', 'LI', node => restorePugpigLink(node, art_link_sel), true);\n  csDoneOnce = true;\n  let modal = 'section.modal';\n  hideDOMStyle(modal);\n  let paywall = document.querySelector('div.paywall');\n  if (paywall)\n    refreshCurrentTab();\n}\n\nfunction getArticleQuintype() {\n  let article_new;\n  let json_script = document.querySelector('script#static-page');\n  if (json_script) {\n    try {\n      article_new = document.createElement('div');\n      let parser = new DOMParser();\n      let json = JSON.parse(json_script.text);\n      let slug = json.qt.data.story.slug;\n      if (slug && !window.location.pathname.includes(slug))\n        refreshCurrentTab_bg();\n      let pars = json.qt.data.story.cards;\n      for (let par of pars) {\n        let story_elements = par['story-elements'];\n        for (let elem of story_elements) {\n          let par_elem;\n          if (['text', 'title'].includes(elem.type) && elem.text) {\n            let doc = parser.parseFromString('<div style=\"margin: 25px 0px\">' + DOMPurify.sanitize(elem.text, dompurify_options) + '</div>', 'text/html');\n            par_elem = doc.querySelector('div');\n          } else if (elem.type === 'image') {\n            if (elem['image-s3-key']) {\n              par_elem = document.createElement('figure');\n              let img = document.createElement('img');\n              img.src = 'https://media.assettype.com/' + elem['image-s3-key'];\n              par_elem.appendChild(img);\n              if (elem.title) {\n                let caption = document.createElement('figcaption');\n                if (elem.title.includes('</')) {\n                  let doc = parser.parseFromString('<div>' + DOMPurify.sanitize(elem.title, dompurify_options) + '</div>', 'text/html');\n                  caption.appendChild(doc.querySelector('div'));\n                } else\n                  caption.innerText = elem.title;\n                par_elem.appendChild(caption);\n              }\n            }\n          } else if (elem.type === 'jsembed') {\n            if (elem.subtype === 'tweet') {\n              if (elem.metadata && elem.metadata['tweet-url']) {\n                par_elem = document.createElement('a');\n                par_elem.href = par_elem.innerText = elem.metadata['tweet-url'];\n                par_elem.target = '_blank';\n              } else\n                console.log(elem);\n            }\n          } else if (elem.type === 'youtube-video') {\n            if (elem['embed-url']) {\n              par_elem = document.createElement('iframe');\n              par_elem.src = elem['embed-url'];\n              par_elem.style = 'width: 100%; height: 400px;';\n            }\n          } else if (elem.type === 'file') {\n            if (elem.url && elem['file-name']) {\n              par_elem = document.createElement('a');\n              par_elem.href = elem.url;\n              par_elem.innerText = elem['file-name'];\n              par_elem.target = '_blank';\n            }\n          } else if (!['widget'].includes(elem.type))\n            console.log(elem);\n          if (par_elem)\n            article_new.appendChild(par_elem);\n        }\n      }\n      if (!article_new.hasChildNodes())\n        article_new = '';\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  return article_new;\n}\n\nfunction filterObject(obj, filterFn, mapFn = function (val, key) {\n  return [key, val];\n}) {\n  return Object.fromEntries(Object.entries(obj).\n    filter(([key, val]) => filterFn(val, key)).map(([key, val]) => mapFn(val, key)));\n}\n\nfunction matchKeyJson(key, keys) {\n  let match = false;\n  if (typeof keys === 'string')\n    match = (key === keys);\n  else if (Array.isArray(keys))\n    match = keys.includes(key);\n  else if (keys instanceof RegExp)\n    match = keys.test(key);\n  return match;\n}\n\nfunction findKeyJson(json, keys, min_val_len = 0) {\n  let source = '';\n  if (Array.isArray(json)) {\n    for (let elem of json)\n      source = source || findKeyJson(elem, keys, min_val_len);\n  } else if (typeof json === 'object') {\n    for (let elem in json) {\n      let json_elem = json[elem];\n      if (typeof json_elem === 'string' && matchKeyJson(elem, keys)) {\n        if (json_elem.length > min_val_len)\n          return json_elem;\n      } else if (Array.isArray(json_elem) && json_elem.length > 1 && matchKeyJson(elem, keys)) {\n        return json_elem;\n      } else\n        source = source || findKeyJson(json_elem, keys, min_val_len);\n    }\n  }\n  return source;\n}\n\nfunction getNestedKeys(obj, key) {\n  if (key in obj)\n    return obj[key];\n  let keys = key.split('.');\n  let value = obj;\n  for (let i = 0; i < keys.length; i++) {\n    value = value[keys[i]];\n    if (value === undefined)\n      break;\n  }\n  return value;\n}\n\nfunction getJsonUrlText(article, callback, article_id = '', key = '', url_rest = false, url_slash = false) {\n  let json_url_dom = document.querySelector('head > link[rel=\"alternate\"][type=\"application/json\"][href]');\n  let json_url;\n  if (json_url_dom) {\n    json_url = json_url_dom.href;\n    let hostname = window.location.hostname;\n    let regex = /www\\.autohebdo(f1)?\\.\\w{2,3}/;\n    if (json_url.match(regex) && !json_url.includes(hostname))\n      json_url = json_url.replace(regex, hostname);\n  }\n  if (!json_url && article_id)\n    json_url = window.location.origin + '/wp-json/wp/v2/posts/' + article_id;\n  if (url_rest)\n    json_url = json_url.replace('/wp-json/', '/?rest_route=/');\n  else if (url_slash)\n    json_url = json_url.replace('/wp-json/', '//wp-json/');\n  if (json_url) {\n    fetch(json_url)\n    .then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          try {\n            let json_text = parseHtmlEntities(!key ? json.content.rendered : getNestedKeys(json, key));\n            if (json_text && json_text !== 'undefined')\n              callback(json_text, article);\n          } catch (err) {\n            console.log(err);\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getJsonUrlAdd(json_text, article, art_options = {}) {\n  let art_type = 'div';\n  let art_attrib = '';\n  if (Object.keys(art_options).length) {\n    if (art_options.art_type)\n      art_type = art_options.art_type;\n    if (art_options.art_class)\n      art_attrib += ' class=\"' + art_options.art_class + '\"';\n    if (art_options.art_id)\n      art_attrib += ' id=\"' + art_options.art_id + '\"';\n    if (art_options.art_style)\n      art_attrib += ' style=\"' + art_options.art_style + '\"';\n    if (art_options.func_text)\n      json_text = art_options.func_text(json_text);\n  }\n  let parser = new DOMParser();\n  let doc = parser.parseFromString('<' + art_type + art_attrib + '>' + DOMPurify.sanitize(json_text, dompurify_options) + '</' + art_type + '>', 'text/html');\n  let article_new = doc.querySelector(art_type);\n  if (art_options.art_append || !article.parentNode) {\n    if (!art_options.art_hold)\n      article.innerHTML = '';\n    article.appendChild(article_new);\n  } else\n    article.parentNode.replaceChild(article_new, article);\n  if (func_post)\n    func_post();\n}\n\nfunction getJsonUrl(paywall_sel, paywall_action = '', article_sel, art_options = {}, article_id = '', key = '', url_rest = false, url_slash = false) {\n  let paywall = document.querySelectorAll(paywall_sel);\n  let article = document.querySelector(article_sel);\n  if (paywall.length && article && dompurify_loaded) {\n    clearPaywall(paywall, paywall_action);\n    getJsonUrlText(article, (json_text, article) => {\n      if (json_text && article)\n        getJsonUrlAdd(json_text, article, art_options);\n    }, article_id, key, url_rest, url_slash);\n  }\n}\n\nfunction genHexString(len) {\n  let output = '';\n  for (let i = 0; i < len; i++)\n    output += (Math.floor(Math.random() * 16)).toString(16);\n  return output;\n}\n\nfunction makeRandomNumber(len) {\n  let result = '';\n  let characters = '123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < len; i++)\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  return result;\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction randomIP(range_low = 0, range_high = 223) {\n  let rndmIP = [];\n  for (let n = 0; n < 4; n++) {\n    if (n === 0)\n      rndmIP.push(range_low + randomInt(range_high - range_low + 1));\n    else\n      rndmIP.push(randomInt(255) + 1);\n  }\n  return rndmIP.join('.');\n}\n\nfunction pageContains(selector, text) {\n  let elements = document.querySelectorAll(selector);\n  return Array.prototype.filter.call(elements, function (element) {\n    return RegExp(text).test(element.textContent);\n  });\n}\n\nfunction findOverlap(a, b) {\n  if (b.length === 0)\n    return \"\";\n  if (a.endsWith(b))\n    return b;\n  return findOverlap(a, b.substring(0, b.length - 1));\n}\n\nfunction breakText(str, headers = false) {\n  str = str.replace(/(?:^|[A-Za-z\\\"\\“\\”\\)])(\\.+|\\?|!)(?=[A-ZÖÜ\\„\\”\\d][A-Za-zÀ-ÿ\\„\\d]{1,})/gm, \"$&\\n\\n\");\n  if (headers)\n    str = str.replace(/(([a-z]{2,}|[\\\"\\“]))(?=[A-Z](?=[A-Za-zÀ-ÿ]+))/gm, \"$&\\n\\n\");\n  return str;\n}\n\nfunction breakText_headers(str) {\n  str = breakText(str, true);\n  // exceptions: names with alternating lower/uppercase (no general fix)\n  let str_rep_arr = ['AstraZeneca', 'BaFin', 'BerlHG', 'BfArM', 'BilMoG', 'BioNTech', 'ChatGPT', 'DiGA', 'EuGH', 'FinTechRat', 'GlaxoSmithKline', 'IfSG', 'medRxiv', 'mmHg', 'OpenAI', 'PlosOne', 'StVO', 'TikTok'];\n  let str_rep_split;\n  let str_rep_src;\n  for (let str_rep of str_rep_arr) {\n    str_rep_split = str_rep.split(/([a-z]+)(?=[A-Z](?=[A-Za-z]+))/);\n    str_rep_src = str_rep_split.reduce(function (accumulator, currentValue) {\n        return accumulator + currentValue + ((currentValue !== currentValue.toUpperCase()) ? '\\n\\n' : '');\n      });\n    if (str_rep_src.endsWith('\\n\\n'))\n      str_rep_src = str_rep_src.slice(0, -2);\n    str = str.replace(new RegExp(str_rep_src, \"g\"), str_rep);\n  }\n  str = str.replace(/De\\n\\n([A-Z])/g, \"De$1\");\n  str = str.replace(/La\\n\\n([A-Z])/g, \"La$1\");\n  str = str.replace(/Le\\n\\n([A-Z])/g, \"Le$1\");\n  str = str.replace(/Mc\\n\\n([A-Z])/g, \"Mc$1\");\n  return str;\n}\n\nfunction parseHtmlEntities(encodedString) {\n  let parser = new DOMParser();\n  let doc = parser.parseFromString('<textarea>' + encodedString + '</textarea>', 'text/html');\n  let dom = doc.querySelector('textarea');\n  return dom.value;\n}\n\nfunction encode_utf8(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction decode_utf8(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction fix_dowjones_live() {\n  let paywall = document.querySelector('div#cx-lc-snippet');\n  if (paywall) {\n    removeDOMElement(paywall);\n    let json_script = getArticleJsonScript();\n    if (json_script) {\n      try {\n        let json = JSON.parse(json_script.text);\n        if (json) {\n          let article = document.querySelector('div[data-id=\"StreamBody_index_MainContainer\"]');\n          if (article) {\n            let pars = json[0].liveBlogUpdate;\n            for (let par of pars) {\n              if (par.headline && par.articleBody) {\n                let headline = document.createElement('p');\n                headline.innerText = par.headline;\n                headline.style = 'font-weight: bold;';\n                let author = document.createElement('a');\n                if (par.author && par.author.sameAs) {\n                  author.href = par.author.sameAs[0];\n                  author.innerText = par.author.name;\n                }\n                let date = document.createElement('p');\n                if (par.dateModified && par.datePublished) {\n                  date.innerText = 'Updated ' + par.dateModified.replace(/(T|:\\d+\\.\\d+Z$)/g, ' ') + ' ET / Original ' + par.datePublished.replace(/(T|:\\d+\\.\\d+Z$)/g, ' ') + ' ET';\n                }\n                let body = document.createElement('p');\n                body.innerText = par.articleBody;\n                article.after(headline, author, date, body);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    let fade = document.querySelectorAll('div[class*=\"-CardWrapper\"]');\n    for (let elem of fade)\n      elem.removeAttribute('class');\n  }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/backup/bypass-paywalls-chrome-clean-master/background.js",
                "filename": "background.js",
                "content": "'use strict';\nvar ext_api = (typeof browser === 'object') ? browser : chrome;\nvar url_loc = (typeof browser === 'object') ? 'firefox' : 'chrome';\nvar manifestData = ext_api.runtime.getManifest();\nvar ext_name = manifestData.name;\nvar ext_version = manifestData.version;\nvar ext_manifest_version = manifestData.manifest_version;\nvar navigator_ua = navigator.userAgent;\nvar navigator_ua_mobile = navigator_ua.toLowerCase().includes('mobile');\n\nif (ext_manifest_version === 3)\n  self.importScripts('sites.js');\n\nif (typeof ext_api.action !== 'object') {\n  ext_api.action = ext_api.browserAction;\n}\n\nvar dompurify_sites = [];\nvar optin_setcookie = false;\nvar optin_update = true;\nvar blocked_referer = false;\nvar domain;\n\n// defaultSites are loaded from sites.js at installation extension\n\nvar restrictions = {\n  'autohebdo.fr': /\\/www\\.autohebdo\\.fr\\//,\n  'bloomberg.com': /^((?!\\.bloomberg\\.com\\/news\\/terminal\\/).)*$/,\n  'bloombergadria.com': /^((?!\\.bloombergadria\\.com\\/video\\/).)*$/,\n  'dailywire.com': /^((?!\\.dailywire\\.com\\/(episode|show|videos|watch)).)*$/,\n  'economictimes.com': /\\.economictimes\\.com($|\\/($|(__assets|prime)(\\/.+)?|.+\\.cms))/,\n  'espn.com': /^((?!espn\\.com\\/watch).)*$/,\n  'esquire.com': /^((?!\\/classic\\.esquire\\.com\\/).)*$/,\n  'expresso.pt': /^((?!\\/tribuna\\.expresso\\.pt\\/).)*$/,\n  'foreignaffairs.com': /^((?!\\/reader\\.foreignaffairs\\.com\\/).)*$/,\n  'ft.com': /^((?!\\/cn\\.ft\\.com\\/).)*$/,\n  'hilltimes.com': /^((?!\\.hilltimes\\.com\\/slideshow\\/).)*$/,\n  'hindustantimes.com': /^((?!\\/epaper\\.hindustantimes\\.com\\/).)*$/,\n  'ilmanifesto.it': /^((?!\\/ilmanifesto\\.it\\/edizioni\\/).)*$/,\n  'ilsole24ore.com': /^((?!\\/ntplus.+\\.ilsole24ore\\.com\\/).)*$/,\n  'leparisien.fr': /^((?!\\/l\\.leparisien\\.fr\\/).)*$/,\n  'livemint.com': /^((?!\\/epaper\\.livemint\\.com\\/).)*$/,\n  'lopinion.fr': /^((?!\\.lopinion\\.fr\\/lejournal).)*$/,\n  'mid-day.com': /^((?!\\/epaper\\.mid-day\\.com\\/).)*$/,\n  'nytimes.com': /^((?!\\/(help|myaccount|timesmachine)\\.nytimes\\.com\\/).)*$/,\n  'nzz.ch': /^((?!\\/epaper\\.nzz\\.ch\\/).)*$/,\n  'quora.com': /^((?!quora\\.com\\/search\\?q=).)*$/,\n  'science.org': /^((?!\\.science\\.org\\/doi\\/).)*$/,\n  'sky.it': /\\/(sport|tg24)\\.sky\\.it\\//,\n  'standardmedia.co.ke': /^((?!epaper\\.standardmedia\\.co\\.ke).)*$/,\n  'study.com': /\\/study\\.com\\/.+\\/lesson\\//,\n  'sueddeutsche.de': /^((?!zeitung\\.sueddeutsche\\.de).)*$/,\n  'tagesspiegel.de': /^((?!\\/(background|checkpoint)\\.tagesspiegel\\.de\\/).)*$/,\n  'techinasia.com': /\\.techinasia\\.com\\/.+/,\n  'thehindu.com': /^((?!epaper\\.thehindu\\.com).)*$/,\n  'thehindubusinessline.com': /^((?!epaper\\.thehindubusinessline\\.com).)*$/,\n  'spectator.co.uk': /^((?!archive\\.spectator\\.co\\.uk).)*$/,\n  'thetimes.com': /^((?!epaper\\.thetimes\\.com).)*$/,\n  'uol.com.br': /^((?!(conta|email)\\.uol\\.com\\.br).)*$/,\n}\n\nfor (let domain of grouped_sites['###_au_news_corp'])\n  restrictions[domain] = new RegExp('^((?!todayspaper\\\\.' + domain.replace(/\\./g, '\\\\.') + '\\\\/).)*$');\nfor (let domain of grouped_sites['###_ch_media'])\n  restrictions[domain] = new RegExp('^((?!epaper\\\\.' + domain.replace(/\\./g, '\\\\.') + '\\\\/).)*$');\n\nif (typeof browser !== 'object') {\n  for (let domain of [])\n    restrictions[domain] = new RegExp('((\\\\/|\\\\.)' + domain.replace(/\\./g, '\\\\.') + '\\\\/$|' + restrictions[domain].toString().replace(/(^\\/|\\/$)/g, '') + ')');\n}\n\n// Don't remove cookies before/after page load\nvar allow_cookies = [];\nvar remove_cookies = [];\n// select specific cookie(s) to hold/drop from remove_cookies domains\nvar remove_cookies_select_hold, remove_cookies_select_drop;\n\n// Set User-Agent/headers\nvar use_google_bot, use_bing_bot, use_facebook_bot, use_useragent_custom, use_useragent_custom_obj, use_headers_custom, use_headers_custom_obj;\n// Set Referer\nvar use_facebook_referer, use_google_referer, use_twitter_referer, use_referer_custom, use_referer_custom_obj;\n// Set random IP-address\nvar random_ip = {};\nvar use_random_ip = [];\n// concat all sites with change of headers (useragent, referer or random ip)\nvar change_headers;\n\n// block paywall-scripts\nvar blockedRegexes = {};\nvar blockedRegexesDomains = [];\nvar blockedRegexesGeneral = {};\nvar blockedJsInline = {};\nvar blockedJsInlineDomains = [];\n\n// unhide text on amp-page\nvar amp_unhide;\n// redirect to amp-page\nvar amp_redirect;\n// load contentScript in all frames\nvar cs_all_frames;\n// block contentScript\nvar cs_block;\n// clear localStorage in contentScript\nvar cs_clear_lclstrg;\n// code for contentScript\nvar cs_code;\n// parameters for contentScript (default)\nvar cs_param;\n// load text from json (script[type=\"application/ld+json\"])\nvar ld_json;\n// load text from json (script#__NEXT_DATA__)\nvar ld_json_next;\n// load text from json (script source)\nvar ld_json_source;\n// load text from json (link[rel=\"alternate\"][type=\"application/json\"][href])\nvar ld_json_url;\n// load text from archive.is\nvar ld_archive_is;\n// load text from och.to/unlock\nvar ld_och_to_unlock;\n// add external link to article\nvar add_ext_link;\n\n// custom: block javascript\nvar block_js_custom = [];\nvar block_js_custom_ext = [];\n\n// manifest v3\nvar gpw_domains;\nvar rule_excluded_base_domains;\n\nfunction initSetRules() {\n  allow_cookies = [];\n  remove_cookies = [];\n  remove_cookies_select_drop = {};\n  remove_cookies_select_hold = {};\n  use_google_bot = [];\n  use_bing_bot = [];\n  use_facebook_bot = [];\n  use_useragent_custom = [];\n  use_useragent_custom_obj = {};\n  use_headers_custom = [];\n  use_headers_custom_obj = {};\n  use_facebook_referer = [];\n  use_google_referer = [];\n  use_twitter_referer = [];\n  use_referer_custom = [];\n  use_referer_custom_obj = {};\n  random_ip = {};\n  change_headers = [];\n  amp_unhide = [];\n  amp_redirect = {};\n  cs_all_frames = [];\n  cs_block = {};\n  cs_clear_lclstrg = [];\n  cs_code = {};\n  cs_param = {};\n  ld_json = {};\n  ld_json_next = {};\n  ld_json_source = {};\n  ld_json_url = {};\n  ld_archive_is = {};\n  ld_och_to_unlock = {};\n  add_ext_link = {};\n  block_js_custom = [];\n  block_js_custom_ext = [];\n  blockedRegexes = {};\n  blockedRegexesDomains = [];\n  blockedRegexesGeneral = {};\n  blockedJsInline = {};\n  blockedJsInlineDomains = [];\n  init_custom_flex_domains();\n}\n\nconst userAgentDesktopG = \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\";\nconst userAgentMobileG = \"Chrome/115.0.5790.171 Mobile Safari/537.36 (compatible ; Googlebot/2.1 ; +http://www.google.com/bot.html)\";\n\nconst userAgentDesktopB = \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\";\nconst userAgentMobileB = \"Chrome/115.0.5790.171 Mobile Safari/537.36 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\";\n\nconst userAgentDesktopF = 'facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)';\n\nvar enabledSites = [];\nvar disabledSites = [];\nvar optionSites = {};\nvar customSites = {};\nvar customSites_grouped_domains = [];\nvar customSites_domains = [];\nvar updatedSites = {};\nvar updatedSites_new = [];\nvar updatedSites_domains_new = [];\nvar excludedSites = [];\n\nfunction setDefaultOptions() {\n  ext_api.storage.local.set({\n    sites: filterObject(defaultSites, function (val, key) {\n      return val.domain && !val.domain.match(/^(###$|#options_(disable|optin)_)/)\n    },\n      function (val, key) {\n      return [key, val.domain]\n    })\n  }, function () {\n    ext_api.runtime.openOptionsPage();\n  });\n}\n\nfunction check_sites_updated(sites_updated_json, optin_update = false) {\n  fetch(sites_updated_json)\n  .then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        json = filterObject(json, function (val, key) {\n          let domain_filter = [];\n          return (val.domain && !domain_filter.includes(val.domain) && !(val.upd_version && (val.upd_version <= ext_version)) && !(val.upd_version_min && (val.upd_version_min > ext_version)))\n        });\n        expandSiteRules(json, true);\n        ext_api.storage.local.set({\n          sites_updated: json\n        });\n        if (!optin_update) {\n          let updated_ext_version_new = Object.values(json).map(x => x.upd_version || '').sort().pop();\n          if (updated_ext_version_new)\n            setExtVersionNew(updated_ext_version_new);\n        }\n      })\n    }\n  }).catch(err => false);\n}\n\nvar ext_path = 'https://gitflic.ru/project/magnolia1234/bpc_updates/blob/raw?file=';\nvar sites_updated_json = 'sites_updated.json';\nvar sites_updated_json_online = ext_path + sites_updated_json + '&rel=' + randomInt(100000);\nvar self_hosted = !!(manifestData.update_url || (manifestData.browser_specific_settings && manifestData.browser_specific_settings.gecko.update_url));\n\nfunction clear_sites_updated() {\n  ext_api.storage.local.set({\n    sites_updated: {}\n  });\n}\n\nfunction prep_regex_str(str, domain = '') {\n  if (domain)\n    str = str.replace(/{domain}/g, domain.replace(/\\./g, '\\\\.'));\n  return str.replace(/^\\//, '').replace(/\\/\\//g, '/').replace(/([^\\\\])\\/$/, \"$1\")\n}\n\nvar add_session_rule;\nvar init_session_rules;\nvar push_session_rule;\nvar update_session_rules;\nif (ext_manifest_version === 3) {\n\ninit_session_rules = function (counters = true, rules = true) {\n  if (counters) {\n    rule_id = 0;\n    regex_id = 0;\n    domain_id = 0;\n  }\n  if (rules) {\n    sesRules = [];\n    sesRuleIds = [];\n  }\n}\n\npush_session_rule = function (rule, rule_id) {\n  sesRules.push(rule);\n  sesRuleIds.push(rule_id);\n}\n\nupdate_session_rules = function (rules, rule_ids) {\n  ext_api.declarativeNetRequest.updateSessionRules({\n    addRules: rules,\n    removeRuleIds: rule_ids\n  }, );\n}\n\nadd_session_rule = function (domain, rule, blockedRegexes_rule = '', blockedRegexesGeneral_rule = '', blockedJsInline_rule = '') {\n  function regexToUrlFilter(rule, regex, domain) {\n    let urlFilter;\n    if (!(regex.match(/([([|*{$\\^]|\\\\[a-z\\?])/) || regex.match(/([^\\.]|\\\\\\.)\\+/))) {\n      let match_domain = gpw_domains.concat(['tinypass.com', domain]).find(x => regex.replace(/\\\\/g, '').match(new RegExp(x.replace(/\\./, '\\\\.'))));\n      urlFilter = regex.replace(/\\\\/g, '').replace(/\\.\\+/g, '*');\n      if (match_domain)\n        urlFilter = '||' + urlFilter.replace(/^[\\.\\/]/g, '');\n      delete rule.condition.regexFilter;\n      rule.condition.urlFilter = urlFilter;\n    }\n    if (!urlFilter)\n      regex_id++;\n  }\n  domain_id++;\n  if (block_js_custom.includes(domain) || block_js_custom_ext.includes(domain)) {\n    rule_id++;\n    let rule_regex;\n    let url_filter;\n    let allow = false;\n    if (block_js_custom.includes(domain)) {\n      rule_regex = \"[\\\\/\\\\.]\" + domain.replace(/\\./g, '\\\\.') + \"\\\\/\";\n      url_filter = '||' + domain;\n      if (block_js_custom_ext.includes(domain))\n        url_filter = '*';\n    } else if (block_js_custom_ext.includes(domain)) {\n      url_filter = '*';\n      allow = true;\n    }\n    \n    let block_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"block\"\n      },\n      \"condition\": {\n        \"initiatorDomains\": [domain],\n        \"urlFilter\": url_filter,\n        \"resourceTypes\": [\"script\"]\n      }\n    };\n    push_session_rule(block_rule, rule_id);\n\n    if (allow) {\n      rule_id++;\n      let allow_rule = {\n        \"id\": rule_id,\n        \"priority\": 2,\n        \"action\": {\n          \"type\": \"allow\"\n        },\n        \"condition\": {\n          \"initiatorDomains\": [domain],\n          \"urlFilter\": '||' + domain,\n          \"resourceTypes\": [\"script\"]\n        }\n      };\n      push_session_rule(allow_rule, rule_id);\n    }\n    \n  } else if (blockedRegexes_rule) {\n    rule_id++;\n    let rule_regex = blockedRegexes_rule;\n    if (rule_regex instanceof RegExp)\n      rule_regex = rule_regex.source;\n\n    let block_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"block\"\n      },\n      \"condition\": {\n        \"initiatorDomains\": [domain],\n        \"regexFilter\": rule_regex,\n        \"resourceTypes\": [\"script\", \"xmlhttprequest\"]\n      }\n    };\n    regexToUrlFilter(block_rule, rule_regex, domain);\n    push_session_rule(block_rule, rule_id);\n  }\n  \n  if (blockedRegexesGeneral_rule) {\n    rule_id++;\n    let rule_regex = blockedRegexesGeneral_rule.block_regex;\n    if (rule_regex instanceof RegExp)\n      rule_regex = rule_regex.source;\n    let rule_excluded_domains = excludedSites.concat(rule_excluded_base_domains, blockedRegexesGeneral_rule.excluded_domains);\n    \n    let block_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"block\"\n      },\n      \"condition\": {\n        \"excludedInitiatorDomains\": rule_excluded_domains,\n        \"regexFilter\": rule_regex,\n        \"resourceTypes\": [\"script\", \"xmlhttprequest\"]\n      }\n    };\n    regexToUrlFilter(block_rule, rule_regex, domain);\n    push_session_rule(block_rule, rule_id);\n  }\n  \n  let header_rule = {};\n  if (!rule.allow_cookies || rule.useragent || rule.useragent_custom || rule.headers_custom || rule.referer || rule.referer_custom || rule.random_ip) {\n    rule_id++;\n    header_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"modifyHeaders\",\n        \"requestHeaders\": []\n      },\n      \"condition\": {\n        \"urlFilter\": \"||\" + domain,\n        \"resourceTypes\": [\"main_frame\", \"sub_frame\", \"xmlhttprequest\"]\n      }\n    };\n    \n    if (!allow_cookies.includes(domain)) {\n      header_rule.action.requestHeaders.push({\n        \"header\": \"Cookie\",\n        \"operation\": \"set\",\n        \"value\": \"\"\n      });\n    }\n    \n    let mobile = navigator.userAgent.toLowerCase().includes('mobile');\n    let useUserAgentMobile = mobile && ![].includes(domain);\n    \n    let userAgentG = useUserAgentMobile ? userAgentMobileG : userAgentDesktopG;\n    let userAgentB = useUserAgentMobile ? userAgentMobileB : userAgentDesktopB;\n    \n    if (rule.useragent || rule.useragent_custom || rule.headers_custom) {\n      if (rule.useragent === 'googlebot') {\n        let googlebotEnabled = !(grouped_sites['###_es_grupo_vocento'].includes(domain) && mobile);\n        if (googlebotEnabled) {\n          if (['economictimes.com', 'economictimes.indiatimes.com'].includes(domain)) {\n            header_rule.condition.urlFilter = '||' + domain + '/*.cms';\n          } else if (domain === 'handelsblatt.com') {\n            header_rule.condition.urlFilter = '||' + domain + '/*.html';\n          } else if (domain === 'leparisien.fr') {\n            header_rule.condition.urlFilter = '||www.' + domain;\n          }\n          header_rule.action.requestHeaders.push({\n            \"header\": \"User-Agent\",\n            \"operation\": \"set\",\n            \"value\": userAgentG\n          });\n          header_rule.action.requestHeaders.push({\n            \"header\": \"Referer\",\n            \"operation\": \"set\",\n            \"value\": \"https://www.google.com/\"\n          });\n          header_rule.action.requestHeaders.push({\n            \"header\": \"X-Forwarded-For\",\n            \"operation\": \"set\",\n            \"value\": \"66.249.66.1\"\n          });\n        }\n      } else if (rule.useragent === 'bingbot') {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"User-Agent\",\n          \"operation\": \"set\",\n          \"value\": userAgentB\n        });\n      } else if (rule.useragent === 'facebookbot') {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"User-Agent\",\n          \"operation\": \"set\",\n          \"value\": userAgentDesktopF\n        });\n      } else {\n        if (rule.useragent_custom) {\n          header_rule.action.requestHeaders.push({\n            \"header\": \"User-Agent\",\n            \"operation\": \"set\",\n            \"value\": use_useragent_custom_obj[domain]\n          });\n        }\n        if (rule.headers_custom) {\n          for (let header in use_headers_custom_obj[domain]) {\n            header_rule.action.requestHeaders.push({\n              \"header\": header,\n              \"operation\": \"set\",\n              \"value\": use_headers_custom_obj[domain][header]\n            });\n          }\n        }\n      }\n    } else if (rule.referer || rule.referer_custom) {\n      if (use_google_referer.includes(domain)) {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"Referer\",\n          \"operation\": \"set\",\n          \"value\": \"https://www.google.com/\"\n        });\n      } else if (use_facebook_referer.includes(domain)) {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"Referer\",\n          \"operation\": \"set\",\n          \"value\": \"https://www.facebook.com/\"\n        });\n      } else if (use_twitter_referer.includes(domain)) {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"Referer\",\n          \"operation\": \"set\",\n          \"value\": \"https://t.co/\"\n        });\n      }\n      if (rule.referer_custom) {\n        header_rule.action.requestHeaders.push({\n          \"header\": \"Referer\",\n          \"operation\": \"set\",\n          \"value\": use_referer_custom_obj[domain]\n        });\n      }\n    }\n    \n    if (rule.random_ip) {\n      let randomIP_val;\n      if (rule.random_ip === 'eu')\n        randomIP_val = randomIP(185, 185);\n      else\n        randomIP_val = randomIP();\n      header_rule.action.requestHeaders.push({\n        \"header\": \"X-Forwarded-For\",\n        \"operation\": \"set\",\n        \"value\": randomIP_val\n      });\n    }\n    if (header_rule.action.requestHeaders.length)\n      push_session_rule(header_rule, rule_id);\n    else\n      rule_id--;\n  }\n  \n  if (blockedJsInline_rule) {\n    rule_id++;\n    let rule_regex = blockedJsInline_rule.source;\n    let block_inline_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"modifyHeaders\",\n        \"responseHeaders\": [{\n            \"header\": \"Content-Security-Policy\",\n            \"operation\": \"set\",\n            \"value\": \"script-src *;\"\n          }\n        ]\n      },\n      \"condition\": {\n        \"requestDomains\": [domain],\n        \"regexFilter\": rule_regex,\n        \"resourceTypes\": [\"main_frame\", \"sub_frame\"]\n      }\n    }\n    regexToUrlFilter(block_inline_rule, rule_regex, domain);\n    push_session_rule(block_inline_rule, rule_id);\n  }\n\n  if (grouped_sites['###_au_news_corp'].includes(domain)) {\n    rule_id++;\n    regex_id++;\n    let redirect_rule = {\n      \"id\": rule_id,\n      \"priority\": 1,\n      \"action\": {\n        \"type\": \"redirect\",\n        \"redirect\": {\n          \"regexSubstitution\": \"https://www.\" + domain + \"/\\\\1?amp\"\n        }\n      },\n      \"condition\": {\n        \"regexFilter\": \".+\\\\.\" + domain + \"\\\\/subscribe\\\\/.+&dest=.+\\\\.com\\\\.au%2F([\\\\w-%]+)&.+\",\n        \"resourceTypes\": [\"main_frame\"]\n      }\n    };\n    push_session_rule(redirect_rule, rule_id);\n  }\n}\n\n} // manifest v3\n\nfunction addRules(domain, rule, flex = false) {\n  if (rule.remove_cookies > 0 || rule.hasOwnProperty('remove_cookies_select_hold') || !(rule.hasOwnProperty('allow_cookies') || rule.hasOwnProperty('remove_cookies_select_drop')) || rule.cs_clear_lclstrg)\n    cs_clear_lclstrg.push(domain);\n  if (rule.hasOwnProperty('remove_cookies_select_drop') || rule.hasOwnProperty('remove_cookies_select_hold')) {\n    rule.allow_cookies = 1;\n    rule.remove_cookies = 1;\n  }\n  if (rule.allow_cookies > 0 && !allow_cookies.includes(domain))\n    allow_cookies.push(domain);\n  if (rule.remove_cookies > 0 && !remove_cookies.includes(domain))\n    remove_cookies.push(domain);\n  if (rule.hasOwnProperty('remove_cookies_select_drop'))\n    remove_cookies_select_drop[domain] = rule.remove_cookies_select_drop;\n  if (rule.hasOwnProperty('remove_cookies_select_hold'))\n    remove_cookies_select_hold[domain] = rule.remove_cookies_select_hold;\n  if (rule.hasOwnProperty('block_regex')) {\n    if (rule.block_regex instanceof RegExp)\n      blockedRegexes[domain] = rule.block_regex;\n    else {\n      try {\n        blockedRegexes[domain] = new RegExp(prep_regex_str(rule.block_regex, domain));\n      } catch (e) {\n        console.log(`regex not valid, error: ${e}`);\n      }\n    }\n  }\n  if (rule.hasOwnProperty('block_regex_general')) {\n    if (rule.block_regex_general instanceof RegExp)\n      blockedRegexesGeneral[domain] = {block_regex: rule.block_regex_general};\n    else {\n      try {\n        blockedRegexesGeneral[domain] = {block_regex: new RegExp(prep_regex_str(rule.block_regex_general, domain))};\n      } catch (e) {\n        console.log(`regex not valid, error: ${e}`);\n      }\n    }\n    blockedRegexesGeneral[domain]['excluded_domains'] = rule.excluded_domains ? rule.excluded_domains : [];\n  }\n  if (rule.hasOwnProperty('block_js_inline')) {\n    if (rule.block_js_inline instanceof RegExp)\n      blockedJsInline[domain] = rule.block_js_inline;\n    else {\n      try {\n        blockedJsInline[domain] = new RegExp(prep_regex_str(rule.block_js_inline, domain));\n      } catch (e) {\n        console.log(`regex not valid, error: ${e}`);\n      }\n    }\n  }\n  if (rule.useragent) {\n    switch (rule.useragent) {\n    case 'googlebot':\n      if (!use_google_bot.includes(domain))\n        use_google_bot.push(domain);\n      break;\n    case 'bingbot':\n      if (!use_bing_bot.includes(domain))\n        use_bing_bot.push(domain);\n      break;\n    case 'facebookbot':\n      if (!use_facebook_bot.includes(domain))\n        use_facebook_bot.push(domain);\n      break;\n    }\n  } else if (rule.useragent_custom || rule.headers_custom) {\n    if (!use_useragent_custom.includes(domain)) {\n      use_useragent_custom.push(domain);\n      use_useragent_custom_obj[domain] = rule.useragent_custom;\n    }\n    if (!use_headers_custom.includes(domain)) {\n      use_headers_custom.push(domain);\n      use_headers_custom_obj[domain] = rule.headers_custom;\n    }\n  }\n  if (rule.referer) {\n    switch (rule.referer) {\n    case 'facebook':\n      if (!use_facebook_referer.includes(domain))\n        use_facebook_referer.push(domain);\n      break;\n    case 'google':\n      if (!use_google_referer.includes(domain))\n        use_google_referer.push(domain);\n      break;\n    case 'twitter':\n      if (!use_twitter_referer.includes(domain))\n        use_twitter_referer.push(domain);\n      break;\n    }\n  } else if (rule.referer_custom) {\n    if (!use_referer_custom.includes(domain)) {\n      use_referer_custom.push(domain);\n      use_referer_custom_obj[domain] = rule.referer_custom;\n    }\n  }\n  if (rule.random_ip) {\n    random_ip[domain] = rule.random_ip;\n  }\n  if (rule.amp_unhide > 0 && !amp_unhide.includes(domain))\n    amp_unhide.push(domain);\n  if (rule.amp_redirect)\n    amp_redirect[domain] = rule.amp_redirect;\n  if (rule.cs_all_frames)\n    cs_all_frames.push(domain);\n  if (rule.cs_block)\n    cs_block[domain] = 1;\n  if (rule.cs_code) {\n    if (typeof rule.cs_code === 'string') {\n      try {\n        rule.cs_code = JSON.parse(rule.cs_code);\n      } catch (e) {\n        console.log(`cs_code not valid: ${rule.cs_code} error: ${e}`);\n      }\n    }\n    if (typeof rule.cs_code === 'object')\n      cs_code[domain] = rule.cs_code;\n  }\n  if (rule.cs_param)\n    cs_param[domain] = rule.cs_param;\n  if (rule.ld_json)\n    ld_json[domain] = rule.ld_json;\n  if (rule.ld_json_next)\n    ld_json_next[domain] = rule.ld_json_next;\n  if (rule.ld_json_source)\n    ld_json_source[domain] = rule.ld_json_source;\n  if (rule.ld_json_url)\n    ld_json_url[domain] = rule.ld_json_url;\n  if (rule.ld_archive_is)\n    ld_archive_is[domain] = rule.ld_archive_is;\n  if (rule.ld_och_to_unlock)\n    ld_och_to_unlock[domain] = rule.ld_och_to_unlock;\n  if (rule.ld_json || rule.ld_json_next || rule.ld_json_source || rule.ld_json_url || rule.ld_archive_is || rule.ld_och_to_unlock || rule.cs_dompurify)\n    if (!dompurify_sites.includes(domain))\n      dompurify_sites.push(domain);\n  if (rule.add_ext_link && rule.add_ext_link_type)\n    add_ext_link[domain] = {css: rule.add_ext_link, type: rule.add_ext_link_type};\n\n  // custom\n  if (rule.block_js > 0)\n    block_js_custom.push(domain);\n  if (rule.block_js_ext > 0)\n    block_js_custom_ext.push(domain);\n\n  if (ext_manifest_version === 3) {\n    init_session_rules(false, flex);\n    add_session_rule(domain, rule, blockedRegexes[domain], blockedRegexesGeneral[domain], blockedJsInline[domain]);\n    if (flex && sesRules.length)\n      update_session_rules(sesRules, sesRuleIds);\n  }\n}\n\nfunction customFlexAddRules(custom_domain, rule) {\n  addRules(custom_domain, rule, true);\n  if (blockedRegexes[custom_domain])\n    blockedRegexesDomains.push(custom_domain);\n  if (blockedJsInline[custom_domain]) {\n    blockedJsInlineDomains.push(custom_domain);\n    if (ext_manifest_version === 2)\n      disableJavascriptInline();\n  }\n  if (rule.useragent || rule.useragent_custom || rule.headers_custom || rule.referer || rule.referer_custom || rule.random_ip)\n    change_headers.push(custom_domain);\n  if (rule.random_ip)\n    use_random_ip.push(custom_domain);\n  ext_api.tabs.reload({bypassCache: true});\n}\n\n// manifest v3\nvar rule_id = 0;\nvar regex_id = 0;\nvar domain_id = 0;\nvar sesRules = [];\nvar sesRuleIds = [];\n\nfunction set_rules(sites, sites_updated, sites_custom) {\n  initSetRules();\n  let prev_rule_id = rule_id;\n  if (ext_manifest_version === 3)\n    init_session_rules();\n  for (let site in sites) {\n    let site_domain = sites[site].toLowerCase();\n    let custom = false;\n    if (!site_domain.match(/^(###$|#options_)/)) {\n      let rule = {};\n      let site_default = defaultSites.hasOwnProperty(site) ? site : Object.keys(defaultSites).find(default_key => compareKey(default_key, site));\n      if (site_default) {\n        rule = defaultSites[site_default];\n        let site_updated = Object.keys(sites_updated).find(updated_key => compareKey(updated_key, site));\n        if (site_updated) {\n          rule = sites_updated[site_updated];\n          if (rule.nofix && rule.group) {\n            enabledSites.splice(enabledSites.indexOf(site_domain), 1);\n            nofix_sites.push(site_domain);\n          }\n        }\n      } else if (sites_updated.hasOwnProperty(site)) { // updated (new) sites\n        rule = sites_updated[site];\n      } else if (sites_custom.hasOwnProperty(site)) { // custom (new) sites\n        rule = sites_custom[site];\n        custom = true;\n      } else\n        continue;\n      let domains = [site_domain];\n      let group = false;\n      if (rule.hasOwnProperty('group')) {\n        domains = (typeof rule.group !== 'string') ? rule.group : rule.group.split(',');\n        group = true;\n      }\n      let rule_default = {};\n      if (rule.hasOwnProperty('exception')) {\n        for (let key in rule)\n          rule_default[key] = rule[key];\n      }\n      for (let domain of domains) {\n        let custom_in_group = false;\n        if (rule_default.hasOwnProperty('exception')) {\n          let exception_rule = rule_default.exception.filter(x => domain === x.domain || (typeof x.domain !== 'string' && x.domain.includes(domain)));\n          if (exception_rule.length > 0)\n            rule = exception_rule[0];\n          else\n            rule = rule_default;\n        }\n        // custom domain for default site(group)\n        if (!custom) {\n          let isCustomSite = matchDomain(customSites_domains, domain);\n          let customSite_title = isCustomSite ? Object.keys(customSites).find(key => customSites[key].domain === isCustomSite) : '';\n          if (customSite_title && !customSitesExt_remove.includes(isCustomSite)) {\n            // add default block_regex\n            let block_regex_default = '';\n            if (rule.hasOwnProperty('block_regex'))\n              block_regex_default = rule.block_regex;\n            rule = {};\n            for (let key in sites_custom[customSite_title])\n              rule[key] = sites_custom[customSite_title][key];\n            if (block_regex_default && !rule.block_regex_ignore_default) {\n              if (rule.hasOwnProperty('block_regex')) {\n                if (block_regex_default instanceof RegExp)\n                  block_regex_default = block_regex_default.source;\n                rule.block_regex = '(' + block_regex_default + '|' + prep_regex_str(rule.block_regex, domain) + ')';\n              } else\n                rule.block_regex = block_regex_default;\n            }\n            if (group)\n              custom_in_group = true;\n            else\n              custom = true;\n          } else {\n            if (rule.nofix) {\n              enabledSites.splice(enabledSites.indexOf(domain), 1);\n              nofix_sites.push(domain);\n            } else {\n              let group_site_updated = Object.keys(sites_updated).find(updated_key => group && sites_updated[updated_key].domain === domain);\n              if (group_site_updated)\n                rule = sites_updated[group_site_updated];\n            }\n          }\n        }\n        addRules(domain, rule);\n      }\n    }\n  }\n  blockedRegexesDomains = Object.keys(blockedRegexes);\n  blockedJsInlineDomains = Object.keys(blockedJsInline);\n  if (ext_manifest_version === 2)\n    disableJavascriptInline();\n  else if (ext_manifest_version === 3)\n    update_session_rules(sesRules, sesRuleIds);\n  use_random_ip = Object.keys(random_ip);\n  change_headers = use_google_bot.concat(use_bing_bot, use_facebook_bot, use_useragent_custom, use_headers_custom, use_facebook_referer, use_google_referer, use_twitter_referer, use_referer_custom, use_random_ip);\n\n  if (ext_manifest_version === 3) {\n    let block_rules_length = blockedRegexesDomains.length + blockedJsInlineDomains.length;\n    console.log('block_rules: ' + block_rules_length);\n    console.log('regex_rules (max. 1000): ' + regex_id);\n    console.log('total_rules (max. 5000): ' + rule_id);\n    console.log('domains: ' + domain_id);\n    \n    let fake_rules = [];\n    let fake_rules_ids = [];\n    for (let i = rule_id + 1; i < prev_rule_id + 1; i++) {\n      fake_rules.push({\n        \"id\": i,\n        \"priority\": 1,\n        \"action\": {\n          \"type\": \"allow\"\n        },\n        \"condition\": {\n          \"urlFilter\": \"###\",\n          \"resourceTypes\": [\"main_frame\"]\n        }\n      });\n      fake_rules_ids.push(i);\n    }\n    \n    ext_api.declarativeNetRequest.updateSessionRules({\n      removeRuleIds: fake_rules_ids\n    }, () => {\n      if (ext_api.runtime.lasterror)\n        console.log(ext_api.runtime.lasterrror.message)\n    });\n  }\n\n}// manifest v3\n\n// add grouped sites to en/disabledSites (and exclude sites)\nfunction add_grouped_enabled_domains(groups) {\n  for (let key in groups) {\n    if (enabledSites.includes(key))\n      enabledSites = enabledSites.concat(groups[key]);\n    else\n      disabledSites = disabledSites.concat(groups[key]);\n  }   \n  // custom\n  for (let site in customSites) {\n    let group = customSites[site].group;\n    if (group) {\n      let group_array = group.split(',');\n      if (enabledSites.includes(customSites[site].domain))\n        enabledSites = enabledSites.concat(group_array);\n      else\n        disabledSites = disabledSites.concat(group_array);\n    }\n  }\n    for (let site of excludedSites) {\n      if (enabledSites.includes(site)) {\n        enabledSites.splice(enabledSites.indexOf(site), 1);\n        disabledSites.push(site);\n      }\n    }\n}\n\n// Get the enabled sites (from local storage) & set_rules for sites\next_api.storage.local.get({\n  sites: {},\n  sites_default: Object.keys(defaultSites).filter(x => defaultSites[x].domain && !defaultSites[x].domain.match(/^(#options_|###$)/)),\n  sites_custom: {},\n  sites_updated: {},\n  sites_excluded: [],\n  ext_version_old: '2.3.9.0',\n  optIn: false,\n  optInUpdate: true\n}, function (items) {\n  var sites = items.sites;\n  optionSites = sites;\n  var sites_default = items.sites_default;\n  customSites = items.sites_custom;\n  customSites = filterObject(customSites, function (val, key) {\n    return !(val.add_ext_link && !val.add_ext_link_type)\n  });\n  customSites_grouped_domains = Object.values(customSites).map(x => x.domain);\n  customSites_domains = customSites_grouped_domains.concat(Object.values(customSites).filter(x => x.group).map(x => x.group.split(',').map(x => x.trim())).flat());\n  updatedSites = items.sites_updated;\n  updatedSites_domains_new = Object.values(updatedSites).filter(x => x.domain && !defaultSites_domains.includes(x.domain) || x.group).map(x => x.group ? x.group.filter(y => !defaultSites_domains.includes(y)).concat([x.domain]) : x.domain).flat();\n  var ext_version_old = items.ext_version_old;\n  optin_setcookie = items.optIn;\n  optin_update = items.optInUpdate;\n  excludedSites = items.sites_excluded;\n\n  enabledSites = Object.values(sites).filter(function (val) {\n    return (val && val !== '###' && (defaultSites_domains.concat(customSites_domains, updatedSites_domains_new).includes(val)));\n  }).map(function (val) {\n    return val.toLowerCase();\n  });\n\n  // Enable new sites by default (opt-in)\n  updatedSites_new = Object.keys(updatedSites).filter(x => updatedSites[x].domain && !defaultSites_domains.includes(updatedSites[x].domain));\n  for (let site_updated in updatedSites) {\n    defaultSites[site_updated] = updatedSites[site_updated];\n    if (updatedSites[site_updated].group)\n      grouped_sites[updatedSites[site_updated].domain] = updatedSites[site_updated].group;\n  }\n  if (ext_version > ext_version_old || updatedSites_new.length > 0) {\n    if (enabledSites.includes('#options_enable_new_sites')) {\n      let sites_new = Object.keys(defaultSites).filter(x => defaultSites[x].domain && !defaultSites[x].domain.match(/^(#options_|###$)/) && !sites_default.some(key => compareKey(key, x)));\n      for (let site_new of sites_new)\n        sites[site_new] = defaultSites[site_new].domain;\n      let sites_old = ['NHST Media Group'];\n      for (let site_old of sites_old)\n        if (sites[site_old])\n          delete sites[site_old];\n      // reset ungrouped sites\n      let ungrouped_sites = {\n        'The Stage Media (UK)': '###_uk_thestage_media',\n        'The Week (regwall)': 'theweek.com'\n      };\n      for (let key in ungrouped_sites) {\n        if (sites[key] && sites[key] !== ungrouped_sites[key])\n          sites[key] = ungrouped_sites[key];\n      }\n      ext_api.storage.local.set({\n        sites: sites\n      });\n    } else {\n      ext_api.management.getSelf(function (result) {\n        if ((result.installType === 'development' || (result.installType !== 'development' && !enabledSites.includes('#options_on_update')))) {\n          let new_groups = ['###_de_ippen_media', '###_se_bonnier_group', '###_uk_independent', '###_uk_thesun', '###_usa_vox_media'];\n          let open_options = new_groups.some(group => !enabledSites.includes(group) && grouped_sites[group].some(domain => enabledSites.includes(domain) && !customSites_domains.includes(domain)));\n          if (open_options)\n            ext_api.runtime.openOptionsPage();\n        }\n      });\n    }\n    sites_default = Object.keys(defaultSites).filter(x => defaultSites[x].domain && !defaultSites[x].domain.match(/^(#options_|###$)/));\n    ext_api.storage.local.set({\n      sites_default: sites_default,\n      ext_version_old: ext_version\n    });\n  }\n\n  disabledSites = defaultSites_grouped_domains.concat(customSites_grouped_domains, updatedSites_domains_new).filter(x => !enabledSites.includes(x));\n  add_grouped_enabled_domains(grouped_sites);\n  if (ext_manifest_version === 3) {\n    gpw_domains = Object.values(defaultSites).filter(x => x.block_regex_general && !x.domain.startsWith('###')).map(x => x.domain);\n    rule_excluded_base_domains = disabledSites.filter(x => !x.match(/(^###|_)/) && !gpw_domains.includes(x));\n  }\n  set_rules(sites, updatedSites, customSites);\n  if (optin_update)\n    check_update();\n  if (enabledSites.includes('#options_optin_update_rules') && self_hosted) {\n    sites_updated_json = sites_updated_json_online;\n    sites_custom_ext_json = ext_path + 'sites_custom.json' + '&rel=' + randomInt(100000);\n  }\n  check_sites_updated(sites_updated_json, optin_update);\n  check_sites_custom_ext();\n  if (!Object.keys(sites).length)\n    ext_api.runtime.openOptionsPage();\n});\n\n// Listen for changes to options\next_api.storage.onChanged.addListener(function (changes, namespace) {\n  if (namespace === 'sync')\n    return;\n  for (let key in changes) {\n    var storageChange = changes[key];\n    if (key === 'sites') {\n      var sites = storageChange.newValue;\n      optionSites = sites;\n      enabledSites = Object.values(sites).filter(function (val) {\n        return (val && val !== '###' && (defaultSites_domains.concat(customSites_domains, updatedSites_domains_new).includes(val)));\n      }).map(function (val) {\n        return val.toLowerCase();\n      });\n      disabledSites = defaultSites_grouped_domains.concat(customSites_grouped_domains, updatedSites_domains_new).filter(x => !enabledSites.includes(x));\n      add_grouped_enabled_domains(grouped_sites);\n      if (ext_manifest_version === 3) {\n        gpw_domains = Object.values(defaultSites).filter(x => x.block_regex_general && !x.domain.startsWith('###')).map(x => x.domain);\n        rule_excluded_base_domains = disabledSites.filter(x => !x.match(/(^###|_)/) && !gpw_domains.includes(x));\n      }\n      set_rules(sites, updatedSites, customSites);\n    }\n    if (key === 'sites_custom') {\n      var sites_custom = storageChange.newValue ? storageChange.newValue : {};\n      var sites_custom_old = storageChange.oldValue ? storageChange.oldValue : {};\n      customSites = sites_custom;\n      customSites_grouped_domains = Object.values(customSites).map(x => x.domain);\n      customSites_domains = customSites_grouped_domains.concat(Object.values(customSites).filter(x => x.group).map(x => x.group.split(',').map(x => x.trim())).flat());\n      \n      // add/remove custom sites in options (not for default site(group))\n      var sites_custom_added = Object.keys(sites_custom).filter(x => !Object.keys(sites_custom_old).includes(x) && !defaultSites.hasOwnProperty(x) && !defaultSites_domains.includes(sites_custom[x].domain));\n      var sites_custom_removed = Object.keys(sites_custom_old).filter(x => !Object.keys(sites_custom).includes(x) && !defaultSites.hasOwnProperty(x) && !defaultSites_domains.includes(sites_custom_old[x].domain));\n      \n      ext_api.storage.local.get({\n        sites: {}\n      }, function (items) {\n        var sites = items.sites;\n        if (sites_custom_added.concat(sites_custom_removed).length > 0) {\n          for (let key of sites_custom_added)\n            sites[key] = sites_custom[key].domain;\n          for (let key of sites_custom_removed)\n            delete sites[key];\n          \n          ext_api.storage.local.set({\n            sites: sites\n          }, function () {\n            true;\n          });\n        } else {\n          var sites_custom_group_update = Object.keys(sites_custom).filter(x => sites_custom[x].group && Object.keys(sites_custom_old).includes(x) && sites_custom_old[x].group && sites_custom[x].group !== sites_custom_old[x].group && enabledSites.includes(sites_custom[x].domain));\n          for (let key of sites_custom_group_update)\n            enabledSites = enabledSites.concat(sites_custom[key].group.split(','));\n          set_rules(sites, updatedSites, customSites);\n        }\n      });\n    }\n    if (key === 'sites_updated') {\n      var sites_updated = storageChange.newValue ? storageChange.newValue : {};\n      updatedSites = sites_updated;\n      updatedSites_domains_new = Object.values(updatedSites).filter(x => (x.domain && !defaultSites_domains.includes(x.domain) || x.group)).map(x => x.group ? x.group.filter(y => !defaultSites_domains.includes(y)) : x.domain).flat();\n      updatedSites_new = Object.keys(updatedSites).filter(x => updatedSites[x].domain && !defaultSites_domains.includes(updatedSites[x].domain));\n      if (updatedSites_new.length > 0) {\n        if (enabledSites.includes('#options_enable_new_sites')) {\n          for (let site_updated_new of updatedSites_new)\n            optionSites[site_updated_new] = updatedSites[site_updated_new].domain;\n          ext_api.storage.local.set({\n            sites: optionSites\n          });\n        }\n      } else\n        set_rules(optionSites, updatedSites, customSites);\n    }\n    if (key === 'sites_excluded') {\n      var sites_excluded = storageChange.newValue ? storageChange.newValue : [];\n      var sites_excluded_old = storageChange.oldValue ? storageChange.oldValue : [];\n      excludedSites = sites_excluded;\n\n      // add/remove excluded sites in en/disabledSites\n      var sites_excluded_added = sites_excluded.filter(x => !sites_excluded_old.includes(x));\n      var sites_excluded_removed = sites_excluded_old.filter(x => !sites_excluded.includes(x));\n\n      for (let site of sites_excluded_added) {\n        if (enabledSites.includes(site)) {\n          enabledSites.splice(enabledSites.indexOf(site), 1);\n          disabledSites.push(site);\n        }\n      }\n      for (let site of sites_excluded_removed) {\n        if (disabledSites.includes(site)) {\n          disabledSites.splice(disabledSites.indexOf(site), 1);\n          enabledSites.push(site);\n        }\n      }\n    }\n    if (key === 'ext_version_new') {\n      ext_version_new = storageChange.newValue;\n    }\n    if (key === 'optIn') {\n      optin_setcookie = storageChange.newValue;\n    }\n    if (key === 'optInUpdate') {\n      optin_update = storageChange.newValue;\n    }\n  }\n});\n\n// Set and show default options on install\next_api.runtime.onInstalled.addListener(function (details) {\n  if (details.reason == \"install\") {\n    setDefaultOptions();\n  } else if (details.reason == \"update\") {\n    ext_api.management.getSelf(function (result) {\n      if (enabledSites.includes('#options_on_update') && result.installType !== 'development')\n        ext_api.runtime.openOptionsPage(); // User updated extension (non-developer mode)\n    });\n  }\n});\n\nif (ext_manifest_version === 2) {\n\n// Google AMP cache redirect\next_api.webRequest.onBeforeRequest.addListener(function (details) {\n  var url = details.url.split('?')[0];\n  var updatedUrl;\n  if (matchUrlDomain('cdn.ampproject.org', url))\n    updatedUrl = 'https://' + url.split(/cdn\\.ampproject\\.org\\/[a-z]\\/s\\//)[1];\n  else if (matchUrlDomain('google.com', url))\n    updatedUrl = 'https://' + url.split(/\\.google\\.com\\/amp\\/s\\//)[1];\n  return { redirectUrl: decodeURIComponent(updatedUrl) };\n},\n{urls:[\"*://*.cdn.ampproject.org/*/s/*\", \"*://*.google.com/amp/s/*\"], types:[\"main_frame\"]},\n[\"blocking\"]\n);\n\n// inkl bypass\next_api.webRequest.onBeforeRequest.addListener(function (details) {\n  if (!isSiteEnabled(details)) {\n    return;\n  }\n  var updatedUrl = details.url.replace(/etok=[\\w]*&/, '');\n  if (details.url.includes('/signin?') && details.url.includes('redirect_to='))\n    updatedUrl = 'https://www.inkl.com' + decodeURIComponent(updatedUrl.split('redirect_to=')[1]);\n  return { redirectUrl: updatedUrl };\n},\n{urls:[\"*://*.inkl.com/*\"], types:[\"main_frame\"]},\n[\"blocking\"]\n);\n\n// Australia News Corp redirect subscribe to amp\nvar au_news_corp_subscr = grouped_sites['###_au_news_corp'].map(domain => '*://www.' + domain + '/subscribe/*');\next_api.webRequest.onBeforeRequest.addListener(function (details) {\n  if (!isSiteEnabled(details) || details.url.includes('/digitalprinteditions') || !(details.url.includes('dest=') && details.url.split('dest=')[1].split('&')[0])) {\n    return;\n  }\n  var updatedUrl = decodeURIComponent(details.url.split('dest=')[1].split('&')[0]) + '?amp';\n  return {\n    redirectUrl: updatedUrl\n  };\n}, {\n  urls: au_news_corp_subscr,\n  types: [\"main_frame\"]\n},\n  [\"blocking\"]);\n\n// fix nytimes x-frame-options (hidden iframe content)\next_api.webRequest.onHeadersReceived.addListener(function (details) {\n  if (!isSiteEnabled(details)) {\n    return;\n  }\n  var headers = details.responseHeaders;\n  headers = headers.map(function (header) {\n      if (header.name === 'x-frame-options')\n        header.value = 'SAMEORIGIN';\n      return header;\n    });\n  return {\n    responseHeaders: headers\n  };\n}, {\n  urls: [\"*://*.nytimes.com/*\"]\n},\n  ['blocking', 'responseHeaders']);\n\n}// manifest v2\n\nfunction blockJsInlineListener(details) {\n  let domain = matchUrlDomain(blockedJsInlineDomains, details.url);\n  let matched = domain && details.url.match(blockedJsInline[domain]);\n  if (matched && optin_setcookie && ['uol.com.br'].includes(domain))\n    matched = false;\n  if (!isSiteEnabled(details) || !matched)\n    return;\n  var headers = details.responseHeaders;\n  headers.push({\n    'name': 'Content-Security-Policy',\n    'value': \"script-src *;\"\n  });\n  return {\n    responseHeaders: headers\n  };\n}\n\nfunction disableJavascriptInline() {\n  // block inline script\n  ext_api.webRequest.onHeadersReceived.removeListener(blockJsInlineListener);\n  var block_js_inline_urls = [];\n  for (let domain in blockedJsInline)\n    block_js_inline_urls.push(\"*://*.\" + domain + \"/*\");\n  if (block_js_inline_urls.length)\n    ext_api.webRequest.onHeadersReceived.addListener(blockJsInlineListener, {\n      'types': ['main_frame', 'sub_frame'],\n      'urls': block_js_inline_urls\n    },\n      ['blocking', 'responseHeaders']);\n}\n\nif (typeof browser !== 'object') {\n  var focus_changed = false;\n  ext_api.windows.onFocusChanged.addListener((windowId) => {\n    if (windowId > 0)\n      focus_changed = true;\n  });\n}\n\n  function runOnTab(tab) {\n    let tabId = tab.id;\n    let url = tab.url;\n    let rc_domain = matchUrlDomain(remove_cookies, url);\n    let rc_domain_enabled = rc_domain && enabledSites.includes(rc_domain);\n    let lib_file = 'lib/empty.js';\n    if (matchUrlDomain(dompurify_sites, url))\n      lib_file = 'lib/purify.min.js';\n    var bg2csData = {};\n    if (optin_setcookie && matchUrlDomain(['###'], url))\n      bg2csData.optin_setcookie = 1;\n    if (matchUrlDomain(amp_unhide, url))\n      bg2csData.amp_unhide = 1;\n    let amp_redirect_domain = matchUrlDomain(Object.keys(amp_redirect), url);\n    if (amp_redirect_domain)\n      bg2csData.amp_redirect = amp_redirect[amp_redirect_domain];\n    let cs_block_domain = matchUrlDomain(Object.keys(cs_block), url);\n    if (cs_block_domain)\n      bg2csData.cs_block = 1;\n    let cs_clear_lclstrg_domain = matchUrlDomain(cs_clear_lclstrg, url);\n    if (cs_clear_lclstrg_domain)\n      bg2csData.cs_clear_lclstrg = 1;\n    let cs_code_domain = matchUrlDomain(Object.keys(cs_code), url);\n    if (cs_code_domain)\n      bg2csData.cs_code = cs_code[cs_code_domain];\n    let cs_param_domain = matchUrlDomain(Object.keys(cs_param), url);\n    if (cs_param_domain)\n      bg2csData.cs_param = cs_param[cs_param_domain];\n    let ld_json_domain = matchUrlDomain(Object.keys(ld_json), url);\n    if (ld_json_domain)\n      bg2csData.ld_json = ld_json[ld_json_domain];\n    let ld_json_next_domain = matchUrlDomain(Object.keys(ld_json_next), url);\n    if (ld_json_next_domain)\n      bg2csData.ld_json_next = ld_json_next[ld_json_next_domain];\n    let ld_json_source_domain = matchUrlDomain(Object.keys(ld_json_source), url);\n    if (ld_json_source_domain)\n      bg2csData.ld_json_source = ld_json_source[ld_json_source_domain];\n    let ld_json_url_domain = matchUrlDomain(Object.keys(ld_json_url), url);\n    if (ld_json_url_domain)\n      bg2csData.ld_json_url = ld_json_url[ld_json_url_domain];\n    let ld_archive_is_domain = matchUrlDomain(Object.keys(ld_archive_is), url);\n    if (ld_archive_is_domain)\n      bg2csData.ld_archive_is = ld_archive_is[ld_archive_is_domain];\n    let ld_och_to_unlock_domain = matchUrlDomain(Object.keys(ld_och_to_unlock), url);\n    if (ld_och_to_unlock_domain)\n      bg2csData.ld_och_to_unlock = ld_och_to_unlock[ld_och_to_unlock_domain];\n    let add_ext_link_domain = matchUrlDomain(Object.keys(add_ext_link), url);\n    if (add_ext_link_domain)\n      bg2csData.add_ext_link = add_ext_link[add_ext_link_domain];\n    let use_cs_all_frames = !!matchUrlDomain(cs_all_frames, url);\n    let tab_runs = 5;\n    for (let n = 0; n < tab_runs; n++) {\n      setTimeout(function () {\n        if (n < 1) {\n        // run contentScript.js on page\n        if (ext_manifest_version === 2) {\n          ext_api.tabs.executeScript(tabId, {\n            file: lib_file,\n            runAt: 'document_start',\n            allFrames: use_cs_all_frames\n          }, function (res) {\n            if (ext_api.runtime.lastError)\n              return;\n            ext_api.tabs.executeScript(tabId, {\n              file: 'contentScript.js',\n              runAt: 'document_start',\n              allFrames: use_cs_all_frames\n            }, function (res) {\n              if (ext_api.runtime.lastError || res[0]) {\n                return;\n              }\n            })\n          });\n        } else if (ext_manifest_version === 3) {\n          let script_world = \"ISOLATED\";\n          if (matchUrlDomain(['hbr.org', 'lepoint.fr', 'ouest-france.fr', 'thehindu.com', 'thehindubusinessline.com'].concat(grouped_sites['###_fr_groupe_ebra']), url))\n            script_world = \"MAIN\";\n          ext_api.scripting.executeScript({\n            target: {\n              tabId: tabId,\n              allFrames: use_cs_all_frames\n            },\n            files: [lib_file, \"contentScript.js\"],\n            injectImmediately: true,\n            world: script_world\n          }).catch(err => false);\n        }\n        // send bg2csData to contentScript.js\n        if (true) {\n          setTimeout(function () {\n            if (ext_manifest_version === 3 || typeof browser === 'object')\n              ext_api.tabs.sendMessage(tabId, {msg: \"bg2cs\", data: bg2csData}).catch(x => false);\n            else\n              ext_api.tabs.sendMessage(tabId, {msg: \"bg2cs\", data: bg2csData});\n          }, 100);\n        }\n        } // run cs once\n        // remove cookies after page load\n        if (rc_domain_enabled && !['enotes.com', 'huffingtonpost.it', 'lastampa.it'].includes(rc_domain)) {\n          remove_cookies_fn(rc_domain, true);\n        }\n      }, n * 200);\n    }\n  }\n\n  function runOnTab_once(tab) {\n    let tabId = tab.id;\n    let url = tab.url;\n    // load contentScript_once.js to identify custom site (flex) of group\n    if (!(matchUrlDomain(custom_flex_domains.concat(custom_flex_not_domains, customSites_domains, updatedSites_domains_new, excludedSites, nofix_sites), url) || matchUrlDomain(defaultSites_domains, url))) {\n      if (ext_manifest_version === 2) {\n        ext_api.tabs.executeScript(tabId, {\n          file: 'contentScript_once.js',\n          runAt: 'document_start'\n        }, function (res) {\n          if (ext_api.runtime.lastError || res[0]) {\n            return;\n          }\n        });\n      } else if (ext_manifest_version === 3) {\n        ext_api.scripting.executeScript({\n          target: {\n            tabId: tabId\n          },\n          files: [\"contentScript_once.js\"]\n        }).catch(err => false);\n      }\n    }\n    // load toggleIcon.js (icon for dark or incognito mode in Chrome))\n    if (typeof browser !== 'object') {\n      if (ext_manifest_version === 2) {\n        ext_api.tabs.executeScript(tabId, {\n          file: 'options/toggleIcon.js',\n          runAt: 'document_start'\n        }, function (res) {\n          if (ext_api.runtime.lastError || res[0]) {\n            return;\n          }\n        });\n      } else if (ext_manifest_version === 3) {\n        ext_api.scripting.executeScript({\n          target: {\n            tabId: tabId\n          },\n          files: [\"options/toggleIcon.js\"]\n        }).catch(err => false);\n      }\n    }\n  }\n\n  var set_var_sites = ['dagsavisen.no', 'journaldemontreal.com', 'journaldequebec.com', 'nzherald.co.nz'].concat(grouped_sites['###_de_madsack']);\n  function runOnTab_once_var(tab) {\n    let tabId = tab.id;\n    let url = tab.url;\n    let domain = matchUrlDomain(set_var_sites, url);\n    // load contentScript_once_var.js to set variables for site\n    if (domain && enabledSites.includes(domain)) {\n      if (ext_manifest_version === 2) {\n        ext_api.tabs.executeScript(tabId, {\n          file: 'contentScript_once_var.js',\n          runAt: 'document_start'\n        }, function (res) {\n          if (ext_api.runtime.lastError || res[0]) {\n            return;\n          }\n        });\n      } else if (ext_manifest_version === 3) {\n        ext_api.scripting.executeScript({\n          target: {\n            tabId: tabId\n          },\n          files: [\"contentScript_once_var.js\"],\n          injectImmediately: true,\n          world: \"MAIN\"\n        }).catch(err => false);\n      }\n    }\n  }\n\next_api.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  let tab_status = changeInfo.status;\n  if (/^http/.test(tab.url)) {\n    if ((tab_status && (tab_status === 'complete' || matchUrlDomain(['startribune.com'], tab.url))) || changeInfo.url) {\n      let timeout = changeInfo.url ? 500 : 0;\n      setTimeout(function () {\n        if (isSiteEnabled(tab)) {\n          runOnTab(tab);\n        }\n        runOnTab_once(tab);\n      }, timeout);\n    }\n    runOnTab_once_var(tab);\n  }\n});\n\nif (ext_manifest_version === 2) {\n\nvar extraInfoSpec = ['blocking', 'requestHeaders'];\nif (ext_api.webRequest.OnBeforeSendHeadersOptions.hasOwnProperty('EXTRA_HEADERS'))\n  extraInfoSpec.push('extraHeaders');\n\next_api.webRequest.onBeforeSendHeaders.addListener(function(details) {\n  var requestHeaders = details.requestHeaders;\n\n  var header_referer = '';\n  if (details.originUrl)\n    header_referer = details.originUrl;\n  else {\n    for (let n in requestHeaders) {\n      if (requestHeaders[n].name.toLowerCase() == 'referer') {\n        header_referer = requestHeaders[n].value;\n        break;\n      }\n    }\n    var blocked_referer_domains = [];\n    if (!header_referer && details.initiator) {\n      header_referer = details.initiator;\n      if (!blocked_referer && matchUrlDomain(blocked_referer_domains, details.url) && ['script', 'xmlhttprequest'].includes(details.type)) {\n        for (let domain of blocked_referer_domains)\n          restrictions[domain] = new RegExp('((\\\\/|\\\\.)' + domain.replace(/\\./g, '\\\\.') + '($|\\\\/$)|' + restrictions[domain].toString().replace(/(^\\/|\\/$)/g, '') + ')');\n        blocked_referer = true;\n      }\n    }\n  }\n\n  // block external javascript for custom sites (optional)\n  if (['script'].includes(details.type)) {\n    let domain_blockjs_ext = matchUrlDomain(block_js_custom_ext, header_referer);\n    if (domain_blockjs_ext && !matchUrlDomain(domain_blockjs_ext, details.url) && isSiteEnabled({url: header_referer}))\n      return { cancel: true };\n  }\n\n  // check for blocked regular expression: domain enabled, match regex, block on an internal or external regex\n  if (['script', 'xmlhttprequest'].includes(details.type)) {\n    let domain = matchUrlDomain(blockedRegexesDomains, header_referer);\n    if (domain && details.url.match(blockedRegexes[domain]) && isSiteEnabled({url: header_referer}))\n      return { cancel: true };\n  }\n\n  // block general paywall scripts\n  if (['script', 'xmlhttprequest'].includes(details.type)) {\n    for (let domain in blockedRegexesGeneral) {\n      if (details.url.match(blockedRegexesGeneral[domain].block_regex) && !(matchUrlDomain(excludedSites.concat(disabledSites, blockedRegexesGeneral[domain].excluded_domains), header_referer)))\n        return { cancel: true };\n    }\n  }\n\n  if (!isSiteEnabled(details)) {\n    return;\n  }\n\n  // block javascript of (sub)domain for custom sites (optional)\n  var domain_blockjs = matchUrlDomain(block_js_custom, details.url);\n  if (domain_blockjs && details.type === 'script') {\n    return { cancel: true };\n  }\n\n  var useUserAgentMobile = false;\n  var setReferer = false;\n  var setUserAgent = false;\n\nvar ignore_types = ['font', 'image', 'stylesheet'];\n\nif (matchUrlDomain(change_headers, details.url) && !ignore_types.includes(details.type)) {\n  var mobile = details.requestHeaders.filter(x => x.name.toLowerCase() === \"user-agent\" && x.value.toLowerCase().includes(\"mobile\")).length;\n  var googlebotEnabled = matchUrlDomain(use_google_bot, details.url) && \n    !(matchUrlDomain(grouped_sites['###_es_grupo_vocento'], details.url) && mobile) &&\n    !(matchUrlDomain(['economictimes.com', 'economictimes.indiatimes.com'], details.url) && !details.url.split(/[\\?#]/)[0].endsWith('.cms')) &&\n    !(matchUrlDomain('handelsblatt.com', details.url) && !details.url.split(/[\\?#]/)[0].endsWith('.html')) &&\n    !(matchUrlDomain('nytimes.com', details.url) && details.url.includes('.nytimes.com/live/')) &&\n    !(matchUrlDomain('uol.com.br', details.url) && !matchUrlDomain('folha.uol.com.br', details.url));\n  var bingbotEnabled = matchUrlDomain(use_bing_bot, details.url);\n  var facebookbotEnabled = matchUrlDomain(use_facebook_bot, details.url);\n  var useragent_customEnabled = matchUrlDomain(use_useragent_custom, details.url);\n  var headers_customEnabled = matchUrlDomain(use_headers_custom, details.url);\n\n  // if referer exists, set it\n  requestHeaders = requestHeaders.map(function (requestHeader) {\n    if (requestHeader.name === 'Referer') {\n      if (googlebotEnabled || matchUrlDomain(use_google_referer, details.url)) {\n        requestHeader.value = 'https://www.google.com/';\n      } else if (matchUrlDomain(use_facebook_referer, details.url)) {\n        requestHeader.value = 'https://www.facebook.com/';\n      } else if (matchUrlDomain(use_twitter_referer, details.url)) {\n        requestHeader.value = 'https://t.co/';\n      } else if (domain = matchUrlDomain(use_referer_custom, details.url)) {\n        requestHeader.value = use_referer_custom_obj[domain];\n      }\n      setReferer = true;\n    }\n    if (requestHeader.name === 'User-Agent') {\n      useUserAgentMobile = requestHeader.value.toLowerCase().includes(\"mobile\") && !matchUrlDomain([], details.url);\n      if (googlebotEnabled)\n        requestHeader.value = useUserAgentMobile ? userAgentMobileG : userAgentDesktopG;\n      else if (bingbotEnabled)\n        requestHeader.value = useUserAgentMobile ? userAgentMobileB : userAgentDesktopB;\n      else if (facebookbotEnabled)\n        requestHeader.value = userAgentDesktopF;\n      else {\n        if (domain = useragent_customEnabled)\n          requestHeader.value = use_useragent_custom_obj[domain];\n      }\n      setUserAgent = true;\n    }\n    return requestHeader;\n  });\n\n  // otherwise add it\n  if (!setReferer) {\n    if (googlebotEnabled || matchUrlDomain(use_google_referer, details.url)) {\n      requestHeaders.push({\n        name: 'Referer',\n        value: 'https://www.google.com/'\n      });\n    } else if (matchUrlDomain(use_facebook_referer, details.url)) {\n      requestHeaders.push({\n        name: 'Referer',\n        value: 'https://www.facebook.com/'\n      });\n    } else if (matchUrlDomain(use_twitter_referer, details.url)) {\n      requestHeaders.push({\n        name: 'Referer',\n        value: 'https://t.co/'\n      });\n    } else if (domain = matchUrlDomain(use_referer_custom, details.url)) {\n      requestHeaders.push({\n        name: 'Referer',\n        value: use_referer_custom_obj[domain]\n      });\n    }\n  }\n\n  // override User-Agent to use Googlebot\n  if (googlebotEnabled) {\n    if (!setUserAgent) {\n      requestHeaders.push({\n        \"name\": \"User-Agent\",\n        \"value\": useUserAgentMobile ? userAgentMobileG : userAgentDesktopG\n      })\n    }\n    requestHeaders.push({\n      \"name\": \"X-Forwarded-For\",\n      \"value\": \"66.249.66.1\"\n    })\n  }\n\n  // override User-Agent to use Bingbot\n  else if (!setUserAgent && bingbotEnabled) {\n    requestHeaders.push({\n      \"name\": \"User-Agent\",\n      \"value\": useUserAgentMobile ? userAgentMobileB : userAgentDesktopB\n    })\n  }\n\n  // override User-Agent to use Facebookbot\n  else if (!setUserAgent && facebookbotEnabled) {\n    requestHeaders.push({\n      \"name\": \"User-Agent\",\n      \"value\": userAgentDesktopF\n    })\n  }\n\n  // override User-Agent/headers to custom\n  else {\n    if (!setUserAgent && (domain = useragent_customEnabled)) {\n      requestHeaders.push({\n        \"name\": \"User-Agent\",\n        \"value\": use_useragent_custom_obj[domain]\n      });\n    }\n    if (domain = headers_customEnabled) {\n      for (let header in use_headers_custom_obj[domain]) {\n        requestHeaders.push({\n          \"name\": header,\n          \"value\": use_headers_custom_obj[domain][header]\n        })\n      }\n    }\n  }\n \n  // random IP for sites in use_random_ip\n  let domain_random = matchUrlDomain(use_random_ip, details.url);\n  if (domain_random && !googlebotEnabled) {\n    let randomIP_val;\n    if (random_ip[domain_random] === 'eu')\n      randomIP_val = randomIP(185, 185);\n    else\n      randomIP_val = randomIP();\n    requestHeaders.push({\n      \"name\": \"X-Forwarded-For\",\n      \"value\": randomIP_val\n    })\n  }\n}\n\n  // remove cookies before page load\n  if (!matchUrlDomain(allow_cookies, details.url)) {\n    requestHeaders = requestHeaders.map(function(requestHeader) {\n      if (requestHeader.name === 'Cookie') {\n        requestHeader.value = '';\n      }\n      return requestHeader;\n    });\n  }\n  return { requestHeaders: requestHeaders };\n}, {\n  urls: ['*://*/*']\n}, extraInfoSpec);\n// extraInfoSpec is ['blocking', 'requestHeaders'] + possible 'extraHeaders'\n\n}// manifest v2\n\nfunction check_sites_custom_ext() {\n  fetch(sites_custom_ext_json)\n  .then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        customSitesExt = Object.values(json).map(x => x.domain);\n        if (json['###_remove_sites'] && json['###_remove_sites'].cs_code) {\n          customSitesExt_remove = json['###_remove_sites'].cs_code.split(/,\\s?/);\n          let upd_match = customSitesExt_remove.filter(x => x.match(/^###_custom_/));\n          if (upd_match.length) {\n            ext_api.storage.local.set({\n              sites_custom_upd_version: upd_match[0].replace('###_custom_', '')\n            });\n          }\n        }\n      })\n    }\n  }).catch(err => false);\n}\n\nvar customSitesExt = [];\nvar customSitesExt_remove = [];\nvar sites_custom_ext_json = 'custom/sites_custom.json';\n\next_api.tabs.onUpdated.addListener(function (tabId, info, tab) { updateBadge(tab); });\next_api.tabs.onActivated.addListener(function (activeInfo) { if (activeInfo.tabId) ext_api.tabs.get(activeInfo.tabId, updateBadge); });\n\nvar gpw_no_badge_domains = Object.values(defaultSites).filter(x => x.block_regex_general && !x.domain.startsWith('###') && x.excluded_domains && x.excluded_domains.includes(x.domain)).map(x => x.domain);\nfunction updateBadge(activeTab) {\n  if (ext_api.runtime.lastError || !activeTab || !activeTab.active)\n    return;\n  let badgeText = '';\n  let color = 'red';\n  let currentUrl = activeTab.url;\n  if (currentUrl) {\n    if (isSiteEnabled({url: currentUrl})) {\n      badgeText = 'ON';\n      color = 'red';\n    } else if (matchUrlDomain(enabledSites, currentUrl)) {\n      badgeText = 'ON-';\n      color = 'orange';\n    } else if (matchUrlDomain(disabledSites, currentUrl)) {\n      badgeText = 'OFF';\n      color = 'blue';\n    } else if (matchUrlDomain(nofix_sites, currentUrl)) {\n      badgeText = 'X';\n      color = 'silver';\n    }\n    if (matchUrlDomain(gpw_no_badge_domains, currentUrl))\n      badgeText = '';\n    if (ext_version_new > ext_version)\n      badgeText = '^' + badgeText;\n    let isDefaultSite = matchUrlDomain(defaultSites_domains, currentUrl);\n    let isCustomSite = matchUrlDomain(customSites_domains, currentUrl);\n    let isUpdatedSite = matchUrlDomain(updatedSites_domains_new, currentUrl);\n    if (!isDefaultSite && (isCustomSite || isUpdatedSite)) {\n      ext_api.permissions.contains({\n        origins: ['*://*.' + (isCustomSite || isUpdatedSite) + '/*']\n      }, function (result) {\n        if (!result)\n          badgeText = enabledSites.includes(isCustomSite || isUpdatedSite) ? 'C' : '';\n        if (color && badgeText)\n          ext_api.action.setBadgeBackgroundColor({color: color});\n        ext_api.action.setBadgeText({text: badgeText});\n      });\n    } else {\n      if (!badgeText && matchUrlDomain(customSitesExt, currentUrl))\n        badgeText = '+C';\n      if (color && badgeText)\n        ext_api.action.setBadgeBackgroundColor({color: color});\n      ext_api.action.setBadgeText({text: badgeText});\n    }\n  } else\n      ext_api.action.setBadgeText({text: badgeText});\n}\n\nfunction setExtVersionNew(check_ext_version_new, check_ext_upd_version_new = '') {\n  ext_api.management.getSelf(function (result) {\n    var installType = result.installType;\n    var ext_version_len = (installType === 'development') ? 7 : 5;\n    ext_version_new = check_ext_version_new;\n    if (ext_version_len === 5 && check_ext_upd_version_new && check_ext_upd_version_new < check_ext_version_new)\n      ext_version_new = check_ext_upd_version_new;\n    if (ext_version_new && ext_version_new.substring(0, ext_version_len) <= ext_version.substring(0, ext_version_len))\n      ext_version_new = '1';\n    ext_api.storage.local.set({\n      ext_version_new: ext_version_new\n    });\n  });\n}\n\nvar ext_version_new;\nfunction check_update() {\n  let manifest_new = ext_path + 'manifest.json' + '&rel=' + randomInt(100000);\n  fetch(manifest_new)\n  .then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        let json_ext_version_new = json['version'];\n        if (manifestData.browser_specific_settings && manifestData.browser_specific_settings.gecko.update_url) {\n          let json_upd_version_new = manifestData.browser_specific_settings.gecko.update_url;\n          fetch(json_upd_version_new)\n          .then(response => {\n            if (response.ok) {\n              response.json().then(upd_json => {\n                let ext_id = manifestData.browser_specific_settings.gecko.id;\n                let json_ext_upd_version_new = upd_json.addons[ext_id].updates[0].version;\n                setExtVersionNew(json_ext_version_new, json_ext_upd_version_new);\n              })\n            }\n          }).catch(err => setExtVersionNew(json_ext_version_new));\n        } else\n          setExtVersionNew(json_ext_version_new);\n      })\n    } else\n      setExtVersionNew('');\n  }).catch(err => setExtVersionNew(''));\n}\n\nfunction site_switch() {\n  ext_api.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    if (tabs && tabs[0] && /^http/.test(tabs[0].url)) {\n      let currentUrl = tabs[0].url;\n      let isDefaultSite = matchUrlDomain(defaultSites_grouped_domains, currentUrl);\n      if (!isDefaultSite) {\n        let isDefaultSiteGroup = matchUrlDomain(defaultSites_domains, currentUrl);\n        if (isDefaultSiteGroup)\n          isDefaultSite = Object.keys(grouped_sites).find(key => grouped_sites[key].includes(isDefaultSiteGroup));\n      }\n      if (!isDefaultSite) {\n        let sites_updated_domains_new = Object.values(updatedSites).filter(x => x.domain && !defaultSites_domains.includes(x.domain)).map(x => x.domain);\n        let isUpdatedSite = matchUrlDomain(sites_updated_domains_new, currentUrl);\n        if (!isUpdatedSite) {\n          let sites_updated_group_domains_new = Object.values(updatedSites).filter(x => x.group).map(x => x.group.filter(y => !defaultSites_domains.includes(y))).flat();\n          let isUpdatedSite_group = matchUrlDomain(sites_updated_group_domains_new, currentUrl);\n          if (isUpdatedSite_group)\n            isUpdatedSite = Object.values(updatedSites).filter(x => x.group && x.group.includes(isUpdatedSite_group)).map(x => x.domain)[0];\n        }\n        if (isUpdatedSite)\n          isDefaultSite = isUpdatedSite;\n      }\n      let defaultSite_title = isDefaultSite ? Object.keys(defaultSites).find(key => defaultSites[key].domain === isDefaultSite) : '';\n      let isCustomSite = matchUrlDomain(customSites_domains, currentUrl);\n      let customSite_title = isCustomSite ? Object.keys(customSites).find(key => customSites[key].domain === isCustomSite || (customSites[key].group && customSites[key].group.split(',').includes(isCustomSite))) : '';\n      if (isCustomSite && customSite_title && customSites[customSite_title].domain !== isCustomSite)\n        isCustomSite = customSites[customSite_title].domain;\n      let isCustomFlexSite = matchUrlDomain(custom_flex_domains, currentUrl);\n      let isCustomFlexGroupSite = isCustomFlexSite ? Object.keys(custom_flex).find(key => custom_flex[key].includes(isCustomFlexSite)) : '';\n      let customFlexSite_title = isCustomFlexGroupSite ? Object.keys(defaultSites).find(key => defaultSites[key].domain === isCustomFlexGroupSite) : '';\n      let site_title = defaultSite_title || customSite_title || customFlexSite_title;\n      let domain = isDefaultSite || isCustomSite || isCustomFlexGroupSite;\n      if (domain && site_title) {\n        let added_site = [];\n        let removed_site = [];\n        if (enabledSites.includes(domain))\n          removed_site.push(site_title);\n        else\n          added_site.push(site_title);\n        ext_api.storage.local.get({\n          sites: {}\n        }, function (items) {\n          var sites = items.sites;\n          for (let key of added_site)\n            sites[key] = domain;\n          for (let key of removed_site) {\n            key = Object.keys(sites).find(sites_key => compareKey(sites_key, key));\n            delete sites[key];\n          }\n          ext_api.storage.local.set({\n            sites: sites\n          }, function () {\n            ext_api.tabs.reload({bypassCache: true});\n          });\n        });\n      }\n    }\n  });\n}\n\nfunction remove_cookies_fn(domainVar, exclusions = false) {\n  ext_api.cookies.getAllCookieStores(function (cookieStores) {\n    ext_api.tabs.query({\n      active: true,\n      currentWindow: true\n    }, function (tabs) {\n      if (!ext_api.runtime.lastError && tabs && tabs[0] && /^http/.test(tabs[0].url)) {\n        let tabId = tabs[0].id;\n        let storeId = '0';\n        for (let store of cookieStores) {\n          if (store.tabIds.includes(tabId))\n            storeId = store.id;\n        }\n        storeId = storeId.toString();\n        if (domainVar === 'asia.nikkei.com')\n          domainVar = 'nikkei.com';\n        var cookie_get_options = {\n          domain: domainVar\n        };\n        if (storeId !== 'null')\n          cookie_get_options.storeId = storeId;\n        var cookie_remove_options = {};\n        ext_api.cookies.getAll(cookie_get_options, function (cookies) {\n          for (let cookie of cookies) {\n            if (exclusions) {\n              var rc_domain = cookie.domain.replace(/^(\\.?www\\.|\\.)/, '');\n              // hold specific cookie(s) from remove_cookies domains\n              if ((rc_domain in remove_cookies_select_hold) && remove_cookies_select_hold[rc_domain].includes(cookie.name)) {\n                continue; // don't remove specific cookie\n              }\n              // drop only specific cookie(s) from remove_cookies domains\n              if ((rc_domain in remove_cookies_select_drop) && !(remove_cookies_select_drop[rc_domain].includes(cookie.name))) {\n                continue; // only remove specific cookie\n              }\n              // hold on to consent-cookie\n              if (cookie.name.match(/(consent|^optanon)/i)) {\n                continue;\n              }\n            }\n            cookie.domain = cookie.domain.replace(/^\\./, '');\n            cookie_remove_options = {\n              url: (cookie.secure ? \"https://\" : \"http://\") + cookie.domain + cookie.path,\n              name: cookie.name\n            };\n            if (storeId !== 'null')\n              cookie_remove_options.storeId = storeId;\n            ext_api.cookies.remove(cookie_remove_options);\n          }\n        });\n      }\n    });\n  })\n}\n\nfunction clear_cookies() {\n  ext_api.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    if (tabs && tabs[0] && /^http/.test(tabs[0].url)) {\n      let tabId = tabs[0].id;\n      if (ext_manifest_version === 2) {\n        ext_api.tabs.executeScript({\n          file: 'options/clearCookies.js',\n          runAt: 'document_start'\n        }, function (res) {\n          if (ext_api.runtime.lastError || res[0]) {\n            return;\n          }\n        });\n      } else if (ext_manifest_version === 3) {\n        ext_api.scripting.executeScript({\n          target: {\n            tabId: tabId\n          },\n          files: ['options/clearCookies.js']\n        }).catch(err => false);\n      }\n      ext_api.tabs.update(tabId, {\n        url: tabs[0].url\n      });\n    }\n  });\n}\n\nvar chrome_scheme = 'light';\next_api.runtime.onMessage.addListener(function (message, sender) {\n  if (message.request === 'clear_cookies') {\n    clear_cookies();\n  }\n  // clear cookies for domain\n  if (message.request === 'clear_cookies_domain' && message.data) {\n    remove_cookies_fn(message.data.domain, true);\n  }\n  if (message.request === 'custom_domain' && message.data && message.data.domain) {\n    let custom_domain = message.data.domain;\n    let group = message.data.group;\n    if (group) {\n      let nofix_groups = ['###_au_nomedia', '###_beehiiv', '###_cl_elmercurio_local', '###_fi_alma_talent', '###_fi_kaleva', '###_ghost', '###_it_citynews', '###_nl_vmnmedia', '###_se_gota_media', '###_substack_custom', '###_uk_aspermont', '###_usa_cherryroad'];\n      if (!custom_flex_domains.includes(custom_domain)) {\n        if (!nofix_groups.includes(group)) {\n        if (custom_flex[group])\n          custom_flex[group].push(custom_domain);\n        else\n          custom_flex[group] = [custom_domain];\n        custom_flex_domains.push(custom_domain);\n        if (enabledSites.includes(group)) {\n          if (!enabledSites.includes(custom_domain))\n            enabledSites.push(custom_domain);\n          let rules = Object.values(defaultSites).filter(x => x.domain === group)[0];\n          if (rules) {\n              if (rules.hasOwnProperty('exception')) {\n                let exception_rule = rules.exception.filter(x => custom_domain === x.domain || (typeof x.domain !== 'string' && x.domain.includes(custom_domain)));\n                if (exception_rule.length)\n                  rules = exception_rule[0];\n              }\n            if (group === '###_de_madsack') {\n              if (!set_var_sites.includes(custom_domain))\n                set_var_sites.push(custom_domain);\n            }\n          } else\n            rules = Object.values(customSites).filter(x => x.domain === group)[0];\n          if (rules) {\n            customFlexAddRules(custom_domain, rules);\n          }\n        } else if (disabledSites.includes(group)) {\n          if (!disabledSites.includes(custom_domain))\n            disabledSites.push(custom_domain);\n          }\n        } else\n          nofix_sites.push(custom_domain);\n    }\n  } else\n    custom_flex_not_domains.push(custom_domain);\n  }\n  if (message.request === 'site_switch') {\n    site_switch();\n  }\n  if (message.request === 'check_sites_updated') {\n    check_sites_updated(sites_updated_json_online);\n  }\n  if (message.request === 'clear_sites_updated') {\n    clear_sites_updated();\n  }\n  if (message.request === 'check_update') {\n    check_update();\n  }\n  if (message.request === 'popup_show_toggle') {\n    ext_api.tabs.query({\n      active: true,\n      currentWindow: true\n    }, function (tabs) {\n      if (tabs && tabs[0] && /^http/.test(tabs[0].url)) {\n        let currentUrl = tabs[0].url;\n        let domain;\n        let isExcludedSite = matchUrlDomain(excludedSites, currentUrl);\n        if (!isExcludedSite) {\n          let isDefaultSite = matchUrlDomain(defaultSites_domains, currentUrl);\n          let isCustomSite = matchUrlDomain(customSites_domains, currentUrl);\n          let isUpdatedSite = matchUrlDomain(updatedSites_domains_new, currentUrl);\n          let isCustomFlexSite = matchUrlDomain(custom_flex_domains, currentUrl);\n          domain = isDefaultSite || isCustomSite || isUpdatedSite || isCustomFlexSite;\n          if (domain)\n            ext_api.runtime.sendMessage({\n              msg: \"popup_show_toggle\",\n              data: {\n                domain: domain,\n                enabled: enabledSites.includes(domain)\n              }\n            })\n        }\n      }\n    })\n  }\n  if (message.request === 'refreshCurrentTab') {\n    ext_api.tabs.reload(sender.tab.id, {bypassCache: true});\n  }\n\n  if (message.request === 'getExtFetch' && message.data) {\n    message.data.html = '';\n    fetch(message.data.url, {headers: message.data.headers})\n    .then(response => {\n      if (response.ok) {\n        response.text().then(html => {\n          let json_key = message.data.json_key;\n          if (json_key) {\n            try {\n              let json = JSON.parse(html);\n              if (json)\n                message.data.html = getNestedKeys(json, json_key);\n            } catch (err) {\n              console.log(err);\n            }\n          } else\n            message.data.html = html;\n          ext_api.tabs.sendMessage(sender.tab.id, {\n            msg: \"showExtFetch\",\n            data: message.data\n          });\n        })\n      }\n    })\n  }\n\n  function sendArticleSrc(tab_id, message) {\n    if (ext_manifest_version === 3 || typeof browser === 'object')\n      ext_api.tabs.sendMessage(tab_id, {\n        msg: \"showExtSrc\",\n        data: message.data\n      }).catch(err => false);\n    else\n      ext_api.tabs.sendMessage(tab_id, {\n        msg: \"showExtSrc\",\n        data: message.data\n      });\n  }\n  \n  // manifest v3: offscreen\n  let OFFSCREEN_DOCUMENT_PATH = '/options/offscreen.html';\n  async function sendMessageToOffscreenDocument(request, data) {\n    if (!(await hasOffscreenDocument())) {\n      await ext_api.offscreen.createDocument({\n        url: OFFSCREEN_DOCUMENT_PATH,\n        reasons: [ext_api.offscreen.Reason.DOM_PARSER],\n        justification: 'Parse DOM'\n      }).catch(err => false);\n    }\n    ext_api.runtime.sendMessage({request, data}).catch(err => false);\n  }\n  \n  if (message.request === 'getExtSrc' && message.data) {\n    message.data.html = '';\n    function getArticleSrc(message) {\n      let url_src = message.data.url_src || message.data.url;\n      fetch(url_src, {headers: message.data.headers})\n      .then(response => {\n        if (response.ok) {\n          response.text().then(html => {\n            let recursive;\n            if (message.data.url.startsWith('https://archive.')) {\n              if (url_src.includes('/https')) {\n                if (html.includes('<div class=\"TEXT-BLOCK\"')) {\n                  message.data.url_src = html.split('<div class=\"TEXT-BLOCK\"')[1].split('</div>')[0].split('href=\"')[1].split('\"')[0];\n                  getArticleSrc(message);\n                  recursive = true;\n                } else\n                  html = '';\n              }\n            }\n            if (!recursive) {\n              if (html) {\n                if (message.data.base64) {\n                  html = decode_utf8(atob(html));\n                  message.data.selector_source = 'body';\n                }\n                if (ext_manifest_version === 2) {\n                  let parser = new DOMParser();\n                  let doc = parser.parseFromString(html, 'text/html');\n                  let article_new = doc.querySelector(message.data.selector_source);\n                  message.data.html = article_new ? article_new.outerHTML : '';\n                  sendArticleSrc(sender.tab.id, message);\n                } else if (ext_manifest_version === 3) {\n                  message.data.html = html;\n                  message.data.tab_id = sender.tab.id;\n                  sendMessageToOffscreenDocument('getExtSrc_dom', message.data); // promise\n                }\n              } else {\n                message.data.html = '';\n                sendArticleSrc(sender.tab.id, message);\n              }\n            }\n          });\n        } else\n          sendArticleSrc(sender.tab.id, message);\n      }).catch(function (err) {\n        sendArticleSrc(sender.tab.id, message);\n      });\n    }\n    getArticleSrc(message);\n  }\n\n  // manifest v3: offscreen\n  async function handleOffscreenMessages(message) {\n    if (message.request === 'getExtSrc_dom_result') {\n      sendArticleSrc(message.data.tab_id, message);\n      closeOffscreenDocument();\n    }\n  }\n  \n  async function closeOffscreenDocument() {\n    if (!(await hasOffscreenDocument()))\n      return;\n    await ext_api.offscreen.closeDocument().catch(err => false);\n  }\n  \n  async function hasOffscreenDocument() {\n    let matchedClients = await clients.matchAll();\n    for (let client of matchedClients) {\n      if (client.url.endsWith(ext_api.runtime.id + OFFSCREEN_DOCUMENT_PATH))\n        return true;\n    }\n    return false;\n  }\n  \n  if (message.request === 'getExtSrc_dom_result' && message.data) {\n    handleOffscreenMessages(message); // promise\n  }\n\n  if (message.scheme && (![chrome_scheme, 'undefined'].includes(message.scheme) || focus_changed)) {\n      let icon_path = {path: {'128': 'bypass.png'}};\n      if (message.scheme === 'dark')\n          icon_path = {path: {'128': 'bypass-dark.png'}};\n      ext_api.action.setIcon(icon_path);\n      chrome_scheme = message.scheme;\n      focus_changed = false;\n  }\n});\n\n// show the opt-in tab on installation\next_api.storage.local.get([\"optInShown\", \"customShown\"], function (result) {\n  if (!result.optInShown || !result.customShown) {\n    ext_api.tabs.create({\n      url: \"options/optin/opt-in.html\"\n    });\n    ext_api.storage.local.set({\n      \"optInShown\": true,\n      \"customShown\": true\n    });\n  }\n});\n\nfunction filterObject(obj, filterFn, mapFn = function (val, key) {\n  return [key, val];\n}) {\n  return Object.fromEntries(Object.entries(obj).\n    filter(([key, val]) => filterFn(val, key)).map(([key, val]) => mapFn(val, key)));\n}\n\nfunction compareKey(firstStr, secondStr) {\n  return firstStr.toLowerCase().replace(/\\s\\(.*\\)/, '') === secondStr.toLowerCase().replace(/\\s\\(.*\\)/, '');\n}\n\nfunction isSiteEnabled(details) {\n  var enabledSite = matchUrlDomain(enabledSites, details.url);\n  if (!ext_name.startsWith('Bypass Paywalls Clean') || !(self_hosted || /0$/.test(ext_version)))\n    enabledSite = '';\n  if (enabledSite in restrictions) {\n    return restrictions[enabledSite].test(details.url);\n  }\n  return !!enabledSite;\n}\n\nfunction matchDomain(domains, hostname = '') {\n  var matched_domain = false;\n  if (typeof domains === 'string')\n    domains = [domains];\n  domains.some(domain => (hostname === domain || hostname.endsWith('.' + domain)) && (matched_domain = domain));\n  return matched_domain;\n}\n\nfunction urlHost(url) {\n  if (/^http/.test(url)) {\n    try {\n      return new URL(url).hostname;\n    } catch (e) {\n      console.log(`url not valid: ${url} error: ${e}`);\n    }\n  }\n  return url;\n}\n\nfunction matchUrlDomain(domains, url) {\n  return matchDomain(domains, urlHost(url));\n}\n\nfunction prepHostname(hostname) {\n  return hostname.replace(/^(www|m|account|amp(\\d)?|edition|eu|mobil|wap)\\./, '');\n}\n\nfunction getParameterByName(name, url) {\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n  results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nfunction stripUrl(url) {\n  return url.split(/[\\?#]/)[0];\n}\n\nfunction decode_utf8(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction randomIP(range_low = 0, range_high = 223) {\n  let rndmIP = [];\n  for (let n = 0; n < 4; n++) {\n    if (n === 0)\n      rndmIP.push(range_low + randomInt(range_high - range_low + 1));\n    else\n      rndmIP.push(randomInt(255) + 1);\n  }\n  return rndmIP.join('.');\n}\n\nfunction getNestedKeys(obj, key) {\n  if (key in obj)\n    return obj[key];\n  let keys = key.split('.');\n  let value = obj;\n  for (let i = 0; i < keys.length; i++) {\n    value = value[keys[i]];\n    if (value === undefined)\n      break;\n  }\n  return value;\n}\n\n// Refresh the current tab (http)\nfunction refreshCurrentTab() {\n  ext_api.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    if (tabs && tabs[0] && /^http/.test(tabs[0].url)) {\n      if (ext_api.runtime.lastError)\n        return;\n      ext_api.tabs.update(tabs[0].id, {\n        url: tabs[0].url\n      });\n    }\n  });\n}\n"
            }
        ],
        "final_prompt": "我的需求是：当在浏览器输入的只有ft.com时，该插件不启用，只有在输入“https://www.ft.com/content/f5a904c2-1ba7-47b4-a506-b9db7e899704”这种新闻网页时才启用，该怎么改配置文件实现？"
    },
    {
        "id": "2025-06-22 20:53:58",
        "project_name": "Onews",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ONewsApp.swift",
                "filename": "ONewsApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct NewsReaderAppApp: App {\n    var body: some Scene {\n        WindowGroup {\n            MainAppView()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/MainView.swift",
                "filename": "MainView.swift",
                "content": "import SwiftUI\n\nstruct MainAppView: View {\n    // 使用 @State 来管理是否已认证的状态\n    @State private var isAuthenticated = false\n\n    var body: some View {\n        if isAuthenticated {\n            // 如果已认证，显示主新闻阅读器界面\n            // fullScreenCover 会全屏展示，并允许用户通过下拉手势返回（如果需要）\n            SourceListView(isAuthenticated: $isAuthenticated)\n        } else {\n            // 否则，显示一个简单的登录界面\n            LoginView(isAuthenticated: $isAuthenticated)\n        }\n    }\n}\n\n// 登录界面\nstruct LoginView: View {\n    // 使用 @Binding 来接收和修改父视图的 isAuthenticated 状态\n    @Binding var isAuthenticated: Bool\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"登录/验证\")\n                .font(.largeTitle)\n                .fontWeight(.bold)\n            \n            Button(action: {\n                // 点击按钮时，将状态设置为 true，从而切换到主界面\n                isAuthenticated = true\n            }) {\n                Text(\"登录\")\n                    .font(.headline)\n                    .foregroundColor(.white)\n                    .padding()\n                    .frame(width: 200, height: 50)\n                    .background(Color.blue)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/Models.swift",
                "filename": "Models.swift",
                "content": "import Foundation\n\n// 用于UI展示的新闻来源结构体\n// Identifiable 协议让它可以在 SwiftUI 的 List 中直接使用\nstruct NewsSource: Identifiable {\n    let id = UUID() // 唯一标识符\n    let name: String\n    var articles: [Article]\n}\n\n// 文章的结构体\n// Identifiable 和 Codable 协议\nstruct Article: Identifiable, Codable {\n    var id = UUID() // 为每个文章实例生成唯一ID\n    let topic: String\n    let article: String\n    let images: [String]\n    \n    // `isRead` 状态不在JSON中，所以我们自定义解码过程\n    var isRead: Bool = false\n\n    // 定义JSON中的键，这样解码器就知道要解析哪些字段\n    enum CodingKeys: String, CodingKey {\n        case topic, article, images\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ONewsViewModel.swift",
                "filename": "ONewsViewModel.swift",
                "content": "import Foundation\n\n// ObservableObject 使得 SwiftUI 视图可以订阅它的变化\nclass NewsViewModel: ObservableObject {\n    \n    // @Published 属性包装器会在数据改变时自动通知所有订阅的视图\n    @Published var sources: [NewsSource] = []\n    \n    // 计算所有来源中未读文章的总数\n    var totalUnreadCount: Int {\n        // flatMap 将所有来源的文章合并成一个数组，然后过滤出未读的并计数\n        sources.flatMap { $0.articles }.filter { !$0.isRead }.count\n    }\n    \n    init() {\n        loadNews()\n    }\n    \n    // 从项目包中加载并解析JSON文件\n    func loadNews() {\n        guard let url = Bundle.main.url(forResource: \"onews\", withExtension: \"json\") else {\n            fatalError(\"无法在项目包中找到 news_250622.json 文件。\")\n        }\n        \n        guard let data = try? Data(contentsOf: url) else {\n            fatalError(\"无法加载 news_250622.json 文件。\")\n        }\n        \n        let decoder = JSONDecoder()\n        \n        // 将JSON解码为一个字典，键是来源名称，值是文章数组\n        guard let decodedData = try? decoder.decode([String: [Article]].self, from: data) else {\n            fatalError(\"解析 news_250622.json 文件失败。\")\n        }\n        \n        // 将解码后的字典转换为我们在UI中使用的 NewsSource 数组\n        // .sorted 按名称排序，确保每次加载顺序一致\n        self.sources = decodedData.map { (sourceName, articles) in\n            NewsSource(name: sourceName, articles: articles)\n        }.sorted { $0.name < $1.name }\n    }\n    \n    // 根据文章ID将特定文章标记为已读\n    func markAsRead(articleID: UUID) {\n        // 在主线程上更新，因为这会触发UI变化\n        DispatchQueue.main.async {\n            // 遍历所有来源\n            for i in 0..<self.sources.count {\n                // 查找包含该文章的来源\n                if let j = self.sources[i].articles.firstIndex(where: { $0.id == articleID }) {\n                    // 如果文章当前是未读状态，则将其标记为已读\n                    if !self.sources[i].articles[j].isRead {\n                        self.sources[i].articles[j].isRead = true\n                    }\n                    // 找到后即可退出循环\n                    return\n                }\n            }\n        }\n    }\n    \n    // 新增：一个计算属性，用于获取所有来源的文章及其来源名称\n    var allArticlesWithSource: [(article: NewsArticle, sourceName: String)] {\n        // 使用 flatMap 来遍历所有 source，并将每个 source 的文章转换为我们需要的元组格式\n        // 然后将所有结果合并成一个单一的数组\n        sources.flatMap { source in\n            source.articles.map { article in\n                (article: article, sourceName: source.name)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/SourceListView.swift",
                "filename": "SourceListView.swift",
                "content": "import SwiftUI\n\nstruct SourceListView: View {\n    // @StateObject 确保 ViewModel 的生命周期与视图绑定，只创建一次\n    @StateObject private var viewModel = NewsViewModel()\n    @Binding var isAuthenticated: Bool\n\n    var body: some View {\n        // NavigationView 是实现导航功能的基础，包括标题、返回按钮和侧滑返回\n        NavigationView {\n            // 使用 ZStack 将背景色和列表内容叠放\n            ZStack {\n                // 设置深色背景，适配设计图\n                Color(UIColor.systemGray6).edgesIgnoringSafeArea(.all)\n                \n                VStack {\n                    // 未读总数显示区域\n                    HStack {\n                        Text(\"Unread\")\n                            .font(.system(size: 28, weight: .bold))\n                        Text(\"\\(viewModel.totalUnreadCount)\")\n                            .font(.system(size: 28, weight: .bold))\n                            .foregroundColor(.gray)\n                    }\n                    .padding()\n                    .background(Color(UIColor.secondarySystemBackground))\n                    .cornerRadius(12)\n                    .padding(.horizontal)\n                    \n                    // 新闻来源列表\n                    List {\n                        ForEach(viewModel.sources) { source in\n                            // NavigationLink 会在点击时自动导航到 destination 指定的视图\n                            NavigationLink(destination: ArticleListView(source: source, viewModel: viewModel)) {\n                                HStack {\n                                    Text(source.name)\n                                        .fontWeight(.semibold)\n                                    Spacer()\n                                    Text(\"\\(source.articles.count)\")\n                                        .foregroundColor(.gray)\n                                }\n                                .padding(.vertical, 8)\n                            }\n                        }\n                        .listRowBackground(Color(UIColor.secondarySystemBackground))\n                    }\n                    .listStyle(InsetGroupedListStyle()) // 使用分组样式\n                }\n            }\n            .navigationTitle(\"Inoreader\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                // 添加左上角的返回/登出按钮\n                ToolbarItem(placement: .navigationBarLeading) {\n                    Button(action: {\n                        isAuthenticated = false\n                    }) {\n                        Image(systemName: \"chevron.backward\")\n                        Text(\"登出\")\n                    }\n                }\n            }\n        }\n        .accentColor(.red) // 设置导航链接箭头等元素的颜色\n        .preferredColorScheme(.dark) // 强制使用深色模式以匹配设计\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ArticleListView.swift",
                "filename": "ArticleListView.swift",
                "content": "import SwiftUI\n\nstruct ArticleListView: View {\n    let source: NewsSource\n    // @ObservedObject 订阅从父视图传递过来的 ViewModel 的变化\n    @ObservedObject var viewModel: NewsViewModel\n\n    var body: some View {\n        List {\n            // 日期显示\n            Text(formattedDate())\n                .font(.caption)\n                .foregroundColor(.gray)\n                .padding(.top)\n                // CHANGE: 隐藏这个特定行的分隔符\n                .listRowSeparator(.hidden)\n\n            // 遍历该来源下的所有文章\n            ForEach(source.articles) { article in\n                NavigationLink(destination: ArticleDetailView(article: article, sourceName: source.name, viewModel: viewModel)) {\n                    VStack(alignment: .leading, spacing: 8) {\n                        Text(source.name)\n                            .font(.caption)\n                            .foregroundColor(.gray)\n                        Text(article.topic)\n                            .fontWeight(.semibold)\n                            // 根据 isRead 状态决定文字颜色\n                            .foregroundColor(article.isRead ? .gray : .primary)\n                    }\n                    .padding(.vertical, 8)\n                }\n                // CHANGE: 隐藏所有新闻条目的分隔符\n                .listRowSeparator(.hidden)\n            }\n        }\n        .listStyle(PlainListStyle()) // 使用朴素列表样式\n        .navigationTitle(\"Unread\")\n        .navigationBarTitleDisplayMode(.inline)\n    }\n    \n    // 格式化日期的辅助函数\n    private func formattedDate() -> String {\n        let formatter = DateFormatter()\n        formatter.locale = Locale(identifier: \"zh_CN\") // 可根据需要调整地区\n        \n        if Calendar.current.isDateInToday(Date()) {\n            formatter.dateFormat = \"EEEE, MMMM d, yyyy\"\n            return \"TODAY, \\(formatter.string(from: Date()).uppercased())\"\n        } else if Calendar.current.isDateInYesterday(Date()) {\n            return \"YESTERDAY\"\n        } else {\n            formatter.dateFormat = \"EEEE, MMMM d, yyyy\"\n            return formatter.string(from: Date()).uppercased()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ArticleDetailView.swift",
                "filename": "ArticleDetailView.swift",
                "content": "import SwiftUI\n\nstruct ArticleDetailView: View {\n    let article: Article\n    let sourceName: String\n    @ObservedObject var viewModel: NewsViewModel\n\n    var body: some View {\n        ScrollView {\n            VStack(alignment: .leading, spacing: 24) {\n                // 顶部日期和时间\n                Text(formattedTimestamp())\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                \n                // 主题\n                Text(article.topic)\n                // CHANGE: 字体稍微变大，更具冲击力\n                    .font(.system(.title, design: .serif)) // 使用系统衬线字体\n                    .fontWeight(.bold)\n                \n                // 来源\n                Text(sourceName.replacingOccurrences(of: \"_\", with: \" \")) // 将下划线替换为空格\n                    .font(.subheadline)\n                    .foregroundColor(.gray)\n                \n                // 文章正文\n                Text(article.article)\n                // CHANGE: 显著增大正文字体，并使用New York衬线字体，提升阅读舒适度\n                    .font(.custom(\"NewYork-Regular\", size: 20))\n                    // CHANGE: 增加行间距\n                    .lineSpacing(15)\n            }\n            .padding(.horizontal, 20) // 增加左右内边距\n            .padding(.vertical)\n        }\n        .navigationTitle(sourceName)\n        .navigationBarTitleDisplayMode(.inline)\n        .onAppear {\n            // 当视图出现时，立即调用 ViewModel 将文章标记为已读\n            viewModel.markAsRead(articleID: article.id)\n        }\n    }\n    \n    // 格式化时间戳的辅助函数\n    private func formattedTimestamp() -> String {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"EEEE, MMMM d, yyyy 'AT' HH:mm\"\n        formatter.locale = Locale(identifier: \"en_US_POSIX\") // 使用POSIX确保格式一致\n        return formatter.string(from: Date()).uppercased()\n    }\n}\n"
            }
        ],
        "final_prompt": "，现在sourcelistview是一个较柔和深色背景叠加在一个黑色背景上的结构，我不需要叠加，整个窗口都用这种较柔和深色背景即可，然后去掉每个列表项中间的横线，然后把Unread变成可点击，点击后进入的是一个混合都有来源的所有文章列表页（其他都是单纯每个分组的列表页）。该怎么改代码实现？"
    },
    {
        "id": "2025-06-22 21:03:33",
        "project_name": "Onews",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ONewsMainView.swift",
                "filename": "ONewsMainView.swift",
                "content": "import SwiftUI\n\n@main\nstruct NewsReaderAppApp: App {\n    var body: some Scene {\n        WindowGroup {\n            MainAppView()\n        }\n    }\n}\n\nstruct MainAppView: View {\n    // 使用 @State 来管理是否已认证的状态\n    @State private var isAuthenticated = false\n\n    var body: some View {\n        if isAuthenticated {\n            // 如果已认证，显示主新闻阅读器界面\n            // fullScreenCover 会全屏展示，并允许用户通过下拉手势返回（如果需要）\n            SourceListView(isAuthenticated: $isAuthenticated)\n        } else {\n            // 否则，显示一个简单的登录界面\n            LoginView(isAuthenticated: $isAuthenticated)\n        }\n    }\n}\n\n// 登录界面\nstruct LoginView: View {\n    // 使用 @Binding 来接收和修改父视图的 isAuthenticated 状态\n    @Binding var isAuthenticated: Bool\n\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"登录/验证\")\n                .font(.largeTitle)\n                .fontWeight(.bold)\n            \n            Button(action: {\n                // 点击按钮时，将状态设置为 true，从而切换到主界面\n                isAuthenticated = true\n            }) {\n                Text(\"登录\")\n                    .font(.headline)\n                    .foregroundColor(.white)\n                    .padding()\n                    .frame(width: 200, height: 50)\n                    .background(Color.blue)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ONewsViewModel.swift",
                "filename": "ONewsViewModel.swift",
                "content": "import Foundation\n\n// ObservableObject 使得 SwiftUI 视图可以订阅它的变化\nclass NewsViewModel: ObservableObject {\n    \n    // @Published 属性包装器会在数据改变时自动通知所有订阅的视图\n    @Published var sources: [NewsSource] = []\n    \n    // 计算所有来源中未读文章的总数\n    var totalUnreadCount: Int {\n        // flatMap 将所有来源的文章合并成一个数组，然后过滤出未读的并计数\n        sources.flatMap { $0.articles }.filter { !$0.isRead }.count\n    }\n    \n    init() {\n        loadNews()\n    }\n    \n    // 从项目包中加载并解析JSON文件\n    func loadNews() {\n        guard let url = Bundle.main.url(forResource: \"onews\", withExtension: \"json\") else {\n            fatalError(\"无法在项目包中找到 news_250622.json 文件。\")\n        }\n        \n        guard let data = try? Data(contentsOf: url) else {\n            fatalError(\"无法加载 news_250622.json 文件。\")\n        }\n        \n        let decoder = JSONDecoder()\n        \n        // 将JSON解码为一个字典，键是来源名称，值是文章数组\n        guard let decodedData = try? decoder.decode([String: [Article]].self, from: data) else {\n            fatalError(\"解析 news_250622.json 文件失败。\")\n        }\n        \n        // 将解码后的字典转换为我们在UI中使用的 NewsSource 数组\n        // .sorted 按名称排序，确保每次加载顺序一致\n        self.sources = decodedData.map { (sourceName, articles) in\n            NewsSource(name: sourceName, articles: articles)\n        }.sorted { $0.name < $1.name }\n    }\n    \n    // 根据文章ID将特定文章标记为已读\n    func markAsRead(articleID: UUID) {\n        // 在主线程上更新，因为这会触发UI变化\n        DispatchQueue.main.async {\n            // 遍历所有来源\n            for i in 0..<self.sources.count {\n                // 查找包含该文章的来源\n                if let j = self.sources[i].articles.firstIndex(where: { $0.id == articleID }) {\n                    // 如果文章当前是未读状态，则将其标记为已读\n                    if !self.sources[i].articles[j].isRead {\n                        self.sources[i].articles[j].isRead = true\n                    }\n                    // 找到后即可退出循环\n                    return\n                }\n            }\n        }\n    }\n}\n\n// 用于UI展示的新闻来源结构体\n// Identifiable 协议让它可以在 SwiftUI 的 List 中直接使用\nstruct NewsSource: Identifiable {\n    let id = UUID() // 唯一标识符\n    let name: String\n    var articles: [Article]\n}\n\n// 文章的结构体\n// Identifiable 和 Codable 协议\nstruct Article: Identifiable, Codable {\n    var id = UUID() // 为每个文章实例生成唯一ID\n    let topic: String\n    let article: String\n    let images: [String]\n    \n    // `isRead` 状态不在JSON中，所以我们自定义解码过程\n    var isRead: Bool = false\n\n    // 定义JSON中的键，这样解码器就知道要解析哪些字段\n    enum CodingKeys: String, CodingKey {\n        case topic, article, images\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/SourceListView.swift",
                "filename": "SourceListView.swift",
                "content": "import SwiftUI\n\nstruct SourceListView: View {\n    // @StateObject 确保 ViewModel 的生命周期与视图绑定，只创建一次\n    @StateObject private var viewModel = NewsViewModel()\n    @Binding var isAuthenticated: Bool\n\n    var body: some View {\n        // NavigationView 是实现导航功能的基础，包括标题、返回按钮和侧滑返回\n        NavigationView {\n            // 使用 ZStack 将背景色和列表内容叠放\n            ZStack {\n                // 设置深色背景，适配设计图\n                Color(UIColor.systemGray6).edgesIgnoringSafeArea(.all)\n                \n                VStack {\n                    // 未读总数显示区域\n                    HStack {\n                        Text(\"Unread\")\n                            .font(.system(size: 28, weight: .bold))\n                        Text(\"\\(viewModel.totalUnreadCount)\")\n                            .font(.system(size: 28, weight: .bold))\n                            .foregroundColor(.gray)\n                    }\n                    .padding()\n                    .background(Color(UIColor.secondarySystemBackground))\n                    .cornerRadius(12)\n                    .padding(.horizontal)\n                    \n                    // 新闻来源列表\n                    List {\n                        ForEach(viewModel.sources) { source in\n                            // NavigationLink 会在点击时自动导航到 destination 指定的视图\n                            NavigationLink(destination: ArticleListView(source: source, viewModel: viewModel)) {\n                                HStack {\n                                    Text(source.name)\n                                        .fontWeight(.semibold)\n                                    Spacer()\n                                    Text(\"\\(source.articles.count)\")\n                                        .foregroundColor(.gray)\n                                }\n                                .padding(.vertical, 8)\n                            }\n                            // 更改点 5: 隐藏所有来源列表项的分隔线\n                            .listRowSeparator(.hidden)\n                        }\n                        .listRowBackground(Color(UIColor.secondarySystemBackground))\n                    }\n                    .listStyle(InsetGroupedListStyle()) // 使用分组样式\n                }\n            }\n            .navigationTitle(\"Inoreader\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                // 添加左上角的返回/登出按钮\n                ToolbarItem(placement: .navigationBarLeading) {\n                    Button(action: {\n                        isAuthenticated = false\n                    }) {\n                        Image(systemName: \"chevron.backward\")\n                        Text(\"登出\")\n                    }\n                }\n            }\n        }\n        .accentColor(.red) // 设置导航链接箭头等元素的颜色\n        .preferredColorScheme(.dark) // 强制使用深色模式以匹配设计\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ArticleListView.swift",
                "filename": "ArticleListView.swift",
                "content": "import SwiftUI\n\nstruct ArticleListView: View {\n    let source: NewsSource\n    // @ObservedObject 订阅从父视图传递过来的 ViewModel 的变化\n    @ObservedObject var viewModel: NewsViewModel\n\n    var body: some View {\n        List {\n            // 日期显示\n            Text(formattedDate())\n                .font(.caption)\n                .foregroundColor(.gray)\n                .padding(.top)\n                // CHANGE: 隐藏这个特定行的分隔符\n                .listRowSeparator(.hidden)\n\n            // 遍历该来源下的所有文章\n            ForEach(source.articles) { article in\n                NavigationLink(destination: ArticleDetailView(article: article, sourceName: source.name, viewModel: viewModel)) {\n                    VStack(alignment: .leading, spacing: 8) {\n                        Text(source.name)\n                            .font(.caption)\n                            .foregroundColor(.gray)\n                        Text(article.topic)\n                            .fontWeight(.semibold)\n                            // 根据 isRead 状态决定文字颜色\n                            .foregroundColor(article.isRead ? .gray : .primary)\n                    }\n                    .padding(.vertical, 8)\n                }\n                // CHANGE: 隐藏所有新闻条目的分隔符\n                .listRowSeparator(.hidden)\n            }\n        }\n        .listStyle(PlainListStyle()) // 使用朴素列表样式\n        .navigationTitle(\"Unread\")\n        .navigationBarTitleDisplayMode(.inline)\n    }\n    \n    // 格式化日期的辅助函数\n    private func formattedDate() -> String {\n        let formatter = DateFormatter()\n        formatter.locale = Locale(identifier: \"zh_CN\") // 可根据需要调整地区\n        \n        if Calendar.current.isDateInToday(Date()) {\n            formatter.dateFormat = \"EEEE, MMMM d, yyyy\"\n            return \"TODAY, \\(formatter.string(from: Date()).uppercased())\"\n        } else if Calendar.current.isDateInYesterday(Date()) {\n            return \"YESTERDAY\"\n        } else {\n            formatter.dateFormat = \"EEEE, MMMM d, yyyy\"\n            return formatter.string(from: Date()).uppercased()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/ONews/ONews/ArticleDetailView.swift",
                "filename": "ArticleDetailView.swift",
                "content": "import SwiftUI\n\nstruct ArticleDetailView: View {\n    let article: Article\n    let sourceName: String\n    @ObservedObject var viewModel: NewsViewModel\n\n    var body: some View {\n        ScrollView {\n            VStack(alignment: .leading, spacing: 24) {\n                // 顶部日期和时间\n                Text(formattedTimestamp())\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                \n                // 主题\n                Text(article.topic)\n                // CHANGE: 字体稍微变大，更具冲击力\n                    .font(.system(.title, design: .serif)) // 使用系统衬线字体\n                    .fontWeight(.bold)\n                \n                // 来源\n                Text(sourceName.replacingOccurrences(of: \"_\", with: \" \")) // 将下划线替换为空格\n                    .font(.subheadline)\n                    .foregroundColor(.gray)\n                \n                // 文章正文\n                Text(article.article)\n                // CHANGE: 显著增大正文字体，并使用New York衬线字体，提升阅读舒适度\n                    .font(.custom(\"NewYork-Regular\", size: 20))\n                    // CHANGE: 增加行间距\n                    .lineSpacing(15)\n            }\n            .padding(.horizontal, 20) // 增加左右内边距\n            .padding(.vertical)\n        }\n        .navigationTitle(sourceName)\n        .navigationBarTitleDisplayMode(.inline)\n        .onAppear {\n            // 当视图出现时，立即调用 ViewModel 将文章标记为已读\n            viewModel.markAsRead(articleID: article.id)\n        }\n    }\n    \n    // 格式化时间戳的辅助函数\n    private func formattedTimestamp() -> String {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"EEEE, MMMM d, yyyy 'AT' HH:mm\"\n        formatter.locale = Locale(identifier: \"en_US_POSIX\") // 使用POSIX确保格式一致\n        return formatter.string(from: Date()).uppercased()\n    }\n}\n"
            }
        ],
        "final_prompt": "，现在sourcelistview是一个较柔和深色背景叠加在一个黑色背景上的结构，我不需要叠加，整个窗口都用这种较柔和深色背景即可，然后把Unread变成可点击，点击后进入的是一个混合所有来源的所有文章列表页（其他分组内文章都是某个来源的单独分组文章列表页）。该怎么改代码实现？"
    }
]