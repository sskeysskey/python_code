[
    {
        "id": "2025-05-27 11:54:10",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode编写的app程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"Face ID\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Account Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SETTING\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account & Setting\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account & Setting\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "现在的问题是：当我链接手机，构建build版本安装应用都一切正常，应用启动后直接点击登录按钮时，程序会崩溃，报错内容“Thread 1: breakpoint 1.1 (1)”，崩溃指向portfolioview.swift里的这句代码“PortfolioView(username: session.username, vm: vm) ”，这是保持手机链接mac，并再一次完整构建过程中会发生的。但如果我点击stop running scheme or application按钮，断开连接，从手机上直接运行该应用，却一切正常，无论账号密码登录还是faceid登录都不会报错崩溃。这是为什么？该怎么改？"
    },
    {
        "id": "2025-05-27 12:09:31",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode开发的iphone app",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"Face ID\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Account Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SETTING\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account & Setting\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account & Setting\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "我之前删除了一个在这句“PortfolioView(username: session.username, vm: vm) ”上的断点，结果我的Face ID登录功能按钮没有，功能也没了，你帮我看看是怎么回事儿？"
    },
    {
        "id": "2025-05-27 13:15:31",
        "project_name": "Firstrade",
        "project_desc": "我有一个xcode编写的app程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            Text(\"Watchlist\")\n                .tabItem {\n                    Image(systemName: \"star\")\n                    Text(\"Watchlist\")\n                }\n\n            Text(\"Markets\")\n                .tabItem {\n                    Image(systemName: \"globe\")\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/AssetsView.swift",
                "filename": "AssetsView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\n// グラフのデータポイント用構造体\nstruct DealDataPoint: Identifiable, Equatable {\n    let id = UUID()\n    let date: Date\n    let value: Double\n}\n\n// 期間選択オプション\nenum TimeRangeOption: String, CaseIterable, Identifiable {\n    case all = \"All\"\n    // case last3Months = \"近三个月\"\n    // case last6Months = \"近半年\"\n    // case yearToDate = \"年初至今\"\n    case last1Year = \" 1 Year\"  // 変更\n    case last2Years = \"2 Years\"  // 変更\n    case custom = \"Filter\"  // \"筛选\" はボタンのラベルとして使用\n\n    var id: String { self.rawValue }\n}\n\nclass AssetsViewModel: ObservableObject {\n    // MARK: - Published Properties\n    @Published var selectedTimeRange: TimeRangeOption = .last1Year  // デフォルトを変更 (例: 近一年)\n    @Published var customStartDate: Date =\n        Calendar.current.date(byAdding: .month, value: -1, to: Date()) ?? Date()\n    @Published var customEndDate: Date = Date()\n    @Published var isFilterActive: Bool = false\n\n    // 追加: 表示用の整形済みカスタム日付文字列\n    @Published var displayCustomStartDateString: String? = nil\n    @Published var displayCustomEndDateString: String? = nil\n\n    @Published var chartData: [DealDataPoint] = []\n    @Published var cumulativeReturn: Double = 0.0\n    @Published var returnRate: Double = 0.0  // 収益率\n\n    @Published var isLoading: Bool = false\n    @Published var errorMessage: String? = nil\n\n    // データベース関連\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // private から internal に変更 (Viewでフォーマットする場合に備えて。今回はViewModelで整形)\n    internal let dbDateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd\"\n        return formatter\n    }()\n\n    // 色定義\n    let selectedButtonColor = Color.gray\n    let deselectedButtonTextColor = Color.white\n    let defaultButtonBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n\n    private let SQLITE_TRANSIENT_VALUE = unsafeBitCast(-1, to: sqlite3_destructor_type.self)\n\n    // MARK: - Initialization\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            self.dbPath = \"\"\n            self.errorMessage = \"关键错误：Firstrade.db 未在应用包中找到。\"\n            // 本番アプリでは、より丁寧なエラー処理を検討してください。\n            // fatalError(\"Firstrade.db not found in bundle.\")\n            return\n        }\n        self.dbPath = path\n        print(\"assets_db_path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // openDatabase内でerrorMessageが設定されます\n            return\n        }\n        fetchDataForSelectedRange()  // 初期データロード\n    }\n\n    deinit {\n        closeDatabase()\n    }\n\n    // MARK: - Database Handling\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"资产页面数据库成功打开。\")\n            errorMessage = nil\n            return true\n        } else {\n            let errorMsg = \"打开数据库时出错 \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            errorMessage = errorMsg\n            if db != nil {  // エラーがあってもdbポインタがnilでない場合があるため閉じる\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    private func closeDatabase() {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"资产页面数据库已关闭。\")\n        }\n    }\n\n    // MARK: - Data Fetching and Processing\n    func selectTimeRange(_ range: TimeRangeOption) {\n        selectedTimeRange = range\n        if range != .custom {\n            isFilterActive = false\n            displayCustomStartDateString = nil  // カスタム日付表示をクリア\n            displayCustomEndDateString = nil  // カスタム日付表示をクリア\n        }\n        // isFilterActive は、カスタムフィルターが適用されたときに applyCustomDateRange で true に設定されます。\n        // 他のボタンが押されたときは、ここで false に設定します。\n        fetchDataForSelectedRange()\n    }\n\n    func applyCustomDateRange(start: Date, end: Date) {\n        customStartDate = start\n        customEndDate = end\n        selectedTimeRange = .custom\n        isFilterActive = true\n        // 整形済み日付文字列を更新\n        displayCustomStartDateString = dbDateFormatter.string(from: start)\n        displayCustomEndDateString = dbDateFormatter.string(from: end)\n        fetchDataForSelectedRange()\n    }\n\n    func fetchDataForSelectedRange() {\n        guard db != nil || openDatabase() else {\n            isLoading = false\n            return\n        }\n\n        isLoading = true\n        errorMessage = nil\n\n        let (effectiveStartDate, effectiveEndDate) = getDatesForCurrentSelection()\n        let startDateString = dbDateFormatter.string(from: effectiveStartDate)\n        let endDateString = dbDateFormatter.string(from: effectiveEndDate)\n\n        print(\"正在为资产页面获取数据，范围: \\(startDateString) 至 \\(endDateString)\")\n\n        var fetchedDeals: [DealDataPoint] = []\n        let dealsQuery =\n            \"SELECT date, value FROM Deals WHERE date >= ? AND date <= ? ORDER BY date ASC;\"\n        var stmtDeals: OpaquePointer?\n\n        if sqlite3_prepare_v2(db, dealsQuery, -1, &stmtDeals, nil) == SQLITE_OK {\n            // 修正箇所 1\n            sqlite3_bind_text(stmtDeals, 1, startDateString, -1, SQLITE_TRANSIENT_VALUE)\n            // 修正箇所 2\n            sqlite3_bind_text(stmtDeals, 2, endDateString, -1, SQLITE_TRANSIENT_VALUE)\n\n            while sqlite3_step(stmtDeals) == SQLITE_ROW {\n                guard let dateStrChars = sqlite3_column_text(stmtDeals, 0) else { continue }\n                let dateStr = String(cString: dateStrChars)\n                let value = sqlite3_column_double(stmtDeals, 1)\n                if let date = dbDateFormatter.date(from: dateStr) {\n                    fetchedDeals.append(DealDataPoint(date: date, value: value))\n                }\n            }\n            sqlite3_finalize(stmtDeals)\n        } else {\n            let queryError = \"准备Deals查询失败: \\(String(cString: sqlite3_errmsg(db)))\"\n            print(queryError)\n            DispatchQueue.main.async {\n                self.errorMessage = queryError\n                self.isLoading = false\n                self.chartData = []\n                self.cumulativeReturn = 0.0\n                self.returnRate = 0.0\n            }\n            return\n        }\n\n        var calculatedCumulativeReturn: Double = 0.0\n        var calculatedReturnRate: Double = 0.0\n\n        if let firstDealValue = fetchedDeals.first?.value,\n            let lastDealValue = fetchedDeals.last?.value\n        {\n            calculatedCumulativeReturn = lastDealValue - firstDealValue\n\n            var startBalanceValue: Double?\n            let dealsStartDateString = dbDateFormatter.string(from: effectiveStartDate)  // Dealsの実際の開始日\n\n            // 1. Dealsの開始日に対応するBalanceデータを検索\n            let balanceQueryForDealsStart =\n                \"SELECT value FROM Balance WHERE date <= ? ORDER BY date DESC LIMIT 1;\"\n            var stmtBalance: OpaquePointer?\n            if sqlite3_prepare_v2(db, balanceQueryForDealsStart, -1, &stmtBalance, nil) == SQLITE_OK\n            {\n                sqlite3_bind_text(stmtBalance, 1, dealsStartDateString, -1, SQLITE_TRANSIENT_VALUE)\n                if sqlite3_step(stmtBalance) == SQLITE_ROW {\n                    startBalanceValue = sqlite3_column_double(stmtBalance, 0)\n                }\n                sqlite3_finalize(stmtBalance)\n            } else {\n                let balanceQueryError =\n                    \"准备Balance查询(Deals开始日)失败: \\(String(cString: sqlite3_errmsg(db)))\"\n                print(balanceQueryError)\n                DispatchQueue.main.async {\n                    self.errorMessage = (self.errorMessage ?? \"\") + \"\\n\" + balanceQueryError\n                }\n            }\n\n            // 2. 「全部」選択時で、上記で見つからなかった場合、Balanceテーブルの最古のデータを検索\n            if selectedTimeRange == .all && startBalanceValue == nil {\n                print(\"「全部」选择：未在Deals开始日期 \\(dealsStartDateString) 找到Balance，尝试Balance表中的最早日期。\")\n                let oldestBalanceQuery = \"SELECT value FROM Balance ORDER BY date ASC LIMIT 1;\"\n                var stmtOldestBalance: OpaquePointer?\n                if sqlite3_prepare_v2(db, oldestBalanceQuery, -1, &stmtOldestBalance, nil)\n                    == SQLITE_OK\n                {\n                    if sqlite3_step(stmtOldestBalance) == SQLITE_ROW {\n                        startBalanceValue = sqlite3_column_double(stmtOldestBalance, 0)\n                        if startBalanceValue != nil {\n                            print(\"已找到Balance表中的最早余额: \\(startBalanceValue!)\")\n                        } else {\n                            print(\"Balance表中没有找到任何数据。\")\n                        }\n                    }\n                    sqlite3_finalize(stmtOldestBalance)\n                } else {\n                    let oldestBalanceQueryError =\n                        \"准备Balance最古数据查询失败: \\(String(cString: sqlite3_errmsg(db)))\"\n                    print(oldestBalanceQueryError)\n                    DispatchQueue.main.async {\n                        self.errorMessage =\n                            (self.errorMessage ?? \"\") + \"\\n\" + oldestBalanceQueryError\n                    }\n                }\n            }\n\n            // 3. 収益率を計算\n            if let startBalance = startBalanceValue {\n                if startBalance != 0 {\n                    calculatedReturnRate = (calculatedCumulativeReturn / startBalance)\n                } else {\n                    calculatedReturnRate = 0  // または未定義として扱う\n                    print(\"警告: 用于计算收益率的期初余额为零。\")\n                    DispatchQueue.main.async {\n                        self.errorMessage = (self.errorMessage ?? \"\") + \"\\n警告: 用于计算收益率的期初余额为零。\"\n                    }\n                }\n            } else {\n                print(\"警告: 未能找到日期 \\(startDateString) 的期初余额以计算收益率。\")\n                DispatchQueue.main.async {\n                    self.errorMessage = (self.errorMessage ?? \"\") + \"\\n警告: 未能找到期初余额以计算收益率。\"\n                }\n            }\n        } else if !fetchedDeals.isEmpty {\n            calculatedCumulativeReturn = 0.0\n            calculatedReturnRate = 0.0\n        }\n\n        DispatchQueue.main.async {\n            self.chartData = fetchedDeals\n            self.cumulativeReturn = calculatedCumulativeReturn\n            self.returnRate = calculatedReturnRate\n            self.isLoading = false\n            if fetchedDeals.isEmpty && self.errorMessage == nil {\n                self.errorMessage = \"在选定时间段内未找到任何交易数据。\"\n            }\n        }\n    }\n\n    private func getDatesForCurrentSelection() -> (start: Date, end: Date) {\n        let calendar = Calendar.current\n        let today = Date()\n\n        switch selectedTimeRange {\n        case .all:\n            // \"全部\" の場合、Dealsテーブルの最初の日付を取得\n            var earliestDate: Date?\n            let queryMinDate = \"SELECT MIN(date) FROM Deals;\"\n            var stmtMinDate: OpaquePointer?\n            if sqlite3_prepare_v2(db, queryMinDate, -1, &stmtMinDate, nil) == SQLITE_OK {\n                if sqlite3_step(stmtMinDate) == SQLITE_ROW {\n                    if let dateStrChars = sqlite3_column_text(stmtMinDate, 0) {\n                        let dateStr = String(cString: dateStrChars)\n                        earliestDate = dbDateFormatter.date(from: dateStr)\n                    }\n                }\n                sqlite3_finalize(stmtMinDate)\n            }\n            return (earliestDate ?? calendar.date(byAdding: .year, value: -5, to: today)!, today)  // フォールバックを5年前に変更\n        case .last1Year:  // 変更\n            return (calendar.date(byAdding: .year, value: -1, to: today)!, today)\n        case .last2Years:  // 変更\n            return (calendar.date(byAdding: .year, value: -2, to: today)!, today)\n        // case .yearToDate: // 削除\n        // let year = calendar.component(.year, from: today)\n        // let startOfYear = calendar.date(from: DateComponents(year: year, month: 1, day: 1))!\n        // return (startOfYear, today)\n        case .custom:\n            return (customStartDate, customEndDate)\n        }\n    }\n}\n\nstruct AssetsView: View {\n    @StateObject private var viewModel = AssetsViewModel()\n    @State private var showingDateFilter = false\n\n    // 颜色定义\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let textColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let chartLineColor = Color.gray  // 曲线颜色\n    private let positiveReturnColor = Color.green\n    private let negativeReturnColor = Color.red\n    private let accentDateColor = Color.blue  // 日付の強調色としてオレンジを定義\n\n    // タブの定義 (新股盈亏は削除)\n    // private enum AssetSubTab: String, CaseIterable, Identifiable {\n    //     case assetAnalysis = \"资产分析\"\n    //     case profitLossAnalysis = \"盈亏分析\"\n    //     var id: String { self.rawValue }\n    // }\n    // @State private var selectedSubTab: AssetSubTab = .assetAnalysis\n\n    // 日付フォーマッタ (グラフのX軸用)\n    private let chartDateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy/MM/dd\"\n        return formatter\n    }()\n\n    // MARK: - Colors for Transaction History (as per new request)\n    private let timelineActualColor = Color.gray.opacity(0.4)\n    private var dotBuyActualColor: Color { positiveReturnColor } // Reuse existing\n    private var dotSellActualColor: Color { negativeReturnColor } // Reuse existing\n    private let dotOtherActualColor = Color(white: 0.6)\n    private var accentColorForTabUnderline: Color { accentDateColor }\n\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea()\n\n                ScrollView { // Added ScrollView to accommodate new section\n                    VStack(spacing: 0) {\n                        // 上部タブ (资产分析 / 盈亏分析)\n                        // Picker(\"分析类型\", selection: $selectedSubTab) {\n                        //     ForEach(AssetSubTab.allCases) { tab in\n                        //         Text(tab.rawValue).tag(tab)\n                        //     }\n                        // }\n                        // .pickerStyle(SegmentedPickerStyle())\n                        // .padding(.horizontal)\n                        // .padding(.top, 10)\n                        // .background(pageBackgroundColor) // SegmentedPickerの背景が透明にならないように\n                        // .onChange(of: selectedSubTab) { _ in\n                        //     // 必要に応じてタブ変更時の処理を記述\n                        //     // 現在はどちらのタブも同じデータを表示するため、特別な処理は不要\n                        //     print(\"Selected sub-tab: \\(selectedSubTab.rawValue)\")\n                        // }\n\n                        // 走势分析セクション\n                        trendAnalysisControlsSection\n                            .padding(.top, 15)\n\n                        // --- ここから追加 ---\n                        // フィルターがアクティブで、日付文字列が利用可能な場合に表示\n                        if viewModel.isFilterActive,\n                            let startDateStr = viewModel.displayCustomStartDateString,\n                            let endDateStr = viewModel.displayCustomEndDateString\n                        {\n                            HStack(spacing: 5) {\n                                Text(\"   \")\n                                    .font(.subheadline)  // フォントサイズを調整\n                                    .foregroundColor(self.secondaryTextColor)\n                                    .padding(.leading, 16)  // 左端のパディング\n                                Text(startDateStr)\n                                    .font(.headline.bold())  // サイズを大きく、太字に\n                                    .foregroundColor(self.accentDateColor)  // 目立つ色 (オレンジ)\n\n                                Text(\"    ～～   \")\n                                    .font(.subheadline)\n                                    .foregroundColor(self.secondaryTextColor)\n                                    .padding(.horizontal, 2)  // \"到\" の左右に少しスペース\n\n                                Text(endDateStr)\n                                    .font(.headline.bold())\n                                    .foregroundColor(self.accentDateColor)\n\n                                Spacer()  // 右側の余白を埋めて全体を左寄せにする\n                            }\n                            .frame(maxWidth: .infinity)  // HStackを画面幅いっぱいに広げる\n                            .padding(.vertical, 12)  // 上下のパディング\n                            // 背景色をページ背景より少し明るく、または区別できる色に\n                            .background(viewModel.defaultButtonBackgroundColor.opacity(0.85))\n                            // .background(Color(red: 35/255, green: 40/255, blue: 50/255)) // 例: 少し明るい背景\n                            .padding(.top, 15)  // 上の trendAnalysisControlsSection との間隔\n                        }\n                        // --- ここまで追加 ---\n\n                        returnSummarySection\n                            // 上に要素が追加された場合も考慮し、一貫したスペースを保つ\n                            .padding(.top, 15)  // 上の要素 (trendAnalysisControlsSection または追加された日付行) との間隔\n\n                        // 折れ線グラフエリア\n                        chartArea\n                            .padding(.top, 10)\n                            .padding(.bottom, 5)  // X軸ラベルとの間隔\n\n                        // グラフのX軸ラベル (開始日と終了日)\n                        xAxisLabels\n                            .padding(.horizontal, 25)  // グラフの左右マージンに合わせる\n                            .padding(.bottom, 20) // Add some space before the new section\n\n                        // --- NEW TRANSACTION HISTORY SECTION ---\n                        transactionHistorySection\n                            .padding(.top, 10) // Spacing from elements above\n                        // --- END NEW TRANSACTION HISTORY SECTION ---\n\n                        // Spacer() // Removed Spacer from here, ScrollView handles empty space\n                    }\n                }\n            }\n            .navigationTitle(\"Analysis of Asset\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) {\n                    Text(\"Analysis of Asset  (ZhangYan)\").font(.headline).foregroundColor(textColor)\n                }\n                // 右上のアイコンは指示になかったため省略\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar)\n            .sheet(isPresented: $showingDateFilter) {\n                DateFilterView(\n                    startDate: $viewModel.customStartDate,\n                    endDate: $viewModel.customEndDate,\n                    onApply: { start, end in\n                        viewModel.applyCustomDateRange(start: start, end: end)\n                    }\n                )\n            }\n            .onAppear {\n                // ビューが表示されたときに初期データをロード (ViewModelのinitでも実行されるが、再表示時にも対応)\n                if viewModel.chartData.isEmpty && !viewModel.isLoading {\n                    viewModel.fetchDataForSelectedRange()\n                }\n            }\n        }\n        .navigationViewStyle(StackNavigationViewStyle())\n    }\n\n    // MARK: - Subviews\n    private var trendAnalysisControlsSection: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            HStack {\n//                Text(\" \")\n//                    .font(.headline)\n//                    .foregroundColor(textColor)\n                Spacer()\n            }\n            .padding(.horizontal)\n\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 10) {\n                    ForEach(TimeRangeOption.allCases.filter { $0 != .custom }) { range in\n                        timeRangeButton(for: range)\n                    }\n                    filterButton\n                }\n                .padding(.horizontal)\n            }\n        }\n    }\n\n    private func timeRangeButton(for range: TimeRangeOption) -> some View {\n        Button(action: {\n            viewModel.selectTimeRange(range)\n        }) {\n            Text(range.rawValue)\n                .font(.subheadline)\n                .padding(.horizontal, 12)\n                .padding(.vertical, 8)\n                .background(\n                    viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                        ? viewModel.selectedButtonColor : viewModel.defaultButtonBackgroundColor\n                )\n                .foregroundColor(\n                    viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                        ? .white : viewModel.deselectedButtonTextColor\n                )\n                .cornerRadius(8)\n                .overlay(\n                    RoundedRectangle(cornerRadius: 8)\n                        .stroke(\n                            viewModel.selectedTimeRange == range && !viewModel.isFilterActive\n                                ? viewModel.selectedButtonColor : secondaryTextColor.opacity(0.5),\n                            lineWidth: 0.5)\n                )\n        }\n    }\n\n    // MARK: - 修正箇所\n    private var filterButton: some View {\n        Button(action: {\n            // 筛选ボタンが押されたときに、DateFilterView に渡すデフォルトの日付を設定します。\n            // viewModel の dbDateFormatter を使用して日付文字列を Date オブジェクトに変換します。\n            let defaultStartDateString = \"2022-01-01\"\n            let defaultEndDateString = \"2023-01-01\"\n\n            if let newStartDate = viewModel.dbDateFormatter.date(from: defaultStartDateString),\n                let newEndDate = viewModel.dbDateFormatter.date(from: defaultEndDateString)\n            {\n                // viewModel のカスタム日付プロパティを更新します。\n                // これにより、DateFilterView が表示される際にこれらの日付が初期値として使用されます。\n                viewModel.customStartDate = newStartDate\n                viewModel.customEndDate = newEndDate\n            } else {\n                // 日付の解析に失敗した場合のフォールバック処理です。\n                // エラーメッセージをコンソールに出力し、既存のカスタム日付（またはViewModelの初期デフォルト値）が使用されます。\n                print(\"错误：无法解析筛选的默认自定义日期。将使用ViewModel当前的自定义日期或其初始默认值。\")\n            }\n\n            // DateFilterView を表示します。\n            showingDateFilter = true\n        }) {\n            HStack(spacing: 4) {\n                Text(TimeRangeOption.custom.rawValue)  // \"筛选\"\n                Image(systemName: \"slider.horizontal.3\")\n            }\n            .font(.subheadline)\n            .padding(.horizontal, 12)\n            .padding(.vertical, 8)\n            .background(\n                viewModel.isFilterActive\n                    ? viewModel.selectedButtonColor : viewModel.defaultButtonBackgroundColor\n            )\n            .foregroundColor(\n                viewModel.isFilterActive ? .white : viewModel.deselectedButtonTextColor\n            )\n            .cornerRadius(8)\n            .overlay(\n                RoundedRectangle(cornerRadius: 8)\n                    .stroke(\n                        viewModel.isFilterActive\n                            ? viewModel.selectedButtonColor : secondaryTextColor.opacity(0.5),\n                        lineWidth: 0.5)\n            )\n        }\n    }\n    // MARK: - 修正箇所ここまで\n\n    private var returnSummarySection: some View {\n        VStack(alignment: .leading, spacing: 15) {\n            HStack {\n//                Text(\"  \")\n//                    .font(.headline)\n//                    .foregroundColor(textColor)\n                Spacer()\n            }\n            .padding(.horizontal)\n\n            HStack {\n                VStack(alignment: .leading, spacing: 4) {\n                    Text(\"Accumulated Earnings · USD\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                    Text(\n                        String(\n                            format: \"%@%.2f\", viewModel.cumulativeReturn >= 0 ? \"+\" : \"\",\n                            viewModel.cumulativeReturn)\n                    )\n                    .font(.title2.bold())\n                    .foregroundColor(\n                        viewModel.cumulativeReturn >= 0 ? positiveReturnColor : negativeReturnColor)\n                }\n                Spacer()\n                VStack(alignment: .trailing, spacing: 4) {\n                    HStack(spacing: 4) {  // デザイン画像のテキストとアイコン\n                        Text(\"Yield Rate\")\n                            .font(.caption)\n                            .foregroundColor(secondaryTextColor)\n                        // Image(systemName: \"chevron.down\") // デザイン画像のアイコン、意味が不明瞭なため一旦コメントアウト\n                        //    .font(.caption)\n                        //    .foregroundColor(secondaryTextColor)\n                    }\n                    Text(\n                        String(\n                            format: \"%@%.2f%%\", viewModel.returnRate * 100 >= 0 ? \"+\" : \"\",\n                            viewModel.returnRate * 100)\n                    )\n                    .font(.title3.bold())\n                    // デザイン画像ではオレンジだが、意味合い的には収益率なので緑/赤\n                    .foregroundColor(\n                        viewModel.returnRate >= 0 ? positiveReturnColor : negativeReturnColor)\n                }\n            }\n            .padding(.horizontal)\n        }\n    }\n\n    private var chartArea: some View {\n        Group {\n            if viewModel.isLoading {\n                ProgressView()\n                    .progressViewStyle(CircularProgressViewStyle(tint: textColor))\n                    .frame(height: 220)  // グラフの高さに合わせる\n                    .frame(maxWidth: .infinity)\n            } else if let errorMsg = viewModel.errorMessage, viewModel.chartData.isEmpty {\n                // データがなく、エラーがある場合のみエラーメッセージを大きく表示\n                Text(errorMsg)\n                    .font(.callout)\n                    .foregroundColor(.red)\n                    .padding()\n                    .frame(height: 220)\n                    .frame(maxWidth: .infinity, alignment: .center)\n            } else {\n                // データがある場合、またはデータがありエラーもある場合はグラフを表示\n                LineChartView(\n                    dataPoints: viewModel.chartData,\n                    strokeColor: chartLineColor,\n                    axisColor: secondaryTextColor,\n                    axisLabelColor: secondaryTextColor\n                )\n                .frame(height: 220)  // グラフの高さを指定\n                .padding(.horizontal, 15)  // グラフ描画エリアの左右パディング\n\n                // グラフの下に軽微なエラーメッセージを表示（データはあるが、一部情報が欠けている場合など）\n                if let errorMsg = viewModel.errorMessage, !viewModel.chartData.isEmpty {\n                    Text(errorMsg)\n                        .font(.caption2)\n                        .foregroundColor(.gray)\n                        .padding(.horizontal, 20)\n                        .lineLimit(2)\n                }\n            }\n        }\n    }\n\n    private var xAxisLabels: some View {\n        HStack {\n            if let firstDate = viewModel.chartData.first?.date {\n                Text(chartDateFormatter.string(from: firstDate))\n            } else {\n                Text(\"----/--/--\")  // データがない場合のプレースホルダー\n            }\n            Spacer()\n            if let lastDate = viewModel.chartData.last?.date, viewModel.chartData.count > 1 {  // データが2つ以上ある場合のみ終了日を表示\n                Text(chartDateFormatter.string(from: lastDate))\n            } else if viewModel.chartData.count == 1,\n                let firstDate = viewModel.chartData.first?.date\n            {\n                Text(chartDateFormatter.string(from: firstDate))  // データが1つの場合は開始日と同じ\n            } else {\n                Text(\"----/--/--\")  // データがない場合のプレースホルダー\n            }\n        }\n        .font(.caption)\n        .foregroundColor(secondaryTextColor)\n    }\n\n    // MARK: - New Transaction History Section (as per request)\n    private var transactionHistorySection: some View {\n        VStack(alignment: .leading, spacing: 0) {\n            // Tab-like header\n            HStack(spacing: 0) {\n                // VStack 包含 \"账户记录\" 和 下划线，现在是第一个元素\n                VStack(spacing: 3) {\n                    Text(\"Account Records\")\n                        .font(.system(size: 15, weight: .medium))\n                        .padding(.vertical, 10)\n                        .padding(.horizontal, 20)\n                        .foregroundColor(textColor) // \"账户记录\" 保持 textColor，因为它现在是选中的/主要的\n                    Rectangle()\n                        .frame(width: 80, height: 2.5) // 修改这里：增加了 width 使其变短，40 是一个示例值，您可以根据需要调整\n                        .foregroundColor(accentColorForTabUnderline)\n                }\n\n                // \"订单现况\" 现在是第二个元素\n                Text(\"Order Status\")\n                    .font(.system(size: 15, weight: .medium))\n                    .padding(.vertical, 10)\n                    .padding(.horizontal, 20)\n                    .foregroundColor(secondaryTextColor) // \"订单现况\" 保持 secondaryTextColor\n\n                Spacer()\n            }\n            .padding(.leading) // Align with content below\n            .padding(.bottom, 8)\n\n            // List of transactions\n            VStack(alignment: .leading, spacing: 0) {\n                transactionRowView(month: \"Mar\", day: \"25\", year: \"2025\", transactionType: \"Sell CHAU\", transactionDetails: \"38.68 Shares @ $16.88\", dotColor: dotSellActualColor)\n                transactionRowView(month: \"Mar\", day: \"19\", year: \"2025\", transactionType: \"Buy CHAU\", transactionDetails: \"38.68 Shares @ $25.36\", dotColor: dotBuyActualColor)\n                transactionRowView(month: \"Dec\", day: \"01\", year: \"2024\", transactionType: \"Sell IBIT\", transactionDetails: \"14 Shares @ $35.64\", dotColor: dotSellActualColor)\n                transactionRowView(month: \"Jun\", day: \"05\", year: \"2024\", transactionType: \"Withdraw\", transactionDetails: \"$5,000.00\", dotColor: dotOtherActualColor)\n                transactionRowView(month: \"Jun\", day: \"01\", year: \"2024\", transactionType: \"Buy IBIT\", transactionDetails: \"14 Shares @ $36.04\", dotColor: dotBuyActualColor)\n                // 利息 (Interest) entry for 9月 16 is intentionally omitted as per request\n                transactionRowView(month: \"May\", day: \"27\", year: \"2024\", transactionType: \"Sell TLT\", transactionDetails: \"23.84 Shares @ $25.36\", dotColor: dotBuyActualColor)\n                transactionRowView(month: \"May\", day: \"19\", year: \"2024\", transactionType: \"Buy TLT\", transactionDetails: \"23.84 Shares @ $29.36\", dotColor: dotBuyActualColor)\n            }\n            .padding(.leading, 20) // Indent the transaction list slightly for the timeline\n            .padding(.trailing, 15) // Overall right padding\n        }\n    }\n\n    private func transactionRowView(\n        month: String, day: String, year: String,\n        transactionType: String, transactionDetails: String,\n        dotColor: Color\n    ) -> some View {\n        HStack(alignment: .center, spacing: 10) { // Adjusted spacing\n            // Date Column\n            VStack(alignment: .center, spacing: 2) {\n                Text(month)\n                    .font(.caption)\n                    .foregroundColor(secondaryTextColor)\n                Text(day)\n                    .font(.system(size: 17, weight: .medium))\n                    .foregroundColor(textColor)\n                Text(year)\n                    .font(.caption)\n                    .foregroundColor(secondaryTextColor)\n            }\n            .frame(width: 40) // Date column width\n\n            // Timeline Column\n            ZStack {\n                // The continuous vertical line for this row's segment\n                Rectangle()\n                    .fill(timelineActualColor) // Use the defined timeline color\n                    .frame(width: 1.5)\n\n                // Circle to \"punch out\" the line behind the dot\n                Circle()\n                    .fill(pageBackgroundColor) // Use the main page background color\n                    .frame(width: 12, height: 12) // Size of the punch-out\n\n                // The actual colored dot\n                Circle()\n                    .fill(dotColor)\n                    .frame(width: 8, height: 8) // Size of the transaction dot\n            }\n            .frame(width: 12) // Width of the timeline ZStack\n\n            // Details Column\n            VStack(alignment: .leading, spacing: 3) {\n                Text(transactionType)\n                    .font(.system(size: 15, weight: .medium))\n                    .foregroundColor(textColor)\n                Text(transactionDetails)\n                    .font(.system(size: 12))\n                    .foregroundColor(secondaryTextColor)\n                    .fixedSize(horizontal: false, vertical: true) // Allow text to wrap\n            }\n            .padding(.leading, 4) // Small space after timeline\n\n            Spacer() // Pushes content to the left\n        }\n        .padding(.vertical, 12) // Vertical padding for the row, defines its height and spacing\n    }\n\n}\n\nstruct DateFilterView: View {\n    @Binding var startDate: Date\n    @Binding var endDate: Date\n    var onApply: (Date, Date) -> Void\n    @Environment(\\.presentationMode) var presentationMode\n\n    // 色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let textColor = Color.white\n    private let accentButtonColor = Color(hex: \"3B82F6\")  // Firstradeの標準的なアクセントカラー\n\n    @State private var tempStartDate: Date\n    @State private var tempEndDate: Date\n    @State private var dateError: String? = nil\n\n    init(startDate: Binding<Date>, endDate: Binding<Date>, onApply: @escaping (Date, Date) -> Void)\n    {\n        _startDate = startDate\n        _endDate = endDate\n        self.onApply = onApply\n        // tempStartDate と tempEndDate は、親ビューから渡されたバインディングの現在の値で初期化されます。\n        // AssetsView の filterButton アクションで viewModel.customStartDate と viewModel.customEndDate が\n        // 更新されていれば、ここでその新しい値が tempStartDate と tempEndDate の初期値となります。\n        _tempStartDate = State(initialValue: startDate.wrappedValue)\n        _tempEndDate = State(initialValue: endDate.wrappedValue)\n    }\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea()\n                VStack(spacing: 20) {\n                    Text(\"Date Range\")\n                        .font(.title2.bold())\n                        .foregroundColor(textColor)\n                        .padding(.top, 30)\n\n                    DatePicker(\"START\", selection: $tempStartDate, displayedComponents: .date)\n                        .foregroundColor(textColor)\n                        .colorScheme(.dark)  // DatePickerのUIをダークテーマに\n                        .accentColor(accentButtonColor)  // カレンダー内の選択色\n                        .padding(.horizontal)\n\n                    DatePicker(\n                        \"END\", selection: $tempEndDate, in: tempStartDate...,\n                        displayedComponents: .date\n                    )\n                    .foregroundColor(textColor)\n                    .colorScheme(.dark)\n                    .accentColor(accentButtonColor)\n                    .padding(.horizontal)\n\n                    if let error = dateError {\n                        Text(error)\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .padding(.horizontal)\n                    }\n\n                    Button(action: {\n                        if tempEndDate < tempStartDate {\n                            dateError = \"截止日期不能早于起始日期。\"\n                            return\n                        }\n                        dateError = nil\n                        onApply(tempStartDate, tempEndDate)\n                        presentationMode.wrappedValue.dismiss()\n                    }) {\n                        Text(\"OK\")\n                            .font(.headline)\n                            .foregroundColor(.white)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal)\n                    .padding(.top, 20)\n\n                    Spacer()\n                }\n            }\n            .navigationTitle(\"筛选日期\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) {\n                    Text(\"Filter Date\").foregroundColor(textColor)\n                }\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(\"Cancel\") {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                    .foregroundColor(accentButtonColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar)  // ナビゲーションバーのアイテムを明るく\n        }\n        .navigationViewStyle(StackNavigationViewStyle())  // モーダル表示に適したスタイル\n    }\n}\n\nstruct LineChartView: View {\n    let dataPoints: [DealDataPoint]\n    let strokeColor: Color\n    let axisColor: Color\n    let axisLabelColor: Color\n\n    private var maxY: Double { (dataPoints.map { $0.value }.max() ?? 0) }\n    private var minY: Double { (dataPoints.map { $0.value }.min() ?? 0) }\n    private var ySpread: Double {\n        let spread = maxY - minY\n        return spread == 0 ? 1 : spread  // 0除算を避ける\n    }\n\n    var body: some View {\n        GeometryReader { geometry in\n            if dataPoints.isEmpty {\n                Text(\"No Data for Chart\")\n                    .foregroundColor(axisLabelColor)\n                    .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .center)\n            } else {\n                Path { path in\n                    // グラフの描画領域を少し内側にオフセットする（ラベルのため）\n                    let drawingWidth = geometry.size.width * 0.9  // 左右に5%ずつのマージン\n                    let drawingHeight = geometry.size.height * 0.9  // 上下に5%ずつのマージン\n                    let xOffset = geometry.size.width * 0.05\n                    let yOffset = geometry.size.height * 0.05\n\n                    for i in dataPoints.indices {\n                        let dataPoint = dataPoints[i]\n\n                        // X座標の計算 (データポイントの数に基づいて均等に配置)\n                        let xPosition: CGFloat\n                        if dataPoints.count == 1 {\n                            xPosition = drawingWidth / 2  // データが1つなら中央に\n                        } else {\n                            xPosition = CGFloat(i) * (drawingWidth / CGFloat(dataPoints.count - 1))\n                        }\n\n                        // Y座標の計算 (Y軸は反転し、スプレッドに基づいてスケーリング)\n                        let yPosition =\n                            drawingHeight * (1 - CGFloat((dataPoint.value - minY) / ySpread))\n\n                        let actualX = xPosition + xOffset\n                        let actualY = yPosition + yOffset\n\n                        if i == 0 {\n                            path.move(to: CGPoint(x: actualX, y: actualY))\n                        } else {\n                            path.addLine(to: CGPoint(x: actualX, y: actualY))\n                        }\n                        // データポイントに円を描画 (オプション)\n                        // path.addEllipse(in: CGRect(x: actualX - 2, y: actualY - 2, width: 4, height: 4))\n                    }\n                }\n                .stroke(strokeColor, lineWidth: 2)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            }
        ],
        "final_prompt": "我想新增目前缺失的markets页面，附件是设计图，请告还原度实现"
    },
    {
        "id": "2025-05-27 15:00:22",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            WatchlistView() // Use the newly created WatchlistView\n                .tabItem {\n                    Image(systemName: \"star\") // SwiftUI will use \"star.fill\" when selected\n                    Text(\"Watchlist\")\n                }\n\n            MarketsView()\n                .tabItem {\n                    Image(systemName: \"safari.fill\") // Using safari.fill as a compass-like icon\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    private var requestTransferButton: some View {\n        Button(action: {\n            print(\"Request transfer tapped (not implemented)\")\n        }) {\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))  // Adjusted font\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)  // Explicit height\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库文件中有一个名为Balance的表，结构和内容如下“id  date        value  \n--  ----------  -------\n2   2025-05-21  28000.0\n1   2025-05-22  30000.0\n”"
            }
        ],
        "final_prompt": "目前我点击depositview界面上的\"request transfer\"按钮是没有反应的，我想要在点击后增加一个新页面，附件是设计图，设计图上有一个\"deposit to ...\"和\"withdraw from...\"的单选框，默认是选中withdraw...，下方的cashamout数值是从firstrade.db的balance表中读取出来的，是最新一天的value值，下面的amout位置可以输入，最小输入为1，当输入数值大于等于1时，得下的preview按钮才会亮起来，preview按钮点击功能后续会做，这里先把实现一个样式。我该怎么改代码才能实现以上需求？"
    },
    {
        "id": "2025-05-27 15:58:03",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SwiftUI\nimport SQLite3 // SQLiteを使用するためにインポート\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg = \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db) // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0 // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\") // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n//                Text(\"Please select transfer type\")\n//                    .font(.headline)\n//                    .foregroundColor(primaryTextColor)\n//                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(systemName: viewModel.selectedTransferType == type ? \"largecircle.fill.circle\" : \"circle\")\n                                    .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30/255, green: 35/255, blue: 45/255)) // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n                \n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\")\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5))\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n\nstruct RequestTransferView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {\n            RequestTransferView()\n        }\n        .preferredColorScheme(.dark)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/MyView.swift",
                "filename": "MyView.swift",
                "content": "import SwiftUI\n\nstruct MyView: View {\n    @EnvironmentObject private var session: SessionStore\n\n    // Keychain details (kept for context, not directly used in UI changes here)\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    // Define colors based on the design\n    let pageBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255) // #191E27\n    let rowBackgroundColor = Color(red: 25/255, green: 30/255, blue: 39/255)    // Same as page for seamless look\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentButtonColor = Color(hex: \"3B82F6\") // Blue for the logout button\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                pageBackgroundColor.ignoresSafeArea() // Apply background to the entire screen\n\n                VStack(spacing: 0) { // Main container for List, Button, and Version Text\n                    List {\n                        // Section \"账户\"\n                        Section(\n                            header: Text(\"ACCOUNT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header to align with row content\n                                .padding(.top, 20)      // Space above the first section\n                                .padding(.bottom, 8)    // Space between header and its items\n                        ) {\n                            NavigationLinkRow(title: \"Profile\", destination: AccountProfileView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor) //  Modification here.\n                                // THIS IS THE LINE TO CHANGE:\n                                NavigationLinkRow(title: \"Deposit / Withdrawal\", destination: DepositWithdrawView(), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                                NavigationLinkRow(title: \"转户至第一证券\", destination: Text(\"转户至第一证券页面\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                                NavigationLinkRow(title: \"Open a New Account\", destination: Text(\"Open new\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparator(.hidden, edges: .top) // Hide separator above the first section's content\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n                        \n//                        // Section \"Setting\"\n//                        Section(\n//                            header: Text(\"SETTING\")\n//                                .font(.system(size: 16))\n//                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n//                                .padding(.top, 15)      // Space above this section header\n//                                .padding(.bottom, 8)\n//                        ) {\n//                            NavigationLinkRow(title: \"App Setting\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n//                        }\n//                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3)) // Style for separators within section\n\n                        // Section \"Setting\"\n                        Section(\n                            header: Text(\"SUPPORT\")\n                                .font(.system(size: 16))\n                                .foregroundColor(primaryTextColor)\n//                                .padding(.leading, 16) // Indent header\n                                .padding(.top, 15)      // Space above this section header\n                                .padding(.bottom, 8)\n                        ) {\n                            NavigationLinkRow(title: \"Help Center\", destination: Text(\"help\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Contact Us\", destination: Text(\"contact\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"Terms & Disclosures\", destination: Text(\"Terms\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"App Guide\", destination: Text(\"APP Guide\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                            NavigationLinkRow(title: \"What's new in this release\", destination: Text(\"new feature\"), pageBackgroundColor: rowBackgroundColor, textColor: primaryTextColor)\n                        }\n                        .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                    }\n                    .listStyle(PlainListStyle())\n                    .background(Color.clear) // Make List background transparent to show ZStack's color\n                    .environment(\\.defaultMinListRowHeight, 48) // Adjust default row height if needed\n\n                    // Logout Button\n                    Button(action: logout) {\n                        Text(\"Log Out\")\n                            .font(.system(size: 17, weight: .medium))\n                            .foregroundColor(primaryTextColor)\n                            .frame(height: 48)\n                            .frame(maxWidth: .infinity)\n                            .background(accentButtonColor)\n                            .cornerRadius(8)\n                    }\n                    .padding(.horizontal, 16) // Side padding for the button\n                    .padding(.top, 30)        // Space above the button\n                    .padding(.bottom, 15)     // Space between button and version text\n\n                    // Version Number\n                    Text(\"v3.15.1-3003860\")\n                        .font(.system(size: 12))\n                        .foregroundColor(secondaryTextColor)\n                        .padding(.bottom, 20) // Padding at the very bottom\n                }\n            }\n            .navigationTitle(\"Account Profile\")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .principal) { // Center the navigation bar title\n                    Text(\"Account Profile\")\n                        .font(.headline)\n                        .foregroundColor(primaryTextColor)\n                }\n            }\n            .toolbarColorScheme(.dark, for: .navigationBar) // Ensures light status bar & nav items on dark bar\n        }\n        .navigationViewStyle(StackNavigationViewStyle()) // Use StackNavigationViewStyle for typical phone layouts\n    }\n\n    private func logout() {\n        // Go back to login page (original logic)\n        session.isLoggedIn = false\n        session.username = \"\"\n    }\n}\n\n// Reusable struct for NavigationLink rows to ensure consistent styling\nstruct NavigationLinkRow<Destination: View>: View {\n    let title: String\n    let destination: Destination\n    let pageBackgroundColor: Color // Pass from MyView for consistency\n    let textColor: Color           // Pass from MyView\n\n    var body: some View {\n        NavigationLink(destination: destination) {\n            HStack {\n                Text(title)\n                    .foregroundColor(textColor)\n                    .font(.system(size: 17))\n                Spacer()\n            }\n            .padding(.vertical, 2) // Adjust vertical padding within the row content area\n        }\n        .listRowBackground(pageBackgroundColor) // Set row background to blend with the page\n        .listRowInsets(EdgeInsets(top: 0, leading: 16, bottom: 0, trailing: 16)) // Padding for content inside the row\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库有一个叫“Deposit”的表，结构和内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”"
            }
        ],
        "final_prompt": "我的需求是：当点击requesttransfer程序里的Submit按钮，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的Deposit表内写入一条记录，日期是系统日期当天，value是之前填写入的amout数额，type是2，然后在这个界面等待1.5秒，然后界面关闭，显示出它的上一级界面（depositview）并且刷新一下这个界面（因为这个界面有读取数据库的功能），目的是让新写入数据库的内容可以更新出来。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 16:15:21",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Database/Firstrade.db",
                "filename": "Firstrade.db",
                "content": "数据库有一个叫“Deposit”的表，结构和内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SQLite3  // SQLiteを使用するためにインポート\nimport SwiftUI\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw  // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)  // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0  // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\n                \"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\"\n            )\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\")  // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n                //                Text(\"Please select transfer type\")\n                //                    .font(.headline)\n                //                    .foregroundColor(primaryTextColor)\n                //                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(\n                                    systemName: viewModel.selectedTransferType == type\n                                        ? \"largecircle.fill.circle\" : \"circle\"\n                                )\n                                .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30 / 255, green: 35 / 255, blue: 45 / 255))  // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\n                        \"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\"\n                    )\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(\n                            accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5)\n                        )\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：当点击requesttransferview程序里的Submit按钮后，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的Deposit表内写入一条记录，日期是系统日期当天，value是之前已经填入的amount数额，type是2，然后在这个界面等待1.5秒后界面关闭，程序会自动显示出它的上一级界面（depositview）并且我需要刷新一下这个界面（因为这个界面有读取数据库的功能），目的是让新写入数据库的内容可以更新出来。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 17:16:33",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/LoginView.swift",
                "filename": "LoginView.swift",
                "content": "import Foundation\nimport LocalAuthentication\nimport Security\nimport SwiftUI\nimport Combine\n\nstruct Credentials: Codable {\n    let username: String\n    let password: String\n}\n\nfinal class SessionStore: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    @Published var username: String = \"\"\n}\n\n//—————————————————————————————\n// 简易 Keychain Helper\n//—————————————————————————————\nfinal class KeychainHelper {\n    static let shared = KeychainHelper()\n    private init() {}\n\n    func save(_ string: String, service: String, account: String) {\n        let data = Data(string.utf8)\n        delete(service: service, account: account)  // 先删\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecValueData as String: data,\n        ]\n        SecItemAdd(query as CFDictionary, nil)\n    }\n\n    func read(service: String, account: String) -> String? {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n            kSecReturnData as String: kCFBooleanTrue as Any,\n            kSecMatchLimit as String: kSecMatchLimitOne,\n        ]\n        var item: CFTypeRef?\n        let status = SecItemCopyMatching(query as CFDictionary, &item)\n        guard status == errSecSuccess,\n            let data = item as? Data,\n            let str = String(data: data, encoding: .utf8)\n        else {\n            return nil\n        }\n        return str\n    }\n\n    func delete(service: String, account: String) {\n        let query: [String: Any] = [\n            kSecClass as String: kSecClassGenericPassword,\n            kSecAttrService as String: service,\n            kSecAttrAccount as String: account,\n        ]\n        SecItemDelete(query as CFDictionary)\n    }\n}\n\n//—————————————————————————————\n// LoginView.swift\n//—————————————————————————————\nstruct LoginView: View {\n    @EnvironmentObject private var session: SessionStore\n    @State private var usernameInput: String = \"\"\n    @State private var passwordInput: String = \"\"\n    @State private var isPasswordPlaceholder: Bool = false\n    @State private var actualPassword: String = \"\"\n    @State private var rememberAll: Bool = false\n\n    @State private var showingAlert = false\n    @State private var alertMessage = \"\"\n\n    private let userKey = \"rememberedUsernameKey\"\n    private let pwdAccount = \"rememberedPasswordKey\"\n    private let keychainService = Bundle.main.bundleIdentifier ?? \"com.myapp.login\"\n\n    var body: some View {\n        NavigationView {\n            if session.isLoggedIn {\n                MainTabView()\n            } else {\n                ZStack {\n                    Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n                        .ignoresSafeArea()\n                    VStack(spacing: 20) {\n                        Spacer().frame(height: 30)\n                        Text(\"Welcome\")\n                            .font(.title2).foregroundColor(.white)\n                        Spacer().frame(height: 30)\n\n                        // 用户名\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Username\")\n                                .font(.caption).foregroundColor(.gray)\n                            TextField(\"\", text: $usernameInput)\n                                .padding(12)\n                                .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n                                .foregroundColor(.white)\n                                .cornerRadius(8)\n                                .autocapitalization(.none)\n                                .disableAutocorrection(true)\n                                .overlay(\n                                    RoundedRectangle(cornerRadius: 8)\n                                        .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                        }\n                        .padding(.horizontal, 30)\n\n                        // 密码 + Face ID 按钮\n                        VStack(alignment: .leading, spacing: 5) {\n                            Text(\"Passowrd\")\n                                .font(.caption).foregroundColor(.gray)\n                            HStack {\n                                if isPasswordPlaceholder {\n                                    Text(\"******\")\n                                        .padding(12)\n                                        .frame(maxWidth: .infinity, alignment: .leading)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white.opacity(0.7))\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1)\n                                        )\n                                        .onTapGesture {\n                                            isPasswordPlaceholder = false\n                                            passwordInput = \"\"\n                                        }\n                                } else {\n                                    SecureField(\"\", text: $passwordInput)\n                                        .padding(12)\n                                        .background(\n                                            Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n                                        )\n                                        .foregroundColor(.white)\n                                        .cornerRadius(8)\n                                        .overlay(\n                                            RoundedRectangle(cornerRadius: 8)\n                                                .stroke(Color.gray.opacity(0.5), lineWidth: 1))\n                                }\n\n                                // ← 把 Image 换成 Button\n                                Button(action: authenticateWithBiometrics) {\n                                    Image(systemName: \"faceid\")\n                                        .font(.system(size: 24))\n                                        .foregroundColor(.gray)\n                                        .padding(.trailing, 10)\n                                }\n                            }\n                        }\n                        .padding(.horizontal, 30)\n\n                        Toggle(isOn: $rememberAll) {\n                            Text(\"Remember me\")\n                                .foregroundColor(.white)\n                        }\n                        .padding(.horizontal, 30)\n                        .tint(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n\n                        Button(action: login) {\n                            Text(\"Log In\")\n                                .font(.headline).foregroundColor(.white)\n                                .frame(maxWidth: .infinity).padding()\n                                .background(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                                .cornerRadius(8)\n                        }\n                        .padding(.horizontal, 30)\n\n                        Button(action: {\n                            alertMessage = \"Error Code 466\"\n                            showingAlert = true\n                        }) {\n                            Text(\"Forgot username&password\")\n                                .font(.footnote)\n                                .foregroundColor(\n                                    Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n                        }\n\n                        Spacer()\n                        Text(\"v3.15.1-3003860\")\n                            .font(.caption2).foregroundColor(.gray)\n                            .padding(.bottom, 20)\n                    }\n                }\n                .navigationTitle(\"Login\")\n                .navigationBarTitleDisplayMode(.inline)\n                .alert(isPresented: $showingAlert) {\n                    Alert(\n                        title: Text(\"Tips\"),\n                        message: Text(alertMessage),\n                        dismissButton: .default(Text(\"OK\")))\n                }\n                .onAppear(perform: loadRemembered)\n                .alert(isPresented: $showingAlert) {\n                    Alert(title: Text(\"Tips\"),\n                          message: Text(alertMessage),\n                          dismissButton: .default(Text(\"OK\")))\n                }\n            }\n        }\n        .accentColor(Color(red: 70 / 255, green: 130 / 255, blue: 220 / 255))\n    }\n\n    // MARK: ———————— 生物识别认证 ————————\n    private func authenticateWithBiometrics() {\n        let context = LAContext()\n        context.localizedCancelTitle = \"Cancel\"\n        var error: NSError?\n        // 1. 检查设备是否支持\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Use Face ID\"\n            context.evaluatePolicy(\n                .deviceOwnerAuthenticationWithBiometrics,\n                localizedReason: reason\n            ) { success, evalError in\n                DispatchQueue.main.async {\n                    if success {\n                        // 2. 读取 Keychain 密码\n                        guard\n                            let pw = KeychainHelper.shared.read(\n                                service: keychainService,\n                                account: pwdAccount)\n                        else {\n                            alertMessage = \"no password, check 'remember me' first.\"\n                            showingAlert = true\n                            return\n                        }\n                        // 填回界面\n                        actualPassword = pw\n                        isPasswordPlaceholder = true\n                        passwordInput = pw\n                        // 3. 自动触发登录\n                        login()\n                    } else {\n                        alertMessage = \"Verified failed.\"\n                        showingAlert = true\n                    }\n                }\n            }\n        } else {\n            alertMessage = \"Not Support Face ID\"\n            showingAlert = true\n        }\n    }\n\n    // MARK: ———————— 原有加载/登录流程 ————————\n    private func loadRemembered() {\n        if let u = UserDefaults.standard.string(forKey: userKey),\n            let pw = KeychainHelper.shared.read(service: keychainService, account: pwdAccount)\n        {\n            usernameInput = u\n            actualPassword = pw\n            passwordInput = pw\n            isPasswordPlaceholder = true\n            rememberAll = true\n        }\n    }\n\n    private func login() {\n        // 从 JSON 里加载正确凭证\n        guard let stored = loadCredentials() else { return }\n        // 如果在“占位”态，则用 actualPassword，否则用用户新输入的 passwordInput\n        let attemptPwd = isPasswordPlaceholder ? actualPassword : passwordInput\n        if usernameInput == stored.username && attemptPwd == stored.password {\n            // 记住凭证\n            if rememberAll {\n                UserDefaults.standard.set(usernameInput, forKey: userKey)\n                KeychainHelper.shared.save(\n                    stored.password,\n                    service: keychainService,\n                    account: pwdAccount)\n            } else {\n                UserDefaults.standard.removeObject(forKey: userKey)\n                KeychainHelper.shared.delete(\n                    service: keychainService,\n                    account: pwdAccount)\n            }\n            // ← 登录成功，写入全局 Session\n            session.username = usernameInput\n            session.isLoggedIn = true\n\n        } else {\n            alertMessage = \"Name&Password Wrong\"\n            showingAlert = true\n            isPasswordPlaceholder = false\n            passwordInput = \"\"\n        }\n    }\n\n    // … 生物识别逻辑保持不变，只要最终调用 login() 即可 …\n    private func loadCredentials() -> Credentials? {\n        guard\n            let url = Bundle.main.url(forResource: \"Password\", withExtension: \"json\"),\n            let data = try? Data(contentsOf: url),\n            let creds = try? JSONDecoder().decode(Credentials.self, from: data)\n        else {\n            alertMessage = \"profile lost or Setting Wrong\"\n            showingAlert = true\n            return nil\n        }\n        return creds\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/DepositView.swift",
                "filename": "DepositView.swift",
                "content": "import Combine\nimport SQLite3\nimport SwiftUI\n\nstruct TransactionRecord: Identifiable {\n    let id: Int\n    let date: String\n    let value: Double\n    let type: Int  // 0 for deposit, 1 for withdrawal\n\n    var transactionTypeString: String {\n        type == 0 ? \"Deposit\" : \"Withdrawal\"\n    }\n\n    var formattedValue: String {\n        // Ensuring two decimal places for currency\n        String(format: \"$%.2f\", value)\n    }\n\n    // As per database structure, status is not available. Defaulting to \"已完成\".\n    // The design image's \"已驳回\" for 2024-08-21 $1000 cannot be derived from the current DB.\n    var status: String {\n        return \"Complete\"\n    }\n}\n\nclass DepositWithdrawViewModel: ObservableObject {\n    @Published var transactions: [TransactionRecord] = []\n    @Published var isLoadingPage = false\n    @Published var canLoadMorePages = true\n    @Published var databaseError: String? = nil\n\n    private var currentPage = 0\n    private let itemsPerPage = 15\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    init() {\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg =\n                \"❌ Failed to find Firstrade.db in bundle. Ensure it's added to the target and 'Copy Bundle Resources'.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            // fatalError(errorMsg) // Or handle more gracefully\n            return\n        }\n        self.dbPath = path\n        print(\"Database path: \\(dbPath)\")\n\n        if !openDatabase() {\n            // Error already set in openDatabase()\n            return\n        }\n        fetchTransactions(isRefresh: true)  // Initial fetch\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func refreshTransactions() {\n        guard !isLoadingPage else { return }\n        print(\"🔄 Refreshing transactions...\")\n        currentPage = 0\n        transactions = []\n        canLoadMorePages = true  // Reset ability to load more\n        databaseError = nil  // Clear previous errors\n\n        if db == nil {  // Attempt to reopen if closed\n            guard openDatabase() else { return }\n        }\n        fetchTransactions(isRefresh: true)\n    }\n\n    func fetchTransactions(isRefresh: Bool = false) {\n        if isLoadingPage && !isRefresh {\n            print(\"ℹ️ Already loading page, request ignored.\")\n            return\n        }\n        if !canLoadMorePages && !isRefresh {\n            print(\"ℹ️ No more pages to load.\")\n            return\n        }\n\n        isLoadingPage = true\n        if isRefresh {\n            DispatchQueue.main.async {  // Ensure UI updates on main thread for refresh start\n                self.transactions = []\n            }\n        }\n\n        // Ensure DB is open\n        if db == nil {\n            print(\"⚠️ Database was nil, attempting to reopen.\")\n            guard openDatabase() else {\n                DispatchQueue.main.async {\n                    self.isLoadingPage = false\n                }\n                return\n            }\n        }\n\n        let offset = currentPage * itemsPerPage\n        // Note: SQLite date strings 'YYYY-MM-DD' can be sorted lexicographically for date order.\n        let query =\n            \"SELECT id, date, value, type FROM Deposit ORDER BY date DESC LIMIT \\(itemsPerPage) OFFSET \\(offset);\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            var newTransactions: [TransactionRecord] = []\n            while sqlite3_step(statement) == SQLITE_ROW {\n                let id = Int(sqlite3_column_int(statement, 0))\n                // Ensure date is read correctly; it should be TEXT in DB\n                let dateChars = sqlite3_column_text(statement, 1)\n                let date = dateChars != nil ? String(cString: dateChars!) : \"Unknown Date\"\n\n                let value = sqlite3_column_double(statement, 2)\n                let type = Int(sqlite3_column_int(statement, 3))\n\n                let record = TransactionRecord(id: id, date: date, value: value, type: type)\n                newTransactions.append(record)\n            }\n            sqlite3_finalize(statement)\n\n            DispatchQueue.main.async {\n                if isRefresh {\n                    self.transactions = newTransactions\n                } else {\n                    self.transactions.append(contentsOf: newTransactions)\n                }\n\n                if !newTransactions.isEmpty {\n                    self.currentPage += 1\n                }\n\n                self.canLoadMorePages = newTransactions.count == self.itemsPerPage\n                self.isLoadingPage = false\n                self.databaseError = nil  // Clear error on successful fetch\n                print(\n                    \"✅ Fetched \\(newTransactions.count) transactions. Total: \\(self.transactions.count). Current Page: \\(self.currentPage). Can load more: \\(self.canLoadMorePages)\"\n                )\n                if newTransactions.isEmpty && !isRefresh {\n                    print(\"ℹ️ Fetched an empty page, likely end of data.\")\n                }\n            }\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\"❌ SELECT statement could not be prepared: \\(errorMessage). Query: \\(query)\")\n            DispatchQueue.main.async {\n                self.isLoadingPage = false\n                self.databaseError = \"Failed to fetch records: \\(errorMessage)\"\n            }\n        }\n    }\n}\n\nstruct DepositWithdrawView: View {\n    @StateObject private var viewModel = DepositWithdrawViewModel()\n\n    // Colors matching the screenshot\n    let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\n    let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let accentColor = Color(hex: \"3B82F6\")  // Blue for button and highlights\n\n    // Account details from the image (hardcoded as per image)\n    let userEmail = \"ZhangYan  sskeysys@hotmail.com\"  // From image\n    // --- MODIFICATION START ---\n    // Original: let accountType = \"ACH SAVINGS Powered by Standard chartered\"    // From image\n    let accountType = \"ACH SAVINGS\\nPowered by Standard Chartered\"  // From image\n    // --- MODIFICATION END ---\n    let bankName = \"China Merchants Bank (*2056)\"  // From image\n    let bankStatus = \"Active\"  // From image\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(spacing: 0) {\n                accountInfoSection\n                    .padding(.horizontal)\n                    .padding(.top, 10)  // Adjusted top padding\n\n                requestTransferButton\n                    .padding(.horizontal)\n                    .padding(.vertical, 20)  // Increased vertical padding\n\n                transferHistorySection\n\n                if let errorMsg = viewModel.databaseError {\n                    Text(errorMsg)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n            }\n        }\n        .navigationTitle(\"Deposit / Withdrawal\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Deposit / Withdrawal\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)  // Match MyView's toolbar style\n        .onAppear {\n            if viewModel.transactions.isEmpty && viewModel.canLoadMorePages {\n                print(\"DepositWithdrawView appeared, initial data load if needed.\")\n                // ViewModel's init already calls fetch. This is a fallback.\n                // viewModel.fetchTransactions(isRefresh: true)\n            }\n        }\n    }\n\n    private var accountInfoSection: some View {\n        VStack(alignment: .leading, spacing: 10) {  // Increased spacing\n            HStack(spacing: 12) {  // Increased spacing\n                Image(systemName: \"building.columns.fill\")\n                    .font(.system(size: 30))  // Slightly larger icon\n                    .foregroundColor(accentColor)\n                VStack(alignment: .leading, spacing: 2) {  // Reduced inner spacing\n                    Text(userEmail)\n                        .font(.system(size: 16, weight: .medium))  // Adjusted font\n                        .foregroundColor(primaryTextColor)\n                    Text(accountType)\n                        .font(.system(size: 13))  // Adjusted font\n                        .foregroundColor(secondaryTextColor)\n                }\n            }\n            Text(bankName)\n                .font(.system(size: 15, weight: .medium))  // Adjusted font\n                .foregroundColor(primaryTextColor)\n                .padding(.top, 4)  // Added small top padding\n\n            HStack {\n                Text(\"Profile Status: \\(bankStatus)\")\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n                Spacer()\n                Button(\"Delete Profile\") {\n                    print(\"Delete bank setting tapped (not implemented)\")\n                }\n                .font(.system(size: 13, weight: .medium))  // Adjusted font\n                .foregroundColor(accentColor)\n            }\n        }\n        .padding(16)  // Standard padding\n        .background(cardBackgroundColor)\n        .cornerRadius(12)  // Slightly larger corner radius\n    }\n\n    // 上記を下記に置き換えます：\n    private var requestTransferButton: some View {\n        NavigationLink(destination: RequestTransferView()) { // ◀️ ここを変更\n            Text(\"Request Transfer\")\n                .font(.system(size: 17, weight: .semibold))\n                .foregroundColor(.white)\n                .frame(maxWidth: .infinity)\n                .frame(height: 48)\n                .background(accentColor)\n                .cornerRadius(8)\n        }\n    }\n\n    private var transferHistorySection: some View {\n        VStack(alignment: .leading, spacing: 8) {\n            HStack {\n                Text(\"Transfer History\")\n                    .font(.system(size: 18, weight: .bold))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Spacer()\n                Button(action: {\n                    viewModel.refreshTransactions()\n                }) {\n                    Image(systemName: \"arrow.clockwise\")\n                        .font(.system(size: 16, weight: .medium))  // Adjusted icon size\n                        .foregroundColor(accentColor)\n                }\n            }\n            .padding(.horizontal)\n\n            //            Text(\"点击转账记录查看详细信息\")\n            //                .font(.system(size: 12)) // Adjusted font\n            //                .foregroundColor(secondaryTextColor)\n            //                .padding(.horizontal)\n            //                .padding(.bottom, 10) // Increased bottom padding\n\n            List {\n                if viewModel.transactions.isEmpty && !viewModel.isLoadingPage\n                    && viewModel.databaseError == nil\n                {\n                    Text(\"No Transfer History\")\n                        .font(.system(size: 15))\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 20)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                } else {\n                    ForEach(viewModel.transactions) { record in\n                        TransactionRowView(record: record)\n                            .listRowBackground(pageBackgroundColor)\n                            .listRowSeparator(.automatic, edges: .bottom)\n                            .listRowSeparatorTint(secondaryTextColor.opacity(0.3))\n                            .onAppear {\n                                if record.id == viewModel.transactions.last?.id\n                                    && viewModel.canLoadMorePages && !viewModel.isLoadingPage\n                                {\n                                    print(\n                                        \"📜 Reached last item (\\(record.id) - \\(record.date)), attempting to load more.\"\n                                    )\n                                    viewModel.fetchTransactions()\n                                }\n                            }\n                    }\n                }\n\n                if viewModel.isLoadingPage {\n                    HStack {\n                        Spacer()\n                        ProgressView().progressViewStyle(\n                            CircularProgressViewStyle(tint: primaryTextColor))\n                        Spacer()\n                    }\n                    .listRowBackground(pageBackgroundColor)\n                    .listRowSeparator(.hidden)\n                    .padding(.vertical, 10)\n                }\n\n                if !viewModel.canLoadMorePages && !viewModel.transactions.isEmpty\n                    && !viewModel.isLoadingPage\n                {\n                    Text(\"No more records\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                        .frame(maxWidth: .infinity, alignment: .center)\n                        .padding(.vertical, 10)\n                        .listRowBackground(pageBackgroundColor)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .listStyle(PlainListStyle())\n            .background(pageBackgroundColor)\n            .frame(maxHeight: .infinity)\n        }\n    }\n}\n\nstruct TransactionRowView: View {\n    let record: TransactionRecord\n    let primaryTextColor = Color.white\n    let secondaryTextColor = Color.gray\n    let statusCompletedColor = Color.green  // Or use secondaryTextColor as per design\n    let statusRejectedColor = Color.red  // For future if status is available\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {  // Added spacing\n                Text(record.transactionTypeString)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n                Text(record.date)  // Date format from DB: YYYY-MM-DD\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(secondaryTextColor)\n            }\n            Spacer()\n            VStack(alignment: .trailing, spacing: 4) {  // Added spacing\n                Text(record.formattedValue)\n                    .font(.system(size: 16, weight: .medium))  // Adjusted font\n                    .foregroundColor(primaryTextColor)\n\n                // Status display (currently always \"已完成\" from DB)\n                // Design image shows \"已完成\" in gray, \"已驳回\" in a different color (likely red, though image is monochrome for status)\n                Text(record.status)\n                    .font(.system(size: 13))  // Adjusted font\n                    .foregroundColor(\n                        record.status == \"Rejected\"\n                            ? statusRejectedColor\n                            : (record.status == \"Complete\" ? secondaryTextColor : secondaryTextColor))\n            }\n        }\n        .padding(.vertical, 10)  // Increased vertical padding for row\n    }\n}\n\n// Preview Provider for DepositWithdrawView (optional, but helpful)\nstruct DepositWithdrawView_Previews: PreviewProvider {\n    static var previews: some View {\n        NavigationView {  // Wrap in NavigationView for previewing navigation bar\n            DepositWithdrawView()\n        }\n        .preferredColorScheme(.dark)  // Preview in dark mode\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/RequestTransferView.swift",
                "filename": "RequestTransferView.swift",
                "content": "import SQLite3  // SQLiteを使用するためにインポート\nimport SwiftUI\n\n// 取引タイプを定義\nenum TransferType: String, CaseIterable, Identifiable {\n    case deposit = \"Deposit to My Account\"\n    case withdraw = \"Withdraw from My Account\"\n    var id: String { self.rawValue }\n}\n\nclass RequestTransferViewModel: ObservableObject {\n    @Published var selectedTransferType: TransferType = .withdraw  // デフォルトは \"Withdraw\"\n    @Published var amountString: String = \"\"\n    @Published var latestBalance: Double = 0.0\n    @Published var databaseError: String? = nil\n    @Published var isLoading: Bool = false\n\n    private var db: OpaquePointer?\n    private let dbPath: String\n\n    // Previewボタンが有効かどうかを判定するコンピューテッドプロパティ\n    var isPreviewButtonEnabled: Bool {\n        guard let amount = Double(amountString) else { return false }\n        return amount >= 1.0\n    }\n\n    init() {\n        // データベースファイルのパスを取得\n        guard let path = Bundle.main.path(forResource: \"Firstrade\", ofType: \"db\") else {\n            let errorMsg = \"❌ Failed to find Firstrade.db in bundle.\"\n            print(errorMsg)\n            self.dbPath = \"\"\n            self.databaseError = errorMsg\n            return\n        }\n        self.dbPath = path\n        print(\"Database path for RequestTransferViewModel: \\(dbPath)\")\n\n        // データベースを開いて最新の残高を取得\n        if openDatabase() {\n            fetchLatestBalance()\n            // このViewModelの生存期間中DBを開いたままにするか、都度閉じるかはアプリの要件による\n            // ここではfetch後に閉じる例は示さず、deinitで閉じる\n        }\n    }\n\n    deinit {\n        if db != nil {\n            sqlite3_close(db)\n            db = nil\n            print(\"🗃️ Database closed in RequestTransferViewModel.\")\n        }\n    }\n\n    private func openDatabase() -> Bool {\n        if sqlite3_open(dbPath, &db) == SQLITE_OK {\n            print(\"✅ Database opened successfully for RequestTransferViewModel at \\(dbPath)\")\n            databaseError = nil\n            return true\n        } else {\n            let errorMsg =\n                \"❌ Error opening database \\(dbPath): \\(String(cString: sqlite3_errmsg(db)))\"\n            print(errorMsg)\n            databaseError = errorMsg\n            if db != nil {\n                sqlite3_close(db)  // エラー時は閉じる\n                db = nil\n            }\n            return false\n        }\n    }\n\n    func fetchLatestBalance() {\n        guard db != nil else {\n            databaseError = \"Database not open. Cannot fetch balance.\"\n            print(databaseError!)\n            return\n        }\n        isLoading = true\n        databaseError = nil\n\n        // Balanceテーブルから最新のvalueを取得するクエリ\n        let query = \"SELECT value FROM Balance ORDER BY date DESC LIMIT 1;\"\n        var statement: OpaquePointer?\n\n        print(\"➡️ Preparing query: \\(query)\")\n        if sqlite3_prepare_v2(db, query, -1, &statement, nil) == SQLITE_OK {\n            if sqlite3_step(statement) == SQLITE_ROW {\n                let balanceValue = sqlite3_column_double(statement, 0)\n                DispatchQueue.main.async {\n                    self.latestBalance = balanceValue\n                    print(\"✅ Latest balance fetched: \\(balanceValue)\")\n                }\n            } else {\n                let errorMsg = \"ℹ️ No balance data found in Balance table.\"\n                print(errorMsg)\n                DispatchQueue.main.async {\n                    self.databaseError = errorMsg\n                    self.latestBalance = 0.0  // データがない場合は0に\n                }\n            }\n            sqlite3_finalize(statement)\n        } else {\n            let errorMessage = String(cString: sqlite3_errmsg(db))\n            print(\n                \"❌ SELECT statement for balance could not be prepared: \\(errorMessage). Query: \\(query)\"\n            )\n            DispatchQueue.main.async {\n                self.databaseError = \"Failed to fetch balance: \\(errorMessage)\"\n            }\n        }\n        DispatchQueue.main.async {\n            self.isLoading = false\n        }\n    }\n}\n\nstruct RequestTransferView: View {\n    @StateObject private var viewModel = RequestTransferViewModel()\n\n    // デザインに基づいた色定義\n    private let pageBackgroundColor = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)\n    private let cardBackgroundColor = Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255)\n    private let primaryTextColor = Color.white\n    private let secondaryTextColor = Color.gray\n    private let accentColor = Color(hex: \"3B82F6\")  // FirstradeApp.swiftのColor extensionが必要\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColor.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 20) {\n                if viewModel.isLoading {\n                    ProgressView(\"Loading Cash Amount...\")\n                        .progressViewStyle(CircularProgressViewStyle(tint: primaryTextColor))\n                        .frame(maxWidth: .infinity, alignment: .center)\n                } else if let dbError = viewModel.databaseError {\n                    Text(dbError)\n                        .foregroundColor(.red)\n                        .padding()\n                }\n\n                // MARK: - Transfer Type Selection\n                //                Text(\"Please select transfer type\")\n                //                    .font(.headline)\n                //                    .foregroundColor(primaryTextColor)\n                //                    .padding(.horizontal)\n\n                VStack(alignment: .leading, spacing: 10) {\n                    ForEach(TransferType.allCases) { type in\n                        Button(action: {\n                            viewModel.selectedTransferType = type\n                        }) {\n                            HStack {\n                                Image(\n                                    systemName: viewModel.selectedTransferType == type\n                                        ? \"largecircle.fill.circle\" : \"circle\"\n                                )\n                                .foregroundColor(accentColor)\n                                Text(type.rawValue)\n                                    .foregroundColor(primaryTextColor)\n                                Spacer()\n                            }\n                            .padding()\n                            .background(cardBackgroundColor)\n                            .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n\n                // MARK: - Cash Amount Display\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Cash Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    Text(String(format: \"$%.2f\", viewModel.latestBalance))\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(primaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                // MARK: - Amount Input\n                VStack(alignment: .leading, spacing: 5) {\n                    Text(\"Amount\")\n                        .font(.subheadline)\n                        .foregroundColor(secondaryTextColor)\n                    TextField(\"Enter amount\", text: $viewModel.amountString)\n                        .foregroundColor(primaryTextColor)\n                        .padding(12)\n                        .background(\n                            RoundedRectangle(cornerRadius: 8)\n                                .fill(Color(red: 30 / 255, green: 35 / 255, blue: 45 / 255))  // Slightly different for input field\n                        )\n                        .keyboardType(.decimalPad)\n                    Text(\"Minimum amount is $1.00\")\n                        .font(.caption)\n                        .foregroundColor(secondaryTextColor)\n                }\n                .padding()\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .background(cardBackgroundColor)\n                .cornerRadius(8)\n                .padding(.horizontal)\n\n                Spacer()\n\n                // MARK: - Preview Button\n                Button(action: {\n                    // Preview button action (to be implemented later)\n                    print(\n                        \"Preview tapped. Amount: \\(viewModel.amountString), Type: \\(viewModel.selectedTransferType.rawValue)\"\n                    )\n                }) {\n                    Text(\"Submit\")\n                        .font(.headline)\n                        .foregroundColor(viewModel.isPreviewButtonEnabled ? .white : .gray)\n                        .frame(maxWidth: .infinity)\n                        .padding()\n                        .background(\n                            accentColor.opacity(viewModel.isPreviewButtonEnabled ? 1.0 : 0.5)\n                        )\n                        .cornerRadius(8)\n                }\n                .disabled(!viewModel.isPreviewButtonEnabled)\n                .padding(.horizontal)\n                .padding(.bottom)\n\n            }\n        }\n        .navigationTitle(\"Request Transfer\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Request Transfer\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColor)\n            }\n        }\n        .toolbarColorScheme(.dark, for: .navigationBar)\n        .onAppear {\n            // ViewModelのinitでデータ取得が開始されるが、必要に応じて再取得\n            // viewModel.fetchLatestBalance()\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "目前程序里的amount是读取firstrade.db的Balance表，我的需求是：当点击requesttransferview程序里的Submit按钮后，按钮会先显示一个\"Transfering...\"字样，同时往firstrade.db的另一个表Deposit里写入一条记录（“Deposit”的表内容如下“id  date        value     type\n--  ----------  --------  ----\n48  2015-07-02  212907.0  0   \n51  2015-12-03  107995.0  0   \n46  2016-03-21  24972.0   1   \n47  2016-03-21  49972.0   1   \n49  2016-05-12  152081.0  0   ”），日期是系统日期当天，value是之前已经填入的amount数额，type是2，然后在这个界面等待1.5秒后界面关闭。该怎么改代码以实现此需求？"
    },
    {
        "id": "2025-05-27 19:32:11",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/PortfolioView.swift",
                "filename": "PortfolioView.swift",
                "content": "import SwiftUI\nimport Foundation\nimport SQLite3\nimport Combine\n\nstruct MainTabView: View {\n    @EnvironmentObject private var session: SessionStore\n    @StateObject private var vm = BalanceViewModel()\n\n    var body: some View {\n        TabView {\n            PortfolioView(username: session.username, vm: vm)\n                .tabItem {\n                    Image(systemName: \"briefcase.fill\")\n                    Text(\"Positions\")\n                }\n\n            WatchlistView() // Use the newly created WatchlistView\n                .tabItem {\n                    Image(systemName: \"star\") // SwiftUI will use \"star.fill\" when selected\n                    Text(\"Watchlist\")\n                }\n\n            MarketsView()\n                .tabItem {\n                    Image(systemName: \"safari.fill\") // Using safari.fill as a compass-like icon\n                    Text(\"Markets\")\n                }\n\n            AssetsView() // <<< 新しい「资产」ページをここに追加\n                .tabItem {\n                    // Image(systemName: \"rectangle.stack\") // 元のアイコン\n                    Image(systemName: \"chart.pie.fill\") // デザイン画像のアイコンに近いものに変更 (任意)\n                    Text(\"Assets\")\n                }\n\n            MyView()\n                .tabItem {\n                    Image(systemName: \"person\")\n                    Text(\"Account\")\n                }\n        }\n        .accentColor(Color(red: 70/255, green: 130/255, blue: 220/255))\n//        .environmentObject(session)\n    }\n}\n\nstruct BalanceRecord {\n    let date: String\n    let value: Double\n}\n\nclass BalanceViewModel: ObservableObject {\n    @Published var totalBalance: Double = 0\n    @Published var cashBuyingPower: Double = 0\n    @Published var dailyChange: Double = 0\n    @Published var dailyChangePercent: Double = 0\n\n    func fetchBalances() {\n        // 从 Bundle 中找到数据库文件\n        guard let dbURL = Bundle.main.url(forResource: \"Firstrade\", withExtension: \"db\") else {\n            print(\"❌ Can't find Firstrade.db\")\n            return\n        }\n\n        var db: OpaquePointer?\n        guard sqlite3_open(dbURL.path, &db) == SQLITE_OK else {\n            print(\"❌ Can't open DATABASE\")\n            return\n        }\n        defer { sqlite3_close(db) }\n\n        // 查询最新两天的记录\n        let sql = \"SELECT date, value FROM Balance ORDER BY date DESC LIMIT 2;\"\n        var stmt: OpaquePointer?\n        guard sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK else {\n            print(\"❌ sqlite3_prepare_v2 错误\")\n            return\n        }\n        defer { sqlite3_finalize(stmt) }\n\n        var records = [BalanceRecord]()\n        while sqlite3_step(stmt) == SQLITE_ROW {\n            if let cString = sqlite3_column_text(stmt, 0) {\n                let date = String(cString: cString)\n                let value = sqlite3_column_double(stmt, 1)\n                records.append(.init(date: date, value: value))\n            }\n        }\n\n        // 至少要有两条数据\n        guard records.count >= 2 else {\n            print(\"⚠️ Balance DATA not in 2 days\")\n            return\n        }\n\n        let latest = records[0]\n        let previous = records[1]\n\n        // 计算\n        let diff = latest.value - previous.value\n        let pct = previous.value != 0 ? (diff / previous.value) * 100 : 0\n\n        // 回到主线程更新 UI\n        DispatchQueue.main.async {\n            self.totalBalance = latest.value\n            self.cashBuyingPower = latest.value\n            self.dailyChange = diff\n            self.dailyChangePercent = pct\n        }\n    }\n}\n\nstruct PortfolioView: View {\n    let username: String\n    @ObservedObject var vm: BalanceViewModel\n    @State private var selectedSegment = 0\n    private let segments = [\"POSITION\"]    // 这里只放一个\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // 摘要卡片\n                SummaryCard(vm: vm)\n                    .onAppear { vm.fetchBalances() }\n\n                // 分段控件\n                Picker(\"\", selection: $selectedSegment) {\n                    ForEach(0..<segments.count, id: \\.self) { idx in\n                        Text(segments[idx]).tag(idx)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.horizontal)\n\n                // 空仓位提示\n                Spacer()\n                VStack(spacing: 16) {\n                    Image(systemName: \"tray\")\n                        .font(.largeTitle)\n                        .foregroundColor(.gray.opacity(0.7))\n                    Text(\"No current positions\")\n                        .foregroundColor(.gray)\n                    Button(action: {\n                        // search operation\n                    }) {\n                        HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }\n                        .padding(.vertical, 8)\n                        .padding(.horizontal, 16)\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.gray, lineWidth: 1)\n                        )\n                    }\n                }\n                Spacer()\n            }\n            .background(Color(red: 25/255, green: 30/255, blue: 39/255).ignoresSafeArea())\n            .navigationBarTitle(username, displayMode: .inline)\n            .toolbar {\n                // 左侧公文包\n                ToolbarItem(placement: .navigationBarLeading) {\n//                    Image(systemName: \"briefcase\")\n//                        .foregroundColor(.white)\n                }\n                // 右侧菜单 / 通知 / 搜索\n                ToolbarItemGroup(placement: .navigationBarTrailing) {\n//                    Button(action: {}) {\n//                        Image(systemName: \"line.horizontal.3\")\n//                    }\n//                    Button(action: {}) {\n//                        Image(systemName: \"bell\")\n//                    }\n                    Button(action: {}) {\n                        Image(systemName: \"magnifyingglass\")\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct SummaryCard: View {\n    @ObservedObject var vm: BalanceViewModel\n\n    // 只保留整数金额，百分比保留两位小数\n    private func fmt(_ v: Double) -> String {\n        String(format: \"$%.2f\", v) // 将 %.0f 修改为 %.2f，表示显示两位小数\n    }\n    private func fmtChange(_ v: Double) -> String {\n        let sign = v >= 0 ? \"+\" : \"−\"\n        return String(format: \"\\(sign)$%.0f\", abs(v))\n    }\n    private func fmtPct(_ p: Double) -> String {\n        String(format: \"(%.2f%%)\", p)\n    }\n\n    var body: some View {\n        HStack(alignment: .top, spacing: 0) {  // ← alignment: .top\n            // 左侧：账户总值 + 现金购买力\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Total Account Value\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.totalBalance))\n                    .font(.title2)\n                    .foregroundColor(.white)\n\n                Text(\"Cash BP\")\n                    .font(.caption2)\n                    .foregroundColor(.gray)\n                Text(fmt(vm.cashBuyingPower))\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.8))\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n\n            // 右侧：今日变动\n            VStack(alignment: .leading, spacing: 6) {\n                Text(\"Today's Change\")\n                    .font(.caption)\n                    .foregroundColor(.gray)\n\n                HStack(spacing: 4) {\n                    Text(fmtChange(vm.dailyChange))\n                        .font(.title3)  // ← 调小为 .title2\n                    Text(fmtPct(vm.dailyChangePercent))\n                        .font(.caption)  // 比数字更小的字体\n                }\n                .foregroundColor(vm.dailyChange >= 0 ? .green : .red)\n            }\n            .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        .padding()\n        .background(Color(red: 40 / 255, green: 45 / 255, blue: 55 / 255))\n        .cornerRadius(12)\n        .padding(.horizontal)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/Search.swift",
                "filename": "Search.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI\n\n// MARK: - 协议与模型\nprotocol SearchDescribableItem {\n    var symbol: String { get }\n    var name: String { get }\n    var tag: [String] { get }\n    var description1: String { get }\n    var description2: String { get }\n}\n\nstruct SelectedSymbol: Identifiable {\n    let id = UUID()\n    let result: SearchResult\n    let category: String\n}\n\nstruct GroupedSearchResults: Identifiable {\n    var id = UUID()\n    var category: MatchCategory\n    var results: [(result: SearchResult, score: Int)]\n    let highestScore: Int\n}\n\nenum MatchCategory: String, CaseIterable, Identifiable {\n    case stockSymbol = \"Stock Symbol\"\n    case etfSymbol = \"ETF Symbol\"\n    case stockName = \"Stock Name\"\n    case etfName = \"ETF Name\"\n    case stockTag = \"Stock Tag\"\n    case etfTag = \"ETF Tag\"\n    case stockDescription = \"Stock Description\"\n    case etfDescription = \"ETF Description\"\n    \n    var id: String { self.rawValue }\n    \n    var priority: Int {\n        switch self {\n        case .stockSymbol, .etfSymbol:\n            return 1000\n        case .stockTag, .etfTag:\n            return 800\n        case .stockName, .etfName:\n            return 500\n        case .stockDescription, .etfDescription:\n            return 300\n        }\n    }\n}\n\n// MARK: - 搜索结果包装\nclass SearchResult: Identifiable, ObservableObject {\n    let id = UUID()\n    @Published var symbol: String\n    @Published var name: String\n    @Published var tag: [String]\n    @Published var marketCap: String?\n    @Published var peRatio: String?\n    @Published var pb: String?  // 添加 pb 属性\n    @Published var compare: String?\n    @Published var volume: String?\n    \n    init(symbol: String, name: String, tag: [String],\n         marketCap: String? = nil, peRatio: String? = nil, pb: String? = nil,\n         compare: String? = nil, volume: String? = nil) {\n        self.symbol = symbol\n        self.name = name\n        self.tag = tag\n        self.marketCap = marketCap\n        self.peRatio = peRatio\n        self.pb = pb  // 初始化 pb\n        self.compare = compare\n        self.volume = volume\n    }\n}\n\n// MARK: - 分组 header\nstruct GroupHeaderView: View {\n    let category: MatchCategory\n    @Binding var isCollapsed: Bool\n    \n    var body: some View {\n        HStack {\n            Text(category.rawValue)\n                .font(.headline)\n                .foregroundColor(.gray)\n            Spacer()\n            Image(systemName: isCollapsed ? \"chevron.down\" : \"chevron.up\")\n                .foregroundColor(.gray)\n        }\n        .contentShape(Rectangle())\n        .onTapGesture {\n            withAnimation {\n                isCollapsed.toggle()\n            }\n        }\n    }\n}\n\n// MARK: - 主搜索按钮页面\nstruct SearchContentView: View {\n    @State private var showSearch = false\n    @State private var showCompare = false\n    @State private var showEarning = false // 添加新状态\n    @EnvironmentObject var dataService: DataService\n    \n    var body: some View {\n        NavigationStack {\n            HStack(spacing: 12) {\n                Button(action: { showCompare = true }) {\n                    VStack {\n                        Image(systemName: \"chart.line.uptrend.xyaxis\")\n                            .font(.system(size: 20))\n                        Text(\"比较\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showEarning = true }) {\n                    VStack {\n                        Image(systemName: \"calendar\")\n                            .font(.system(size: 20))\n                        Text(\"财报\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n            }\n            .padding(.horizontal)\n            Spacer()\n        }\n        .navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        }\n        .navigationDestination(isPresented: $showCompare) {\n            CompareView(initialSymbol: \"\")\n        }\n        .navigationDestination(isPresented: $showEarning) {\n                    EarningReleaseView()\n                }\n    }\n}\n\n// MARK: - 搜索页面\nstruct SearchView: View {\n    @Environment(\\.dismiss) private var dismiss\n    @State private var searchText: String = \"\"\n    @State private var showClearButton: Bool = false\n    @State private var showSearchHistory: Bool = false\n    @State private var groupedSearchResults: [GroupedSearchResults] = []\n    @State private var isLoading: Bool = false\n    @State private var selectedCategory: String? = nil\n    @State private var showChart: Bool = false\n    @State private var selectedResult: SearchResult? = nil\n    @State private var selectedSymbol: SelectedSymbol? = nil\n    @State private var isFirstAppear = true\n    @ObservedObject var viewModel: SearchViewModel\n    @FocusState private var isSearchFieldFocused: Bool\n    @State private var showChartView: Bool = false\n    @State private var selectedSymbolForChart: SelectedSymbol? = nil\n    @State private var selectedSymbolForDescription: SelectedSymbol? = nil\n    @State private var clipboardContent: String = \"\"\n    @State private var showClipboardBar: Bool = false\n    \n    @State private var collapsedGroups: [MatchCategory: Bool] = [:]\n    let isSearchActive: Bool\n    \n    init(isSearchActive: Bool = false, dataService: DataService) {\n        self.isSearchActive = isSearchActive\n        self.viewModel = SearchViewModel(dataService: dataService)\n        _showSearchHistory = State(initialValue: isSearchActive)\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            searchBar\n                .padding()\n            \n            // 剪贴板小条\n            if showClipboardBar {\n                HStack {\n                    Image(systemName: \"doc.on.clipboard\")\n                        .foregroundColor(.gray)\n                    Text(clipboardContent)\n                        .lineLimit(1)\n                        .truncationMode(.middle)\n                    Spacer()\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n                .background(Color(.systemGray5))\n                .cornerRadius(8)\n                .padding(.horizontal)\n                .onTapGesture {\n                    // 粘贴并隐藏小条\n                    searchText = clipboardContent\n                    withAnimation {\n                        showClipboardBar = false\n                        showSearchHistory = false\n                    }\n                    // 你可以根据需要自动触发搜索：\n                     startSearch()\n                }\n                .transition(.move(edge: .top).combined(with: .opacity))\n            }\n\n            ZStack {\n                if showSearchHistory {\n                    SearchHistoryView(viewModel: viewModel) { term in\n                        searchText = term\n                        startSearch()\n                    }\n                    .transition(.opacity)\n                    .zIndex(1)\n                }\n                \n                if isLoading {\n                    ProgressView(\"正在搜索...\")\n                        .padding()\n                }\n                \n                if !showSearchHistory && !groupedSearchResults.isEmpty {\n                    searchResultsList\n                        .transition(.opacity)\n                }\n            }\n            .navigationBarTitleDisplayMode(.inline)\n            .alert(isPresented: Binding<Bool>(\n                get: { viewModel.errorMessage != nil },\n                set: { if !$0 { viewModel.errorMessage = nil } }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(viewModel.errorMessage ?? \"\"),\n                    dismissButton: .default(Text(\"确定\"))\n                )\n            }\n            .sheet(item: $selectedSymbol) { selected in\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n        .onAppear {\n            if isSearchActive && isFirstAppear {\n                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n                    isSearchFieldFocused = true\n                    isFirstAppear = false\n                }\n            }\n        }\n    }\n    \n    private var searchBar: some View {\n        HStack {\n            ZStack(alignment: .trailing) {\n                TextField(\n                    \"请输入要搜索的关键字\",\n                    text: $searchText,\n                    onEditingChanged: { isEditing in\n                        withAnimation {\n                            // 控制搜索历史的展示\n                            showSearchHistory = isEditing && searchText.isEmpty\n                            if isEditing && searchText.isEmpty {\n                                groupedSearchResults = []\n                            }\n                        }\n                        // 当开始编辑且文本为空时，读取剪贴板并展示小条\n                        if isEditing && searchText.isEmpty {\n                            if let content = UIPasteboard.general.string?\n                                .trimmingCharacters(in: .whitespacesAndNewlines),\n                               !content.isEmpty {\n                                clipboardContent = content\n                                withAnimation {\n                                    showClipboardBar = true\n                                }\n                            }\n                        }\n                    },\n                    onCommit: {\n                        startSearch()\n                    }\n                )\n                .focused($isSearchFieldFocused)\n                .padding(10)\n                .padding(.trailing, showClearButton ? 30 : 10)\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n                .onChange(of: searchText) { _, newValue in\n                    showClearButton = !newValue.isEmpty\n                    if newValue.isEmpty {\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                        }\n                    } else {\n                        // 输入时隐藏剪贴板小条\n                        withAnimation { showClipboardBar = false }\n                    }\n                }\n\n                if showClearButton {\n                    Button(action: {\n                        searchText = \"\"\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                            isSearchFieldFocused = true\n                        }\n                        // 点击清除时读取剪贴板\n                        if let content = UIPasteboard.general.string?\n                            .trimmingCharacters(in: .whitespacesAndNewlines),\n                           !content.isEmpty {\n                            clipboardContent = content\n                            withAnimation {\n                                showClipboardBar = true\n                            }\n                        }\n                    }) {\n                        Image(systemName: \"xmark.circle.fill\")\n                            .foregroundColor(.gray)\n                            .opacity(0.6)\n                    }\n                    .padding(.trailing, 15)\n                    .transition(.opacity)\n                }\n            }\n\n            Button(action: {\n                startSearch()\n                isSearchFieldFocused = false\n            }) {\n                Text(\"搜索\")\n                    .foregroundColor(.white)\n                    .padding(.horizontal)\n                    .padding(.vertical, 8)\n                    .background(Color.blue)\n                    .cornerRadius(8)\n            }\n        }\n    }\n    \n    private var searchResultsList: some View {\n        List {\n            ForEach(groupedSearchResults) { groupedResult in\n                if !groupedResult.results.isEmpty {\n                    Section(header: GroupHeaderView(\n                        category: groupedResult.category,\n                        isCollapsed: Binding(\n                            get: { collapsedGroups[groupedResult.category] ?? false },\n                            set: { collapsedGroups[groupedResult.category] = $0 }\n                        )\n                    )) {\n                        if !(collapsedGroups[groupedResult.category] ?? false) {\n                            ForEach(groupedResult.results.sorted { $0.score > $1.score }, id: \\.result.id) { result, score in\n                                SearchResultRow(result: result, score: score)\n                                    .contentShape(Rectangle())  // 添加这一行\n                                    .onTapGesture {           // 改用 onTapGesture\n                                        handleResultSelection(result: result)\n                                    }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        .listStyle(InsetGroupedListStyle())\n        .sheet(item: $selectedSymbolForDescription) { selected in\n            if let descriptions = getDescriptions(for: selected.result.symbol) {\n                DescriptionView(descriptions: descriptions, isDarkMode: true)\n            } else {\n                DescriptionView(descriptions: (\"No description available.\", \"\"), isDarkMode: true)\n            }\n        }\n        .navigationDestination(isPresented: $showChartView) {\n            if let selected = selectedSymbolForChart {\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n    }\n\n    // 添加处理结果选择的方法\n    private func handleResultSelection(result: SearchResult) {\n        // 检查symbol是否在数据库中有数据\n        if let groupName = viewModel.dataService.getCategory(for: result.symbol) {\n            // 检查数据库中是否有该symbol的价格数据\n            DispatchQueue.global(qos: .userInitiated).async {\n                let data = DatabaseManager.shared.fetchHistoricalData(\n                    symbol: result.symbol,\n                    tableName: groupName,\n                    dateRange: .timeRange(.oneMonth)\n                )\n                \n                DispatchQueue.main.async {\n                    if data.isEmpty {\n                        // 如果没有价格数据，但有description数据\n                        if getDescriptions(for: result.symbol) != nil {\n                            selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n                        }\n                    } else {\n                        // 有价格数据，通过导航打开ChartView\n                        selectedSymbolForChart = SelectedSymbol(result: result, category: groupName)\n                        showChartView = true\n                    }\n                }\n            }\n        } else {\n            // 如果在分类中找不到，但可能有description\n            if getDescriptions(for: result.symbol) != nil {\n                selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n            }\n        }\n    }\n\n    // 添加获取描述的辅助方法\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = viewModel.dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = viewModel.dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    func startSearch() {\n        let trimmed = searchText.trimmingCharacters(in: .whitespaces)\n        guard !trimmed.isEmpty else { return }\n        isSearchFieldFocused = false\n        isLoading = true\n        showSearchHistory = false\n\n        viewModel.performSearch(query: trimmed) { groupedResults in\n            DispatchQueue.main.async {\n                withAnimation {\n                    // 1. 先赋值\n                    self.groupedSearchResults = groupedResults\n                    self.isLoading = false\n                    \n                    // 2. 初始化折叠状态\n                    for group in groupedResults {\n                        if self.collapsedGroups[group.category] == nil {\n                            self.collapsedGroups[group.category] = false\n                        }\n                    }\n                }\n                \n                // 3. 自动判断首个结果\n                if\n                    let firstGroup = groupedResults.first,\n                    // 记得 results 本来就是按 score 排好序的\n                    let firstEntry = firstGroup.results.first,\n                    trimmed.uppercased() == firstEntry.result.symbol.uppercased()\n                {\n                    // 4. 直接打开 chart 或 description\n                    self.handleResultSelection(result: firstEntry.result)\n                    return\n                }\n                \n                // 如果不一致，就正常停留在列表\n            }\n        }\n    }\n}\n\n// MARK: - 搜索结果行\nstruct SearchResultRow: View {\n    @ObservedObject var result: SearchResult\n    let score: Int\n    \n    var body: some View {\n        VStack(alignment: .leading) {\n            HStack {\n                VStack(alignment: .leading) {\n                    HStack {\n                        Text(result.symbol)\n                            .foregroundColor(.blue)\n                        Text(result.name)\n                            .foregroundColor(.primary)\n                            .lineLimit(1)\n                            .truncationMode(.tail)\n                    }\n                    .font(.headline)\n                    Text(result.tag.joined(separator: \", \"))\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                Spacer()\n            }\n            HStack {\n                if let marketCap = result.marketCap {\n                    Text(marketCap)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let peRatio = result.peRatio, peRatio != \"--\" {\n                    Text(peRatio)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let pb = result.pb, pb != \"--\" {  // 添加 PB 的显示\n                                    Text(pb)\n                                        .font(.subheadline)\n                                        .foregroundColor(.secondary)\n                                }\n                if let compare = result.compare {\n                    Text(compare)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let volume = result.volume {\n                    Text(volume)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n            }\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - 搜索历史视图\nstruct SearchHistoryView: View {\n    @ObservedObject var viewModel: SearchViewModel\n    var onSelect: (String) -> Void\n    \n    var body: some View {\n        VStack {\n            if viewModel.searchHistory.isEmpty {\n                Text(\"暂无搜索历史\")\n                    .foregroundColor(.secondary)\n                    .padding()\n            } else {\n                ScrollView {\n                    VStack(alignment: .leading, spacing: 8) {\n                        ForEach(viewModel.searchHistory, id: \\.self) { term in\n                            HStack {\n                                Text(term)\n                                Spacer()\n                                Button(action: {\n                                    viewModel.removeSearchHistory(term: term)\n                                }) {\n                                    Image(systemName: \"trash\")\n                                        .foregroundColor(.red)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 4)\n                            .contentShape(Rectangle())\n                            .onTapGesture {\n                                onSelect(term)\n                            }\n                        }\n                    }\n                }\n                .background(Color(.systemBackground))\n                .cornerRadius(8)\n                .shadow(radius: 5)\n                .padding([.horizontal, .bottom])\n            }\n        }\n    }\n}\n\n// MARK: - ViewModel\nclass SearchViewModel: ObservableObject {\n    @Published var searchHistory: [String] = []\n    @Published var errorMessage: String? = nil\n    @Published var isChartLoading: Bool = false\n    @Published var groupedSearchResults: [GroupedSearchResults] = []\n    \n    var dataService: DataService\n    private var cancellables = Set<AnyCancellable>()\n    \n    init(dataService: DataService = DataService()) {\n        self.dataService = dataService\n        dataService.$errorMessage\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.errorMessage, on: self)\n            .store(in: &cancellables)\n        loadSearchHistory()\n    }\n    \n    func performSearch(query: String, completion: @escaping ([GroupedSearchResults]) -> Void) {\n        let keywords = query.lowercased().split(separator: \" \").map { String($0) }\n        \n        DispatchQueue.global(qos: .userInitiated).async { [weak self] in\n            guard let self = self, let descriptionData = self.dataService.descriptionData else {\n                DispatchQueue.main.async { completion([]) }\n                return\n            }\n            \n            var groupedResults: [(\n                group: GroupedSearchResults,\n                matchScore: Int,\n                priority: Int\n            )] = []\n            \n            let categories: [MatchCategory] = [\n                .stockSymbol, .etfSymbol,\n                .stockName, .etfName,\n                .stockTag, .etfTag,\n                .stockDescription, .etfDescription\n            ]\n            \n            for category in categories {\n                var matches: [(result: SearchResult, score: Int)] = []\n                \n                switch category {\n                case .stockSymbol, .stockName, .stockDescription, .stockTag:\n                    matches = self.searchCategory(items: descriptionData.stocks, keywords: keywords, category: category)\n                    \n                case .etfSymbol, .etfName, .etfDescription, .etfTag:\n                    matches = self.searchCategory(items: descriptionData.etfs, keywords: keywords, category: category)\n                }\n                \n                if !matches.isEmpty {\n                    let highestScore = matches.max(by: { $0.score < $1.score })?.score ?? 0\n                    let group = GroupedSearchResults(category: category, results: matches, highestScore: highestScore)\n                    groupedResults.append((group, highestScore, category.priority))\n                }\n            }\n            \n            let sortedGroups = groupedResults.sorted {\n                if $0.matchScore != $1.matchScore {\n                    return $0.matchScore > $1.matchScore\n                }\n                return $0.priority > $1.priority\n            }.map { $0.group }\n            \n            DispatchQueue.main.async {\n                if !keywords.isEmpty {\n                    self.addSearchHistory(term: query)\n                }\n                self.groupedSearchResults = sortedGroups\n                self.fetchLatestVolumes(for: sortedGroups) {\n                    completion(sortedGroups)\n                }\n            }\n        }\n    }\n    \n    // 为 ETF 搜索结果获取最新 volume\n    private func fetchLatestVolumes(for groupedResults: [GroupedSearchResults], completion: @escaping () -> Void) {\n        let etfCategories: Set<MatchCategory> = [.etfSymbol, .etfName, .etfDescription, .etfTag]\n        \n        for groupedResult in groupedResults {\n            if etfCategories.contains(groupedResult.category) {\n                for (_, entry) in groupedResult.results.enumerated() {\n                    let symbol = entry.result.symbol\n                    if let latestVolume = DatabaseManager.shared.fetchLatestVolume(forSymbol: symbol, tableName: \"ETFs\") {\n                        DispatchQueue.main.async {\n                            entry.result.volume = self.formatVolume(latestVolume)\n                        }\n                    } else {\n                        DispatchQueue.main.async {\n                            entry.result.volume = \"--K\"\n                        }\n                    }\n                }\n            }\n        }\n        completion()\n    }\n    \n    private func formatVolume(_ volume: Int64) -> String {\n        let kVolume = Double(volume) / 1000.0\n        return String(format: \"%.0fK\", kVolume)\n    }\n    \n    // 搜索类别，并根据结果进行匹配和排序\n    func searchCategory<T: SearchDescribableItem>(items: [T],\n                                                  keywords: [String],\n                                                  category: MatchCategory)\n    -> [(result: SearchResult, score: Int)] {\n        var scoredResults: [(SearchResult, Int)] = []\n        \n        for item in items {\n            if let totalScore = matchScoreForItem(item, category: category, keywords: keywords) {\n                let upperSymbol = item.symbol.uppercased()\n                let data = dataService.marketCapData[upperSymbol]\n                let marketCap = data?.marketCap\n                let peRatioStr = data?.peRatio != nil ? String(format: \"%.2f\", data!.peRatio!) : \"--\"\n                let pbStr = data?.pb != nil ? String(format: \"%.2f\", data!.pb!) : \"--\"  // 添加 PB 格式化\n                \n                let result = SearchResult(\n                    symbol: item.symbol,\n                    name: item.name,\n                    tag: item.tag,\n                    marketCap: marketCap,\n                    peRatio: peRatioStr,\n                    pb: pbStr,  // 添加 PB 数据\n                    compare: dataService.compareData[upperSymbol]\n                )\n                \n                scoredResults.append((result, totalScore))\n            }\n        }\n        \n        return scoredResults.sorted { $0.1 > $1.1 }\n    }\n    \n    // 计算某个 item 与一组关键词在指定分类下的匹配分数\n    private func matchScoreForItem<T: SearchDescribableItem>(\n        _ item: T,\n        category: MatchCategory,\n        keywords: [String]) -> Int? {\n        \n        var totalScore = 0\n        \n        for keyword in keywords {\n            let lowerKeyword = keyword.lowercased()\n            let singleScore = scoreOfSingleMatch(item: item, keyword: lowerKeyword, category: category)\n            if singleScore <= 0 {\n                return nil\n            } else {\n                totalScore += singleScore\n            }\n        }\n        return totalScore\n    }\n    \n    // 计算单个关键词在指定分类下的匹配分数\n    private func scoreOfSingleMatch<T: SearchDescribableItem>(\n        item: T,\n        keyword: String,\n        category: MatchCategory) -> Int {\n        \n        switch category {\n        case .stockSymbol, .etfSymbol:\n            return matchSymbol(item.symbol.lowercased(), keyword: keyword)\n        case .stockName, .etfName:\n            return matchName(item.name, keyword: keyword)\n        case .stockTag, .etfTag:\n            return matchTags(item.tag, keyword: keyword)\n        case .stockDescription, .etfDescription:\n            return matchDescriptions(item.description1, item.description2, keyword: keyword)\n        }\n    }\n    \n    private func matchSymbol(_ symbol: String, keyword: String) -> Int {\n        if symbol == keyword {\n            return 3\n        } else if symbol.contains(keyword) {\n            return 2\n        } else if isFuzzyMatch(text: symbol, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchName(_ name: String, keyword: String) -> Int {\n        let lowercasedName = name.lowercased()\n        let nameComponents = lowercasedName.components(separatedBy: \",\")\n        let mainName = nameComponents.first ?? lowercasedName\n        let nameWords = mainName.split(separator: \" \").map { String($0) }\n        \n        if lowercasedName == keyword {\n            return 4\n        } else if nameWords.contains(keyword) || mainName == keyword {\n            return 3\n        } else if mainName.contains(keyword) {\n            return 2\n        } else if lowercasedName.contains(keyword) {\n            return 1\n        } else if isFuzzyMatch(text: lowercasedName, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchTags(_ tags: [String], keyword: String) -> Int {\n        var maxScore = 0\n        for t in tags {\n            let lowerTag = t.lowercased()\n            var score = 0\n            if lowerTag == keyword {\n                score = 3\n            } else if lowerTag.contains(keyword) {\n                score = 2\n            } else if isFuzzyMatch(text: lowerTag, keyword: keyword, maxDistance: 1) {\n                score = 1\n            }\n            maxScore = max(maxScore, score)\n        }\n        return maxScore\n    }\n    \n    private func matchDescriptions(_ desc1: String, _ desc2: String, keyword: String) -> Int {\n        let d1 = desc1.lowercased()\n        let d2 = desc2.lowercased()\n        let words = d1.split(separator: \" \") + d2.split(separator: \" \")\n        \n        if words.contains(where: { String($0) == keyword }) {\n            return 2\n        } else if d1.contains(keyword) || d2.contains(keyword) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func isFuzzyMatch(text: String, keyword: String, maxDistance: Int) -> Bool {\n        if keyword.count <= 1 {\n            return text.contains(keyword)\n        }\n        let words = text.split(separator: \" \").map { String($0) }\n        return words.contains { levenshteinDistance($0, keyword) <= maxDistance }\n    }\n    \n    private func levenshteinDistance(_ s1: String, _ s2: String) -> Int {\n        let a = Array(s1)\n        let b = Array(s2)\n        let n = a.count\n        let m = b.count\n        \n        if n == 0 { return m }\n        if m == 0 { return n }\n        \n        var matrix = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n        for i in 0...n { matrix[i][0] = i }\n        for j in 0...m { matrix[0][j] = j }\n        \n        for i in 1...n {\n            for j in 1...m {\n                if a[i - 1] == b[j - 1] {\n                    matrix[i][j] = matrix[i - 1][j - 1]\n                } else {\n                    matrix[i][j] = min(\n                        matrix[i - 1][j] + 1,\n                        matrix[i][j - 1] + 1,\n                        matrix[i - 1][j - 1] + 1\n                    )\n                }\n            }\n        }\n        return matrix[n][m]\n    }\n    \n    // MARK: - 搜索历史\n    func loadSearchHistory() {\n        if let history = UserDefaults.standard.array(forKey: \"stockSearchHistory\") as? [String] {\n            self.searchHistory = history\n        }\n    }\n    \n    func addSearchHistory(term: String) {\n        let trimmedTerm = term.trimmingCharacters(in: .whitespaces)\n        guard !trimmedTerm.isEmpty else { return }\n        \n        if let index = self.searchHistory.firstIndex(where: { $0.lowercased() == trimmedTerm.lowercased() }) {\n            self.searchHistory.remove(at: index)\n        }\n        self.searchHistory.insert(trimmedTerm, at: 0)\n        \n        // 增加搜索历史记录保存条目的数量\n        if self.searchHistory.count > 20 {\n            self.searchHistory = Array(self.searchHistory.prefix(20))\n        }\n        UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n    }\n    \n    func removeSearchHistory(term: String) {\n        if let index = searchHistory.firstIndex(where: { $0.lowercased() == term.lowercased() }) {\n            searchHistory.remove(at: index)\n            UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n        }\n    }\n}\n"
            }
        ],
        "final_prompt": "portfoliview.swift是我项目里原有的文件，search.swift是我从别的项目中移植过来的文件，我的需求是：点击portfoliview里的这段“HStack {\n                            Image(systemName: \"magnifyingglass\")\n                            Text(\"Search for a symbol\")\n                        }”代码中的搜索按钮，直接去调用search.swift的搜索功能，不需要展示search.swift里面这块“struct SearchContentView: View {”的搜索按钮，直接通过这块“Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }”和这块“.navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        } ”来直接拉起搜索界面开始输入等操作。该怎么改代码实现？"
    },
    {
        "id": "2025-05-28 09:06:27",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            // console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 数据提取逻辑 (使用 aria-label 辅助定位，如果存在) ---\n                        // Symbol (通常在第一列)\n                        const symbolCell = row.querySelector('td[aria-label=\"Symbol\"]') || cells[0];\n                        if (symbolCell) {\n                            const symbolLink = symbolCell.querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                const symbolSpan = symbolLink.querySelector('span.symbol');\n                                symbol = symbolSpan ? symbolSpan.textContent.trim() : symbolLink.textContent.trim();\n                            } else { // 如果没有链接，直接取单元格文本\n                                symbol = symbolCell.textContent.trim();\n                            }\n                        }\n\n                        // Name (通常在第二列)\n                        const nameCell = row.querySelector('td[aria-label=\"Name\"]') || cells[1];\n                        if (nameCell) {\n                            const nameDiv = nameCell.querySelector('div[title]');\n                            name = nameDiv ? nameDiv.getAttribute('title').trim() : nameCell.textContent.trim();\n                        }\n\n                        // Price (查找包含 fin-streamer[data-field=\"regularMarketPrice\"])\n                        // 遍历所有单元格，直到找到包含价格的 fin-streamer\n                        for (let i = 0; i < cells.length; i++) {\n                            const priceStreamer = cells[i].querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                price = priceStreamer.getAttribute('data-value');\n                                break;\n                            }\n                        }\n\n                        // Volume (查找包含 fin-streamer[data-field=\"regularMarketVolume\"])\n                        for (let i = 0; i < cells.length; i++) {\n                            const volumeStreamer = cells[i].querySelector('fin-streamer[data-field=\"regularMarketVolume\"]');\n                            if (volumeStreamer) {\n                                volume = volumeStreamer.getAttribute('data-value');\n                                break;\n                            }\n                        }\n\n                        if (volume) {\n                            volume = volume.replace(/,/g, '');\n                        }\n\n                        // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex}: Symbol='${symbol}', Name='${name}', Price='${price}', Volume='${volume}'`);\n\n                        if (symbol && name && price && volume) {\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            // console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex}: Missing some data. S:${symbol}, N:${name}, P:${price}, V:${volume}`);\n                        }\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, row.innerHTML);\n                    }\n                });\n                console.log(`Yahoo ETF Scraper: content.js - Successfully processed ${results.length} ETFs from this page.`);\n                sendResponse({ success: true, data: results });\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table NOT found after all attempts for URL:\", window.location.href);\n                sendResponse({ success: false, error: 'Could not find the target ETF table on the page.' });\n            }\n        } catch (error) {\n            console.error('Yahoo ETF Scraper: content.js - Critical error in scrapeYahooETFs:', error);\n            sendResponse({ success: false, error: error.message });\n        }\n        return true;\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "之前运行一切正常，今天发现打开页面，也加载完成，但是没抓到任何东西。不知道是不是页面代码改变导致抓取失灵，这是要抓取的今天的新的页面代码“<body id=\"atomic\">\n<div id=\"sda-E2E\" class=\"sdaContainer tw-flex tw-justify-center hideOnPrin t\" style=\"min-height: 90px;\" data-google-query-id=\"CPGx4Lj7xI0DFeXzTAIdhDs\na9A\">•</div> flex\n<div id=\"svelte\">\n<<script type=\"module\">@</script>\n<div id=\"app-err-banner\" style=\"display: none;\">∞</div>\n<script type=\"application/json\" id=\"fin-trending-tickers\">@</script> <progress max=\"100\" aria-label=\"Page loading\" class=\"yf-12dks8q\" value=\n\"g\"></progress>\n<div data-ad-config=\"large-placeholder-eZe\" class=\"yf-ktwq3d\"></div>\n<header class=\"hideOnPrint yf-r31bp3\">∞</header>\n<section class=\"theme-dialog-wrapper yf-1bt0dri\">@</section>\n<main class=\"layoutContainer yf-1xsmqro\" id=\"nimbus-app\" tabindex=\"-1\"> flex)\n<section class=\"mainContainer yf-1xsmqro\"> flex\n<section class=\"mainContent yf-1xsmqro\"> flex\n<aside class=\"left yf-1xsmqro\" aria-label=\"Left navigation\">•\n</aside>\n<section class=\"main yf-1xsmqro\"> flex\n<article class=\"gridLayout yf-1xsmqro\"> grid\n<section class=\"yf-12mq010\"> flex\n<header class=\"large mb-0 yf-13lpgjv font-condensed\">••.\n</header> flex\n<div class=\"container yf-j24h8w\"> (flex\n<nav aria-label=\"etfs\" class=\" l1 yf-x2pyjv\">∞</nav>\n<div class=\"tableContainer yf-j24h8w\"> flex\n<div class=\"table-container cs-regular tw-border-none yf-\n1570k0a\"> (scroll)\n<table class=\"yf-1570k0a bd\">\n<thead class=\"yf-1570k0a\">@</thead>\n<tbody>\n<tr class=\"row yf-1570k0a\">\n<td class=\" [&_. symbol]: tw-text-md yf-1570k0a lpin shad\" style=\"—-_depth: undefined;\"> ‹div style=\"display: contents; --background-colo\nr: transparent; --hover-bg-color: transparent; -h over-color:var(--enabled-active-emph); --text-co lor: var (--enabled-active-emph); --hover-focus-co lor: var (--hovered-emph-same); --text-decoration: underline;\">\n<span class=\"ticker-wrapper yf-oaxebo\"> i\n<a data-testid=\"table-cell-ticker\" class- tic ker medium [&-symboll: tw-text-md hover noPad ding yf-oaxebo\" aria-label=\"ProShares Ultra Q QQ\" data-ylk=\"elm: qte; elmt: link; itc:0; sec: etf\ns-datatable; slk:QLD\" href=\"/quote/QLD/\" title=\"ProShares Ultra QQQ\" data-rapid_p=\"20\" data-v9y=\"1\"> (flex\n<div class=\"name yf-oaxebo\"> flex\n<span class=\"symbol yf-oaxebo\">QLD</span>\n</div>\n</a>\n</span>\n</div>\n</td>\n<<td class=\"leftAlignHeader yf-1570k0a\" style=\"—-_d epth: undefined;\">\n<div title=\"ProShares Ultra QQQ\" class=\"leftAlign Header yf-362rys enableMaxWidth\">ProShares Ultra\nQQQ</div>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d;\">∞</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d; \"> <div class>\n<fin-streamer data-test=\"change\" data-symbol=\"Q\nLD\" data-field=\"regularMarketPrice\" data-trend=\n\"none\" data-pricehint=\"2\" data-value=\"105.63\" active>105.63</fin-streamer>\n<div class=\"hide-desktop hide-mw txt-positive\">\n</div>\n</div>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine\nd; \"></td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine\nd;\"> @</td>\n<td class=\" yf-1570k0a\" style=\"--_depth: undefine d;\">\n<fin-streamer data-test=\"change\" data-symbol=\"QL\nD\" data-field=\"regularMarketVolume\" data-trend=\"n one\" data-pricehint=\"?\" data-value=\"2327111\" active>2.327M</fin-streamer>\n</td> == $0”，其中这句“<span class=\"symbol yf-oaxebo\">QLD</span>”里的QLD是symbol，这句“<div title=\"ProShares Ultra QQQ\" class=\"leftAlign Header yf-362rys enableMaxWidth\">ProShares Ultra\nQQQ</div>\n”里的ProShares Ultra\nQQQ是name，这句“<fin-streamer data-test=\"change\" data-symbol=\"Q\nLD\" data-field=\"regularMarketPrice\" data-trend=\n\"none\" data-pricehint=\"2\" data-value=\"105.63\" active>105.63</fin-streamer>”里的105.63是price，这句“<fin-streamer data-test=\"change\" data-symbol=\"QL\nD\" data-field=\"regularMarketVolume\" data-trend=\"n one\" data-pricehint=\"?\" data-value=\"2327111\" active>2.327M</fin-streamer>\n”里的2.327.M是volume，你看看是否需要修改代码以便于抓取到内容？"
    },
    {
        "id": "2025-05-28 16:41:21",
        "project_name": "Firstrade",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/AccountProfileView.swift",
                "filename": "AccountProfileView.swift",
                "content": "import SwiftUI\n\n// MARK: - Common Colors (can be centralized if used across many files)\nprivate let pageBackgroundColorGlobal = Color(red: 25 / 255, green: 30 / 255, blue: 39 / 255)  // #191E27\nprivate let primaryTextColorGlobal = Color.white\nprivate let secondaryTextColorGlobal = Color(white: 0.65)  // For dimmer text like account numbers in headers\nprivate let descriptiveTextColorGlobal = Color(white: 0.75)  // For body/description text\nprivate let separatorColorGlobal = Color(white: 0.35)\nprivate let accentBlueColorGlobal = Color(hex: \"3B82F6\")  // Standard blue for buttons\nfileprivate let certifiedBadgeBackgroundColor = Color(red: 70/255, green: 115/255, blue: 95/255) // Muted dark green (same as \"Enrolled\")\nfileprivate let certifiedBadgeTextColor = Color.white\nfileprivate let infoBoxBackgroundColor = Color(red: 40/255, green: 48/255, blue: 60/255) // Darker blue-gray for info box\n\n// MARK: - Account Profile View and its components\n\nstruct AccountProfileView: View {\n    let accountNumber: String = \"90185542\"  // Sample data\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            VStack(alignment: .leading, spacing: 0) {\n                // Account Number Display - Using the new reusable header\n                AccountHeaderView(\n                    accountNumber: accountNumber,\n                    textColor: secondaryTextColorGlobal,  // Dimmer text for header\n                    iconName: \"line.horizontal.3\"\n                )\n                .padding(.leading, 16)  // Original padding for this specific layout\n                .padding(.top, 20)\n                .padding(.bottom, 25)\n\n                // Trading Privileges Row - MODIFIED\n                NavigationLink(\n                    destination: TradingPrivilegesView(accountNumber: self.accountNumber)\n                ) {\n                    AccountDetailRow(\n                        title: \"Trading Privileges\",\n                        details: \"Margin, Options, Extended Hour Trading\"\n                    )\n                }\n                CustomDividerView(color: separatorColorGlobal, leadingPadding: 16)\n\n                // MODIFIED: NavigationLink for Required Documents\n                NavigationLink(destination: RequiredDocumentsView(accountNumber: self.accountNumber)) {\n                    AccountDetailRow(\n                        title: \"Required Documents\",\n                        details: \"W-8BEN\"\n                    )\n                }\n                CustomDividerView(color: separatorColorGlobal, leadingPadding: 16)\n\n                Spacer()\n            }\n        }\n        .navigationTitle(\"Account Profile\")\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n        }\n    }\n}\n\n// Reusable struct for rows in AccountProfileView\nstruct AccountDetailRow: View {\n    let title: String\n    let details: String\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 5) {\n                Text(title)\n                    .font(.system(size: 17))\n                    .foregroundColor(primaryTextColorGlobal)\n                Text(details)\n                    .font(.system(size: 14))\n                    .foregroundColor(secondaryTextColorGlobal)  // Dimmer subtitle\n                    .lineLimit(1)\n            }\n            Spacer()\n            Image(systemName: \"chevron.right\")\n                .font(.system(size: 14, weight: .semibold))\n                .foregroundColor(Color(white: 0.55))\n        }\n        .padding(.horizontal, 16)\n        .padding(.vertical, 16)\n        .background(pageBackgroundColorGlobal)\n    }\n}\n\n// MARK: - Trading Privileges View and its components\n\n// Reusable Account Header\nstruct AccountHeaderView: View {\n    let accountNumber: String\n    let textColor: Color\n    let iconName: String  // e.g., \"line.horizontal.3\"\n\n    var body: some View {\n        HStack(spacing: 8) {\n            Text(accountNumber)\n                .font(.system(size: 15))\n                .foregroundColor(textColor)\n            Image(systemName: iconName)\n                .font(.system(size: 15, weight: .semibold))\n                .foregroundColor(textColor)\n        }\n    }\n}\n\n// Custom Divider View\nstruct CustomDividerView: View {\n    let color: Color\n    let height: CGFloat = 0.5\n    let leadingPadding: CGFloat\n\n    var body: some View {\n        Rectangle()\n            .frame(height: height)\n            .foregroundColor(color)\n            .padding(.leading, leadingPadding)\n    }\n}\n\nstruct TradingPrivilegesView: View {\n    let accountNumber: String\n\n    // Colors specific to or customized for TradingPrivilegesView\n    private let checkmarkColor = Color(red: 64 / 255, green: 192 / 255, blue: 160 / 255)  // Tealish green\n    private let enrolledBadgeBackgroundColor = Color(\n        red: 70 / 255, green: 115 / 255, blue: 95 / 255)  // Muted dark green\n    private let enrolledBadgeTextColor = Color.white\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            ScrollView {\n                VStack(alignment: .leading, spacing: 0) {  // Overall container for content\n                    // THIS SECTION HAS BEEN REMOVED:\n                    // // Account Number Header\n                    // AccountHeaderView(\n                    //     accountNumber: accountNumber,\n                    //     textColor: secondaryTextColorGlobal, // Dimmer text for header\n                    //     iconName: \"line.horizontal.3\"\n                    // )\n                    // .padding(.top, 5)\n                    // .padding(.bottom, 20)\n\n                    // Margin Trading Section\n                    TradingSectionView(\n                        title: \"Margin Trading\",\n                        description: \"This account is not yet approved for margin.\",\n                        buttonText: \"Upgrade\",\n                        buttonAction: {\n//                            print(\"Margin Upgrade Tapped for account: \\(accountNumber)\")  // accountNumber might still be useful for actions\n                            // Add navigation or action logic here\n                        },\n                        items: [],\n                        statusBadgeText: nil,\n                        colors: sectionColors\n                    )\n                    CustomDividerView(color: separatorColorGlobal, leadingPadding: 0)  // Full width divider\n\n                    // Options Trading Section\n                    TradingSectionView(\n                        title: \"Options Trading\",\n                        description: \"Your account is already approved for level 2 option trading.\",\n                        buttonText: \"Upgrade\",\n                        buttonAction: {\n                            print(\"Options Upgrade Tapped\")\n                            // Add navigation or action logic here\n                        },\n                        items: [\n                            \"Write Covered Calls\",\n                            \"Write Cash-Secured Equity Puts\",\n                            \"Purchase Calls and Puts\",\n                        ],\n                        statusBadgeText: nil,\n                        colors: sectionColors\n                    )\n                    CustomDividerView(color: separatorColorGlobal, leadingPadding: 0)  // Full width divider\n\n                    // Extended Hour Trading Section\n                    TradingSectionView(\n                        title: \"Extended Hour Trading\",\n                        description: \"This account is approved for Extended Hour Trading\",\n                        buttonText: nil,  // No button\n                        buttonAction: {},\n                        items: [],\n                        statusBadgeText: \"Enrolled\",\n                        colors: sectionColors\n                    )\n                    // No divider after the last section\n\n                    Spacer()  // Ensures content pushes up if ScrollView is not full\n                }\n                .padding(.horizontal, 16)  // Horizontal padding for all content inside ScrollView\n            }\n        }\n        .navigationTitle(\"Account Profile\")  // Title remains \"Account Profile\" as per screenshot\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n            // Back button will be automatically handled by NavigationView\n        }\n    }\n\n    private var sectionColors: TradingSectionView.Colors {\n        TradingSectionView.Colors(\n            primaryText: primaryTextColorGlobal,\n            descriptionText: descriptiveTextColorGlobal,  // Specific color for descriptions\n            sectionTitle: primaryTextColorGlobal,  // Section titles are primary white\n            buttonBackground: accentBlueColorGlobal,\n            buttonText: primaryTextColorGlobal,  // White text on blue button\n            checkmark: checkmarkColor,\n            badgeBackground: enrolledBadgeBackgroundColor,\n            badgeText: enrolledBadgeTextColor\n        )\n    }\n}\n\nstruct TradingSectionView: View {\n    struct Colors {\n        let primaryText: Color\n        let descriptionText: Color\n        let sectionTitle: Color\n        let buttonBackground: Color\n        let buttonText: Color\n        let checkmark: Color\n        let badgeBackground: Color\n        let badgeText: Color\n    }\n\n    let title: String\n    let description: String\n    let buttonText: String?\n    let buttonAction: () -> Void\n    let items: [String]\n    let statusBadgeText: String?\n    let colors: Colors\n\n    var body: some View {\n        VStack(alignment: .leading, spacing: 12) {\n            HStack {\n                Text(title)\n                    .font(.system(size: 20, weight: .semibold))\n                    .foregroundColor(colors.sectionTitle)\n                Spacer()\n                if let badgeText = statusBadgeText {\n                    Text(badgeText)\n                        .font(.system(size: 12, weight: .medium))\n                        .foregroundColor(colors.badgeText)\n                        .padding(.horizontal, 10)\n                        .padding(.vertical, 5)  // Adjusted padding for badge\n                        .background(colors.badgeBackground)\n                        .clipShape(Capsule())\n                }\n            }\n            .padding(.top, 20)\n\n            Text(description)\n                .font(.system(size: 15))\n                .foregroundColor(colors.descriptionText)  // Use specific description color\n                .lineSpacing(4)\n\n            if !items.isEmpty {\n                VStack(alignment: .leading, spacing: 10) {  // Increased spacing for checklist items\n                    ForEach(items, id: \\.self) { item in\n                        HStack(spacing: 10) {\n                            Image(systemName: \"checkmark\")\n                                .foregroundColor(colors.checkmark)\n                                .font(.system(size: 14, weight: .semibold))\n                            Text(item)\n                                .font(.system(size: 15))\n                                .foregroundColor(colors.descriptionText)  // Checklist items also use description color\n                        }\n                    }\n                }\n                .padding(.top, 8)  // Space before checklist\n            }\n\n            if let btnText = buttonText {\n                Button(action: buttonAction) {\n                    Text(btnText)\n                        .font(.system(size: 17, weight: .medium))\n                        .foregroundColor(colors.buttonText)\n                        .frame(height: 48)\n                        .frame(maxWidth: .infinity)\n                        .background(colors.buttonBackground)\n                        .cornerRadius(8)\n                }\n                .padding(.top, 16)\n            }\n        }\n        .padding(.bottom, 20)  // Space after section content before a potential divider\n    }\n}\n\n// MARK: - Required Documents View (NEW)\n\nstruct RequiredDocumentsView: View {\n    let accountNumber: String\n\n    // Sample data for the view\n    let lastFiledDate: String = \"08/16/2024\"\n    let renewedByDate: String = \"12/31/2027\"\n    let infoText: String = \"*W-8BEN form must be renewed every three years.\"\n\n    var body: some View {\n        ZStack {\n            pageBackgroundColorGlobal.ignoresSafeArea()\n\n            ScrollView {\n                VStack(alignment: .leading, spacing: 16) { // Consistent spacing for content blocks\n                    AccountHeaderView(\n                        accountNumber: accountNumber,\n                        textColor: secondaryTextColorGlobal,\n                        iconName: \"line.horizontal.3\"\n                    )\n                    // No horizontal padding here, as the parent VStack will have it.\n                    .padding(.bottom, 10) // Reduced bottom padding slightly, adjust as needed\n\n                    // W-8BEN Form Section\n                    VStack(alignment: .leading, spacing: 12) {\n                        HStack {\n                            Text(\"W-8BEN Form\")\n                                .font(.system(size: 20, weight: .semibold))\n                                .foregroundColor(primaryTextColorGlobal)\n                            Spacer()\n                            Text(\"Certified\")\n                                .font(.system(size: 12, weight: .medium))\n                                .foregroundColor(certifiedBadgeTextColor)\n                                .padding(.horizontal, 12) // Slightly more horizontal padding for balance\n                                .padding(.vertical, 6)   // Slightly more vertical padding\n                                .background(certifiedBadgeBackgroundColor)\n                                .clipShape(Capsule())\n                        }\n\n                        Text(\"Last filed: \\(lastFiledDate)\")\n                            .font(.system(size: 15))\n                            .foregroundColor(descriptiveTextColorGlobal)\n\n                        Text(\"Renewed by: \\(renewedByDate)\")\n                            .font(.system(size: 15))\n                            .foregroundColor(descriptiveTextColorGlobal)\n                            .padding(.bottom, 8) // Add a bit of space before the info box\n\n                        // Info Box\n                        Text(infoText)\n                            .font(.system(size: 14))\n                            .foregroundColor(primaryTextColorGlobal.opacity(0.9)) // Slightly less bright for info text\n                            .padding(12) // Uniform padding inside the box\n                            .frame(maxWidth: .infinity, alignment: .leading) // Ensure it takes full width\n                            .background(infoBoxBackgroundColor)\n                            .cornerRadius(8)\n                            .padding(.bottom, 16) // Space after info box before button\n\n                        // Renew Button\n                        Button(action: {\n                            print(\"Renew button tapped for W-8BEN, account: \\(accountNumber)\")\n                            // Add renew action logic here\n                        }) {\n                            Text(\"Renew\")\n                                .font(.system(size: 17, weight: .medium))\n                                .foregroundColor(primaryTextColorGlobal)\n                                .frame(height: 48)\n                                .frame(maxWidth: .infinity)\n                                .background(accentBlueColorGlobal)\n                                .cornerRadius(8)\n                        }\n                    }\n                    Spacer() // Pushes content up if ScrollView is not full\n                }\n                .padding(.horizontal, 16) // Horizontal padding for all content inside ScrollView\n                .padding(.top, 5)        // Top padding for the content area inside ScrollView\n            }\n        }\n        .navigationTitle(\"Account Profile\") // Title remains \"Account Profile\"\n        .navigationBarTitleDisplayMode(.inline)\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                Text(\"Account Profile\")\n                    .font(.headline)\n                    .foregroundColor(primaryTextColorGlobal)\n            }\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Firstrade/Firstrade/FirstradeApp.swift",
                "filename": "FirstradeApp.swift",
                "content": "import SwiftUI\n\n@main\nstruct FristradeAppApp: App {\n    // ① 全局状态\n    @StateObject private var session = SessionStore()\n\n    var body: some Scene {\n        WindowGroup {\n            // ② 根据登录状态切换\n            if session.isLoggedIn {\n                MainTabView()\n                    .environmentObject(session)\n            } else {\n                LoginView()\n                    .environmentObject(session)\n            }\n        }\n    }\n}\n\n// Helper for hex color\nextension Color {\n    init(hex: String) {\n        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n        var int: UInt64 = 0\n        Scanner(string: hex).scanHexInt64(&int)\n        let a, r, g, b: UInt64\n        switch hex.count {\n        case 3: // RGB (12-bit)\n            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)\n        case 6: // RGB (24-bit)\n            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)\n        case 8: // ARGB (32-bit)\n            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)\n        default:\n            (a, r, g, b) = (255, 0, 0, 0) // Default to black with full alpha on error\n        }\n\n        self.init(\n            .sRGB,\n            red: Double(r) / 255,\n            green: Double(g) / 255,\n            blue:  Double(b) / 255,\n            opacity: Double(a) / 255\n        )\n    }\n}\n"
            }
        ],
        "final_prompt": "我需要修改的是account profile页面，我想在\"required documents\"下面再增加两行，一行标题叫“Phone Number”对应上一行的Required documents，下面的小字是“139****705”，对应W-8BEN，再下面一行的标题叫“Email”，下面的小字是“sskey***@hotmail.com”，保持整个界面风格统一，同时，这新增的两行跟之前的行区别就是不要出现右边的尖括号，也不需要可以点击。该怎么做？"
    },
    {
        "id": "2025-05-31 11:58:42",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            // 尝试查找 fin-streamer (旧逻辑，可能不再有效)\n                            let priceStreamer = cells[headerIndexMap.price].querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer && priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                price = priceStreamer.getAttribute('value').trim();\n                            } else { // 如果 fin-streamer 找不到或没有value，直接取单元格文本\n                                price = cells[headerIndexMap.price].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, cells[headerIndexMap.price].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "附件是程序运行后生成的csv文件，其中price字段里的内容是这样的“21.54 +0.77 (+3.71%)”，这是要抓取页面的代码“<td class=\" yf-1570kla\" style\"-_depth: und ne\n<div class>\n<fin-streamer data-test=\"change\" data-symbol=\"B\nLCN\" data-field=\"regularMarketPrice\" data-trend=\"none\" data-pricehint=\"2\" data-value=\"21.\n54\" active>21.54</fin-streamer>\n<div class=\"hide-desktop hide-mw txt-positiv e\">\n<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\"regularMarketChang e\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"0.77000046\" active>.</fin-streamer>\n<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-template=\"({fmt})\" data-\nfield=\"regularMarketChangePercent\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"3.\n7072723\" active>•</fin-streamer>\n</div>\n</div>\n</td>\n<td class=\" yf-1570ka\" style=\"—-_depth: undefine d;\">\n+ <fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\"regularMarketChange\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\n\"0.77000046\" data-tstyle=\"default\" active>\n<span class=\"txt-positive\">\n\"+\"\n\"0.77\"\n</ span>\n</fin-streamer>\n</td>\n<td class=\" yf-1570k0a\" style=\"—-_depth: undefine d; \"> +<fin-streamer data-test=\"colorChange\" data-symbol=\"BLCN\" data-field=\" regularMarketChangePer cent\" data-trend=\"txt\" data-pricehint=\"2\" data-value=\"3.7072723\" data-tstyle=\"default\" active>\n<span class=\"txt-positive\">\n\"+\"\n\"3.71%\"\n</ span>\n</fin-streamer>\n</td>”，也就是说目前程序把price、change、change%三个数据都抓过来写在一个格内，我需要的只是price一个数值而已（也就是21.54），该怎么改代码实现？"
    },
    {
        "id": "2025-05-31 12:26:04",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            }
        ],
        "final_prompt": "附件是运行后生成的csv，里面volume内容有问题：目前是有带逗号的“5,036”，有带M的“4.584M”，还有可能带B的...我需要都格式化成整数，比如刚才的两个，应改为“5036”和“4584000”之类的，该怎么做？"
    },
    {
        "id": "2025-05-31 14:27:21",
        "project_name": "insertdb",
        "project_desc": "我有一个Python开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/Compare_Insert.py",
                "filename": "Compare_Insert.py",
                "content": "import csv\nimport json\nimport sqlite3\nfrom datetime import date, timedelta\nimport os\nimport glob\nimport time\nimport subprocess\n\n# --- 配置 ---\njson_file_path = '/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json'\nblacklist_json_path = '/Users/yanzhang/Documents/Financial_System/Modules/Blacklist.json'\ndb_file_path = '/Users/yanzhang/Documents/Database/Finance.db'\noutput_dir = '/Users/yanzhang/Documents/News'\noutput_txt_file = os.path.join(output_dir, 'ETFs_new.txt')\n\ndef count_files(prefix):\n    \"\"\"\n    计算Downloads目录中指定前缀开头的文件数量\n    \"\"\"\n    download_dir = \"/Users/yanzhang/Downloads/\"\n    files = glob.glob(os.path.join(download_dir, f\"{prefix}_*.csv\"))\n    return len(files)\n\n# --- 1. 计算昨天的日期 ---\nyesterday = date.today() - timedelta(days=1)\nyesterday_str = yesterday.strftime('%Y-%m-%d')\n\nscript = '''\n    delay 1\n    tell application \"Google Chrome\"\n\t    activate\n    end tell\n    delay 0.5\n    tell application \"System Events\"\n        keystroke \"c\" using option down\n    end tell\n    '''\n# 运行AppleScript\nsubprocess.run(['osascript', '-e', script])\n\n# —— 原有等待 topetf_*.txt 的逻辑，直到文件出现 —— \nwhile count_files(\"topetf\") < 1:\n    time.sleep(2)\n    print(\".\", end=\"\", flush=True)\n\n# # 查找Downloads目录下最新的topetf_开头的txt文件\ndownloads_path = '/Users/yanzhang/Downloads/'\ntopetf_files = glob.glob(os.path.join(downloads_path, 'topetf_*.csv'))\n\n# # 按文件修改时间排序，获取最新的文件\ntopetf_file = max(topetf_files, key=os.path.getmtime)\nprint(f\"使用 topetf 文件: {topetf_file}\")\n\n# --- 2. 读取 JSON 文件中的 ETF 列表 ---\ntry:\n    with open(json_file_path, 'r', encoding='utf-8') as f:\n        sectors_data = json.load(f)\n    # 使用集合以便快速查找，如果 \"ETFs\" 键不存在或不是列表，则使用空列表\n    known_etfs = set(sectors_data.get('ETFs', []))\n    if not known_etfs:\n        print(f\"警告: JSON文件 '{json_file_path}' 中 'ETFs' 列表为空或不存在。\")\nexcept FileNotFoundError:\n    print(f\"错误: JSON 文件 '{json_file_path}' 未找到。脚本将退出。\")\n    exit()\nexcept json.JSONDecodeError:\n    print(f\"错误: JSON 文件 '{json_file_path}' 格式无效。脚本将退出。\")\n    exit()\nexcept Exception as e:\n    print(f\"读取JSON文件时发生未知错误: {e}。脚本将退出。\")\n    exit()\n\n# --- 新增：读取 Blacklist JSON 文件中的 ETF 黑名单 ---\netf_blacklist = set() # 初始化为空集合，以防文件读取失败\ntry:\n    with open(blacklist_json_path, 'r', encoding='utf-8') as f_blacklist:\n        blacklist_data = json.load(f_blacklist)\n    # 安全地获取 'etf' 列表，如果键不存在或不是列表，则使用空列表\n    etf_blacklist = set(blacklist_data.get('etf', []))\n    if not etf_blacklist:\n        print(f\"信息: Blacklist JSON文件 '{blacklist_json_path}' 中 'etf' 列表为空或不存在。\")\nexcept FileNotFoundError:\n    print(f\"警告: Blacklist JSON 文件 '{blacklist_json_path}' 未找到。将继续执行，不使用ETF黑名单过滤。\")\nexcept json.JSONDecodeError:\n    print(f\"警告: Blacklist JSON 文件 '{blacklist_json_path}' 格式无效。将继续执行，不使用ETF黑名单过滤。\")\nexcept Exception as e:\n    print(f\"读取Blacklist JSON文件 '{blacklist_json_path}' 时发生未知错误: {e}。将继续执行，不使用ETF黑名单过滤。\")\n\n# --- 3. 确保输出目录存在 ---\nos.makedirs(output_dir, exist_ok=True)\n\n# --- 4. 初始化用于数据库插入和文件写入的列表 ---\netfs_to_db = []\nnew_etfs_to_file = []\n\n# --- 5. 读取 CSV 文件并处理数据 ---\ntry:\n    with open(topetf_file, mode='r', encoding='utf-8-sig') as csvfile: # utf-8-sig 处理可能的BOM\n        reader = csv.DictReader(csvfile)\n        if not reader.fieldnames or not all(col in reader.fieldnames for col in ['Symbol', 'Name', 'Price', 'Volume']):\n            print(f\"错误: CSV文件 '{topetf_file}' 缺少必要的列 (Symbol, Name, Price, Volume)。\")\n            exit()\n\n        for row in reader:\n            symbol = row.get('Symbol')\n            name = row.get('Name')\n            price_str = row.get('Price')\n            volume_str = row.get('Volume')\n\n            # 基本的数据校验\n            if not all([symbol, name, price_str, volume_str]):\n                print(f\"警告: CSV文件中发现不完整的行: {row}。跳过此行。\")\n                continue\n\n            try:\n                price_original = float(price_str) # 先转换为浮点数\n                volume = int(volume_str)\n            except ValueError:\n                print(f\"警告: 无法转换行 {row} 中的Price或Volume为数值。跳过此行。\")\n                continue\n\n            if symbol in known_etfs:\n                # 将 price 四舍五入到两位小数\n                price_rounded = round(price_original, 2)\n                # 数据库表结构: id, date, name, price, volume\n                # CSV Symbol -> DB name\n                etfs_to_db.append((yesterday_str, symbol, price_rounded, volume))\n            else:\n                # 条件1: volume > 200,000\n                if volume > 200000:\n                    # 条件2: symbol 不在 ETF 黑名单中\n                    if symbol not in etf_blacklist:\n                        new_etfs_to_file.append(f\"{symbol}: {name}, {volume}\")\n\nexcept FileNotFoundError:\n    print(f\"错误: CSV 文件 '{topetf_file}' 未找到。脚本将退出。\")\n    exit()\nexcept Exception as e:\n    print(f\"读取CSV文件时发生未知错误: {e}。脚本将退出。\")\n    exit()\n\n# --- 6. 将匹配的 ETF 数据写入数据库 ---\nif etfs_to_db:\n    conn = None # 初始化conn\n    try:\n        conn = sqlite3.connect(db_file_path)\n        cursor = conn.cursor()\n        # 注意：假设 ETFs 表已经存在，并且有 date, name, price, volume 列\n        # id 列通常是 PRIMARY KEY AUTOINCREMENT，不需要显式插入\n        sql_insert = \"INSERT INTO ETFs (date, name, price, volume) VALUES (?, ?, ?, ?)\"\n        cursor.executemany(sql_insert, etfs_to_db)\n        conn.commit()\n        print(f\"成功将 {len(etfs_to_db)} 条匹配的ETF数据写入数据库 '{db_file_path}'。\")\n    except sqlite3.Error as e:\n        print(f\"数据库错误: {e}\")\n        if conn:\n            conn.rollback() # 如果发生错误，回滚事务\n    finally:\n        if conn:\n            conn.close()\nelse:\n    print(\"没有在JSON中匹配到任何ETF，无需写入数据库。\")\n\n# --- 7. 将未匹配的 ETF 数据写入文本文件 ---\nif new_etfs_to_file:\n    try:\n        with open(output_txt_file, 'a', encoding='utf-8') as txtfile: # 'a' 表示追加模式\n            for line in new_etfs_to_file:\n                txtfile.write(line + '\\n')\n        print(f\"成功将 {len(new_etfs_to_file)} 条新的ETF数据写入文件 '{output_txt_file}'。\")\n    except IOError as e:\n        print(f\"写入文件 '{output_txt_file}' 时发生错误: {e}\")\nelse:\n    print(\"没有新的ETF需要写入文件。\")\n\nprint(\"脚本执行完毕。\")"
            }
        ],
        "final_prompt": "附件是程序执行时读取的csv文件，另外我的Sqlite3的Finance.db数据库里的ETFs表里的结构如下“id       date        name  price           volume    \n-------  ----------  ----  --------------  ----------\n621125   2002-09-03  DIA   83.16           12002400  \n154923   2002-09-03  EWC   9.3             6735700   \n219044   2002-09-03  EWD   9.51            1200      \n643161   2002-09-03  EWL   11.05           24200     \n719024   2002-09-03  EWM   22.8            10500     \n102436   2002-09-03  EWT   16.2            7600    ”，你看下根据代码和csv文件内容，这个程序能否正确的把csv中的数据写入数据库表中？"
    },
    {
        "id": "2025-05-31 15:57:00",
        "project_name": "topetf",
        "project_desc": "我有一个js开发的chrome插件程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, volume = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n                        if (cells[headerIndexMap.volume]) {\n                            // 尝试查找 fin-streamer (旧逻辑)\n                            let volumeStreamer = cells[headerIndexMap.volume].querySelector('fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]');\n                            if (volumeStreamer && volumeStreamer.hasAttribute('value') && volumeStreamer.getAttribute('value').trim() !== \"\") {\n                                volume = volumeStreamer.getAttribute('value').trim();\n                            } else { // 直接取单元格文本\n                                volume = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Volume Cell Content:`, cells[headerIndexMap.volume].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Volume:`, volume);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Volume cell not found using index ${headerIndexMap.volume}.`);\n                        }\n\n\n                        if (symbol && name && price !== null && volume !== null) { // price 和 volume 可以是 0\n                            results.push({ symbol, name, price, volume });\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Missing data, skipping. Symbol: ${symbol}, Name: ${name}, Price: ${price}, Volume: ${volume}`);\n                        }\n\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            }
        ],
        "final_prompt": "附件是运行后生成的csv，里面volume内容有问题：目前是有带逗号的“5,036”，有带M的“4.584M”，还有可能带B的...我需要都格式化成整数，比如刚才的两个，应改为“5036”和“4584000”之类的，该怎么做？"
    },
    {
        "id": "2025-06-03 19:49:31",
        "project_name": "topetf",
        "project_desc": "我有一个JavaScript和html发的chrome插件程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/manifest.json",
                "filename": "manifest.json",
                "content": "{\n    \"manifest_version\": 3,\n    \"name\": \"TopETFs Scraper\",\n    \"version\": \"1.0\",\n    \"description\": \"Scrapes ETF data from Yahoo Finance\",\n    \"permissions\": [\n        \"activeTab\",\n        \"scripting\",\n        \"downloads\",\n        \"storage\"\n    ],\n    \"host_permissions\": [\n        \"https://finance.yahoo.com/*\"\n    ],\n    \"action\": {\n        \"default_popup\": \"popup.html\"\n    },\n    \"background\": {\n        \"service_worker\": \"background.js\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"https://finance.yahoo.com/markets/etfs/top/*\"\n            ],\n            \"js\": [\n                \"content.js\"\n            ]\n        }\n    ]\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.html",
                "filename": "popup.html",
                "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Yahoo ETF Scraper</title>\n    <style>\n        body {\n            width: 350px;\n            /* Increased width for longer messages */\n            padding: 10px;\n            font-family: Arial, sans-serif;\n        }\n\n        #status {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f1f1f1;\n            max-height: 250px;\n            /* Increased height */\n            overflow-y: auto;\n            font-size: 12px;\n            /* Slightly smaller font for more logs */\n        }\n\n        .log-item {\n            margin: 5px 0;\n            word-wrap: break-word;\n            /* Ensure long messages wrap */\n        }\n\n        .success {\n            color: green;\n        }\n\n        .error {\n            color: red;\n        }\n\n        .info {\n            color: #4285f4;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-top: 10px;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n\n<body>\n    <h2>Yahoo ETF Scraper</h2>\n    <!-- Remove the button element below -->\n    <!-- <button id=\"startScrapeButton\">Start Scraping ETFs</button> -->\n    <div id=\"status\">\n        <div class=\"log-item info\">Ready to start scraping.</div>\n    </div>\n    <script src=\"popup.js\"></script>\n</body>\n\n</html>"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/popup.js",
                "filename": "popup.js",
                "content": "document.addEventListener('DOMContentLoaded', function () {\n    const statusDiv = document.getElementById('status');\n    // Remove the line below:\n    // const startButton = document.getElementById('startScrapeButton');\n\n    function addLogMessage(message, type = 'info') {\n        const logItem = document.createElement('div');\n        logItem.className = `log-item ${type}`;\n        logItem.textContent = message;\n        statusDiv.appendChild(logItem);\n        statusDiv.scrollTop = statusDiv.scrollHeight; // Auto-scroll to the latest message\n    }\n\n    // Add the message sending logic here to start scraping automatically\n    addLogMessage('Popup loaded. Starting scraping process automatically.', 'info');\n    chrome.runtime.sendMessage({ action: 'startYahooScraping' }, function (response) {\n        if (chrome.runtime.lastError) {\n            addLogMessage(`Error starting scraping: ${chrome.runtime.lastError.message}`, 'error');\n            // If there's an error starting, maybe show a retry message or similar\n        } else if (response && response.status === 'started') {\n            addLogMessage('Background process for Yahoo ETFs initiated.', 'info');\n        } else {\n            addLogMessage('Failed to start background process or no response.', 'error');\n        }\n    });\n\n\n    // Listen for status updates and CSV download requests\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'statusUpdate') { // Changed from 'status' to avoid conflict\n            addLogMessage(message.text, message.logType || 'info');\n            // Remove the line below:\n            // if (message.completed) {\n            //     startButton.disabled = false;\n            //     startButton.textContent = 'Start Scraping ETFs';\n            // }\n        } else if (message.type === 'csvData') {\n            // This part handles the download triggered by background.js\n            const blob = new Blob([message.data], { type: 'text/csv;charset=utf-8;' });\n            const url = URL.createObjectURL(blob);\n\n            // Create a temporary link to trigger download\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = message.filename;\n            document.body.appendChild(a);\n            a.click();\n\n            // Clean up\n            setTimeout(() => {\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                addLogMessage(`Download initiated for \"${message.filename}\". Check your downloads folder.`, 'success');\n            }, 100);\n        }\n        // It's important to return true if you intend to send a response asynchronously\n        // However, in this specific listener, we are mostly receiving, so it might not be strictly necessary\n        // unless a specific message type expects a direct response from the popup.\n        // For safety and good practice, especially if any message type might need it:\n        sendResponse({ received: true });\n        return true;\n    });\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/content.js",
                "filename": "content.js",
                "content": "function normalizeVolume(raw) {\n    if (!raw || typeof raw !== 'string') return '';\n    // 去掉前后空白\n    let s = raw.trim().toUpperCase();\n    // 记录倍数\n    let mul = 1;\n    if (s.endsWith('B')) {\n        mul = 1e9;\n        s = s.slice(0, -1);\n    } else if (s.endsWith('M')) {\n        mul = 1e6;\n        s = s.slice(0, -1);\n    } else if (s.endsWith('K')) {\n        mul = 1e3;\n        s = s.slice(0, -1);\n    }\n    // 去掉所有逗号\n    s = s.replace(/,/g, '');\n    // 解析浮点数\n    const n = parseFloat(s);\n    if (isNaN(n)) return '';\n    // 四舍五入取整\n    return Math.round(n * mul).toString();\n}\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'scrapeYahooETFs') {\n        console.log(\"Yahoo ETF Scraper: content.js - 'scrapeYahooETFs' action received for URL:\", window.location.href);\n        try {\n            const results = [];\n            let targetTable = null;\n            let headerIndexMap = {}; // To store column indices by header name\n\n            // --- 更稳健的表格选择逻辑 ---\n            console.log(\"Yahoo ETF Scraper: content.js - Attempting to find the target table...\");\n\n            // 优先尝试1: 通过更具体的 data-testid (如果存在)\n            // Yahoo Finance 列表格通常在 <div data-testid=\"scr-res-table\"> 下\n            const scrResTableDiv = document.querySelector('div[data-testid=\"scr-res-table\"]');\n            if (scrResTableDiv) {\n                targetTable = scrResTableDiv.querySelector('table');\n                if (targetTable) {\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found via 'scr-res-table' data-testid.\");\n                }\n            }\n\n            // 尝试2: 通过 'top-etfs-table' data-testid (之前的尝试)\n            if (!targetTable) {\n                const topEtfsTableDiv = document.querySelector('div[data-testid=\"top-etfs-table\"]');\n                if (topEtfsTableDiv) {\n                    targetTable = topEtfsTableDiv.querySelector('table');\n                    if (targetTable) {\n                        console.log(\"Yahoo ETF Scraper: content.js - Table found via 'top-etfs-table' data-testid.\");\n                    }\n                }\n            }\n\n            // 尝试3: 查找包含特定表头文本的表格 (更灵活的文本匹配)\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table not found by data-testid, trying header content matching.\");\n                const tables = document.querySelectorAll('table');\n                for (let table of tables) {\n                    const headers = Array.from(table.querySelectorAll('thead th'));\n                    const headerTexts = headers.map(th => th.textContent.trim().toLowerCase());\n\n                    // 检查是否包含 \"symbol\" 和 \"name\" (不区分大小写)\n                    const hasSymbolHeader = headerTexts.some(text => text.includes('symbol'));\n                    const hasNameHeader = headerTexts.some(text => text.includes('name'));\n                    const hasPriceHeader = headerTexts.some(text => text.includes('price')); // 可选，增加确定性\n                    const hasBodyRows = table.querySelector('tbody tr');\n\n                    if (hasSymbolHeader && hasNameHeader && hasPriceHeader && hasBodyRows) {\n                        targetTable = table;\n                        console.log(\"Yahoo ETF Scraper: content.js - Target table found by flexible header text matching.\");\n                        break;\n                    }\n                }\n            }\n\n            // 尝试4: 查找页面上主要的、包含多行数据的表格 (作为最后的备选)\n            // 这个选择器 W(100%) 是 Yahoo Finance 中常见的表格宽度类，但仍需谨慎\n            if (!targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Table still not found, trying class 'W(100%)' and row count.\");\n                const tables = document.querySelectorAll('table.W\\\\(100\\\\%\\\\)'); // 需要转义括号\n                if (tables.length === 1 && tables[0].querySelector('tbody tr')) { // 如果页面只有一个这样的主表格\n                    targetTable = tables[0];\n                    console.log(\"Yahoo ETF Scraper: content.js - Table found by single 'W(100%)' class.\");\n                } else if (tables.length > 0) { // 如果有多个，选包含最多数据行的那个\n                    let maxRows = 0;\n                    let potentialTable = null;\n                    tables.forEach(tbl => {\n                        const rowCount = tbl.querySelectorAll('tbody tr').length;\n                        if (rowCount > maxRows) {\n                            maxRows = rowCount;\n                            potentialTable = tbl;\n                        }\n                    });\n                    if (potentialTable && maxRows > 0) { // 至少要有一行数据\n                        targetTable = potentialTable;\n                        console.log(`Yahoo ETF Scraper: content.js - Table found by 'W(100%)' class and max rows (${maxRows}).`);\n                    }\n                }\n            }\n\n\n            if (targetTable) {\n                console.log(\"Yahoo ETF Scraper: content.js - Target table identified:\", targetTable);\n\n                // --- 获取表头并映射列名到索引 ---\n                const headers = Array.from(targetTable.querySelectorAll('thead th'));\n                headers.forEach((th, index) => {\n                    const text = th.textContent.trim().toLowerCase();\n                    // 我们需要更灵活地匹配，因为表头文本可能会变化\n                    if (text.includes('symbol')) headerIndexMap.symbol = index;\n                    else if (text.includes('name')) headerIndexMap.name = index;\n                    // \"price (intraday)\" 或 \"price\"\n                    else if (text.includes('price')) headerIndexMap.price = index;\n                    else if (text.includes('volume')) headerIndexMap.volume = index;\n                    // 你可以根据需要添加更多列的映射\n                });\n\n                console.log(\"Yahoo ETF Scraper: content.js - Header index map:\", headerIndexMap);\n\n                // 检查关键列是否都已映射，如果某些列的表头找不到，则提取会失败\n                if (headerIndexMap.symbol === undefined || headerIndexMap.name === undefined || headerIndexMap.price === undefined || headerIndexMap.volume === undefined) {\n                    console.error(\"Yahoo ETF Scraper: content.js - Critical headers (symbol, name, price, volume) not found or mapped. Check table structure and header texts.\");\n                    sendResponse({ success: false, error: \"Critical headers not found in table.\", data: [] });\n                    return true; // 确保异步响应被发送\n                }\n\n\n                const rows = targetTable.querySelectorAll('tbody tr');\n                console.log(`Yahoo ETF Scraper: content.js - Found ${rows.length} rows in the table.`);\n\n                rows.forEach((row, rowIndex) => {\n                    try {\n                        const cells = row.querySelectorAll('td');\n                        if (cells.length === 0) {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} has no cells, skipping.`);\n                            return;\n                        }\n\n                        let symbol = null, name = null, price = null, rawVol = null;\n\n                        // --- 新的数据提取逻辑 ---\n\n                        // Symbol\n                        if (cells[headerIndexMap.symbol]) {\n                            // 尝试更具体的选择器，如果存在的话\n                            const symbolLink = cells[headerIndexMap.symbol].querySelector('a[data-testid=\"table-cell-ticker\"]');\n                            if (symbolLink) {\n                                symbol = symbolLink.textContent.trim();\n                            } else {\n                                symbol = cells[headerIndexMap.symbol].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Symbol Cell Content:`, cells[headerIndexMap.symbol].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Symbol:`, symbol);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Symbol cell not found using index ${headerIndexMap.symbol}.`);\n                        }\n\n                        // Name\n                        if (cells[headerIndexMap.name]) {\n                            // 雅虎财经的名称有时在 title 属性中，有时直接是文本\n                            const nameDivWithTitle = cells[headerIndexMap.name].querySelector('div[title]');\n                            if (nameDivWithTitle && nameDivWithTitle.getAttribute('title')) {\n                                name = nameDivWithTitle.getAttribute('title').trim();\n                            } else {\n                                name = cells[headerIndexMap.name].textContent.trim();\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Name Cell Content:`, cells[headerIndexMap.name].innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Name:`, name);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Name cell not found using index ${headerIndexMap.name}.`);\n                        }\n\n                        // Price\n                        // 页面上的价格通常是动态加载的，但如果结构改变，我们需要直接从DOM中获取\n                        // 你的HTML片段显示价格是 \"105.63\"\n                        if (cells[headerIndexMap.price]) {\n                            const priceCell = cells[headerIndexMap.price];\n                            // 优先尝试从具有特定 data-field 的 fin-streamer 获取 value\n                            let priceStreamer = priceCell.querySelector('fin-streamer[data-field=\"regularMarketPrice\"]');\n                            if (priceStreamer) {\n                                if (priceStreamer.hasAttribute('value') && priceStreamer.getAttribute('value').trim() !== \"\") {\n                                    price = priceStreamer.getAttribute('value').trim();\n                                } else {\n                                    // 如果 value 属性为空或不存在，则取该 fin-streamer 的 textContent\n                                    price = priceStreamer.textContent.trim();\n                                }\n                            } else {\n                                // 如果找不到特定的 fin-streamer，尝试获取单元格内第一个看起来像数字的文本\n                                // 这通常是价格本身，避免获取到后面的变化量和百分比\n                                const cellText = priceCell.textContent.trim();\n                                // 正则表达式匹配开头的数字 (可能包含小数点)\n                                const priceMatch = cellText.match(/^[\\d\\.]+/);\n                                if (priceMatch) {\n                                    price = priceMatch[0];\n                                } else {\n                                    // 如果还是没匹配到，记录警告，price 将为 null\n                                    console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Could not extract price from cell content: '${cellText}' using fallback.`);\n                                    price = priceCell.textContent.trim(); // 作为最后的手段，取全部内容，但通常不应到这一步\n                                }\n                            }\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Raw Price Cell Content:`, priceCell.innerHTML);\n                            // console.log(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Extracted Price:`, price);\n                        } else {\n                            console.warn(`Yahoo ETF Scraper: content.js - Row ${rowIndex} - Price cell not found using index ${headerIndexMap.price}.`);\n                        }\n\n\n                        // Volume\n                        // 页面上的成交量也是动态的\n                        // 你的HTML片段显示成交量是 \"2.327M\"\n\n                        if (cells[headerIndexMap.volume]) {\n                            let vs = cells[headerIndexMap.volume].querySelector(\n                                'fin-streamer[data-field=\"regularMarketVolume\"], fin-streamer[data-field=\"volume\"]'\n                            );\n                            if (vs && vs.hasAttribute('value') && vs.getAttribute('value').trim() !== \"\") {\n                                rawVol = vs.getAttribute('value').trim();\n                            } else {\n                                rawVol = cells[headerIndexMap.volume].textContent.trim();\n                            }\n                        }\n                        // 把 rawVol 传给 normalizeVolume 得到最终 volume\n                        const volume = normalizeVolume(rawVol);\n\n                        // 最后 push 的时候用 volume 而不是 rawVol\n                        if (symbol && name && price !== null && volume !== null) {\n                            results.push({ symbol, name, price, volume });\n                        }\n                    } catch (e) {\n                        console.error(`Yahoo ETF Scraper: content.js - Error processing row ${rowIndex}:`, e, \"Row HTML:\", row.innerHTML);\n                    }\n                });\n\n                console.log(`Yahoo ETF Scraper: content.js - Successfully scraped ${results.length} ETFs from current page.`);\n                sendResponse({ success: true, data: results });\n\n            } else {\n                console.error(\"Yahoo ETF Scraper: content.js - Target table could not be found on the page.\");\n                sendResponse({ success: false, error: \"Table not found on page.\", data: [] });\n            }\n        } catch (error) {\n            console.error(\"Yahoo ETF Scraper: content.js - Error in 'scrapeYahooETFs' message handler:\", error);\n            sendResponse({ success: false, error: error.message, data: [] });\n        }\n        return true; // Indicate that the response will be sent asynchronously\n    }\n});"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/JavaScript/TopETFs/background.js",
                "filename": "background.js",
                "content": "// Array to store scraped data\nlet allYahooETFData = [];\n\n// Function to update status in popup\nfunction updatePopupStatus(text, logType = 'info', completed = false) {\n    chrome.runtime.sendMessage({\n        type: 'statusUpdate', // Changed from 'status'\n        text: text,\n        logType: logType, // Changed from 'status'\n        completed: completed\n    }).catch(error => console.log(\"Error sending status to popup:\", error)); // Catch if popup is not open\n}\n\n// Function to scrape data from a tab for Yahoo Finance\nasync function scrapeYahooETFFromTab(tabId, url) {\n    try {\n        updatePopupStatus(`Navigating to ${url}`, 'info');\n        // Navigate to the URL\n        await chrome.tabs.update(tabId, { url: url });\n\n        // Wait for the page to load - Yahoo can be slow and dynamic\n        // Consider a more robust wait if needed (e.g., waiting for a specific element)\n        await new Promise(resolve => {\n            const listener = (tabIdUpdated, changeInfo) => {\n                if (tabIdUpdated === tabId && changeInfo.status === 'complete') {\n                    chrome.tabs.onUpdated.removeListener(listener);\n                    // Additional delay for dynamic content loading\n                    setTimeout(resolve, 5000); // Increased delay for Yahoo\n                }\n            };\n            chrome.tabs.onUpdated.addListener(listener);\n        });\n\n        updatePopupStatus(`Page loaded: ${url}. Attempting to scrape...`, 'info');\n        // Execute content script to scrape data\n        const results = await chrome.tabs.sendMessage(tabId, { action: 'scrapeYahooETFs' });\n\n        if (results && results.success) {\n            updatePopupStatus(`Successfully scraped ${results.data.length} ETFs from ${url}`, 'success');\n            allYahooETFData = [...allYahooETFData, ...results.data];\n            return true;\n        } else {\n            const errorMsg = results ? results.error : \"No response from content script.\";\n            updatePopupStatus(`Failed to scrape data from ${url}: ${errorMsg}`, 'error');\n            return false;\n        }\n    } catch (error) {\n        updatePopupStatus(`Error scraping from ${url}: ${error.message}`, 'error');\n        console.error(`Error in scrapeYahooETFFromTab for ${url}:`, error);\n        return false;\n    }\n}\n\n// Function to generate CSV from data\nfunction generateETFCSV(data) {\n    // CSV header\n    let csv = 'Symbol,Name,Price,Volume\\n';\n\n    // Add each row\n    data.forEach(item => {\n        const symbol = item.symbol ? `\"${item.symbol.replace(/\"/g, '\"\"')}\"` : '';\n        const name = item.name ? `\"${item.name.replace(/\"/g, '\"\"')}\"` : '';\n        const price = item.price ? `\"${item.price.replace(/\"/g, '\"\"')}\"` : '';\n        const volume = item.volume ? `\"${item.volume.replace(/\"/g, '\"\"')}\"` : '';\n        csv += `${symbol},${name},${price},${volume}\\n`;\n    });\n    return csv;\n}\n\n// Function to send CSV data to popup for download\nfunction downloadCSVViaPopup(csvData, filename) {\n    chrome.runtime.sendMessage({\n        type: 'csvData',\n        data: csvData,\n        filename: filename\n    }).catch(error => {\n        updatePopupStatus(`Error sending CSV to popup for download: ${error.message}. You might need to open the popup.`, 'error');\n        // Fallback or alternative download method could be implemented here if needed\n        // For now, we'll just log it.\n        console.error(\"Error sending CSV to popup:\", error);\n    });\n}\n\n\n// Main function to coordinate the Yahoo ETF scraping process\nasync function startYahooScrapingProcess() {\n    updatePopupStatus('Starting Yahoo ETF scraping process...', 'info');\n    allYahooETFData = []; // Reset data for a new scrape\n\n    let tab;\n    try {\n        // Create a new tab for scraping. It's better to keep it active for debugging.\n        // For production, you might set active: false, but ensure content scripts still work.\n        tab = await chrome.tabs.create({ active: false, url: 'about:blank' });\n\n        const urls = [\n            \"https://finance.yahoo.com/markets/etfs/top/?start=0&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=100&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=200&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=300&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=400&count=100\",\n            \"https://finance.yahoo.com/markets/etfs/top/?start=500&count=100\"\n        ];\n\n        for (const url of urls) {\n            const success = await scrapeYahooETFFromTab(tab.id, url);\n            if (!success) {\n                updatePopupStatus(`Skipping remaining URLs due to error on ${url}.`, 'error');\n                break; // Optional: stop if one page fails\n            }\n            // Optional: add a small delay between page loads if needed\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        if (allYahooETFData.length > 0) {\n            updatePopupStatus(`Generating CSV with ${allYahooETFData.length} ETF records...`, 'info');\n            const csv = generateETFCSV(allYahooETFData);\n            const now = new Date();\n            const year = now.getFullYear().toString().slice(-2); // 获取年份的后两位，例如 2025 -> 25\n            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 获取月份 (0-11)，所以 +1，并补零到两位，例如 5 -> 05\n            const day = now.getDate().toString().padStart(2, '0'); // 获取日期，并补零到两位，例如 21 -> 21\n            const timestamp = `${year}${month}${day}`; // 拼接成 YYMMDD 格式，例如 250521\n            const filename = `topetf_${timestamp}.csv`;\n\n            // Instead of chrome.downloads.download, send to popup.js\n            downloadCSVViaPopup(csv, filename);\n            // updatePopupStatus(`CSV file \"${filename}\" download initiated via popup.`, 'success', true); // This message is now in popup.js\n        } else {\n            updatePopupStatus('No ETF data was scraped. Cannot generate CSV.', 'error', true);\n        }\n\n    } catch (error) {\n        updatePopupStatus(`Critical error in Yahoo ETF scraping process: ${error.message}`, 'error', true);\n        console.error(\"Critical error in startYahooScrapingProcess:\", error);\n    } finally {\n        if (tab && tab.id) {\n            try {\n                // Optional: close the tab after scraping is done or if an error occurs\n                // For debugging, you might want to leave it open.\n                await chrome.tabs.remove(tab.id);\n                updatePopupStatus('Scraping tab closed.', 'info');\n            } catch (closeError) {\n                console.error(\"Error closing tab:\", closeError);\n            }\n        }\n        updatePopupStatus('Yahoo ETF scraping process finished.', 'info', true);\n    }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'startYahooScraping') {\n        startYahooScrapingProcess();\n        sendResponse({ status: 'started' });\n        return true; // Indicates that the response will be sent asynchronously\n    }\n    // It's good practice to return true if you might send an async response for other actions too.\n    return true;\n});"
            }
        ],
        "final_prompt": "这个程序在执行的时候，如果网络很好，也就是很快就装载完页面时，就一切正常，但如果碰到网络不太好导致网站加载缓慢的时候，过了好长时间后即便最终页面加载完成了，此时抓取功能也无法成功的抓取到数据呢？"
    },
    {
        "id": "2025-06-04 15:59:35",
        "project_name": "highlow",
        "project_desc": "我有一个Python开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Test/Sectors_All_test.json",
                "filename": "Sectors_All_test.json",
                "content": "{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}"
            }
        ],
        "final_prompt": "我有一个sqlite3的DB文件/Users/yanzhang/Documents/Database/Finance.db，我还有一个/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json文件“{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}”，Finance.db里数据表的名称跟json文件的组名是一一对应的，比如db文件里就有名为Bonds或Economics的的数据库表，所有数据库表的结构有两种类型“id      date        name  price     volume    \n------  ----------  ----  --------  ----------\n6797    2002-09-03  AAPL  0.25      276936800 \n846288  2002-09-03  ACIW  2.49      307500    \n805805  2002-09-03  ACLS  26.0      163150    \n76410   2002-09-03  ACN   15.75     1984200 ”和“id    date        name    price \n----  ----------  ------  ------\n1655  2024-08-26  PDD     -28.6 \n4     2024-09-04  ASND    -11.27\n5     2024-09-04  CNM     -15.81\n2     2024-09-04  DLTR    -22.16\n1     2024-09-04  GTLB    21.64 \n7     2024-09-04  HQY     5.13  ”，区别是有没有volume列存在，但id、date、name、name字段都是一致的。我的需求是：拿json文件内以下分组“\"Bonds\",  \"Currencies\",  \"Crypto\",  \"Indices\",  \"Commodities\",  \"ETFs\",  \"Economics\",”里的每一个symbol去数据库对应表中拿到最新日期的price，然后依次在以下时间间隔“半年、一年、2年”内进行全面的检索，判断该symbol的最新日期price是否是相应时间间隔内所有price里是最低的或最高的，不管是最低还是最高，都按照固定格式输出到/Users/yanzhang/Documents/News/highlow.txt文件内，格式大致如下“[6 months}\nLow:\nUSDCNY, DXY\nHigh:\nHuangJin\n\n[1Y]\nLow:\nUSDGBP, VIX\nHigh:\nHuangJin\n\n[2Y]\nLow:\nCopper\nHigh:\nNaturalgas\n”，其中low是最低分组，high是最高分组，该怎么写代码实现以上需求？"
    },
    {
        "id": "2025-06-04 22:40:40",
        "project_name": "Insert_Earning_auto",
        "project_desc": "我想用Python的Qt5开发一个程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/News/Earnings_Release_new.txt",
                "filename": "Earnings_Release_new.txt",
                "content": "CRDO   : 4419000   : 2025-06-02\nCPB:O  : 3695000   : 2025-06-02\nSAIC:Y : 666883    : 2025-06-02\nCRWD   : 3011000   : 2025-06-03\nFERG:W : 1112000   : 2025-06-03\nHPE:Y  : 15547000  : 2025-06-03\nDG:O   : 2013000   : 2025-06-03\nGWRE   : 728542    : 2025-06-03\nHQY    : 780838    : 2025-06-03\nDCI:W  : 379778    : 2025-06-03\nNIO:Y  : 21990000  : 2025-06-03\nOLLI   : 952340    : 2025-06-03\nASAN   : 1887000   : 2025-06-03\nDLTR:B : 2902000   : 2025-06-04\nMDB:Y  : 1547000   : 2025-06-04\nDSGX   : 229669    : 2025-06-04\nFIVE:O : 1510000   : 2025-06-04\nBMA    : 347626    : 2025-06-04\nPVH:Y  : 1034000   : 2025-06-04\nTHO:Y  : 652762    : 2025-06-04\nAVGO:C : 17485000  : 2025-06-05\nLULU:Y : 2435000   : 2025-06-05\nIOT    : 2811000   : 2025-06-05\nDOCU   : 1714000   : 2025-06-05\nBF-B:B : 3105000   : 2025-06-05\nCIEN   : 1122000   : 2025-06-05\nTTC:Y  : 534205    : 2025-06-05\nMTN:O  : 907903    : 2025-06-05\n"
            }
        ],
        "final_prompt": "我想用Python的Qt5开发一个程序。我有一个/Users/yanzhang/Documents/News/Earnings_Release_new.txt文件，里面的内容如下“CRDO   : 4419000   : 2025-06-02\nCPB:O  : 3695000   : 2025-06-02\nSAIC:Y : 666883    : 2025-06-02\nCRWD   : 3011000   : 2025-06-03\nFERG:W : 1112000   : 2025-06-03\nHPE:Y  : 15547000  : 2025-06-03\n”，每一行第一个冒号前面的字符串就是symbol（比如：CRDO   : 4419000   : 2025-06-02这一行，CRDO就是symbol，另一个“CPB:O  : 3695000   : 2025-06-02”中CPB就是symbol），最后一个冒号后面的是日期（比如：2025-06-02），我还有一个/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json文件，内容如下“{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}”，另外我还有一个sqlite3的数据库/Users/yanzhang/Documents/Database/Finance.db，里面有两类数据表，一类是跟Sector_all里的组名完全一致的表名（比如：Consumer_Defensive，sector_all里有一个分组叫这个名称，同样在Finance.db里也有同名的数据表存在），这一类数据表的格式如下“id      date        name  price     volume    \n------  ----------  ----  --------  ----------\n6797    2002-09-03  AAPL  0.25      276936800 \n846288  2002-09-03  ACIW  2.49      307500    \n805805  2002-09-03  ACLS  26.0      163150    \n76410   2002-09-03  ACN   15.75     1984200   \n58415   2002-09-03  ADBE  9.21      9882400   \n129845  2002-09-03  ADI   22.83     3314300   \n834254  2002-09-03  ADP   28.59     3068604   \n227895  2002-09-03  ADSK  6.3       1204000   \n489203  2002-09-03  AKAM  0.91      1005000   \n88666   2002-09-03  AMAT  12.99     26967200  \n46159   2002-09-03  AMD   8.26      4103300   ”，另一类表是一个名为Earning的数据表，格式如下“id    date        name    price \n----  ----------  ------  ------\n1655  2024-08-26  PDD     -28.6 \n4     2024-09-04  ASND    -11.27\n5     2024-09-04  CNM     -15.81\n2     2024-09-04  DLTR    -22.16\n1     2024-09-04  GTLB    21.64 \n7     2024-09-04  HQY     5.13  \n6     2024-09-04  HRL     -6.43 ”。我的需求是：拿当前系统日期的前一天和再前一天这两个日期分别去txt文件中去匹配，反向查找到能跟这两个日期匹配的所有symbol，然后分开处理，将属于当前系统日期前一天的symbol，去sector_all里反向查找到该symbol所属的数据表，然后根据表名和symbol去数据库中拿到系统日期前一天的price和再前一天的price，然后计算两者的差值百分比（用较新一天的price减去前一天的price再除以前一天的price），然后将这个百分比数值（去除百分号）和系统日期前一天的时间以及symbol一块写入Earning数据库表中（如果百分比是-4.5%，那么写入的price将是-4.5），把每一个symbol写入后的最终的结果展示在qt5界面上让我看到，这是分开处理的前一部分。后一部分是针对匹配当前系统日期前两天的symbol，同样将这部分symbol去sector_all里反查组名从而找到所属的数据库表名，然后去数据库中拿到系统日期前一天的price和再前一天的price，然后计算两者的差值百分比（这块跟之前是一致的），区别在于，第二部分里的symbol还需要再去Earning表中拿该symbol最新日期的price数值（如果数值是-1.7，就代表是-1.7%），然后将该symbol和这两个百分比数值放到界面的一行里展示给我看，旁边增加一个名为\"替换\"的按钮，如果点击按钮，那么作用是将新的百分比数值替换掉earning里面的数值（这里举个例子：假如新的百分比是3.7%，则将其中的3.7作为price写入earning表中），写入的时间也需要变更为系统日期的前一天。你只是将这些信息和按钮都展示在界面上，是否按下按钮由我来决定，然后每一个符合这一规则（系统前两天日期）的symbol都逐行在界面上进行展示。如何写代码可以实现以上所有这些需求？"
    },
    {
        "id": "2025-06-07 21:22:39",
        "project_name": "indices",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Indices.swift",
                "filename": "Indices.swift",
                "content": "import SwiftUI\nimport Foundation\n\n// MARK: - Models\n\nstruct IndicesSector: Identifiable, Codable {\n    var id: String { name }\n    let name: String\n    let symbols: [IndicesSymbol]\n    var subSectors: [IndicesSector]? // 添加子分组\n    \n    private enum CodingKeys: String, CodingKey {\n        case name, symbols\n    }\n    \n    init(name: String, symbols: [IndicesSymbol], subSectors: [IndicesSector]? = nil) {\n        self.name = name\n        self.symbols = symbols\n        self.subSectors = subSectors\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        self.name = try container.decode(String.self, forKey: .name)\n        self.symbols = try container.decode([IndicesSymbol].self, forKey: .symbols)\n        self.subSectors = nil\n    }\n}\n\n\nstruct IndicesSymbol: Identifiable, Codable {\n    var id: String { symbol }  // 使用symbol作为唯一标识符\n    let symbol: String\n    let name: String\n    var value: String\n    var tags: [String]?\n    \n    private enum CodingKeys: String, CodingKey {\n        case symbol, name, value, tags\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: CodingKeys.self)\n        self.symbol = try container.decode(String.self, forKey: .symbol)\n        self.name = try container.decode(String.self, forKey: .name)\n        self.value = try container.decode(String.self, forKey: .value)\n        self.tags = try container.decodeIfPresent([String].self, forKey: .tags)\n    }\n    \n    init(symbol: String, name: String, value: String, tags: [String]?) {\n        self.symbol = symbol\n        self.name = name\n        self.value = value\n        self.tags = tags\n    }\n}\n\nstruct DynamicCodingKeys: CodingKey {\n    var stringValue: String\n    var intValue: Int? { return nil }\n    \n    init?(stringValue: String) { self.stringValue = stringValue }\n    init?(intValue: Int) { return nil }\n}\n\nstruct SectorsPanel: Decodable {\n    let sectors: [IndicesSector]\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: DynamicCodingKeys.self)\n        var sectors: [IndicesSector] = []\n        \n        let orderedKeys = container.allKeys\n            .map { $0.stringValue }\n            .sorted()\n        \n        for key in orderedKeys {\n            let codingKey = DynamicCodingKeys(stringValue: key)!\n            let symbolsContainer = try container.nestedContainer(keyedBy: DynamicCodingKeys.self, forKey: codingKey)\n            let orderedSymbolKeys = symbolsContainer.allKeys\n                .map { $0.stringValue }\n                .sorted()\n            \n            if key == \"Economics\" {\n                // 原 Economics 分组特殊处理\n                var groupedSymbols: [String: [IndicesSymbol]] = [:]\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolValue = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    \n                    // 按前缀数字分组\n                    if let prefixNumber = symbolValue.split(separator: \" \").first,\n                       let _ = Int(prefixNumber) {\n                        let group = String(prefixNumber)\n                        let symbolName = symbolValue.split(separator: \" \")[1]\n                        let symbol = IndicesSymbol(\n                            symbol: symbolKey,\n                            name: String(symbolName),\n                            value: \"\",\n                            tags: nil\n                        )\n                        \n                        if groupedSymbols[group] == nil {\n                            groupedSymbols[group] = []\n                        }\n                        groupedSymbols[group]?.append(symbol)\n                    }\n                }\n                \n                let subSectors = groupedSymbols.sorted(by: { $0.key < $1.key }).map { group, groupSymbols in\n                    IndicesSector(name: group, symbols: groupSymbols)\n                }\n                \n                let economicsSector = IndicesSector(\n                    name: key,\n                    symbols: [],\n                    subSectors: subSectors\n                )\n                sectors.append(economicsSector)\n            } else if key == \"Commodities\" {\n                // Commodities 分组特殊处理：添加“重要”子分组，把 CrudeOil 和 Huangjin 放到其中\n                var importantSymbols: [IndicesSymbol] = []\n                var normalSymbols: [IndicesSymbol] = []\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    let symbol = IndicesSymbol(symbol: symbolKey, name: symbolName, value: \"\", tags: nil)\n                    \n                    if symbolKey == \"CrudeOil\" || symbolKey == \"Huangjin\" {\n                        importantSymbols.append(symbol)\n                    } else {\n                        normalSymbols.append(symbol)\n                    }\n                }\n                \n                if !importantSymbols.isEmpty {\n                    var subSectors: [IndicesSector] = []\n                    // “重要”子分组\n                    subSectors.append(IndicesSector(name: \"重要\", symbols: importantSymbols))\n                    // 若还有其他 symbol，则增加“其他”子分组\n                    if !normalSymbols.isEmpty {\n                        subSectors.append(IndicesSector(name: \"其他\", symbols: normalSymbols))\n                    }\n                    let commoditiesSector = IndicesSector(name: key, symbols: [], subSectors: subSectors)\n                    sectors.append(commoditiesSector)\n                } else if !normalSymbols.isEmpty {\n                    // 如果没有重要 symbol，则常规处理\n                    let commoditiesSector = IndicesSector(name: key, symbols: normalSymbols)\n                    sectors.append(commoditiesSector)\n                }\n            } else if key == \"Currencies\" {\n                // Currencies 分组特殊处理：添加“重要”子分组，把 USDJPY 和 USDCNY 和 DXY 和 CNYI 放到其中\n                var importantSymbols: [IndicesSymbol] = []\n                var normalSymbols: [IndicesSymbol] = []\n                \n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    let symbol = IndicesSymbol(symbol: symbolKey, name: symbolName, value: \"\", tags: nil)\n                    \n                    if symbolKey == \"USDJPY\" || symbolKey == \"USDCNY\" || symbolKey == \"DXY\" || symbolKey == \"CNYI\" || symbolKey == \"JPYI\" || symbolKey == \"CHFI\" || symbolKey == \"EURI\" {\n                        importantSymbols.append(symbol)\n                    } else {\n                        normalSymbols.append(symbol)\n                    }\n                }\n                \n                if !importantSymbols.isEmpty {\n                    var subSectors: [IndicesSector] = []\n                    // “重要”子分组\n                    subSectors.append(IndicesSector(name: \"重要\", symbols: importantSymbols))\n                    // 如果还有其他 symbol，则增加“其他”子分组\n                    if !normalSymbols.isEmpty {\n                        subSectors.append(IndicesSector(name: \"其他\", symbols: normalSymbols))\n                    }\n                    let currenciesSector = IndicesSector(name: key, symbols: [], subSectors: subSectors)\n                    sectors.append(currenciesSector)\n                } else if !normalSymbols.isEmpty {\n                    // 如果没有特别的 symbol，则常规处理\n                    let currenciesSector = IndicesSector(name: key, symbols: normalSymbols)\n                    sectors.append(currenciesSector)\n                }\n            } else {\n                // 其他分组常规处理\n                var symbols: [IndicesSymbol] = []\n                for symbolKey in orderedSymbolKeys {\n                    let symbolCodingKey = DynamicCodingKeys(stringValue: symbolKey)!\n                    let symbolName = try symbolsContainer.decode(String.self, forKey: symbolCodingKey)\n                    symbols.append(IndicesSymbol(\n                        symbol: symbolKey,\n                        name: symbolName,\n                        value: \"\",\n                        tags: nil\n                    ))\n                }\n                \n                if !symbols.isEmpty {\n                    let sector = IndicesSector(name: key, symbols: symbols)\n                    sectors.append(sector)\n                }\n            }\n        }\n        \n        self.sectors = sectors\n    }\n}\n\n// MARK: - Views\n\nstruct IndicesContentView: View {\n    @EnvironmentObject var dataService: DataService\n    @State private var showError: Bool = false\n    @State private var errorMessage: String = \"\"\n    \n    // 自定义网格布局\n    private let gridLayout = [\n        GridItem(.adaptive(minimum: 100, maximum: .infinity), spacing: 12)\n    ]\n    \n    var body: some View {\n        NavigationView {\n            ScrollView {\n                if let sectorsPanel = dataService.sectorsPanel {\n                    LazyVGrid(columns: gridLayout, spacing: 12) {\n                        ForEach(sectorsPanel.sectors, id: \\.name) { sector in\n                            NavigationLink {\n                                SectorDetailView(sector: sector)\n                                    .navigationBarTitleDisplayMode(.inline)\n                            } label: {\n                                SectorButtonView(sectorName: sector.name)\n                            }\n                        }\n                    }\n                    .padding()\n                } else {\n                    if let error = dataService.errorMessage {\n                        Text(error)\n                            .foregroundColor(.red)\n                            .padding()\n                    } else {\n                        LoadingView()\n                    }\n                }\n            }\n//            .navigationTitle(\"Sectors\")\n            .alert(isPresented: Binding<Bool>(\n                get: { dataService.errorMessage != nil },\n                set: { _ in dataService.errorMessage = nil }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(dataService.errorMessage ?? \"未知错误\"),\n                    dismissButton: .default(Text(\"好的\"))\n                )\n            }\n        }\n        .navigationViewStyle(StackNavigationViewStyle())\n    }\n}\n\nstruct LoadingView: View {\n    var body: some View {\n        VStack {\n            ProgressView(\"加载中，请稍候...\")\n                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                .scaleEffect(1.5, anchor: .center)\n        }\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n        .background(Color(.systemBackground))\n    }\n}\n\nstruct SectorButtonView: View {\n    let sectorName: String\n    \n    var body: some View {\n        Text(sectorName.replacingOccurrences(of: \"_\", with: \" \"))\n            .font(.subheadline).bold()\n            .foregroundColor(.white)\n            .padding(.horizontal, 12)\n            .padding(.vertical, 8)\n            .background(\n                LinearGradient(\n                    gradient: Gradient(colors: [.blue, .purple]),\n                    startPoint: .topLeading,\n                    endPoint: .bottomTrailing\n                )\n            )\n            .cornerRadius(10)\n            .shadow(color: Color.black.opacity(0.15), radius: 3, x: 2, y: 2)\n            .frame(minHeight: 44)\n    }\n}\n\nstruct SectorDetailView: View {\n    let sector: IndicesSector\n    @EnvironmentObject var dataService: DataService\n    @State private var symbols: [IndicesSymbol] = []\n    @State private var showError: Bool = false\n    @State private var errorMessage: String = \"\"\n    \n    var body: some View {\n        ScrollView {\n            // 如果存在子分组则遍历每个子分组显示\n            if let subSectors = sector.subSectors, !subSectors.isEmpty {\n                ForEach(subSectors, id: \\.name) { subSector in\n                    VStack(alignment: .leading, spacing: 8) {\n                        Text(subSector.name)\n                            .font(.headline)\n                            .padding(.horizontal)\n                            .padding(.top, 16)\n                        \n                        LazyVStack(spacing: 0) {\n                            ForEach(loadSymbolsForSubSector(subSector.symbols)) { symbol in\n                                SymbolItemView(symbol: symbol, sectorName: sector.name)\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 否则按原规则显示当前分组的 symbol 数组\n                LazyVStack(spacing: 0) {\n                    ForEach(symbols) { symbol in\n                        SymbolItemView(symbol: symbol, sectorName: sector.name)\n                    }\n                }\n            }\n        }\n        .padding(.horizontal)\n        .padding(.top, 8)\n        .navigationBarTitle(\n            sector.name.replacingOccurrences(of: \"_\", with: \" \"),\n            displayMode: .inline\n        )\n        .alert(isPresented: $showError) {\n            Alert(\n                title: Text(\"错误\"),\n                message: Text(errorMessage),\n                dismissButton: .default(Text(\"好的\"))\n            )\n        }\n        .onAppear {\n            // 如果没有子分组，则加载 symbol 数组\n            if sector.subSectors == nil || sector.subSectors!.isEmpty {\n                loadSymbols()\n            }\n        }\n    }\n    \n    func loadSymbolsForSubSector(_ symbols: [IndicesSymbol]) -> [IndicesSymbol] {\n        let compareMap = dataService.compareData\n        return symbols.map { symbol in\n            var updatedSymbol = symbol\n            let value = compareMap[symbol.symbol.uppercased()] ??\n                        compareMap[symbol.symbol] ??\n                        \"N/A\"\n            updatedSymbol.value = value\n            \n            if let description = dataService.descriptionData?.stocks.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag ?? dataService.descriptionData?.etfs.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag {\n                updatedSymbol.tags = description\n            }\n            \n            return updatedSymbol\n        }\n    }\n    \n    func loadSymbols() {\n        let compareMap = dataService.compareData\n        self.symbols = sector.symbols.map { symbol in\n            var updatedSymbol = symbol\n            let value = compareMap[symbol.symbol.uppercased()] ??\n                        compareMap[symbol.symbol] ??\n                        \"N/A\"\n            updatedSymbol.value = value\n            \n            if let description = dataService.descriptionData?.stocks.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag ?? dataService.descriptionData?.etfs.first(where: {\n                $0.symbol.uppercased() == symbol.symbol.uppercased()\n            })?.tag {\n                updatedSymbol.tags = description\n            }\n            \n            return updatedSymbol\n        }\n    }\n}\n\n// 修改 SymbolItemView 只显示 symbol\nstruct SymbolItemView: View {\n    let symbol: IndicesSymbol\n    let sectorName: String\n    \n    private var tableName: String {\n        switch sectorName {\n        case \"ETFs_US\":\n            return \"ETFs\"\n        case \"Economic_All\":\n            return \"Economics\"\n        default:\n            return sectorName\n        }\n    }\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: symbol.symbol, groupName: tableName)) {\n            VStack(alignment: .leading, spacing: 8) {\n                // 只显示 symbol\n                HStack {\n                    Text(symbol.symbol)\n                        .font(.headline)\n                        .foregroundColor(.primary)\n                    \n                    Spacer()\n                    \n                    Text(symbol.value)\n                        .foregroundColor(getValueColor(value: symbol.value))\n                        .fontWeight(.semibold)\n                }\n                \n                // 保持 tags 显示\n                if let tags = symbol.tags, !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding()\n            .background(\n                RoundedRectangle(cornerRadius: 12)\n                    .fill(Color(.systemGray6))\n                    .shadow(color: Color.black.opacity(0.05), radius: 2, x: 2, y: 2)\n            )\n            .padding(.vertical, 4)\n        }\n    }\n    \n    private func getValueColor(value: String) -> Color {\n        if value.contains(\"+\") {\n            return .green\n        } else if value.contains(\"-\") {\n            return .red\n        } else if value == \"N/A\" {\n            return .gray\n        } else {\n            return .blue\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Modules/Sectors_panel.json",
                "filename": "Sectors_panel.json",
                "content": "{\n    \"Basic_Materials\": {\n        \"UFPI\": \"\",\n        \"BCC\": \"\"\n    },\n    \"Real_Estate\": {},\n    \"Energy\": {},\n    \"Technology\": {\n        \"ENPH\": \"\"\n    },\n    \"Consumer_Cyclical\": {},\n    \"Utilities\": {},\n    \"Consumer_Defensive\": {\n        \"FLO\": \"关注财报\",\n        \"GIS\": \"关注财报\"\n    },\n    \"Industrials\": {\n        \"BAH\": \"\"\n    },\n    \"Communication_Services\": {\n        \"OMC\": \"\"\n    },\n    \"Financial_Services\": {\n        \"BRK-A\": \"\"\n    },\n    \"Healthcare\": {\n        \"MRNA\": \"\"\n    },\n    \"Bonds\": {\n        \"US10Y\": \"\",\n        \"US2Y\": \"\",\n        \"JP10Y\": \"\",\n        \"IND10Y\": \"\",\n        \"BR10Y\": \"\",\n        \"UK10Y\": \"\",\n        \"TUR10Y\": \"\"\n    },\n    \"Indices\": {\n        \"VIX\": \"\",\n        \"NASDAQ\": \"\",\n        \"S&P500\": \"\",\n        \"DowJones\": \"\",\n        \"HANGSENG\": \"\",\n        \"Shanghai\": \"\",\n        \"Shenzhen\": \"\",\n        \"EURO50\": \"\",\n        \"UK100\": \"\",\n        \"Russell\": \"\",\n        \"panEURO100\": \"\",\n        \"Nikkei\": \"\",\n        \"India\": \"\",\n        \"Singapore\": \"\",\n        \"Russia\": \"\",\n        \"Korea\": \"\",\n        \"Australia\": \"\",\n        \"Brazil\": \"\"\n    },\n    \"Commodities\": {\n        \"CrudeOil\": \"\",\n        \"Huangjin\": \"\",\n        \"Naturalgas\": \"\",\n        \"BalticDry\": \"\",\n        \"Silver\": \"\",\n        \"Copper\": \"\",\n        \"Uranium\": \"\",\n        \"Nickel\": \"\",\n        \"Aluminum\": \"\",\n        \"Steel\": \"\",\n        \"IronOre\": \"\",\n        \"Platinum\": \"\",\n        \"Cocoa\": \"\",\n        \"Coffee\": \"\",\n        \"YuMi\": \"\",\n        \"Soybean\": \"\",\n        \"Cotton\": \"\",\n        \"OrangeJuice\": \"\",\n        \"Sugar\": \"\",\n        \"Wheat\": \"\",\n        \"Rice\": \"\",\n        \"Oat\": \"\",\n        \"LeanHogs\": \"\",\n        \"LiveCattle\": \"\",\n        \"PalmOil\": \"\",\n        \"Coal\": \"\",\n        \"Tin\": \"\",\n        \"Zinc\": \"\",\n        \"Palladium\": \"\",\n        \"Poultry\": \"\",\n        \"Salmon\": \"\"\n    },\n    \"Crypto\": {\n        \"Bitcoin\": \"\",\n        \"Ether\": \"\",\n        \"Binance\": \"\",\n        \"Solana\": \"\",\n        \"XRP\": \"\"\n    },\n    \"ETFs\": {\n        \"SCHD\": \"\",\n        \"DBC\": \"\",\n        \"IBIT\": \"\",\n        \"SOXX\": \"\",\n        \"ASHR\": \"\",\n        \"EWT\": \"\",\n        \"URA\": \"\",\n        \"UUP\": \"\",\n        \"FXY\": \"\"\n    },\n    \"highlow\": {\n        \"THD\": \"\"\n    },\n    \"Currencies\": {\n        \"DXY\": \"美元指数\",\n        \"CNYI\": \"人民币指数\",\n        \"JPYI\": \"日元指数\",\n        \"USDCNY\": \"\",\n        \"USDJPY\": \"\",\n        \"EURUSD\": \"\",\n        \"CNYJPY\": \"\",\n        \"GBPI\": \"英镑指数\",\n        \"CHFI\": \"瑞士法郎指数\",\n        \"EURI\": \"欧元指数\",\n        \"CNYARS\": \"阿根廷\",\n        \"GBPUSD\": \"\",\n        \"CNYINR\": \"印度卢比\",\n        \"CNYKRW\": \"\",\n        \"CNYEGP\": \"埃及\",\n        \"CNYRUB\": \"俄罗斯卢布\",\n        \"CNYPHP\": \"菲律宾比索\",\n        \"CNYIDR\": \"印度尼西亚卢比\",\n        \"CNYTHB\": \"泰国\",\n        \"CNYIRR\": \"伊朗\",\n        \"CNYCHF\": \"人民币瑞士法郎\",\n        \"CNYUSD\": \"人民币兑美元\",\n        \"USDRUB\": \"俄罗斯卢布\",\n        \"USDCHF\": \"美元瑞士法郎\",\n        \"USDKRW\": \"\",\n        \"USDTRY\": \"\",\n        \"USDSGD\": \"\",\n        \"USDTWD\": \"\",\n        \"USDIDR\": \"印度尼西亚卢比\",\n        \"USDPHP\": \"菲律宾比索\",\n        \"USDMYR\": \"马来西亚\",\n        \"USDMXN\": \"墨西哥\",\n        \"USDARS\": \"阿根廷\",\n        \"USDEGP\": \"埃及\",\n        \"USDBRL\": \"巴西\",\n        \"USDINR\": \"印度卢比\"\n    },\n    \"Economics\": {\n        \"USNonFarmA\": \"04 USNonFarmA\",\n        \"USNonPMI\": \"04 USNonPMI\",\n        \"USTrade\": \"05 USTrade\",\n        \"USNonFarm\": \"06 USNonFarm\",\n        \"USUnemploy\": \"06 USUnemploy\",\n        \"USInitial\": \"05 USInitial\"\n    },\n    \"ETFs_US\": {\n        \"TLT\": \"\",\n        \"XLK\": \"科技\",\n        \"XLV\": \"医疗\",\n        \"XLI\": \"工业\",\n        \"XLF\": \"金融\",\n        \"XLP\": \"必需消费\",\n        \"XLY\": \"非必需消费\",\n        \"XLRE\": \"房地产\",\n        \"XAR\": \"国防航天\",\n        \"KIE\": \"保险\",\n        \"XLB\": \"原材料\",\n        \"PAVE\": \"基础设施\",\n        \"XLE\": \"能源\",\n        \"XLU\": \"公共事业\"\n    },\n    \"Economic_All\": {\n        \"USGDP\": \"\",\n        \"USCPI\": \"\",\n        \"USInterest\": \"\",\n        \"USNonFarm\": \"\",\n        \"USNonFarmA\": \"\",\n        \"USTrade\": \"\",\n        \"USConfidence\": \"\",\n        \"USRetailM\": \"\",\n        \"CoreCPI\": \"\",\n        \"CorePPI\": \"\",\n        \"USPPI\": \"\",\n        \"USNonPMI\": \"\",\n        \"USUnemploy\": \"\",\n        \"CorePCEY\": \"\",\n        \"CorePCEM\": \"\",\n        \"USConspending\": \"\",\n        \"PCEY\": \"\",\n        \"USInitial\": \"\",\n        \"ImportPriceM\": \"\",\n        \"ImportPriceY\": \"\"\n    }\n}"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json",
                "filename": "Sectors_All.json",
                "content": "{\n  \"Bonds\": [\n    \"US10Y\",\n    \"UK10Y\"\n  ],\n  \"Currencies\": [],\n  \"Crypto\": [],\n  \"Indices\": [],\n  \"Commodities\": [],\n  \"ETFs\": [\n    \"IOSP\",\n    \"TUR10Y\",\n    \"EA\"\n  ],\n  \"Economics\": [\n    \"SPTI\",\n    \"PICK\",\n    \"LIT\",\n    \"URA\"\n  ],\n  \"Basic_Materials\": [],\n  \"Communication_Services\": [],\n  \"Consumer_Cyclical\": [],\n  \"Consumer_Defensive\": [],\n  \"Energy\": [\n    \"SHEL\",\n    \"CNQ\"\n  ],\n  \"Financial_Services\": [],\n  \"Healthcare\": [],\n  \"Industrials\": [],\n  \"Real_Estate\": [],\n  \"Technology\": [\n    \"AAPL\",\n    \"NVDA\"\n  ],\n  \"Utilities\": []\n}"
            }
        ],
        "final_prompt": "我在sectors_panel里新增了一个分类叫highlow，里面有一些symbol，目前我点击这些symbol，可能是把highlow作为groupname传递给chartview来展示，我的需求是：当我在indices程序里点击里面的symbol时，应该通过dataservice程序去索引sectors_all里按照symbol找到所属的组名（sectors_all里的组名就是groupname），然后把symbol和组名一块传递给chartview来展示曲线。该怎么改代码实现这一需求？"
    },
    {
        "id": "2025-06-09 17:18:40",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 17:23:45",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 18:19:12",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// MARK: - 新增：High/Low 数据模型\nstruct HighLowItem: Identifiable, Codable {\n    var id = UUID()\n    let symbol: String\n}\n\nstruct HighLowGroup: Identifiable {\n    let id: String // 使用 timeInterval 作为 id\n    let timeInterval: String\n    var items: [HighLowItem]\n}\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description的tags，symbol可以点击进入chartview界面，每个分组里面超过5个会折叠等等都参考earningrelease。该怎么写代码实现？"
    },
    {
        "id": "2025-06-09 18:46:41",
        "project_name": "highlow",
        "project_desc": "我有一个Xcode开发的iPhone手机应用程序.",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Launcher.swift",
                "filename": "Launcher.swift",
                "content": "import SwiftUI\nimport Foundation\n\n@main\nstruct Finance: App {\n    var body: some Scene {\n        WindowGroup {\n            MainContentView()\n        }\n    }\n}\n\nstruct MainContentView: View {\n    @StateObject private var dataService = DataService()\n    \n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 0) {\n                // 1. 上部：Sectors 展示\n                IndicesContentView()\n                    .frame(maxHeight: .infinity, alignment: .top)\n                \n                Divider()\n                \n                // 2. 中部：搜索框\n                SearchContentView()\n                    .frame(height: 100)\n                    .padding(.vertical, 10)\n                \n                Divider()\n                \n                // 3. 下部：自定义标签栏\n                TopContentView()\n                    .frame(height: 60)\n                    .background(Color(.systemBackground))\n            }\n            .navigationBarTitle(\"经济数据与搜索\", displayMode: .inline)\n        }\n        .environmentObject(dataService) // 移到这里，确保 NavigationStack 内的所有视图都能访问\n        .onAppear {\n            dataService.loadData()\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/GainerLoser.swift",
                "filename": "GainerLoser.swift",
                "content": "import SwiftUI\n\n// MARK: - 基础协议\nprotocol MarketItem: Identifiable, Codable {\n    var id: String { get }\n    var groupName: String { get }\n    var rawSymbol: String { get }\n    var symbol: String { get }\n    var value: String { get }\n    var descriptions: String { get }\n}\n\n// MARK: - MarketItem 扩展\nextension MarketItem {\n    var numericValue: Double {\n        Double(value.replacingOccurrences(of: \"%\", with: \"\")) ?? 0.0\n    }\n}\n\n// MARK: - Stock Model\nstruct Stock: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - ETF Model\nstruct ETF: MarketItem {\n    var id: String = UUID().uuidString\n    let groupName: String\n    let rawSymbol: String\n    let symbol: String\n    let value: String\n    let descriptions: String\n}\n\n// MARK: - 单个 Market Item 行视图\nstruct MarketItemRow<T: MarketItem>: View {\n    let item: T\n    \n    var body: some View {\n        NavigationLink(destination: ChartView(symbol: item.symbol, groupName: item.groupName)) {\n            VStack(alignment: .leading, spacing: 5) {\n                HStack(spacing: 8) {\n                    Text(item.rawSymbol)\n                        .font(.headline)\n                    Spacer()\n                    Text(item.value)\n                        .font(.subheadline)\n                        .foregroundColor(item.numericValue > 0 ? .green : (item.numericValue < 0 ? .red : .gray))\n                }\n                Text(item.descriptions)\n                    .font(.caption)\n                    .foregroundColor(.gray)\n            }\n            .padding(5)\n        }\n    }\n}\n\n// MARK: - 通用 MarketItem 列表视图\nstruct MarketListView<T: MarketItem>: View {\n    let title: String\n    let items: [T]\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        List(items) { item in\n            MarketItemRow(item: item)\n        }\n        .navigationTitle(title)\n    }\n}\n\ntypealias StockListView = MarketListView<Stock>\ntypealias ETFListView = MarketListView<ETF>\n\n// MARK: - 主容器视图\nstruct TopContentView: View {\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n                CustomTabBar()\n            }\n        }\n    }\n}\n\n// MARK: - 自定义底部标签栏\nstruct CustomTabBar: View {\n    @StateObject private var dataService = DataService.shared // 使用单例\n    \n    var body: some View {\n        HStack(spacing: 0) {\n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Gainers\", items: dataService.topGainers))\n            ) {\n                TabItemView(title: \"涨幅榜\", imageName: \"arrow.up\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(StockListView(title: \"Top Losers\", items: dataService.topLosers))\n            ) {\n                TabItemView(title: \"跌幅榜\", imageName: \"arrow.down\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Gainers\", items: dataService.etfGainers))\n            ) {\n                TabItemView(title: \"ETF涨幅\", imageName: \"chart.line.uptrend.xyaxis\")\n            }\n            \n            NavigationLink(\n                destination: LazyView(ETFListView(title: \"ETF Losers\", items: dataService.etfLosers))\n            ) {\n                TabItemView(title: \"ETF跌幅\", imageName: \"chart.line.downtrend.xyaxis\")\n            }\n        }\n        .frame(height: 50)\n        .background(Color(.systemBackground))\n        .onAppear {\n            dataService.loadDataIfNeeded()\n        }\n    }\n}\n\n// MARK: - 标签栏子视图\nstruct TabItemView: View {\n    let title: String\n    let imageName: String\n    \n    var body: some View {\n        VStack {\n            Image(systemName: imageName)\n                .font(.system(size: 20))\n            Text(title)\n                .font(.caption)\n        }\n        .foregroundColor(.blue)\n        .frame(maxWidth: .infinity)\n    }\n}\n\n// MARK: - 懒加载视图包装器\nstruct LazyView<Content: View>: View {\n    let build: () -> Content\n    \n    init(_ build: @autoclosure @escaping () -> Content) {\n        self.build = build\n    }\n    \n    var body: Content {\n        build()\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/EarningRelease.swift",
                "filename": "EarningRelease.swift",
                "content": "import SwiftUI\nimport Combine\n\nstruct EarningReleaseView: View {\n  @EnvironmentObject var dataService: DataService\n\n  struct DateGroup: Identifiable {\n    let id: String; let date: String; let items: [EarningRelease]\n  }\n\n  @State private var expandedSections: [String: Bool] = [:]\n\n  private var groupedReleases: [DateGroup] {\n    let dict = Dictionary(grouping: dataService.earningReleases, by: { $0.date })\n    var groups: [DateGroup] = []\n    for (date, items) in dict {\n      groups.append(.init(id: date, date: date, items: items))\n    }\n    groups.sort { $0.date < $1.date }\n    return groups\n  }\n\n  var body: some View {\n    List {\n      ForEach(groupedReleases) { group in\n        Section(header: sectionHeader(for: group)) {\n          if expandedSections[group.date] ?? true {\n            ForEach(group.items) { item in\n              sectionRow(for: item)\n            }\n          }\n        }\n      }\n    }\n    .navigationTitle(\"财报发布\")\n    .onAppear {\n      dataService.loadData()\n      initializeExpandedStates()\n    }\n    // 用 onReceive 监听 @Published 值的变化\n    .onReceive(dataService.$earningReleases) { _ in\n      initializeExpandedStates()\n    }\n  }\n\n    // MARK: - Section Header\n\n    @ViewBuilder\n    private func sectionHeader(for group: DateGroup) -> some View {\n        HStack {\n            Text(group.date)\n                .font(.headline)\n                .foregroundColor(.primary)\n            Spacer()\n            // 直接显示 chevron\n            Image(systemName: (expandedSections[group.date] ?? true)\n                  ? \"chevron.down\"\n                  : \"chevron.right\")\n                .foregroundColor(.secondary)\n        }\n        .padding(.vertical, 5)\n        // 让整个 HStack 区域都能点\n        .contentShape(Rectangle())\n        .onTapGesture {\n            // 切换折叠/展开\n            let isExpanded = expandedSections[group.date] ?? true\n            withAnimation {\n                expandedSections[group.date] = !isExpanded\n            }\n        }\n    }\n\n    // MARK: - Section Row\n\n    private func sectionRow(for item: EarningRelease) -> some View {\n        // 拿到分组名\n        let groupName = dataService.getCategory(for: item.symbol) ?? \"Stocks\"\n        return NavigationLink(destination: ChartView(symbol: item.symbol, groupName: groupName)) {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(item.symbol)\n                    .font(.system(.body, design: .monospaced))\n                    .foregroundColor(item.color)\n                if let tags = getTags(for: item.symbol), !tags.isEmpty {\n                    Text(tags.joined(separator: \", \"))\n                        .font(.footnote)\n                        .foregroundColor(.secondary)\n                        .lineLimit(2)\n                        .multilineTextAlignment(.leading)\n                        .fixedSize(horizontal: false, vertical: true)\n                }\n            }\n            .padding(.vertical, 2)\n        }\n    }\n\n    // MARK: - 初始化每组的“默认展开状态”\n\n    private func initializeExpandedStates() {\n        for group in groupedReleases {\n            // 只有还没设置过的组，才根据条目数设初始值\n            if expandedSections[group.date] == nil {\n                // 超过 5 条折叠(false)，否则展开(true)\n                expandedSections[group.date] = (group.items.count <= 5)\n            }\n        }\n    }\n\n    // MARK: - 获取 Tags\n\n    private func getTags(for symbol: String) -> [String]? {\n        if let stockTags = dataService.descriptionData?\n            .stocks.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return stockTags\n        }\n        if let etfTags = dataService.descriptionData?\n            .etfs.first(where: { $0.symbol.uppercased() == symbol.uppercased() })?.tag {\n            return etfTags\n        }\n        return nil\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/News/highlow.txt",
                "filename": "highlow.txt",
                "content": "[5Y]\nLow:\nSOXS, SPXS, SPXU\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nLow:\n\nHigh:\nLeanHogs\n\n[1Y]\nLow:\n\nHigh:\n\n\n[6 months]\nLow:\nCNYMXN, USNonFarm\nHigh:\nEWW, FLTW, FNDE, AGQ, PXH, DEM\n\n[3 months]\nLow:\nVIX, STIP, VGSH, TWM, SCHO\nHigh:\nNASDAQ, UK100, Russell, S&P500, Palladium, EWT, SMH, SOXX, IAI, CWB, FLIN, FPEI, VGT, XLK, IYW, IVW, SPYG, IWF, SCHG, QQQ, XLG, JQUA, QQQE, SPTM, ITOT, SPLG, IVV, SPY, VOO, ESGU, PAVE, DIA, IWM, VTI, QQQM, TQQQ, ICVT, PCEF, IFRA, QLD, INDA, DSI, SPXL, CEFS, REET, QUAL, SMIN, SCHB, ESGV, WGMI, IGV, DYNF, IXN, VONG, IOO, SCHX, IWP, IWB, SPYX, ROBO, PRFZ, BJUL, BOCT, SUSA, AIQ, BJAN\n\n[1 months]\nLow:\nJPYI, CNYBRL, THD, JPST, VIXY, UVXY, VXX, SCO, MMIT, HTAB, FLMI\nHigh:\nEURI, CNYPHP, CrudeOil, Wheat, DBC, DGRO, BIZD, SOXL, IBB, XBI, UCO, WEAT, SVXY, PPH, FTGC, QYLD, VYM, SDCI, DIVB, IXJ\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/DataService.swift",
                "filename": "DataService.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI  // 添加这行\n\n// MARK: - 新增：High/Low 数据模型\nstruct HighLowItem: Identifiable, Codable {\n    var id = UUID()\n    let symbol: String\n}\n\nstruct HighLowGroup: Identifiable {\n    let id: String // 使用 timeInterval 作为 id\n    let timeInterval: String\n    var items: [HighLowItem]\n}\n\n// 定义模型结构\nstruct DescriptionData: Codable {\n    let global: [String: String]?  // 添加全局时间点标记\n    let stocks: [SearchStock]\n    let etfs: [SearchETF]\n}\n\nstruct SearchStock: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct SearchETF: Identifiable, Codable, SearchDescribableItem {\n    let id = UUID()\n    let symbol: String\n    let name: String\n    let tag: [String]\n    let description1: String\n    let description2: String\n    let description3: [[String: String]]?\n    \n    enum CodingKeys: String, CodingKey {\n        case symbol, name, tag, description1, description2, description3\n    }\n}\n\nstruct MarketCapDataItem {\n    let marketCap: String   // 格式化后的市值字符串（例如 \"219B\"）\n    let peRatio: Double?\n    let pb: Double?         // 新增 pb 属性\n\n    init(marketCap: Double, peRatio: Double?, pb: Double?) {\n        self.marketCap = Self.formatMarketCap(marketCap)\n        self.peRatio = peRatio\n        self.pb = pb\n    }\n    \n    // 将市值格式化为以B为单位的字符串\n    private static func formatMarketCap(_ cap: Double) -> String {\n        String(format: \"%.0fB\", cap / 1_000_000_000)\n    }\n}\n\nstruct EarningRelease: Identifiable {\n    let id = UUID()\n    let symbol: String\n    let color: Color\n    let date: String\n}\n\nclass DataService: ObservableObject {\n    // MARK: - Singleton\n    static let shared = DataService()\n    init() {}\n    \n    // MARK: - Published properties\n    @Published var topGainers: [Stock] = []\n    @Published var topLosers: [Stock] = []\n    @Published var etfGainers: [ETF] = []\n    @Published var etfLosers: [ETF] = []\n    \n    // 新增的 Published 属性\n    @Published var descriptionData: DescriptionData?\n    @Published var marketCapData: [String: MarketCapDataItem] = [:]\n    @Published var sectorsData: [String: [String]] = [:]\n    @Published var compareData: [String: String] = [:]\n    @Published var sectorsPanel: SectorsPanel?\n    @Published var symbolEarningData: [String: [Date: Double]] = [:]\n    \n    // 添加新的属性\n    @Published var earningReleases: [EarningRelease] = []\n    \n    // 新增的 errorMessage 属性\n    @Published var errorMessage: String? = nil\n    \n    // 在 DataService 类中添加新的属性来存储时间点标记\n    @Published var globalTimeMarkers: [Date: String] = [:]\n    @Published var symbolTimeMarkers: [String: [Date: String]] = [:]\n    \n    private var isDataLoaded = false\n    private var loadingTask: Task<Void, Never>?\n    private let cache = NSCache<NSString, AnyObject>()\n    \n    // MARK: - Public methods\n    func loadDataIfNeeded() {\n        guard !isDataLoaded else { return }\n        \n        loadingTask?.cancel()\n        loadingTask = Task {\n            await loadDataAsync()\n        }\n    }\n    \n    func loadData() {\n        loadMarketCapData()\n        loadDescriptionData()\n        loadSectorsData()\n        loadCompareData()\n        loadSectorsPanel()\n        loadEarningRelease() // 添加这行\n    }\n    \n    // MARK: - Private methods\n    private func loadDataAsync() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask { await self.loadCompareStockAsync() }\n            group.addTask { await self.loadCompareETFsAsync() }\n        }\n        \n        await MainActor.run {\n            self.isDataLoaded = true\n        }\n    }\n    \n    private func loadFromCache<T>(_ key: String) -> T? {\n        return cache.object(forKey: key as NSString) as? T\n    }\n    \n    private func saveToCache<T>(_ value: T, forKey key: String) {\n        cache.setObject(value as AnyObject, forKey: key as NSString)\n    }\n    \n    // 添加新的加载方法\n    private func loadEarningRelease() {\n        guard let url = Bundle.main.url(forResource: \"Earnings_Release_new\", withExtension: \"txt\") else { return }\n        do {\n            let content = try String(contentsOf: url, encoding: .utf8)\n            let lines = content.split(separator: \"\\n\")\n            \n            earningReleases = lines.compactMap { line -> EarningRelease? in\n                let parts = line.split(separator: \":\")\n                let firstPart = String(parts[0]).trimmingCharacters(in: .whitespaces)\n                \n                // 提取基础symbol和颜色标识\n                let symbol = firstPart.trimmingCharacters(in: .whitespaces)\n                var color: Color = .gray // 默认颜色\n                \n                if parts.count > 1 {\n                    let colorIdentifier = String(parts[1].prefix(1))\n                    color = self.getColor(for: colorIdentifier)\n                }\n                \n                // 提取日期\n                let dateParts = line.split(separator: \":\").last?\n                    .trimmingCharacters(in: .whitespaces)\n                    .split(separator: \"-\")\n                \n                if let month = dateParts?[1], let day = dateParts?[2] {\n                    let dateStr = \"\\(month)-\\(day)\"\n                    return EarningRelease(symbol: symbol, color: color, date: dateStr)\n                }\n                \n                return nil\n            }\n        } catch {\n            self.errorMessage = \"加载 Earnings_Release_new.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func getColor(for identifier: String) -> Color {\n        switch identifier {\n        case \"Y\":\n            return .yellow\n        case \"C\":\n            return .cyan\n        case \"B\":\n            return .green\n        case \"W\":\n            return .white\n        case \"O\":\n            return .orange\n        case \"b\":\n            return .blue\n        default:\n            return .gray\n        }\n    }\n    \n    private func loadCompareStockAsync() async {\n            if let cached: ([Stock], [Stock]) = loadFromCache(\"compareStock\") {\n                await MainActor.run {\n                    self.topGainers = cached.0\n                    self.topLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareStock\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let topGainersLines = lines.prefix(20)\n                let topLosersLines = lines.suffix(20).reversed()\n                \n                let newTopGainers = topGainersLines.compactMap { parseStockLine(String($0)) }\n                let newTopLosers = topLosersLines.compactMap { parseStockLine(String($0)) }\n                \n                saveToCache((newTopGainers, newTopLosers), forKey: \"compareStock\")\n                await MainActor.run {\n                    self.topGainers = newTopGainers\n                    self.topLosers = newTopLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareStock.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n        \n        private func loadCompareETFsAsync() async {\n            if let cached: ([ETF], [ETF]) = loadFromCache(\"compareETFs\") {\n                await MainActor.run {\n                    self.etfGainers = cached.0\n                    self.etfLosers = cached.1\n                }\n                return\n            }\n            \n            guard let url = Bundle.main.url(forResource: \"CompareETFs\", withExtension: \"txt\") else { return }\n            \n            do {\n                let content = try String(contentsOf: url, encoding: .utf8)\n                let lines = content.split(separator: \"\\n\")\n                \n                let parsedETFs = lines.compactMap { parseETFLine(String($0)) }\n                let etfGainersList = parsedETFs.filter { $0.numericValue > 0 }\n                    .sorted { $0.numericValue > $1.numericValue }\n                    .prefix(20)\n                let etfLosersList = parsedETFs.filter { $0.numericValue < 0 }\n                    .sorted { $0.numericValue < $1.numericValue }\n                    .prefix(20)\n                \n                let newETFGainers = Array(etfGainersList)\n                let newETFLosers = Array(etfLosersList)\n                \n                saveToCache((newETFGainers, newETFLosers), forKey: \"compareETFs\")\n                await MainActor.run {\n                    self.etfGainers = newETFGainers\n                    self.etfLosers = newETFLosers\n                }\n            } catch {\n                await MainActor.run {\n                    self.errorMessage = \"加载 CompareETFs.txt 失败: \\(error.localizedDescription)\"\n                }\n            }\n        }\n    \n    private func loadSectorsPanel() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_panel\", withExtension: \"json\") else {\n            DispatchQueue.main.async {\n                self.errorMessage = \"Sectors_panel.json 文件未找到\"\n            }\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(SectorsPanel.self, from: data)\n            DispatchQueue.main.async {\n                self.sectorsPanel = decodedData\n            }\n        } catch {\n            DispatchQueue.main.async {\n                self.errorMessage = \"加载 Sectors_panel.json 失败: \\(error.localizedDescription)\"\n            }\n        }\n    }\n    \n    private func loadDescriptionData() {\n        guard let url = Bundle.main.url(forResource: \"description\", withExtension: \"json\") else {\n            self.errorMessage = \"description.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            descriptionData = try decoder.decode(DescriptionData.self, from: data)\n            \n            // 解析全局时间点标记\n            if let global = descriptionData?.global {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for (dateString, text) in global {\n                    if let date = dateFormatter.date(from: dateString) {\n                        globalTimeMarkers[date] = text\n                    }\n                }\n            }\n            \n            // 解析特定股票的时间点标记\n            if let stocks = descriptionData?.stocks {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for stock in stocks {\n                    if let description3 = stock.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[stock.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n            \n            // 解析特定ETF的时间点标记\n            if let etfs = descriptionData?.etfs {\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyy-MM-dd\"\n                \n                for etf in etfs {\n                    if let description3 = etf.description3 {\n                        var markers: [Date: String] = [:]\n                        \n                        for markerDict in description3 {\n                            for (dateString, text) in markerDict {\n                                if let date = dateFormatter.date(from: dateString) {\n                                    markers[date] = text\n                                }\n                            }\n                        }\n                        \n                        if !markers.isEmpty {\n                            symbolTimeMarkers[etf.symbol.uppercased()] = markers\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 description.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadSectorsData() {\n        guard let url = Bundle.main.url(forResource: \"Sectors_All\", withExtension: \"json\") else {\n            self.errorMessage = \"Sectors_All.json 文件未找到\"\n            return\n        }\n        do {\n            let data = try Data(contentsOf: url)\n            sectorsData = try JSONDecoder().decode([String: [String]].self, from: data)\n        } catch {\n            self.errorMessage = \"加载 Sectors_All.json 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    func getCategory(for symbol: String) -> String? {\n        for (category, symbols) in sectorsData {\n            if symbols.map({ $0.uppercased() }).contains(symbol.uppercased()) {\n                return category\n            }\n        }\n        return nil\n    }\n    \n    private func loadMarketCapData() {\n        guard let url = Bundle.main.url(forResource: \"marketcap_pe\", withExtension: \"txt\") else {\n            self.errorMessage = \"marketcap_pe.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces).uppercased()\n                    let values = parts[1].split(separator: \",\")\n                    \n                    if values.count >= 2 {\n                        // 解析市值\n                        if let marketCap = Double(values[0].trimmingCharacters(in: .whitespaces)) {\n                            // 解析 peRatio\n                            let peRatioString = values[1].trimmingCharacters(in: .whitespaces)\n                            let peRatio = peRatioString == \"--\" ? nil : Double(peRatioString)\n                            \n                            // 解析 pb（如果存在）\n                            var pb: Double? = nil\n                            if values.count >= 3 {\n                                let pbString = values[2].trimmingCharacters(in: .whitespaces)\n                                pb = Double(pbString)\n                            }\n                            \n                            marketCapData[symbol] = MarketCapDataItem(marketCap: marketCap, peRatio: peRatio, pb: pb)\n                        }\n                    }\n                }\n            }\n        } catch {\n            self.errorMessage = \"加载 marketcap_pe.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    private func loadCompareData() {\n        guard let url = Bundle.main.url(forResource: \"Compare_All\", withExtension: \"txt\") else {\n            self.errorMessage = \"Compare_All.txt 文件未找到\"\n            return\n        }\n        do {\n            let text = try String(contentsOf: url, encoding: .utf8)\n            let lines = text.split(separator: \"\\n\")\n            \n            // 创建两个字典：一个保存原始大小写，一个保存大写用于查找\n            var originalCaseData: [String: String] = [:]\n            var upperCaseMap: [String: String] = [:]\n            \n            for line in lines {\n                let parts = line.split(separator: \":\")\n                if parts.count >= 2 {\n                    let symbol = parts[0].trimmingCharacters(in: .whitespaces)\n                    let value = parts[1].trimmingCharacters(in: .whitespaces)\n                    \n                    // 保存原始大小写的版本\n                    originalCaseData[symbol] = value\n                    // 保存大写版本用于查找\n                    upperCaseMap[symbol.uppercased()] = value\n                }\n            }\n            \n            // 合并两个字典，优先使用原始大小写的值\n            compareData = upperCaseMap.merging(originalCaseData) { (_, new) in new }\n        } catch {\n            self.errorMessage = \"加载 Compare_All.txt 失败: \\(error.localizedDescription)\"\n        }\n    }\n    \n    // 首先添加一个私有的帮助函数\n    private func cleanSymbol(_ symbol: String) -> String {\n        // 使用正则表达式匹配最后一个字母之前的所有内容（包括该字母）\n        let pattern = \"^([A-Za-z-]+)\"\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []),\n              let match = regex.firstMatch(in: symbol, options: [], range: NSRange(location: 0, length: symbol.count)),\n              let range = Range(match.range(at: 1), in: symbol) else {\n            return symbol // 如果无法匹配，返回原始字符串\n        }\n        return String(symbol[range])\n    }\n\n    private func parseStockLine(_ line: String) -> Stock? {\n        let pattern = \"^(.*?)\\\\s+(\\\\S+)\\\\s*:\\\\s*([+-]?[\\\\d\\\\.]+%)\\\\s*(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: line, options: [], range: NSRange(location: 0, length: line.utf16.count)) else { return nil }\n        \n        guard let groupNameRange = Range(match.range(at: 1), in: line),\n              let symbolRange = Range(match.range(at: 2), in: line),\n              let valueRange = Range(match.range(at: 3), in: line),\n              let descRange = Range(match.range(at: 4), in: line) else { return nil }\n        \n        let groupName = String(line[groupNameRange])\n        let rawSymbol = String(line[symbolRange])\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let value = String(line[valueRange])\n        let desc = String(line[descRange])\n        \n        return Stock(groupName: groupName, rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: desc)\n    }\n\n    private func parseETFLine(_ line: String) -> ETF? {\n        let parts = line.split(separator: \":\")\n        guard parts.count >= 2 else { return nil }\n        \n        let rawSymbol = String(parts[0].trimmingCharacters(in: .whitespaces))\n        let cleanedSymbol = cleanSymbol(rawSymbol) // 使用清理函数\n        let rest = parts[1].trimmingCharacters(in: .whitespaces)\n        \n        let pattern = \"^([+-]?[\\\\d\\\\.]+%)\\\\s+\\\\d+\\\\s+[+-]?[\\\\d\\\\.]+%\\\\s+(.*)$\"\n        let regex = try? NSRegularExpression(pattern: pattern, options: [])\n        guard let match = regex?.firstMatch(in: rest, options: [], range: NSRange(location: 0, length: rest.utf16.count)) else { return nil }\n        \n        guard let valueRange = Range(match.range(at: 1), in: rest),\n              let descRange = Range(match.range(at: 2), in: rest) else { return nil }\n        \n        let value = String(rest[valueRange])\n        let descriptions = String(rest[descRange])\n        \n        return ETF(groupName: \"ETFs\", rawSymbol: rawSymbol, symbol: cleanedSymbol, value: value, descriptions: descriptions)\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/Search.swift",
                "filename": "Search.swift",
                "content": "import Foundation\nimport Combine\nimport SwiftUI\n\n// MARK: - 协议与模型\nprotocol SearchDescribableItem {\n    var symbol: String { get }\n    var name: String { get }\n    var tag: [String] { get }\n    var description1: String { get }\n    var description2: String { get }\n}\n\nstruct SelectedSymbol: Identifiable {\n    let id = UUID()\n    let result: SearchResult\n    let category: String\n}\n\nstruct GroupedSearchResults: Identifiable {\n    var id = UUID()\n    var category: MatchCategory\n    var results: [(result: SearchResult, score: Int)]\n    let highestScore: Int\n}\n\nenum MatchCategory: String, CaseIterable, Identifiable {\n    case stockSymbol = \"Stock Symbol\"\n    case etfSymbol = \"ETF Symbol\"\n    case stockName = \"Stock Name\"\n    case etfName = \"ETF Name\"\n    case stockTag = \"Stock Tag\"\n    case etfTag = \"ETF Tag\"\n    case stockDescription = \"Stock Description\"\n    case etfDescription = \"ETF Description\"\n    \n    var id: String { self.rawValue }\n    \n    var priority: Int {\n        switch self {\n        case .stockSymbol, .etfSymbol:\n            return 1000\n        case .stockTag, .etfTag:\n            return 800\n        case .stockName, .etfName:\n            return 500\n        case .stockDescription, .etfDescription:\n            return 300\n        }\n    }\n}\n\n// MARK: - 搜索结果包装\nclass SearchResult: Identifiable, ObservableObject {\n    let id = UUID()\n    @Published var symbol: String\n    @Published var name: String\n    @Published var tag: [String]\n    @Published var marketCap: String?\n    @Published var peRatio: String?\n    @Published var pb: String?  // 添加 pb 属性\n    @Published var compare: String?\n    @Published var volume: String?\n    \n    init(symbol: String, name: String, tag: [String],\n         marketCap: String? = nil, peRatio: String? = nil, pb: String? = nil,\n         compare: String? = nil, volume: String? = nil) {\n        self.symbol = symbol\n        self.name = name\n        self.tag = tag\n        self.marketCap = marketCap\n        self.peRatio = peRatio\n        self.pb = pb  // 初始化 pb\n        self.compare = compare\n        self.volume = volume\n    }\n}\n\n// MARK: - 分组 header\nstruct GroupHeaderView: View {\n    let category: MatchCategory\n    @Binding var isCollapsed: Bool\n    \n    var body: some View {\n        HStack {\n            Text(category.rawValue)\n                .font(.headline)\n                .foregroundColor(.gray)\n            Spacer()\n            Image(systemName: isCollapsed ? \"chevron.down\" : \"chevron.up\")\n                .foregroundColor(.gray)\n        }\n        .contentShape(Rectangle())\n        .onTapGesture {\n            withAnimation {\n                isCollapsed.toggle()\n            }\n        }\n    }\n}\n\n// MARK: - 主搜索按钮页面\nstruct SearchContentView: View {\n    @State private var showSearch = false\n    @State private var showCompare = false\n    @State private var showEarning = false // 添加新状态\n    @EnvironmentObject var dataService: DataService\n    \n    var body: some View {\n        NavigationStack {\n            HStack(spacing: 12) {\n                Button(action: { showCompare = true }) {\n                    VStack {\n                        Image(systemName: \"chart.line.uptrend.xyaxis\")\n                            .font(.system(size: 20))\n                        Text(\"比较\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showSearch = true }) {\n                    HStack {\n                        Image(systemName: \"magnifyingglass\")\n                        Text(\"点击搜索\")\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding()\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n                \n                Button(action: { showEarning = true }) {\n                    VStack {\n                        Image(systemName: \"calendar\")\n                            .font(.system(size: 20))\n                        Text(\"财报\")\n                            .font(.caption)\n                    }\n                    .frame(width: 60)\n                    .padding(.vertical, 8)\n                    .background(Color(.systemGray6))\n                    .cornerRadius(8)\n                }\n            }\n            .padding(.horizontal)\n            Spacer()\n        }\n        .navigationDestination(isPresented: $showSearch) {\n            SearchView(isSearchActive: true, dataService: dataService)\n        }\n        .navigationDestination(isPresented: $showCompare) {\n            CompareView(initialSymbol: \"\")\n        }\n        .navigationDestination(isPresented: $showEarning) {\n                    EarningReleaseView()\n                }\n    }\n}\n\n// MARK: - 搜索页面\nstruct SearchView: View {\n    @Environment(\\.dismiss) private var dismiss\n    @State private var searchText: String = \"\"\n    @State private var showClearButton: Bool = false\n    @State private var showSearchHistory: Bool = false\n    @State private var groupedSearchResults: [GroupedSearchResults] = []\n    @State private var isLoading: Bool = false\n    @State private var selectedCategory: String? = nil\n    @State private var showChart: Bool = false\n    @State private var selectedResult: SearchResult? = nil\n    @State private var selectedSymbol: SelectedSymbol? = nil\n    @State private var isFirstAppear = true\n    @ObservedObject var viewModel: SearchViewModel\n    @FocusState private var isSearchFieldFocused: Bool\n    @State private var showChartView: Bool = false\n    @State private var selectedSymbolForChart: SelectedSymbol? = nil\n    @State private var selectedSymbolForDescription: SelectedSymbol? = nil\n    @State private var clipboardContent: String = \"\"\n    @State private var showClipboardBar: Bool = false\n    \n    @State private var collapsedGroups: [MatchCategory: Bool] = [:]\n    let isSearchActive: Bool\n    \n    init(isSearchActive: Bool = false, dataService: DataService) {\n        self.isSearchActive = isSearchActive\n        self.viewModel = SearchViewModel(dataService: dataService)\n        _showSearchHistory = State(initialValue: isSearchActive)\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            searchBar\n                .padding()\n            \n            // 剪贴板小条\n            if showClipboardBar {\n                HStack {\n                    Image(systemName: \"doc.on.clipboard\")\n                        .foregroundColor(.gray)\n                    Text(clipboardContent)\n                        .lineLimit(1)\n                        .truncationMode(.middle)\n                    Spacer()\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n                .background(Color(.systemGray5))\n                .cornerRadius(8)\n                .padding(.horizontal)\n                .onTapGesture {\n                    // 粘贴并隐藏小条\n                    searchText = clipboardContent\n                    withAnimation {\n                        showClipboardBar = false\n                        showSearchHistory = false\n                    }\n                    // 你可以根据需要自动触发搜索：\n                     startSearch()\n                }\n                .transition(.move(edge: .top).combined(with: .opacity))\n            }\n\n            ZStack {\n                if showSearchHistory {\n                    SearchHistoryView(viewModel: viewModel) { term in\n                        searchText = term\n                        startSearch()\n                    }\n                    .transition(.opacity)\n                    .zIndex(1)\n                }\n                \n                if isLoading {\n                    ProgressView(\"正在搜索...\")\n                        .padding()\n                }\n                \n                if !showSearchHistory && !groupedSearchResults.isEmpty {\n                    searchResultsList\n                        .transition(.opacity)\n                }\n            }\n            .navigationBarTitleDisplayMode(.inline)\n            .alert(isPresented: Binding<Bool>(\n                get: { viewModel.errorMessage != nil },\n                set: { if !$0 { viewModel.errorMessage = nil } }\n            )) {\n                Alert(\n                    title: Text(\"错误\"),\n                    message: Text(viewModel.errorMessage ?? \"\"),\n                    dismissButton: .default(Text(\"确定\"))\n                )\n            }\n            .sheet(item: $selectedSymbol) { selected in\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n        .onAppear {\n            if isSearchActive && isFirstAppear {\n                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n                    isSearchFieldFocused = true\n                    isFirstAppear = false\n                }\n            }\n        }\n    }\n    \n    private var searchBar: some View {\n        HStack {\n            ZStack(alignment: .trailing) {\n                TextField(\n                    \"请输入要搜索的关键字\",\n                    text: $searchText,\n                    onEditingChanged: { isEditing in\n                        withAnimation {\n                            // 控制搜索历史的展示\n                            showSearchHistory = isEditing && searchText.isEmpty\n                            if isEditing && searchText.isEmpty {\n                                groupedSearchResults = []\n                            }\n                        }\n                        // 当开始编辑且文本为空时，读取剪贴板并展示小条\n                        if isEditing && searchText.isEmpty {\n                            if let content = UIPasteboard.general.string?\n                                .trimmingCharacters(in: .whitespacesAndNewlines),\n                               !content.isEmpty {\n                                clipboardContent = content\n                                withAnimation {\n                                    showClipboardBar = true\n                                }\n                            }\n                        }\n                    },\n                    onCommit: {\n                        startSearch()\n                    }\n                )\n                .focused($isSearchFieldFocused)\n                .padding(10)\n                .padding(.trailing, showClearButton ? 30 : 10)\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n                .onChange(of: searchText) { _, newValue in\n                    showClearButton = !newValue.isEmpty\n                    if newValue.isEmpty {\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                        }\n                    } else {\n                        // 输入时隐藏剪贴板小条\n                        withAnimation { showClipboardBar = false }\n                    }\n                }\n\n                if showClearButton {\n                    Button(action: {\n                        searchText = \"\"\n                        withAnimation {\n                            showSearchHistory = true\n                            groupedSearchResults = []\n                            isSearchFieldFocused = true\n                        }\n                        // 点击清除时读取剪贴板\n                        if let content = UIPasteboard.general.string?\n                            .trimmingCharacters(in: .whitespacesAndNewlines),\n                           !content.isEmpty {\n                            clipboardContent = content\n                            withAnimation {\n                                showClipboardBar = true\n                            }\n                        }\n                    }) {\n                        Image(systemName: \"xmark.circle.fill\")\n                            .foregroundColor(.gray)\n                            .opacity(0.6)\n                    }\n                    .padding(.trailing, 15)\n                    .transition(.opacity)\n                }\n            }\n\n            Button(action: {\n                startSearch()\n                isSearchFieldFocused = false\n            }) {\n                Text(\"搜索\")\n                    .foregroundColor(.white)\n                    .padding(.horizontal)\n                    .padding(.vertical, 8)\n                    .background(Color.blue)\n                    .cornerRadius(8)\n            }\n        }\n    }\n    \n    private var searchResultsList: some View {\n        List {\n            ForEach(groupedSearchResults) { groupedResult in\n                if !groupedResult.results.isEmpty {\n                    Section(header: GroupHeaderView(\n                        category: groupedResult.category,\n                        isCollapsed: Binding(\n                            get: { collapsedGroups[groupedResult.category] ?? false },\n                            set: { collapsedGroups[groupedResult.category] = $0 }\n                        )\n                    )) {\n                        if !(collapsedGroups[groupedResult.category] ?? false) {\n                            ForEach(groupedResult.results.sorted { $0.score > $1.score }, id: \\.result.id) { result, score in\n                                SearchResultRow(result: result, score: score)\n                                    .contentShape(Rectangle())  // 添加这一行\n                                    .onTapGesture {           // 改用 onTapGesture\n                                        handleResultSelection(result: result)\n                                    }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        .listStyle(InsetGroupedListStyle())\n        .sheet(item: $selectedSymbolForDescription) { selected in\n            if let descriptions = getDescriptions(for: selected.result.symbol) {\n                DescriptionView(descriptions: descriptions, isDarkMode: true)\n            } else {\n                DescriptionView(descriptions: (\"No description available.\", \"\"), isDarkMode: true)\n            }\n        }\n        .navigationDestination(isPresented: $showChartView) {\n            if let selected = selectedSymbolForChart {\n                ChartView(symbol: selected.result.symbol, groupName: selected.category)\n            }\n        }\n    }\n\n    // 添加处理结果选择的方法\n    private func handleResultSelection(result: SearchResult) {\n        // 检查symbol是否在数据库中有数据\n        if let groupName = viewModel.dataService.getCategory(for: result.symbol) {\n            // 检查数据库中是否有该symbol的价格数据\n            DispatchQueue.global(qos: .userInitiated).async {\n                let data = DatabaseManager.shared.fetchHistoricalData(\n                    symbol: result.symbol,\n                    tableName: groupName,\n                    dateRange: .timeRange(.oneMonth)\n                )\n                \n                DispatchQueue.main.async {\n                    if data.isEmpty {\n                        // 如果没有价格数据，但有description数据\n                        if getDescriptions(for: result.symbol) != nil {\n                            selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n                        }\n                    } else {\n                        // 有价格数据，通过导航打开ChartView\n                        selectedSymbolForChart = SelectedSymbol(result: result, category: groupName)\n                        showChartView = true\n                    }\n                }\n            }\n        } else {\n            // 如果在分类中找不到，但可能有description\n            if getDescriptions(for: result.symbol) != nil {\n                selectedSymbolForDescription = SelectedSymbol(result: result, category: \"Description\")\n            }\n        }\n    }\n\n    // 添加获取描述的辅助方法\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = viewModel.dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = viewModel.dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    func startSearch() {\n        let trimmed = searchText.trimmingCharacters(in: .whitespaces)\n        guard !trimmed.isEmpty else { return }\n        isSearchFieldFocused = false\n        isLoading = true\n        showSearchHistory = false\n\n        viewModel.performSearch(query: trimmed) { groupedResults in\n            DispatchQueue.main.async {\n                withAnimation {\n                    // 1. 先赋值\n                    self.groupedSearchResults = groupedResults\n                    self.isLoading = false\n                    \n                    // 2. 初始化折叠状态\n                    for group in groupedResults {\n                        if self.collapsedGroups[group.category] == nil {\n                            self.collapsedGroups[group.category] = false\n                        }\n                    }\n                }\n                \n                // 3. 自动判断首个结果\n                if\n                    let firstGroup = groupedResults.first,\n                    // 记得 results 本来就是按 score 排好序的\n                    let firstEntry = firstGroup.results.first,\n                    trimmed.uppercased() == firstEntry.result.symbol.uppercased()\n                {\n                    // 4. 直接打开 chart 或 description\n                    self.handleResultSelection(result: firstEntry.result)\n                    return\n                }\n                \n                // 如果不一致，就正常停留在列表\n            }\n        }\n    }\n}\n\n// MARK: - 搜索结果行\nstruct SearchResultRow: View {\n    @ObservedObject var result: SearchResult\n    let score: Int\n    \n    var body: some View {\n        VStack(alignment: .leading) {\n            HStack {\n                VStack(alignment: .leading) {\n                    HStack {\n                        Text(result.symbol)\n                            .foregroundColor(.blue)\n                        Text(result.name)\n                            .foregroundColor(.primary)\n                            .lineLimit(1)\n                            .truncationMode(.tail)\n                    }\n                    .font(.headline)\n                    Text(result.tag.joined(separator: \", \"))\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                Spacer()\n            }\n            HStack {\n                if let marketCap = result.marketCap {\n                    Text(marketCap)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let peRatio = result.peRatio, peRatio != \"--\" {\n                    Text(peRatio)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let pb = result.pb, pb != \"--\" {  // 添加 PB 的显示\n                                    Text(pb)\n                                        .font(.subheadline)\n                                        .foregroundColor(.secondary)\n                                }\n                if let compare = result.compare {\n                    Text(compare)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n                if let volume = result.volume {\n                    Text(volume)\n                        .font(.subheadline)\n                        .foregroundColor(.secondary)\n                }\n            }\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - 搜索历史视图\nstruct SearchHistoryView: View {\n    @ObservedObject var viewModel: SearchViewModel\n    var onSelect: (String) -> Void\n    \n    var body: some View {\n        VStack {\n            if viewModel.searchHistory.isEmpty {\n                Text(\"暂无搜索历史\")\n                    .foregroundColor(.secondary)\n                    .padding()\n            } else {\n                ScrollView {\n                    VStack(alignment: .leading, spacing: 8) {\n                        ForEach(viewModel.searchHistory, id: \\.self) { term in\n                            HStack {\n                                Text(term)\n                                Spacer()\n                                Button(action: {\n                                    viewModel.removeSearchHistory(term: term)\n                                }) {\n                                    Image(systemName: \"trash\")\n                                        .foregroundColor(.red)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 4)\n                            .contentShape(Rectangle())\n                            .onTapGesture {\n                                onSelect(term)\n                            }\n                        }\n                    }\n                }\n                .background(Color(.systemBackground))\n                .cornerRadius(8)\n                .shadow(radius: 5)\n                .padding([.horizontal, .bottom])\n            }\n        }\n    }\n}\n\n// MARK: - ViewModel\nclass SearchViewModel: ObservableObject {\n    @Published var searchHistory: [String] = []\n    @Published var errorMessage: String? = nil\n    @Published var isChartLoading: Bool = false\n    @Published var groupedSearchResults: [GroupedSearchResults] = []\n    \n    var dataService: DataService\n    private var cancellables = Set<AnyCancellable>()\n    \n    init(dataService: DataService = DataService()) {\n        self.dataService = dataService\n        dataService.$errorMessage\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.errorMessage, on: self)\n            .store(in: &cancellables)\n        loadSearchHistory()\n    }\n    \n    func performSearch(query: String, completion: @escaping ([GroupedSearchResults]) -> Void) {\n        let keywords = query.lowercased().split(separator: \" \").map { String($0) }\n        \n        DispatchQueue.global(qos: .userInitiated).async { [weak self] in\n            guard let self = self, let descriptionData = self.dataService.descriptionData else {\n                DispatchQueue.main.async { completion([]) }\n                return\n            }\n            \n            var groupedResults: [(\n                group: GroupedSearchResults,\n                matchScore: Int,\n                priority: Int\n            )] = []\n            \n            let categories: [MatchCategory] = [\n                .stockSymbol, .etfSymbol,\n                .stockName, .etfName,\n                .stockTag, .etfTag,\n                .stockDescription, .etfDescription\n            ]\n            \n            for category in categories {\n                var matches: [(result: SearchResult, score: Int)] = []\n                \n                switch category {\n                case .stockSymbol, .stockName, .stockDescription, .stockTag:\n                    matches = self.searchCategory(items: descriptionData.stocks, keywords: keywords, category: category)\n                    \n                case .etfSymbol, .etfName, .etfDescription, .etfTag:\n                    matches = self.searchCategory(items: descriptionData.etfs, keywords: keywords, category: category)\n                }\n                \n                if !matches.isEmpty {\n                    let highestScore = matches.max(by: { $0.score < $1.score })?.score ?? 0\n                    let group = GroupedSearchResults(category: category, results: matches, highestScore: highestScore)\n                    groupedResults.append((group, highestScore, category.priority))\n                }\n            }\n            \n            let sortedGroups = groupedResults.sorted {\n                if $0.matchScore != $1.matchScore {\n                    return $0.matchScore > $1.matchScore\n                }\n                return $0.priority > $1.priority\n            }.map { $0.group }\n            \n            DispatchQueue.main.async {\n                if !keywords.isEmpty {\n                    self.addSearchHistory(term: query)\n                }\n                self.groupedSearchResults = sortedGroups\n                self.fetchLatestVolumes(for: sortedGroups) {\n                    completion(sortedGroups)\n                }\n            }\n        }\n    }\n    \n    // 为 ETF 搜索结果获取最新 volume\n    private func fetchLatestVolumes(for groupedResults: [GroupedSearchResults], completion: @escaping () -> Void) {\n        let etfCategories: Set<MatchCategory> = [.etfSymbol, .etfName, .etfDescription, .etfTag]\n        \n        for groupedResult in groupedResults {\n            if etfCategories.contains(groupedResult.category) {\n                for (_, entry) in groupedResult.results.enumerated() {\n                    let symbol = entry.result.symbol\n                    if let latestVolume = DatabaseManager.shared.fetchLatestVolume(forSymbol: symbol, tableName: \"ETFs\") {\n                        DispatchQueue.main.async {\n                            entry.result.volume = self.formatVolume(latestVolume)\n                        }\n                    } else {\n                        DispatchQueue.main.async {\n                            entry.result.volume = \"--K\"\n                        }\n                    }\n                }\n            }\n        }\n        completion()\n    }\n    \n    private func formatVolume(_ volume: Int64) -> String {\n        let kVolume = Double(volume) / 1000.0\n        return String(format: \"%.0fK\", kVolume)\n    }\n    \n    // 搜索类别，并根据结果进行匹配和排序\n    func searchCategory<T: SearchDescribableItem>(items: [T],\n                                                  keywords: [String],\n                                                  category: MatchCategory)\n    -> [(result: SearchResult, score: Int)] {\n        var scoredResults: [(SearchResult, Int)] = []\n        \n        for item in items {\n            if let totalScore = matchScoreForItem(item, category: category, keywords: keywords) {\n                let upperSymbol = item.symbol.uppercased()\n                let data = dataService.marketCapData[upperSymbol]\n                let marketCap = data?.marketCap\n                let peRatioStr = data?.peRatio != nil ? String(format: \"%.2f\", data!.peRatio!) : \"--\"\n                let pbStr = data?.pb != nil ? String(format: \"%.2f\", data!.pb!) : \"--\"  // 添加 PB 格式化\n                \n                let result = SearchResult(\n                    symbol: item.symbol,\n                    name: item.name,\n                    tag: item.tag,\n                    marketCap: marketCap,\n                    peRatio: peRatioStr,\n                    pb: pbStr,  // 添加 PB 数据\n                    compare: dataService.compareData[upperSymbol]\n                )\n                \n                scoredResults.append((result, totalScore))\n            }\n        }\n        \n        return scoredResults.sorted { $0.1 > $1.1 }\n    }\n    \n    // 计算某个 item 与一组关键词在指定分类下的匹配分数\n    private func matchScoreForItem<T: SearchDescribableItem>(\n        _ item: T,\n        category: MatchCategory,\n        keywords: [String]) -> Int? {\n        \n        var totalScore = 0\n        \n        for keyword in keywords {\n            let lowerKeyword = keyword.lowercased()\n            let singleScore = scoreOfSingleMatch(item: item, keyword: lowerKeyword, category: category)\n            if singleScore <= 0 {\n                return nil\n            } else {\n                totalScore += singleScore\n            }\n        }\n        return totalScore\n    }\n    \n    // 计算单个关键词在指定分类下的匹配分数\n    private func scoreOfSingleMatch<T: SearchDescribableItem>(\n        item: T,\n        keyword: String,\n        category: MatchCategory) -> Int {\n        \n        switch category {\n        case .stockSymbol, .etfSymbol:\n            return matchSymbol(item.symbol.lowercased(), keyword: keyword)\n        case .stockName, .etfName:\n            return matchName(item.name, keyword: keyword)\n        case .stockTag, .etfTag:\n            return matchTags(item.tag, keyword: keyword)\n        case .stockDescription, .etfDescription:\n            return matchDescriptions(item.description1, item.description2, keyword: keyword)\n        }\n    }\n    \n    private func matchSymbol(_ symbol: String, keyword: String) -> Int {\n        if symbol == keyword {\n            return 3\n        } else if symbol.contains(keyword) {\n            return 2\n        } else if isFuzzyMatch(text: symbol, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchName(_ name: String, keyword: String) -> Int {\n        let lowercasedName = name.lowercased()\n        let nameComponents = lowercasedName.components(separatedBy: \",\")\n        let mainName = nameComponents.first ?? lowercasedName\n        let nameWords = mainName.split(separator: \" \").map { String($0) }\n        \n        if lowercasedName == keyword {\n            return 4\n        } else if nameWords.contains(keyword) || mainName == keyword {\n            return 3\n        } else if mainName.contains(keyword) {\n            return 2\n        } else if lowercasedName.contains(keyword) {\n            return 1\n        } else if isFuzzyMatch(text: lowercasedName, keyword: keyword, maxDistance: 1) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func matchTags(_ tags: [String], keyword: String) -> Int {\n        var maxScore = 0\n        for t in tags {\n            let lowerTag = t.lowercased()\n            var score = 0\n            if lowerTag == keyword {\n                score = 3\n            } else if lowerTag.contains(keyword) {\n                score = 2\n            } else if isFuzzyMatch(text: lowerTag, keyword: keyword, maxDistance: 1) {\n                score = 1\n            }\n            maxScore = max(maxScore, score)\n        }\n        return maxScore\n    }\n    \n    private func matchDescriptions(_ desc1: String, _ desc2: String, keyword: String) -> Int {\n        let d1 = desc1.lowercased()\n        let d2 = desc2.lowercased()\n        let words = d1.split(separator: \" \") + d2.split(separator: \" \")\n        \n        if words.contains(where: { String($0) == keyword }) {\n            return 2\n        } else if d1.contains(keyword) || d2.contains(keyword) {\n            return 1\n        }\n        return 0\n    }\n    \n    private func isFuzzyMatch(text: String, keyword: String, maxDistance: Int) -> Bool {\n        if keyword.count <= 1 {\n            return text.contains(keyword)\n        }\n        let words = text.split(separator: \" \").map { String($0) }\n        return words.contains { levenshteinDistance($0, keyword) <= maxDistance }\n    }\n    \n    private func levenshteinDistance(_ s1: String, _ s2: String) -> Int {\n        let a = Array(s1)\n        let b = Array(s2)\n        let n = a.count\n        let m = b.count\n        \n        if n == 0 { return m }\n        if m == 0 { return n }\n        \n        var matrix = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n        for i in 0...n { matrix[i][0] = i }\n        for j in 0...m { matrix[0][j] = j }\n        \n        for i in 1...n {\n            for j in 1...m {\n                if a[i - 1] == b[j - 1] {\n                    matrix[i][j] = matrix[i - 1][j - 1]\n                } else {\n                    matrix[i][j] = min(\n                        matrix[i - 1][j] + 1,\n                        matrix[i][j - 1] + 1,\n                        matrix[i - 1][j - 1] + 1\n                    )\n                }\n            }\n        }\n        return matrix[n][m]\n    }\n    \n    // MARK: - 搜索历史\n    func loadSearchHistory() {\n        if let history = UserDefaults.standard.array(forKey: \"stockSearchHistory\") as? [String] {\n            self.searchHistory = history\n        }\n    }\n    \n    func addSearchHistory(term: String) {\n        let trimmedTerm = term.trimmingCharacters(in: .whitespaces)\n        guard !trimmedTerm.isEmpty else { return }\n        \n        if let index = self.searchHistory.firstIndex(where: { $0.lowercased() == trimmedTerm.lowercased() }) {\n            self.searchHistory.remove(at: index)\n        }\n        self.searchHistory.insert(trimmedTerm, at: 0)\n        \n        // 增加搜索历史记录保存条目的数量\n        if self.searchHistory.count > 20 {\n            self.searchHistory = Array(self.searchHistory.prefix(20))\n        }\n        UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n    }\n    \n    func removeSearchHistory(term: String) {\n        if let index = searchHistory.firstIndex(where: { $0.lowercased() == term.lowercased() }) {\n            searchHistory.remove(at: index)\n            UserDefaults.standard.set(searchHistory, forKey: \"stockSearchHistory\")\n        }\n    }\n}\n"
            },
            {
                "path": "/Users/yanzhang/Documents/Xcode/Indices/Finance/ChartView.swift",
                "filename": "ChartView.swift",
                "content": "import SwiftUI\nimport Combine\n\n// MARK: - 时间间隔切换\nenum TimeRange {\n    case oneMonth\n    case threeMonths\n    case sixMonths\n    case oneYear\n    case all\n    case twoYears\n    case fiveYears\n    case tenYears\n    \n    var title: String {\n        switch self {\n        case .oneMonth: return \"1\"\n        case .threeMonths: return \"3\"\n        case .sixMonths: return \"6M\"\n        case .oneYear: return \"1Y\"\n        case .all: return \"All\"\n        case .twoYears: return \"2\"\n        case .fiveYears: return \"5\"\n        case .tenYears: return \"10\"\n        }\n    }\n    \n    var startDate: Date {\n        let calendar = Calendar.current\n        let now = Date()\n        \n        switch self {\n        case .oneMonth:\n            return calendar.date(byAdding: .month, value: -1, to: now) ?? now\n        case .threeMonths:\n            return calendar.date(byAdding: .month, value: -3, to: now) ?? now\n        case .sixMonths:\n            return calendar.date(byAdding: .month, value: -6, to: now) ?? now\n        case .oneYear:\n            return calendar.date(byAdding: .year, value: -1, to: now) ?? now\n        case .all:\n            return calendar.date(byAdding: .year, value: -100, to: now) ?? now\n        case .twoYears:\n            return calendar.date(byAdding: .year, value: -2, to: now) ?? now\n        case .fiveYears:\n            return calendar.date(byAdding: .year, value: -5, to: now) ?? now\n        case .tenYears:\n            return calendar.date(byAdding: .year, value: -10, to: now) ?? now\n        }\n    }\n    \n    func xAxisTickInterval() -> Calendar.Component {\n        switch self {\n        case .oneMonth:\n            return .day\n        case .threeMonths, .sixMonths:\n            return .month\n        case .oneYear:\n            return .month\n        case .twoYears, .fiveYears, .tenYears:\n            return .year\n        case .all:\n            return .year\n        }\n    }\n    \n    func xAxisTickValue() -> Int {\n        switch self {\n        case .oneMonth:\n            return 2 // 每2天一个刻度\n        case .threeMonths:\n            return 1 // 每1个月一个刻度\n        case .sixMonths:\n            return 1 // 每1个月一个刻度\n        case .oneYear:\n            return 1 // 每1个月一个刻度\n        case .twoYears, .fiveYears, .tenYears:\n            return 1 // 每1年一个刻度\n        case .all:\n            return 2 // 每3年一个刻度\n        }\n    }\n    \n    // 添加采样率控制，优化长期数据加载\n    func samplingRate() -> Int {\n        switch self {\n        case .oneMonth, .threeMonths, .sixMonths, .oneYear:\n            return 1 // 不采样，使用所有数据点\n        case .twoYears:\n            return 2 // 每2个数据点取1个\n        case .fiveYears:\n            return 5 // 每5个数据点取1个\n        case .tenYears:\n            return 10 // 每10个数据点取1个\n        case .all:\n            return 15 // 每15个数据点取1个\n        }\n    }\n}\n\n// 1. 首先添加一个气泡视图组件\nstruct BubbleView: View {\n    let text: String\n    let color: Color\n    let pointX: CGFloat\n    let pointY: CGFloat\n    \n    var body: some View {\n        Text(text)\n            .font(.system(size: 12))\n            .lineLimit(3)\n            .multilineTextAlignment(.center)\n            .padding(8)\n            .background(color.opacity(0.2))\n            .foregroundColor(color)\n            .cornerRadius(8)\n            .overlay(\n                // 添加小三角形指向特殊点\n                GeometryReader { geo in\n                    Path { path in\n                        let width = geo.size.width\n                        let height = geo.size.height\n                        \n                        path.move(to: CGPoint(x: width/2 - 5, y: height))\n                        path.addLine(to: CGPoint(x: width/2, y: height + 5))\n                        path.addLine(to: CGPoint(x: width/2 + 5, y: height))\n                        path.closeSubpath()\n                    }\n                    .fill(color.opacity(0.2))\n                }\n            )\n    }\n}\n\n// 2. 添加Marker结构体表示需要显示气泡的信息\nstruct BubbleMarker: Identifiable {\n    let id = UUID()\n    let text: String\n    let color: Color\n    let pointIndex: Int\n    let date: Date\n    var position: CGPoint = .zero // 将在计算布局时设置\n    var size: CGSize = .zero      // 将在计算布局时设置\n}\n\n// MARK: - 页面布局\nstruct ChartView: View {\n    let symbol: String\n    let groupName: String\n    private let verticalPadding: CGFloat = 20  // 上下各20点的边距\n    \n    @State private var chartData: [DatabaseManager.PriceData] = []\n    @State private var sampledChartData: [DatabaseManager.PriceData] = [] // 采样后的数据\n    @State private var selectedTimeRange: TimeRange = .sixMonths\n    @State private var isLoading = true\n    @State private var earningData: [DatabaseManager.EarningData] = []\n    // 预计算渲染点，减少Canvas内重复计算\n    @State private var renderedPoints: [RenderedPoint] = []\n    \n    // 单指滑动状态\n    @State private var dragLocation: CGPoint?\n    @State private var draggedPointIndex: Int?\n    @State private var draggedPoint: DatabaseManager.PriceData?\n    @State private var isDragging = false\n    \n    // 双指滑动状态\n    @State private var isMultiTouch = false\n    @State private var firstTouchLocation: CGPoint?\n    @State private var secondTouchLocation: CGPoint?\n    @State private var firstTouchPointIndex: Int?\n    @State private var secondTouchPointIndex: Int?\n    @State private var firstTouchPoint: DatabaseManager.PriceData?\n    @State private var secondTouchPoint: DatabaseManager.PriceData?\n    \n    // 标记点显示控制\n    @State private var showRedMarkers: Bool = false     // 全局标记(红色)默认关闭\n    @State private var showOrangeMarkers: Bool = true   // 股票特定标记(橙色)默认开启\n    @State private var showBlueMarkers: Bool = true     // 财报标记(蓝色)默认开启\n    \n    // 3. 在ChartView中添加状态变量存储气泡数据\n    @State private var bubbleMarkers: [BubbleMarker] = []\n    @State private var shouldUpdateBubbles: Bool = true\n    @State private var showBubbles: Bool = true  // 浮窗显示开关默认打开\n    \n    @Environment(\\.colorScheme) var colorScheme\n    @Environment(\\.presentationMode) var presentationMode\n    @EnvironmentObject var dataService: DataService\n    \n    private struct RenderedPoint {\n        let x: CGFloat\n        let y: CGFloat\n        let date: Date\n        let price: Double\n        let dataIndex: Int\n    }\n    \n    private func updateRenderedPoints() {\n        let width = UIScreen.main.bounds.width\n        let height: CGFloat = 320\n        let effectiveHeight = height - (verticalPadding * 2)\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        \n        renderedPoints = sampledChartData.enumerated().map { index, point in\n            let x = CGFloat(index) * horizontalStep\n            let normalizedY = CGFloat((point.price - minPrice) / priceRange)\n            let y = height - verticalPadding - (normalizedY * effectiveHeight)\n            return RenderedPoint(x: x, y: y, date: point.date, price: point.price, dataIndex: index)\n        }\n    }\n    \n    // 页面配置\n    private var isDarkMode: Bool {\n        colorScheme == .dark\n    }\n    \n    private var chartColor: Color {\n        isDarkMode ? Color.white : Color.blue\n    }\n    \n    private var backgroundColor: Color {\n        isDarkMode ? Color.black : Color.white\n    }\n    \n    private var minPrice: Double {\n        sampledChartData.map { $0.price }.min() ?? 0\n    }\n    \n    private var maxPrice: Double {\n        sampledChartData.map { $0.price }.max() ?? 0\n    }\n    \n    private var priceRange: Double {\n        max(maxPrice - minPrice, 0.01) // 避免除零\n    }\n    \n    // 计算两点之间的价格变化百分比\n    private var priceDifferencePercentage: Double? {\n        guard let first = firstTouchPoint?.price,\n              let second = secondTouchPoint?.price else {\n            return nil\n        }\n        \n        return ((second - first) / first) * 100.0\n    }\n    \n    private func findClosestDataPoint(to targetDate: Date, in data: [DatabaseManager.PriceData]) -> DatabaseManager.PriceData? {\n        let calendar = Calendar.current\n        \n        // 首先尝试在同一月份内查找\n        let targetMonth = calendar.component(.month, from: targetDate)\n        let targetYear = calendar.component(.year, from: targetDate)\n        \n        // 筛选同年同月的数据点\n        let sameMonthData = data.filter { point in\n            let pointMonth = calendar.component(.month, from: point.date)\n            let pointYear = calendar.component(.year, from: point.date)\n            return pointMonth == targetMonth && pointYear == targetYear\n        }\n        \n        if !sameMonthData.isEmpty {\n            // 在同月数据中找最近的点\n            return sameMonthData.min { point1, point2 in\n                abs(point1.date.timeIntervalSince(targetDate)) < abs(point2.date.timeIntervalSince(targetDate))\n            }\n        }\n        \n        // 如果同月没有数据，则在前后一个月范围内查找\n        let monthRange = 1 // 可以调整这个值来改变查找范围\n        let extendedData = data.filter { point in\n            let components = calendar.dateComponents([.month], from: targetDate, to: point.date)\n            guard let monthDiff = components.month else { return false }\n            return abs(monthDiff) <= monthRange\n        }\n        \n        return extendedData.min { point1, point2 in\n            abs(point1.date.timeIntervalSince(targetDate)) < abs(point2.date.timeIntervalSince(targetDate))\n        }\n    }\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            // 固定高度的信息显示区域\n            VStack {\n                // 事件文本或时间价格信息区域\n                ZStack(alignment: .top) {\n                    // 背景空白区域，保持固定高度\n                    Rectangle()\n                        .fill(Color.clear)\n                        .frame(height: 80) // 固定三行文本的高度\n                    VStack {\n                        if isMultiTouch, let firstPoint = firstTouchPoint, let secondPoint = secondTouchPoint {\n                            // 获取两个时间点\n                            let date1 = firstPoint.date\n                            let date2 = secondPoint.date\n                            \n                            // 确定显示顺序：较早的日期显示在左边\n                            let (earlierDate, laterDate) = date1 < date2\n                                ? (formatDate(date1), formatDate(date2))\n                                : (formatDate(date2), formatDate(date1))\n                            \n                            // 百分比计算仍然保持原有逻辑（基于触摸顺序）\n                            let percentChange = priceDifferencePercentage ?? 0\n                            \n                            HStack {\n                                Text(\"\\(earlierDate)\")\n                                    .font(.system(size: 16, weight: .medium))\n                                Text(\"\\(laterDate)\")\n                                    .font(.system(size: 16, weight: .medium))\n                                Text(\"\\(formatPercentage(percentChange))\")\n                                    .font(.system(size: 16, weight: .bold))\n                                    .foregroundColor(percentChange >= 0 ? .green : .red)\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 8)\n                            .background(Color(UIColor.systemGray6))\n                            .cornerRadius(8)\n                            \n                        } else if let point = draggedPoint {\n                            // 单指模式：显示单点信息和标记\n                            let pointDate = formatDate(point.date)\n                            \n                            // 计算价格变化百分比\n                            let percentChange = calculatePriceChangePercentage(from: point)\n                            \n                            HStack {\n                                Text(\"\\(pointDate)  \\(formatPrice(point.price))\")\n                                    .font(.system(size: 16, weight: .medium))\n                                \n                                if let percentChange = percentChange {\n                                    Text(formatPercentage(percentChange))\n                                        .font(.system(size: 16, weight: .bold))\n                                        .foregroundColor(percentChange >= 0 ? .green : .red)\n                                }\n                                \n                                // 显示全局或特定标记信息\n                                if let markerText = getMarkerText(for: point.date) {\n                                    Text(markerText)\n                                        .font(.system(size: 18, weight: .medium))\n                                        .foregroundColor(.orange)\n                                        .multilineTextAlignment(.leading)\n                                        .lineLimit(2)\n                                }\n                            }\n                            .padding(.horizontal)\n                            .padding(.vertical, 8)\n                            .background(Color(UIColor.systemGray6))\n                            .cornerRadius(8)\n                        }\n                    }\n                    .padding(.horizontal)\n                    .padding(.top, 10)\n                }\n            }\n            \n            // Chart\n            if isLoading {\n                ProgressView()\n                    .scaleEffect(1.5)\n                    .padding()\n                    .frame(height: 250) // 固定高度与图表一致\n            } else if sampledChartData.isEmpty {\n                Text(\"No data available\")\n                    .font(.title2)\n                    .foregroundColor(.gray)\n                    .frame(height: 250) // 固定高度与图表一致\n            } else {\n                // Chart canvas\n                ZStack {\n                    GeometryReader { geometry in\n                        // 使用 Canvas 替代 Path 提高性能\n                        Canvas { context, size in\n                            // 考虑边距后的实际绘制高度\n                            let effectiveHeight = size.height - (verticalPadding * 2)\n                            \n                            // 修改所有 y 坐标计算，加入边距因素\n                            let priceToY: (Double) -> CGFloat = { price in\n                                let normalizedY = CGFloat((price - minPrice) / priceRange)\n                                return size.height - verticalPadding - (normalizedY * effectiveHeight)\n                            }\n                            \n                            // 绘制价格线\n                            let width = size.width\n                            let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n                            \n                            if !renderedPoints.isEmpty {\n                                var pricePath = Path()\n                                pricePath.move(to: CGPoint(x: renderedPoints[0].x, y: renderedPoints[0].y))\n                                \n                                for i in 1..<renderedPoints.count {\n                                    pricePath.addLine(to: CGPoint(x: renderedPoints[i].x, y: renderedPoints[i].y))\n                                }\n                                // 绘制价格线\n                                context.stroke(pricePath, with: .color(chartColor), lineWidth: 2)\n                                // —— 在这里加上小黑点 ——\n                                if [.oneMonth, .threeMonths, .sixMonths].contains(selectedTimeRange) {\n                                    // renderedPoints 里每个点就是我们事先计算好的 (x,y)\n                                    for pt in renderedPoints {\n                                        let dotRect = CGRect(x: pt.x - 2, y: pt.y - 2, width: 3, height: 3)\n                                        context.fill(Path(ellipseIn: dotRect), with: .color(.black))\n                                    }\n                                }\n                            }\n                            \n                            // 绘制零线 - 当最低值小于 0 时\n                            if minPrice < 0 {\n                                let effectiveMaxPrice = max(maxPrice, 0)\n                                let effectiveRange = effectiveMaxPrice - minPrice\n                                let zeroY = size.height - verticalPadding - CGFloat((0 - minPrice) / effectiveRange) * effectiveHeight\n                                \n                                var zeroPath = Path()\n                                zeroPath.move(to: CGPoint(x: 0, y: zeroY))\n                                zeroPath.addLine(to: CGPoint(x: width, y: zeroY))\n                                \n                                context.stroke(zeroPath, with: .color(Color.gray.opacity(0.5)), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                            }\n                            \n                            // 绘制标记点\n                            for marker in getTimeMarkers() {\n                                if let index = sampledChartData.firstIndex(where: { isSameDay($0.date, marker.date) }) {\n                                    let shouldShow = (marker.type == .global && showRedMarkers) ||\n                                                   (marker.type == .symbol && showOrangeMarkers) ||\n                                                   (marker.type == .earning && showBlueMarkers)\n                                    \n                                    if shouldShow {\n                                        let x = CGFloat(index) * horizontalStep\n                                        let y = priceToY(sampledChartData[index].price)\n                                        \n                                        let markerPath = Path(ellipseIn: CGRect(x: x - 4, y: y - 4, width: 8, height: 8))\n                                        context.fill(markerPath, with: .color(marker.color))\n                                    }\n                                }\n                            }\n                            \n                            // 触摸指示器相关绘制也需要使用新的 y 坐标计算方式\n                            if isMultiTouch {\n                                // 第一个触摸点\n                                if let firstIndex = firstTouchPointIndex, let firstPoint = firstTouchPoint {\n                                    let x = CGFloat(firstIndex) * horizontalStep\n                                    let y = priceToY(firstPoint.price)\n                                    \n                                    // 第一条虚线\n                                    var linePath = Path()\n                                    linePath.move(to: CGPoint(x: x, y: verticalPadding))\n                                    linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                    context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                    \n                                    // 第一个点的高亮显示\n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                                \n                                // 第二个触摸点\n                                if let secondIndex = secondTouchPointIndex, let secondPoint = secondTouchPoint {\n                                    let x = CGFloat(secondIndex) * horizontalStep\n                                    let y = priceToY(secondPoint.price)  // 使用 priceToY 函数\n                                    \n                                    // 第二条虚线\n                                    var linePath = Path()\n                                    linePath.move(to: CGPoint(x: x, y: 0))\n                                    linePath.addLine(to: CGPoint(x: x, y: verticalPadding))\n                                    linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                    context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                    \n                                    // 第二个点的高亮显示\n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                                \n                                // 绘制两点之间的连线\n                                if let firstIndex = firstTouchPointIndex, let secondIndex = secondTouchPointIndex,\n                                   let firstPoint = firstTouchPoint, let secondPoint = secondTouchPoint {\n                                    let x1 = CGFloat(firstIndex) * horizontalStep\n                                    let y1 = priceToY(firstPoint.price)  // 使用 priceToY 函数\n                                    let x2 = CGFloat(secondIndex) * horizontalStep\n                                    let y2 = priceToY(secondPoint.price)  // 使用 priceToY 函数\n                                    \n                                    var connectPath = Path()\n                                    connectPath.move(to: CGPoint(x: x1, y: y1))\n                                    connectPath.addLine(to: CGPoint(x: x2, y: y2))\n                                    \n                                    let lineColor = secondPoint.price >= firstPoint.price ? Color.green : Color.red\n                                    context.stroke(connectPath, with: .color(lineColor), style: StrokeStyle(lineWidth: 1, dash: [2]))\n                                }\n                            } else if let pointIndex = draggedPointIndex {\n                                let x = CGFloat(pointIndex) * horizontalStep\n                                \n                                var linePath = Path()\n                                linePath.move(to: CGPoint(x: x, y: verticalPadding))\n                                linePath.addLine(to: CGPoint(x: x, y: size.height - verticalPadding))\n                                context.stroke(linePath, with: .color(Color.gray), style: StrokeStyle(lineWidth: 1, dash: [4]))\n                                \n                                if let point = draggedPoint {\n                                    let y = priceToY(point.price)\n                                    \n                                    let circlePath = Path(ellipseIn: CGRect(x: x - 5, y: y - 5, width: 10, height: 10))\n                                    context.fill(circlePath, with: .color(Color.white))\n                                    context.stroke(circlePath, with: .color(chartColor), lineWidth: 2)\n                                }\n                            }\n                        }\n                        \n                        // 添加以下代码显示气泡\n                        // 修改浮窗显示逻辑，在overlay部分\n                        .overlay(\n                            ZStack {\n                                // 只在不拖动的情况下，且浮窗开关打开时显示气泡\n                                if !isDragging && !isMultiTouch && showBubbles {\n                                    ForEach(bubbleMarkers) { marker in\n                                        // 只显示那些对应颜色点被打开的浮窗\n                                        if (marker.color == .red && showRedMarkers) ||\n                                           (marker.color == .orange && showOrangeMarkers) ||\n                                           (marker.color == .green && showBlueMarkers) {\n                                            BubbleView(\n                                                text: marker.text,\n                                                color: marker.color,\n                                                pointX: marker.position.x,\n                                                pointY: marker.position.y\n                                            )\n                                            .frame(width: marker.size.width)\n                                            .position(x: marker.position.x, y: marker.position.y - 40) // 气泡位于点上方\n                                            .opacity(0.9)\n                                            .transition(.opacity)\n                                            .animation(.easeInOut(duration: 0.3), value: marker.id)\n                                        }\n                                    }\n                                }\n                            }\n                        )\n                        \n                        // X轴标签独立绘制，避免在Canvas内部绘制文本\n                        ForEach(getXAxisTicks(), id: \\.self) { date in\n                            if let index = getIndexForDate(date) {\n                                let x = CGFloat(index) * (geometry.size.width / CGFloat(max(1, sampledChartData.count - 1)))\n                                Text(formatXAxisLabel(date))\n                                    .font(.system(size: 10))\n                                    .foregroundColor(.gray)\n                                    .position(x: x, y: geometry.size.height + 10)\n                            }\n                        }\n                    }\n                    .overlay(\n                        // 2. 优化触摸处理视图\n                        OptimizedTouchHandler(\n                            onSingleTouchChanged: { location in\n                                // 使用防抖动技术减少过于频繁的更新\n                                withAnimation(.easeOut(duration: 0.1)) {\n                                    isMultiTouch = false\n                                    updateDragLocation(location)\n                                }\n                            },\n                            onMultiTouchChanged: { first, second in\n                                withAnimation(.easeOut(duration: 0.1)) {\n                                    isMultiTouch = true\n                                    updateMultiTouchLocations(first, second)\n                                }\n                            },\n                            onTouchesEnded: {\n                                withAnimation(.easeOut(duration: 0.2)) {\n                                    resetTouchStates()\n                                }\n                            }\n                        )\n                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n                    )\n                }\n                .frame(height: 320)\n                .padding(.bottom, 30) // 为 X 轴标签留出空间\n            }\n            \n            // Time range buttons\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 7) {\n                    ForEach([TimeRange.oneMonth, .threeMonths, .sixMonths, .oneYear, .all, .twoYears, .fiveYears, .tenYears], id: \\.title) { range in\n                        Button(action: {\n                            selectedTimeRange = range\n                            loadChartData()\n                        }) {\n                            Text(range.title)\n                                .font(.system(size: 14, weight: selectedTimeRange == range ? .bold : .regular))\n                                .padding(.vertical, 6)\n                                .padding(.horizontal, 12)\n                                .background(\n                                    selectedTimeRange == range ?\n                                        Color.blue.opacity(0.2) :\n                                        Color.clear\n                                )\n                                .foregroundColor(selectedTimeRange == range ? .blue : .primary)\n                                .cornerRadius(8)\n                        }\n                    }\n                }\n                .padding(.horizontal)\n                .padding(.vertical, 8)\n            }\n            \n            .padding(.vertical, 10)\n            \n            // 修改标记点显示控制开关UI，添加新的浮窗开关\n            HStack(spacing: 10) {\n                // 绿色标记点(财报)开关\n                Toggle(isOn: $showBlueMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .green))\n                \n                // 浮窗显示开关\n                Toggle(isOn: $showBubbles) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .purple)) // 使用紫色区分浮窗开关\n                \n                // 红色标记点(全局)开关\n                Toggle(isOn: $showRedMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .red))\n                \n                // 橙色标记点(股票特定)开关\n                Toggle(isOn: $showOrangeMarkers) {\n                }\n                .toggleStyle(SwitchToggleStyle(tint: .orange))\n                \n                .padding(.horizontal)\n            }\n            .padding(.vertical, 30)\n            \n            // Action buttons\n            HStack(spacing: 20) {\n                // Description\n                NavigationLink(destination: {\n                    if let descriptions = getDescriptions(for: symbol) {\n                        DescriptionView(descriptions: descriptions, isDarkMode: isDarkMode)\n                    } else {\n                        DescriptionView(\n                            descriptions: (\"No description available.\", \"\"),\n                            isDarkMode: isDarkMode\n                        )\n                    }\n                }) {\n                    Text(\"Description\")\n                        .font(.system(size: 16, weight: .medium))\n                        .foregroundColor(.blue)\n                }\n                // Compare\n                NavigationLink(destination: CompareView(initialSymbol: symbol)) {\n                    Text(\"Compare\")\n                        .font(.system(size: 16, weight: .medium))\n                        .padding(.leading, 20)\n                        .foregroundColor(.blue)\n                }\n                // Similar\n                NavigationLink(destination: SimilarView(symbol: symbol)) {\n                    Text(\"Similar\")\n                        .font(.system(size: 16, weight: .medium))\n                        .padding(.leading, 20)\n                        .foregroundColor(.blue)\n                }\n            }\n            .padding(.horizontal, 20)\n            .padding(.vertical, 10)\n            Spacer() // 添加Spacer让所有内容靠顶部\n        }\n        .background(backgroundColor.edgesIgnoringSafeArea(.all))\n        .toolbar {\n            ToolbarItem(placement: .principal) {\n                HStack(spacing: 8) {\n                    Text(symbol)\n                        .font(.headline)\n                    \n                    if let marketCapItem = dataService.marketCapData[symbol.uppercased()] {\n                        Text(marketCapItem.marketCap)\n                            .font(.subheadline)\n                            .foregroundColor(.secondary)\n                        \n                        if let peRatio = marketCapItem.peRatio {\n                            Text(\"\\(String(format: \"%.2f\", peRatio))\")\n                                .font(.subheadline)\n                                .foregroundColor(.secondary)\n                        }\n                        \n                        // 新增显示 pb 的部分\n                        if let pb = marketCapItem.pb {\n                            Text(\"\\(String(format: \"%.2f\", pb))\")\n                                .font(.subheadline)\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    \n                    if let compareStock = dataService.compareData[symbol.uppercased()] {\n                        Text(compareStock)\n                            .font(.subheadline)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n        }\n        .navigationBarTitleDisplayMode(.inline) // 保持导航栏标题显示为居中\n        .onAppear {\n            loadChartData()\n        }\n    }\n    \n    // MARK: - X轴刻度绘制\n    private func getXAxisTicks() -> [Date] {\n        guard !sampledChartData.isEmpty else { return [] }\n        \n        var ticks: [Date] = []\n        let calendar = Calendar.current\n        let component = selectedTimeRange.xAxisTickInterval()\n        let interval = selectedTimeRange.xAxisTickValue()\n        \n        if let startDate = sampledChartData.first?.date, let endDate = sampledChartData.last?.date {\n            var currentDate = startDate\n            \n            while currentDate <= endDate {\n                ticks.append(currentDate)\n                if let nextDate = calendar.date(byAdding: component, value: interval, to: currentDate) {\n                    currentDate = nextDate\n                } else {\n                    break\n                }\n            }\n            // 如果最后一次生成的日期与 endDate 不在同一天（或同月/同年，取决于 granularity），则补充 endDate\n            if let lastTick = ticks.last, !calendar.isDate(lastTick, equalTo: endDate, toGranularity: tickGranularity()) {\n                ticks.append(endDate)\n            }\n        }\n        \n        return ticks\n    }\n\n    // 根据时间区间确定刻度的比较精度\n    private func tickGranularity() -> Calendar.Component {\n        switch selectedTimeRange {\n        case .oneMonth:\n            return .day\n        case .threeMonths, .sixMonths, .oneYear:\n            return .month\n        case .twoYears, .fiveYears, .tenYears, .all:\n            return .year\n        }\n    }\n    \n    // 计算价格变化百分比\n    private func calculatePriceChangePercentage(from point: DatabaseManager.PriceData) -> Double? {\n        guard let latestPrice = sampledChartData.last?.price else { return nil }\n        return ((latestPrice - point.price) / point.price) * 100.0\n    }\n    \n    // MARK: - Helper Methods\n    private func getDescriptions(for symbol: String) -> (String, String)? {\n        // 检查是否为股票\n        if let stock = dataService.descriptionData?.stocks.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (stock.description1, stock.description2)\n        }\n        // 检查是否为ETF\n        if let etf = dataService.descriptionData?.etfs.first(where: {\n            $0.symbol.uppercased() == symbol.uppercased()\n        }) {\n            return (etf.description1, etf.description2)\n        }\n        return nil\n    }\n    \n    private func loadChartData() {\n        isLoading = true\n        DispatchQueue.global(qos: .userInitiated).async {\n            print(\"开始数据库查询...\")\n            let newData = DatabaseManager.shared.fetchHistoricalData(\n                symbol: symbol,\n                tableName: groupName,\n                dateRange: .timeRange(selectedTimeRange)\n            )\n            print(\"查询完成，获取到 \\(newData.count) 条数据\")\n            \n            // 获取财报数据\n            let earnings = DatabaseManager.shared.fetchEarningData(forSymbol: symbol)\n            print(\"获取到 \\(earnings.count) 条财报数据\")\n            \n            // 对长期数据进行采样，提高性能\n            let sampledData = sampleData(newData, rate: selectedTimeRange.samplingRate())\n            print(\"采样后数据点数: \\(sampledData.count)\")\n\n            DispatchQueue.main.async {\n                chartData = newData\n                sampledChartData = sampledData\n                earningData = earnings\n                isLoading = false\n                updateRenderedPoints() // 添加这一行\n                // 重置触摸状态\n                resetTouchStates()\n                // 添加调用更新气泡\n                updateBubbleMarkers()\n                print(\"数据已更新到UI\")\n            }\n        }\n    }\n    \n    // 添加气泡布局计算方法\n    private func updateBubbleMarkers() {\n        let width = UIScreen.main.bounds.width\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        let maxLabelWidth: CGFloat = 120 // 气泡最大宽度\n        \n        var markers: [BubbleMarker] = []\n        \n        // 添加全局标记(红色)\n        for (date, text) in dataService.globalTimeMarkers {\n            if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, date) }) {\n                // 精确匹配的情况\n                let x = CGFloat(exactIndex) * horizontalStep\n                let y = getYForPrice(sampledChartData[exactIndex].price)\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .red,\n                    pointIndex: exactIndex,\n                    date: date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData),\n                      let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                // 最近匹配的情况\n                let x = CGFloat(closestIndex) * horizontalStep\n                let y = getYForPrice(closestPoint.price)\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .red,\n                    pointIndex: closestIndex,\n                    date: closestPoint.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            }\n        }\n        \n        // 添加股票特定标记(橙色)\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, text) in symbolMarkers {\n                if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, date) }) {\n                    // 精确匹配的情况\n                    let x = CGFloat(exactIndex) * horizontalStep\n                    let y = getYForPrice(sampledChartData[exactIndex].price)\n                    \n                    markers.append(BubbleMarker(\n                        text: text,\n                        color: .orange,\n                        pointIndex: exactIndex,\n                        date: date,\n                        position: CGPoint(x: x, y: y),\n                        size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                    ))\n                } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData),\n                          let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                    // 最近匹配的情况\n                    let x = CGFloat(closestIndex) * horizontalStep\n                    let y = getYForPrice(closestPoint.price)\n                    \n                    markers.append(BubbleMarker(\n                        text: text,\n                        color: .orange,\n                        pointIndex: closestIndex,\n                        date: closestPoint.date,\n                        position: CGPoint(x: x, y: y),\n                        size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                    ))\n                }\n            }\n        }\n        \n        // 添加财报标记(绿色)\n        for earning in earningData {\n            if let exactIndex = sampledChartData.firstIndex(where: { isSameDay($0.date, earning.date) }) {\n                // 精确匹配的情况\n                let x = CGFloat(exactIndex) * horizontalStep\n                let y = getYForPrice(sampledChartData[exactIndex].price)\n                \n                // 获取当天价格\n                let currentPrice = sampledChartData[exactIndex].price\n                // 获取最新价格\n                let latestPrice = sampledChartData.last?.price ?? currentPrice\n                // 计算价格变化百分比\n                let priceChangePercent = ((latestPrice - currentPrice) / currentPrice) * 100\n                \n                // 格式化日期\n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"MM-dd\"\n                let dateStr = dateFormatter.string(from: earning.date)\n                \n                // 构建显示文本\n                let text = \"\\(dateStr) \\(String(format: \"%+.2f%%\", priceChangePercent))\\n\\(String(format: \"%.2f%%\", earning.price))\"\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .green,\n                    pointIndex: exactIndex,\n                    date: earning.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            } else if let closestPoint = findClosestDataPoint(to: earning.date, in: sampledChartData),\n                      let closestIndex = sampledChartData.firstIndex(where: { $0.date == closestPoint.date }) {\n                // 最近匹配的情况\n                let x = CGFloat(closestIndex) * horizontalStep\n                let y = getYForPrice(closestPoint.price)\n                \n                // 使用最近点的价格计算\n                let currentPrice = closestPoint.price\n                let latestPrice = sampledChartData.last?.price ?? currentPrice\n                let priceChangePercent = ((latestPrice - currentPrice) / currentPrice) * 100\n                \n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"MM-dd\"\n                let dateStr = dateFormatter.string(from: earning.date) // 使用原始财报日期\n                \n                let text = \"\\(dateStr) \\(String(format: \"%+.2f%%\", priceChangePercent))\\n\\(String(format: \"%.2f%%\", earning.price))\"\n                \n                markers.append(BubbleMarker(\n                    text: text,\n                    color: .green,\n                    pointIndex: closestIndex,\n                    date: closestPoint.date,\n                    position: CGPoint(x: x, y: y),\n                    size: CGSize(width: min(max(text.count * 7, 40), Int(maxLabelWidth)), height: 0)\n                ))\n            }\n        }\n        \n        // 优化气泡布局以减少重叠\n        let optimizedMarkers = optimizeBubbleLayout(markers, canvasWidth: width, canvasHeight: 320)\n        \n        withAnimation {\n            self.bubbleMarkers = optimizedMarkers\n        }\n    }\n    \n    // 计算给定价格对应的Y坐标\n    private func getYForPrice(_ price: Double) -> CGFloat {\n        // 考虑上下边距，这里假设verticalPadding = 20\n        let height: CGFloat = 320 // 与Chart高度保持一致\n        let effectiveHeight = height - (verticalPadding * 2)\n        let normalizedY = CGFloat((price - minPrice) / priceRange)\n        return height - verticalPadding - (normalizedY * effectiveHeight)\n    }\n\n    // 气泡布局优化算法\n    private func optimizeBubbleLayout(_ markers: [BubbleMarker], canvasWidth: CGFloat, canvasHeight: CGFloat) -> [BubbleMarker] {\n        guard !markers.isEmpty else { return [] }\n        \n        var optimizedMarkers = markers\n        \n        // 首先将气泡分为上半部分和下半部分\n        let midY = canvasHeight / 2\n        var upperMarkers = optimizedMarkers.filter { $0.position.y <= midY }\n        var lowerMarkers = optimizedMarkers.filter { $0.position.y > midY }\n        \n        // 按X坐标排序\n        upperMarkers.sort { $0.position.x < $1.position.x }\n        lowerMarkers.sort { $0.position.x < $1.position.x }\n        \n        // 分层排列上半部分气泡\n        var layers: [[BubbleMarker]] = []\n        let bubbleHeight: CGFloat = 50 // 估计气泡高度\n        let bubbleSpacing: CGFloat = 10 // 水平间距\n        \n        for marker in upperMarkers {\n            var placed = false\n            \n            // 尝试放入现有层\n            for i in 0..<layers.count {\n                if layers[i].isEmpty || (marker.position.x - layers[i].last!.position.x > layers[i].last!.size.width / 2 + bubbleSpacing) {\n                    layers[i].append(marker)\n                    placed = true\n                    break\n                }\n            }\n            \n            // 如果无法放入现有层，创建新层\n            if !placed {\n                layers.append([marker])\n            }\n        }\n        \n        // 应用计算后的Y偏移\n        var offsetY: CGFloat = 20 // 顶部起始偏移\n        for (_, layer) in layers.enumerated() {\n            for marker in layer {\n                if let index = optimizedMarkers.firstIndex(where: { $0.id == marker.id }) {\n                    optimizedMarkers[index].position.y = offsetY\n                }\n            }\n            offsetY += bubbleHeight\n        }\n        \n        // 类似处理下半部分气泡\n        layers = []\n        offsetY = canvasHeight - bubbleHeight\n        \n        for marker in lowerMarkers {\n            var placed = false\n            \n            for i in 0..<layers.count {\n                if layers[i].isEmpty || (marker.position.x - layers[i].last!.position.x > layers[i].last!.size.width / 2 + bubbleSpacing) {\n                    layers[i].append(marker)\n                    placed = true\n                    break\n                }\n            }\n            \n            if !placed {\n                layers.append([marker])\n            }\n        }\n        \n        for (_, layer) in layers.enumerated() {\n            for marker in layer {\n                if let index = optimizedMarkers.firstIndex(where: { $0.id == marker.id }) {\n                    optimizedMarkers[index].position.y = offsetY\n                }\n            }\n            offsetY -= bubbleHeight\n        }\n        \n        // 调整X坐标确保气泡不超出边界\n        for i in 0..<optimizedMarkers.count {\n            let halfWidth = optimizedMarkers[i].size.width / 2\n            if optimizedMarkers[i].position.x - halfWidth < 0 {\n                optimizedMarkers[i].position.x = halfWidth\n            } else if optimizedMarkers[i].position.x + halfWidth > canvasWidth {\n                optimizedMarkers[i].position.x = canvasWidth - halfWidth\n            }\n        }\n        \n        return optimizedMarkers\n    }\n    \n    // 重置所有触摸状态\n    private func resetTouchStates() {\n        // 重置单指状态\n        dragLocation = nil\n        draggedPointIndex = nil\n        draggedPoint = nil\n        isDragging = false\n        \n        // 重置双指状态\n        isMultiTouch = false\n        firstTouchLocation = nil\n        secondTouchLocation = nil\n        firstTouchPointIndex = nil\n        secondTouchPointIndex = nil\n        firstTouchPoint = nil\n        secondTouchPoint = nil\n        \n        // 拖动结束后，如果气泡应该显示，则更新气泡\n        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {\n            if !self.isDragging && !self.isMultiTouch {\n                self.shouldUpdateBubbles = true\n                self.updateBubbleMarkers()\n            }\n        }\n    }\n    \n    // 4. 优化数据采样方法\n    private func sampleData(_ data: [DatabaseManager.PriceData], rate: Int) -> [DatabaseManager.PriceData] {\n        guard rate > 1, !data.isEmpty else { return data }\n        \n        // 计算数据的实际时间跨度\n        let calendar = Calendar.current\n        let startDate = data.first?.date ?? Date()\n        let endDate = data.last?.date ?? Date()\n        let components = calendar.dateComponents([.day], from: startDate, to: endDate)\n        let totalDays = components.day ?? 0\n        \n        // 计算数据密度：时间跨度（天）/ 数据点数量\n        let dataDensity = totalDays / data.count\n        \n        // 如果数据密度低（每个数据点间隔超过2天），则不进行采样\n        if dataDensity > 2 {\n            print(\"数据密度低 (每\\(dataDensity)天一个数据点)，不进行采样\")\n            return data\n        }\n        \n        // 根据实际数据跨度动态调整采样率\n        var adjustedRate = rate\n        \n        // 根据实际数据时长调整采样率\n        if selectedTimeRange == .twoYears && totalDays < 365*2 {\n            // 如果选择2Y但实际数据少于2年，使用1Y的采样率(或不采样)\n            adjustedRate = totalDays < 365 ? 1 : selectedTimeRange.samplingRate() / 2\n        } else if selectedTimeRange == .fiveYears && totalDays < 365*5 {\n            // 如果选择5Y但实际数据少于5年，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else {\n                adjustedRate = max(2, selectedTimeRange.samplingRate() / 2)\n            }\n        } else if selectedTimeRange == .tenYears && totalDays < 365*10 {\n            // 如果选择10Y但实际数据少于10年，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else if totalDays < 365*5 {\n                adjustedRate = TimeRange.fiveYears.samplingRate()\n            } else {\n                adjustedRate = max(5, selectedTimeRange.samplingRate() / 2)\n            }\n        } else if selectedTimeRange == .all && totalDays < 365*15 {\n            // 如果选择All但实际数据少于预期，逐级降低采样率\n            if totalDays < 365 {\n                adjustedRate = 1\n            } else if totalDays < 365*2 {\n                adjustedRate = TimeRange.twoYears.samplingRate()\n            } else if totalDays < 365*5 {\n                adjustedRate = TimeRange.fiveYears.samplingRate()\n            } else if totalDays < 365*10 {\n                adjustedRate = TimeRange.tenYears.samplingRate()\n            } else {\n                adjustedRate = max(10, selectedTimeRange.samplingRate() / 2)\n            }\n        }\n        \n        // 如果调整后的采样率为1，则直接返回原始数据\n        if adjustedRate <= 1 {\n            return data\n        }\n\n        var result: [DatabaseManager.PriceData] = []\n        \n        // 始终包含第一个点\n        if let first = data.first {\n            result.append(first)\n        }\n        \n        // 获取所有特殊事件点的日期\n        var specialDates: [Date] = []\n        \n        // 添加全局时间标记（红点）\n        for (date, _) in dataService.globalTimeMarkers {\n            if data.contains(where: { isSameDay($0.date, date) }) {\n                specialDates.append(date)\n            }\n        }\n        \n        // 添加特定股票的时间标记（橙点）\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, _) in symbolMarkers {\n                if data.contains(where: { isSameDay($0.date, date) }) {\n                    specialDates.append(date)\n                }\n            }\n        }\n        \n        // 添加财报数据标记（蓝点）\n        for earning in earningData {\n            if data.contains(where: { isSameDay($0.date, earning.date) }) {\n                specialDates.append(earning.date)\n            }\n        }\n        \n        // 使用更有效的价格变化采样策略，这种方法会保留价格变化明显的点，而不仅仅是等间隔采样\n        let priceChangeThreshold = 0.005 // 0.5%的价格变化阈值\n        \n        var lastIncludedIndex = 0\n        for i in stride(from: adjustedRate, to: data.count - 1, by: adjustedRate) {\n            let lastIncludedPrice = data[lastIncludedIndex].price\n            let currentPrice = data[i].price\n            \n            // 检查当前日期是否是特殊事件点\n            let isSpecialDate = specialDates.contains(where: { isSameDay(data[i].date, $0) })\n            \n            // 如果是特殊事件点，或价格变化超过阈值，或者按采样率正常添加\n            if isSpecialDate || abs((currentPrice - lastIncludedPrice) / lastIncludedPrice) > priceChangeThreshold {\n                result.append(data[i])\n                lastIncludedIndex = i\n            } else if i % (adjustedRate * 2) == 0 {\n                // 仍然保持一定的时间间隔采样\n                result.append(data[i])\n                lastIncludedIndex = i\n            }\n        }\n        \n        // 添加最后一个点\n        if let last = data.last, result.last?.id != last.id {\n            result.append(last)\n        }\n        \n        // 在 sampleData 方法中的特殊点处理部分\n        for date in specialDates {\n            if !result.contains(where: { isSameDay($0.date, date) }) {\n                if let exactMatch = data.first(where: { isSameDay($0.date, date) }) {\n                    // 有精确匹配的情况\n                    result.append(exactMatch)\n                } else if let closestPoint = findClosestDataPoint(to: date, in: data) {\n                    // 使用最近的数据点\n                    result.append(closestPoint)\n                }\n            }\n        }\n        \n        // 按日期排序结果\n        result.sort { $0.date < $1.date }\n        \n        print(\"原始数据点: \\(data.count), 采样后数据点: \\(result.count), 采样率: \\(adjustedRate)\")\n        return result\n    }\n    \n    // 从触摸位置计算数据索引\n    private func getIndexFromLocation(_ location: CGPoint) -> Int {\n        guard !sampledChartData.isEmpty else { return 0 }\n        \n        let width = UIScreen.main.bounds.width\n        let horizontalStep = width / CGFloat(max(1, sampledChartData.count - 1))\n        \n        // 计算相对位置\n        let relativeX = location.x\n        \n        // 特殊处理最后一个点的情况\n        if relativeX >= width - horizontalStep {\n            return sampledChartData.count - 1\n        }\n        \n        // 其他位置的正常计算\n        let index = Int(round(relativeX / horizontalStep))\n        return min(sampledChartData.count - 1, max(0, index))\n    }\n    \n    // 更新单指拖动状态\n    private func updateDragLocation(_ location: CGPoint) {\n        guard !sampledChartData.isEmpty else { return }\n        \n        let index = getIndexFromLocation(location)\n        \n        dragLocation = location\n        draggedPointIndex = index\n        draggedPoint = sampledChartData[safe: index]\n        isDragging = true\n    }\n    \n    // 更新双指触摸状态\n    private func updateMultiTouchLocations(_ first: CGPoint, _ second: CGPoint) {\n        guard !sampledChartData.isEmpty else { return }\n        \n        let firstIndex = getIndexFromLocation(first)\n        let secondIndex = getIndexFromLocation(second)\n        \n        firstTouchLocation = first\n        secondTouchLocation = second\n        firstTouchPointIndex = firstIndex\n        secondTouchPointIndex = secondIndex\n        firstTouchPoint = sampledChartData[safe: firstIndex]\n        secondTouchPoint = sampledChartData[safe: secondIndex]\n    }\n    \n    // 修改TimeMarker结构\n    private enum MarkerType {\n        case global // 红点\n        case symbol // 橙色点\n        case earning // 蓝点\n    }\n\n    private struct TimeMarker: Identifiable {\n        let id = UUID()\n        let date: Date\n        let text: String\n        let type: MarkerType\n        \n        var color: Color {\n            switch type {\n            case .global: return .red\n            case .symbol: return .orange\n            case .earning: return .green\n            }\n        }\n    }\n    \n    private func getTimeMarkers() -> [TimeMarker] {\n        var markers: [TimeMarker] = []\n        \n        // 处理全局时间标记\n        for (date, text) in dataService.globalTimeMarkers {\n            if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, date) }) {\n                // 情况1：有准确匹配\n                markers.append(TimeMarker(date: exactMatch.date, text: text, type: .global))\n            } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData) {\n                // 情况2和3：使用最近的数据点\n                markers.append(TimeMarker(date: closestPoint.date, text: text, type: .global))\n            }\n        }\n        \n        // 处理特定股票的时间标记\n        if let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            for (date, text) in symbolMarkers {\n                if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, date) }) {\n                    markers.append(TimeMarker(date: exactMatch.date, text: text, type: .symbol))\n                } else if let closestPoint = findClosestDataPoint(to: date, in: sampledChartData) {\n                    markers.append(TimeMarker(date: closestPoint.date, text: text, type: .symbol))\n                }\n            }\n        }\n        \n        // 处理财报数据标记\n        for earning in earningData {\n            if let exactMatch = sampledChartData.first(where: { isSameDay($0.date, earning.date) }) {\n                let earningText = String(format: \"%.2f\", earning.price)\n                markers.append(TimeMarker(date: exactMatch.date, text: earningText, type: .earning))\n            } else if let closestPoint = findClosestDataPoint(to: earning.date, in: sampledChartData) {\n                let earningText = String(format: \"%.2f\", earning.price)\n                markers.append(TimeMarker(date: closestPoint.date, text: earningText, type: .earning))\n            }\n        }\n        \n        return markers\n    }\n    \n    private func getMarkerText(for date: Date) -> String? {\n        // 检查全局标记\n        if showRedMarkers {\n            if let text = dataService.globalTimeMarkers.first(where: { isSameDay($0.key, date) })?.value {\n                return text\n            }\n            // 检查是否是最近匹配的点\n            if let (_, text) = dataService.globalTimeMarkers.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.key, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return text\n            }\n        }\n        \n        // 检查特定股票标记\n        if showOrangeMarkers, let symbolMarkers = dataService.symbolTimeMarkers[symbol.uppercased()] {\n            if let text = symbolMarkers.first(where: { isSameDay($0.key, date) })?.value {\n                return text\n            }\n            // 检查是否是最近匹配的点\n            if let (_, text) = symbolMarkers.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.key, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return text\n            }\n        }\n        \n        // 检查财报数据标记\n        if showBlueMarkers {\n            if let earningPoint = earningData.first(where: { isSameDay($0.date, date) }) {\n                return String(format: \"昨日财报\\n%.2f%%\", earningPoint.price)\n            }\n            // 检查是否是最近匹配的点\n            if let earningPoint = earningData.first(where: {\n                let closestPoint = findClosestDataPoint(to: $0.date, in: sampledChartData)\n                return closestPoint?.date == date\n            }) {\n                return String(format: \"昨日财报\\n%.2f%%\", earningPoint.price)\n            }\n        }\n        \n        return nil\n    }\n    \n    // 格式化方法\n    private func formatDate(_ date: Date) -> String {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd\"\n        return formatter.string(from: date)\n    }\n    \n    private func formatPrice(_ price: Double) -> String {\n        return String(format: \"%.2f\", price)\n    }\n    \n    private func formatPercentage(_ value: Double) -> String {\n        return String(format: \"%.2f%%\", value)\n    }\n    \n    private func formatXAxisLabel(_ date: Date) -> String {\n        let formatter = DateFormatter()\n        \n        switch selectedTimeRange {\n        case .oneMonth:\n            formatter.dateFormat = \"dd\"\n        case .threeMonths, .sixMonths, .oneYear:\n            formatter.dateFormat = \"MMM\"\n        case .twoYears, .fiveYears, .tenYears, .all:\n            formatter.dateFormat = \"yyyy\"\n        }\n        \n        return formatter.string(from: date)\n    }\n    \n    // 日期比较方法\n    private func isSameDay(_ date1: Date, _ date2: Date) -> Bool {\n        let calendar = Calendar.current\n        return calendar.isDate(date1, inSameDayAs: date2)\n    }\n    \n    private func getIndexForDate(_ date: Date) -> Int? {\n        return sampledChartData.firstIndex { priceData in\n            let calendar = Calendar.current\n            \n            switch selectedTimeRange {\n            case .oneMonth:\n                return calendar.isDate(priceData.date, inSameDayAs: date)\n            case .threeMonths, .sixMonths, .oneYear:\n                return calendar.isDate(priceData.date, equalTo: date, toGranularity: .month)\n            case .twoYears, .fiveYears, .tenYears, .all:\n                return calendar.isDate(priceData.date, equalTo: date, toGranularity: .year)\n            }\n        }\n    }\n}\n\n// MARK: - 多触控处理视图\n// 3. 改进的多触控处理视图\n// MARK: - 多触控处理视图\nstruct OptimizedTouchHandler: UIViewRepresentable {\n    var onSingleTouchChanged: (CGPoint) -> Void\n    var onMultiTouchChanged: (CGPoint, CGPoint) -> Void\n    var onTouchesEnded: () -> Void\n    \n    func makeUIView(context: Context) -> UIView {\n        let view = OptimizedMultitouchView()\n        view.onSingleTouchChanged = onSingleTouchChanged\n        view.onMultiTouchChanged = onMultiTouchChanged\n        view.onTouchesEnded = onTouchesEnded\n        view.backgroundColor = .clear\n        return view\n    }\n    \n    func updateUIView(_ uiView: UIView, context: Context) {\n        // 不需要更新\n    }\n    \n    class OptimizedMultitouchView: UIView {\n        var onSingleTouchChanged: ((CGPoint) -> Void)?\n        var onMultiTouchChanged: ((CGPoint, CGPoint) -> Void)?\n        var onTouchesEnded: (() -> Void)?\n        \n        private var activeTouches: [UITouch: CGPoint] = [:]\n        private var lastUpdateTime: TimeInterval = 0\n        private let throttleInterval: TimeInterval = 0.016 // 约60fps\n        \n        override init(frame: CGRect) {\n            super.init(frame: frame)\n            isMultipleTouchEnabled = true\n            isUserInteractionEnabled = true\n        }\n        \n        required init?(coder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n        \n        override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n            for touch in touches {\n                activeTouches[touch] = touch.location(in: self)\n            }\n            updateTouches(force: true)\n        }\n        \n        override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {\n            // 更新移动的触摸点\n            for touch in touches {\n                activeTouches[touch] = touch.location(in: self)\n            }\n            \n            // 应用节流控制\n            let currentTime = CACurrentMediaTime()\n            if currentTime - lastUpdateTime > throttleInterval {\n                updateTouches()\n                lastUpdateTime = currentTime\n            }\n        }\n        \n        override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {\n            // 移除结束的触摸点\n            for touch in touches {\n                activeTouches.removeValue(forKey: touch)\n            }\n            \n            if activeTouches.isEmpty {\n                onTouchesEnded?()\n            } else {\n                updateTouches(force: true)\n            }\n        }\n        \n        override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n            activeTouches.removeAll()\n            onTouchesEnded?()\n        }\n        \n        private func updateTouches(force: Bool = false) {\n            let touchCount = activeTouches.count\n            \n            if touchCount >= 2 {\n                // 双指或多指触摸，取前两个触摸点\n                let touchPoints = Array(activeTouches.values)\n                onMultiTouchChanged?(touchPoints[0], touchPoints[1])\n            } else if touchCount == 1 {\n                // 单指触摸\n                if let location = activeTouches.values.first {\n                    onSingleTouchChanged?(location)\n                }\n            }\n        }\n    }\n}\n\n// MARK: - 数组安全索引扩展\nextension Array {\n    subscript(safe index: Int) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n"
            }
        ],
        "final_prompt": "我的需求是：读取highlow.txt文件，按照相同的时间间隔分成high和low两个组件，像这样“[5Y]\nLow:\nSOXS, SPXS, SPXU\n\n[2Y]\nLow:\nLeanHogs\n\n[1Y]\nLow:\n”和“[5Y]\nHigh:\nUSDTRY, LiveCattle, EWC, HEFA, XAR, CIBR, XLI, URTH, SPHQ, SCHF, IQLT, EWL, VYMI, URA, VT, BBEU, GRID, ACWI, VEA, SPDW, QTUM, PPA, EZU, IXP, EYLD, NUDM, PJUL, EUFN\n\n[2Y]\nHigh:\nLeanHogs\n\n[1Y]\nHigh:\n”，然后将gainerloser程序里的ETF涨幅、ETF跌幅两个栏目拿掉，换成high栏目和low栏目，这两个栏目的样式和呈现方式参考EarningRelease，按时间分组，可以展开或折叠，每个symbol下面要有description里的tags，symbol可以点击进入chartview界面，每个分组里面有超过5个symbol时才会折叠等等规则都参考earningrelease即可。该怎么写代码实现？"
    },
    {
        "id": "2025-06-10 14:50:25",
        "project_name": "MNSPP",
        "project_desc": "我想在我已有的sqlite3数据库/Users/yanzhang/Documents/Database/Finance.db中新建一个名为MNSPP的表",
        "files": [
            {
                "path": "/Users/yanzhang/Downloads/marketcap_pe.txt",
                "filename": "marketcap_pe.txt",
                "content": "LIN: 222520000000.0, 34.3, 5.85\nBHP: 126290000000.0, 11.06, 2.76\nRIO: 95890000000.0, 8.35, 1.74\nSCCO: 76900000000.0, 21.3, 8.04\nSHW: 89580000000.0, 33.79, 21.69\nFCX: 59570000000.0, 34.0, 3.37\nECL: 75710000000.0, 36.33, 8.53\nCRH: 62410000000.0, 19.65, 2.96\nAPD: 62260000000.0, 40.31, 4.23\nVALE: 40480000000.0, 6.88, 1.15\nNEM: 58280000000.0, 11.93, 1.86\nNUE: 28050000000.0, 21.44, 1.4\nDOW: 20180000000.0, 71.38, 1.2\nCTVA: 48870000000.0, 43.16, 2.01\nMLM: 33240000000.000004, 31.61, 3.66\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/Shares.txt",
                "filename": "Shares.txt",
                "content": "LIN: 470720000, 5.85\nBHP: 2540000000, 2.76\nRIO: 1620000000, 1.74\nSCCO: 804070000, 8.04\nSHW: 250600000, 21.69\nFCX: 1440000000, 3.37\nECL: 283510000, 8.53\nCRH: 674380000, 2.96\nAPD: 222540000, 4.23\nVALE: 4269999999, 1.15\nNEM: 1110000000, 1.86\nNUE: 230750000, 1.4\nDOW: 706860000, 1.2\n"
            },
            {
                "path": "/Users/yanzhang/Downloads/symbol_names.txt",
                "filename": "symbol_names.txt",
                "content": "LIN: Linde\nBHP: BHP\nRIO: Rio Tinto\nSCCO: Southern Copper\nSHW: The Sherwin-Williams\nFCX: Freeport-McMoRan\nECL: Ecolab\nCRH: CRH\nAPD: Air Products Chemicals\nVALE: Vale\nNEM: Newmont\nNUE: Nucor\nDOW: Dow\nCTVA: Corteva\nMLM: Martin Marietta Materials\n"
            }
        ],
        "final_prompt": "表结构大致如下“CREATE TABLE  IF NOT EXISTS  MNSPP (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    symbol TEXT,\n    name TEXT,\n    shares REAL,\n    marketcap REAL,\n    pe_ratio REAL,\n    pb REAL,\n);\n”，表里的内容来源如下：读取symbol_names.txt文件，冒号前面就是symbol，冒号后面就是name，然后读取shares.txt，紧挨着冒号后面的第一串数字就是shares，最后读取marketcap_pe.txt文件，紧挨着冒号的第一串数字就是marketcap，第二串（以逗号隔开）就是pe，第三串就是pb。我需要你帮我写程序按照我的要求把这些数据写入数据库表中，我该怎么做？"
    },
    {
        "id": "2025-06-10 15:34:01",
        "project_name": "marketcap",
        "project_desc": "我有一个用applescript和Python联合开发的程序",
        "files": [
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py",
                "filename": "Stock_Chart.py",
                "content": "import re\nimport sys\nimport json\nimport subprocess\nimport tkinter as tk\nimport pyperclip\nfrom functools import lru_cache\nimport concurrent.futures\n\nsys.path.append('/Users/yanzhang/Documents/Financial_System/Query')\nfrom Chart_input import plot_financial_data\n\n@lru_cache(maxsize=None)\ndef lazy_load_data(path, data_type='json'):\n    with open(path, 'r', encoding='utf-8') as file:\n        if data_type == 'json':\n            return json.load(file)\n        else:\n            data = {}\n            for line in file:\n                line = line.strip()\n                if not line:\n                    continue  # 忽略空行\n                key, value = map(str.strip, line.split(':', 1))\n                if data_type == 'marketcap_pe':\n                    parts = [p.strip() for p in value.split(',')]\n                    if len(parts) >= 2:\n                        # 忽略其他额外的数据项\n                        marketcap, pe, *_ = parts\n                        data[key.strip()] = (float(marketcap), pe)\n                    else:\n                        raise ValueError(f\"数据格式错误：{line}\")\n                elif \"shares.txt\" in path.lower():\n                    # 当处理 shares.txt 文件时，读取多个字段\n                    parts = [p.strip() for p in value.split(',')]\n                    if len(parts) == 2:\n                        try:\n                            share_val = int(parts[0])\n                        except ValueError:\n                            share_val = parts[0]\n                        pb_text = parts[1]\n                        data[key.strip()] = (share_val, pb_text)\n                    else:\n                        # 只有一个数字时，设置 pb_text 默认值\n                        data[key.strip()] = (int(parts[0]), \"--\")\n                else:\n                    data[key.strip()] = value\n            return data\n\ndef close_app(root):\n    if root:\n        root.quit()\n        root.destroy()\n\ndef display_dialog(message):\n    # AppleScript代码模板\n    applescript_code = f'display dialog \"{message}\" buttons {{\"OK\"}} default button \"OK\"'\n    \n    # 使用subprocess调用osascript\n    process = subprocess.run(['osascript', '-e', applescript_code], check=True)\n\ndef match_and_plot(input_trimmed, sector_data, compare_data, shares, marketcap_pe_data, json_data, db_path):\n    search_keys = [input_trimmed, input_trimmed.capitalize(), input_trimmed.upper()]\n    for input_variant in search_keys:\n        for sector, names in sector_data.items():\n            if input_variant in names:\n                plot_financial_data(\n                    db_path, sector, input_variant,\n                    compare_data.get(input_variant, \"N/A\"),\n                    shares.get(input_variant, \"N/A\"),\n                    *marketcap_pe_data.get(input_variant, (None, 'N/A')),\n                    json_data, '10Y', True)\n                return True\n    input_lower = input_trimmed.lower()\n    for sector, names in sector_data.items():\n        for name in names:\n            if re.search(input_lower, name.lower()):\n                plot_financial_data(\n                    db_path, sector, name,\n                    compare_data.get(name, \"N/A\"),\n                    shares.get(name, \"N/A\"),\n                    *marketcap_pe_data.get(name, (None, 'N/A')),\n                    json_data, '10Y', True)\n                return True\n    return False\n\ndef load_data_parallel():\n    data_sources = [\n        ('/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json', 'json'),\n        ('/Users/yanzhang/Documents/News/backup/Compare_All.txt', 'compare'),\n        ('/Users/yanzhang/Documents/News/backup/Shares.txt', 'compare'),\n        ('/Users/yanzhang/Documents/News/backup/marketcap_pe.txt', 'marketcap_pe'),\n        ('/Users/yanzhang/Documents/Financial_System/Modules/description.json', 'json')\n    ]\n    \n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        future_to_data = {executor.submit(lazy_load_data, path, data_type): (path, data_type) for path, data_type in data_sources}\n        results = {}\n        for future in concurrent.futures.as_completed(future_to_data):\n            path, data_type = future_to_data[future]\n            try:\n                data = future.result()\n                results[path] = data\n            except Exception as exc:\n                print(f'{path} generated an exception: {exc}')\n    \n    return results\n\ndef input_mapping(root, data, db_path, user_input):\n    if not user_input:\n        print(\"未输入任何内容，程序即将退出。\")\n        close_app(root)\n        return\n\n    input_trimmed = user_input.strip()\n    if match_and_plot(input_trimmed, data['/Users/yanzhang/Documents/Financial_System/Modules/Sectors_All.json'],\n                      data['/Users/yanzhang/Documents/News/backup/Compare_All.txt'],\n                      data['/Users/yanzhang/Documents/News/backup/Shares.txt'],\n                      data['/Users/yanzhang/Documents/News/backup/marketcap_pe.txt'],\n                      data['/Users/yanzhang/Documents/Financial_System/Modules/description.json'],\n                      db_path):\n        close_app(root)\n    else:\n        # 把没找到的符号拷贝到剪贴板，然后用 show_description.py 的 paste 模式来弹 description 界面\n        pyperclip.copy(input_trimmed)\n        subprocess.run([\n            sys.executable,\n            '/Users/yanzhang/Documents/Financial_System/Query/show_description.py',\n            'paste'\n        ], check=True)\n        close_app(root)\n\ndef get_user_input_custom(root, prompt):\n    input_dialog = tk.Toplevel(root)\n    input_dialog.title(prompt)\n    input_dialog.geometry('280x90')\n\n    screen_width = input_dialog.winfo_screenwidth()\n    screen_height = input_dialog.winfo_screenheight()\n    position_right = int(screen_width / 2 - 140)\n    position_down = int(screen_height / 2 - 140) - 100\n    input_dialog.geometry(f\"280x90+{position_right}+{position_down}\")\n\n    entry = tk.Entry(input_dialog, width=20, font=('Helvetica', 18))\n    entry.pack(pady=20, ipady=10)\n    entry.focus_set()\n\n    try:\n        entry.insert(0, root.clipboard_get())\n    except tk.TclError:\n        pass\n    entry.select_range(0, tk.END)\n\n    user_input = None\n\n    def on_submit():\n        nonlocal user_input\n        user_input = entry.get()\n        input_dialog.destroy()\n\n    entry.bind('<Return>', lambda event: on_submit())\n    input_dialog.bind('<Escape>', lambda event: input_dialog.destroy())\n    input_dialog.wait_window(input_dialog)\n    return user_input\n\nif __name__ == '__main__':\n    root = tk.Tk()\n    root.withdraw()\n    root.bind('<Escape>', lambda event: close_app(root))\n\n    data = load_data_parallel()\n    db_path = '/Users/yanzhang/Documents/Database/Finance.db'\n\n    if len(sys.argv) > 1:\n        arg = sys.argv[1]\n        if arg == \"paste\":\n            clipboard_content = pyperclip.paste()\n            input_mapping(root, data, db_path, clipboard_content)\n        elif arg == \"input\":\n            user_input = get_user_input_custom(root, \"请输入\")\n            input_mapping(root, data, db_path, user_input)\n    else:\n        print(\"请提供参数 input 或 paste\")\n        sys.exit(1)\n\n    root.mainloop()"
            },
            {
                "path": "/Users/yanzhang/Documents/Financial_System/Query/Chart_input.py",
                "filename": "Chart_input.py",
                "content": "# o1优化后代码\nimport re\nimport sqlite3\nimport subprocess\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RadioButtons\nimport matplotlib\nimport tkinter as tk\nfrom tkinter import scrolledtext, font as tkFont\nfrom functools import lru_cache\nfrom scipy.interpolate import interp1d\n\n@lru_cache(maxsize=None)\ndef fetch_data(db_path, table_name, name):\n    \"\"\"\n    从数据库中获取指定名称的日期、价格、成交量数据。\n    如果表中存在volume字段，则一起返回，否则只返回date和price。\n    \"\"\"\n    with sqlite3.connect(db_path) as conn:\n        cursor = conn.cursor()\n        try:\n            # 为查询字段添加索引\n            cursor.execute(f\"CREATE INDEX IF NOT EXISTS idx_name ON {table_name} (name);\")\n            query = f\"SELECT date, price, volume FROM {table_name} WHERE name = ? ORDER BY date;\"\n            result = cursor.execute(query, (name,)).fetchall()\n            if not result:\n                raise ValueError(\"没有查询到可用数据\")\n            return result\n        except sqlite3.OperationalError:\n            query = f\"SELECT date, price FROM {table_name} WHERE name = ? ORDER BY date;\"\n            result = cursor.execute(query, (name,)).fetchall()\n            if not result:\n                raise ValueError(\"没有查询到可用数据\")\n            return result\n\ndef smooth_curve(dates, prices, num_points=500):\n    \"\"\"\n    通过插值生成更多的点来让曲线更平滑。\n    如果数据点少于四个，使用线性插值；否则使用三次插值。\n    \"\"\"\n    date_nums = matplotlib.dates.date2num(dates)\n    if len(dates) < 4:\n        interp_func = interp1d(date_nums, prices, kind='linear')\n    else:\n        interp_func = interp1d(date_nums, prices, kind='cubic')\n\n    new_date_nums = np.linspace(min(date_nums), max(date_nums), num_points)\n    new_prices = interp_func(new_date_nums)\n    new_dates = matplotlib.dates.num2date(new_date_nums)\n\n    return new_dates, new_prices\n\ndef process_data(data):\n    \"\"\"\n    将数据库返回的数据处理为日期、价格、成交量三个列表。\n    如果数据为空，则抛出异常。\n    \"\"\"\n    if not data:\n        raise ValueError(\"没有可供处理的数据\")\n        \n    dates, prices, volumes = [], [], []\n    for row in data:\n        date = datetime.strptime(row[0], \"%Y-%m-%d\")\n        price = float(row[1]) if row[1] is not None else None\n        volume = int(row[2]) if len(row) > 2 and row[2] is not None else None\n        if price is not None:\n            dates.append(date)\n            prices.append(price)\n            volumes.append(volume)\n    \n    return dates, prices, volumes\n\ndef display_dialog(message):\n    \"\"\"\n    使用 AppleScript 在 macOS 上弹出提示对话框。\n    \"\"\"\n    applescript_code = f'display dialog \"{message}\" buttons {{\"OK\"}} default button \"OK\"'\n    subprocess.run(['osascript', '-e', applescript_code], check=True)\n\ndef update_plot(line1, fill, line2, dates, prices, volumes, ax1, ax2, show_volume):\n    \"\"\"\n    根据筛选后的数据更新图表。\n    \"\"\"\n    # 处理 prices 和 dates 可能为空的情况\n    if not dates or not prices:\n        line1.set_data([], [])\n        if fill:\n            fill.remove() # 确保移除旧的fill对象\n            fill = None   # 将fill置为None，因为没有新的fill被创建\n        if volumes: # 假设volumes与dates/prices长度一致或已处理\n            line2.set_data([], [])\n        \n        # 设置默认的轴范围当没有数据时\n        ax1.set_xlim(datetime.now() - timedelta(days=1), datetime.now())\n        ax1.set_ylim(0, 1) # 或者其他合适的默认范围\n        if show_volume:\n            ax2.set_ylim(0, 1)\n        line2.set_visible(show_volume and bool(volumes)) # 仅当有数据时显示\n        plt.draw()\n        return fill # 返回 None 因为 fill 被移除了\n\n    # --- 数据存在，继续绘图 ---\n    line1.set_data(dates, prices)\n    if fill:\n        fill.remove()\n    \n    # 添加edgecolor='none'或linewidth=0参数来移除边缘线\n    fill = ax1.fill_between(dates, prices, color='lightblue', alpha=0.3, edgecolor='none')\n    \n    if volumes: # 确保 volumes 列表不为空\n        line2.set_data(dates, volumes) # 假设 dates 和 volumes 长度匹配\n    else: # 如果 volumes 为空或None\n        line2.set_data([],[])\n\n    # X轴范围设置\n    date_min_val = np.min(dates)\n    date_max_val = np.max(dates)\n    if date_min_val == date_max_val:\n        # 为单个日期点扩展X轴范围\n        ax1.set_xlim(date_min_val - timedelta(days=1), date_max_val + timedelta(days=1))\n    else:\n        date_range = date_max_val - date_min_val\n        right_margin = date_range * 0.01  # 添加1%的右侧余量\n        ax1.set_xlim(date_min_val, date_max_val + right_margin)\n    \n    # Y轴价格范围设置\n    min_p = np.min(prices)\n    max_p = np.max(prices)\n    if min_p == max_p:\n        buffer = abs(min_p * 0.1) if min_p != 0 else 0.1\n        buffer = max(buffer, 1e-6) # 确保buffer有一个最小正值\n        min_p -= buffer\n        max_p += buffer\n        if min_p >= max_p: # 进一步安全检查\n            max_p = min_p + buffer # 确保 max_p > min_p\n    ax1.set_ylim(min_p, max_p)\n    \n    # Y轴成交量范围设置 (ax2)\n    if show_volume:\n        if volumes:\n            valid_volumes = [v for v in volumes if v is not None]\n            if valid_volumes:\n                min_v = np.min(valid_volumes) # 通常成交量不为负，所以min_v可能是0\n                max_v = np.max(valid_volumes)\n                if max_v == min_v : # 所有成交量相同或只有一个点\n                     ax2.set_ylim(0, max_v + 1 if max_v is not None else 1) # 从0开始，给最大值加一点buffer\n                else:\n                     ax2.set_ylim(0, max_v) # 成交量Y轴通常从0开始\n            else: # valid_volumes 为空\n                ax2.set_ylim(0, 1) # 默认范围\n        else: # volumes 列表本身为空或None\n            ax2.set_ylim(0, 1)\n            \n    line2.set_visible(show_volume and bool(volumes)) # bool(volumes) 检查volumes是否非空\n    plt.draw()\n    return fill\n\ndef plot_financial_data(db_path, table_name, name, compare, share, marketcap, pe, json_data,\n                        default_time_range=\"1Y\", panel=\"False\"):\n    \"\"\"\n    主函数，绘制股票或ETF的时间序列图表。支持成交量、标签说明、信息弹窗、区间切换等功能。\n    按键说明：\n    - v：显示或隐藏成交量\n    - 1~9：快速切换不同时间区间\n    - `：弹出信息对话框\n    - d：查询数据库并弹窗显示\n    - c：切换显示或隐藏标记点（红色全局点)\n    - a：切换显示或隐藏收益公告日期点（白色点）\n    - x：切换显示或隐藏标记点（橙色特定点)\n    - e：启动财报数据编辑程序\n    - n：启动财报数据输入程序\n    - t：启动标签Tags编辑程序\n    - w：启动新增Event程序\n    - 方向键上下：在不同时间区间间移动\n    - ESC：关闭所有图表，并在panel为True时退出系统\n    \"\"\"\n    plt.close('all')  # 关闭所有图表\n    matplotlib.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\n    # 如果传入的 share 是一个元组，则拆分为 share_val 与 pb_text\n    if isinstance(share, tuple):\n        share_val, pb_text = share\n    else:\n        share_val = share\n        pb_text = \"\"\n\n    show_volume = False\n    mouse_pressed = False\n    initial_price = None\n    initial_date = None\n    fill = None\n    show_global_markers = False  # 红色点默认不显示\n    show_specific_markers = True  # 橙色点默认显示\n    show_earning_markers = True  # 默认不显示收益点\n    show_all_annotations = True  # 新增：浮窗默认显示\n\n    try:\n        data = fetch_data(db_path, table_name, name)\n    except ValueError as e:\n        display_dialog(f\"{e}\")\n        return\n\n    try:\n        dates, prices, volumes = process_data(data)\n    except ValueError as e:\n        display_dialog(f\"{e}\")\n        return\n\n    if not dates or not prices:\n        display_dialog(\"没有有效的数据来绘制图表。\")\n        return\n\n    # 使用插值函数生成更多的平滑数据点\n    smooth_dates, smooth_prices = smooth_curve(dates, prices)\n\n    #这里可以修改整个表格的大小\n    fig, ax1 = plt.subplots(figsize=(15, 8))\n    \n    # 这里调整图表居上边沿的距离\n    fig.subplots_adjust(left=0.05, bottom=0.1, right=0.83, top=0.8)\n    ax2 = ax1.twinx()\n\n    # 隐藏ax2的轴线和刻度\n    ax2.axis('off')\n\n    fig.patch.set_facecolor('black')\n    ax1.set_facecolor('black')\n    ax1.tick_params(axis='x', colors='white')\n    ax1.tick_params(axis='y', colors='white')\n    ax2.tick_params(axis='y', colors='white')\n\n    highlight_point = ax1.scatter([], [], s=100, color='cyan', zorder=5)\n    \n    # 绘制插值后的平滑曲线\n    line1, = ax1.plot(\n        smooth_dates,\n        smooth_prices,\n        marker='',\n        linestyle='-',\n        linewidth=2,\n        color='cyan',\n        alpha=0.7,\n        label='Price'\n    )\n    # 在每个原始价格点处添加一个小小的白色散点，并保存散点对象引用\n    small_dot_scatter = ax1.scatter(dates, prices, s=5, color='white', zorder=1)\n    \n    line2, = ax2.plot(\n        dates,\n        volumes,\n        marker='o',\n        markersize=2,\n        linestyle='-',\n        linewidth=2,\n        color='magenta',\n        alpha=0.7,\n        label='Volume'\n    )\n    fill = ax1.fill_between(dates, prices, color='cyan', alpha=0.2)\n    line2.set_visible(show_volume)\n\n    # 处理全局标记点和特定股票标记点\n    global_markers = {}\n    specific_markers = {}\n    earning_markers = {}  # 新增：收益公告标记点\n    # 保存所有注释的引用\n    all_annotations = []\n    \n    # 获取全局标记点\n    if 'global' in json_data:\n        for date_str, text in json_data['global'].items():\n            try:\n                marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                global_markers[marker_date] = text\n            except ValueError:\n                print(f\"无法解析全局标记日期: {date_str}\")\n    \n    # 获取特定股票的标记点\n    found_item = None\n    for source in ['stocks', 'etfs']:\n        for item in json_data.get(source, []):\n            if item['symbol'] == name and 'description3' in item:\n                found_item = item\n                for date_obj in item.get('description3', []):\n                    for date_str, text in date_obj.items():\n                        try:\n                            marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                            specific_markers[marker_date] = text\n                        except ValueError:\n                            print(f\"无法解析特定标记日期: {date_str}\")\n                break\n        if found_item:\n            break\n    \n    # 修改获取收益公告日期的部分\n    try:\n        with sqlite3.connect(db_path) as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT date, price FROM Earning WHERE name = ? ORDER BY date\", (name,))\n            for date_str, price_change in cursor.fetchall():\n                try:\n                    marker_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n                    # 查找与 marker_date 最接近的日期（假设主数据的 dates 列表已经生成）\n                    closest_date = min(dates, key=lambda d: abs(d - marker_date))\n                    index = dates.index(closest_date)\n                    marker_price = prices[index]  # 获取该日期对应的价格\n                    latest_price = prices[-1]     # 最新一天的价格\n\n                    # 计算当天价格与最新价格之间的百分比差值，注意防止除以0\n                    if marker_price and marker_price != 0:\n                        diff_percent = ((latest_price - marker_price) / marker_price) * 100\n                    else:\n                        diff_percent = 0\n\n                    # 拼接提示文本，先显示最新价差，再显示昨日财报数据\n                    earning_markers[marker_date] = f\"最新价差: {diff_percent:.2f}%\\n昨日财报: {price_change}%\"\n                except ValueError:\n                    print(f\"无法解析收益公告日期: {date_str}\")\n    except sqlite3.OperationalError as e:\n        print(f\"获取收益数据失败: {e}\")\n    \n    # 标记点\n    global_scatter_points = []\n    specific_scatter_points = []\n    earning_scatter_points = []  # 新增：收益公告标记点列表\n    \n    # 绘制全局标记点（红色）\n    for marker_date, text in global_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='red', \n                                #  alpha=0.7, zorder=4, picker=5) # 初始设为可见\n                                 alpha=0.7, zorder=4, picker=5, visible=show_global_markers)  # 初始设为不可见\n            global_scatter_points.append((scatter, closest_date, price_at_date, text))\n    \n    # 绘制特定股票标记点（橙色）\n    for marker_date, text in specific_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='orange', \n                                #  alpha=0.7, zorder=4, picker=5) # 初始设为可见\n                                 alpha=0.7, zorder=4, picker=5, visible=show_specific_markers)  # 初始设为不可见\n            specific_scatter_points.append((scatter, closest_date, price_at_date, text))\n    \n    # 新增：绘制财报收益公告标记点（白色）\n    for marker_date, text in earning_markers.items():\n        if min(dates) <= marker_date <= max(dates):\n            closest_date_idx = (np.abs(np.array(dates) - marker_date)).argmin()\n            closest_date = dates[closest_date_idx]\n            price_at_date = prices[closest_date_idx]\n            scatter = ax1.scatter([closest_date], [price_at_date], s=100, color='white', \n                                 alpha=0.7, zorder=4, picker=5, visible=show_earning_markers)\n            earning_scatter_points.append((scatter, closest_date, price_at_date, text))\n\n    # 为每个全局标记点(红色点)创建固定注释，交替设置左上与左下偏移\n    red_offsets = [(-60, 50),(50, -60), (-70, 45), (-50, -45)]  # 第一个为左上、第二个为右下、第三个还是为左上、第四个为右上\n    for i, (scatter, date, price, text) in enumerate(global_scatter_points):\n        offset = red_offsets[i % 4]\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),  # 箭头指向的位置\n            xytext=offset,     # 使用交替的偏移\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='red'),\n            color='red',\n            fontsize=12,\n            visible=False  # 默认隐藏(因为红色点初始设定为不可见)\n        )\n        all_annotations.append((annotation, 'global', date, price))\n\n    # 为每个特定股票标记点(橙色点)创建固定注释，左右交替偏移\n    specific_offsets = [\n        (-150, 50),    # 偶数（i=0,2,4…）向右下\n        (20, -50)   # 奇数（i=1,3,5…）向左下\n    ]\n    for i, (scatter, date, price, text) in enumerate(specific_scatter_points):\n        offset = specific_offsets[i % 2]\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),\n            xytext=offset,\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='orange'),\n            color='orange',\n            fontsize=12,\n            visible=show_specific_markers and show_all_annotations\n        )\n        all_annotations.append((annotation, 'specific', date, price))\n\n    # 为每个收益公告标记点(白色点)创建固定注释，将偏移修改为右上（例如 (50,50)）\n    for scatter, date, price, text in earning_scatter_points:\n        annotation = ax1.annotate(\n            text,\n            xy=(date, price),\n            xytext=(50, 50),  # 修改为右上偏移\n            textcoords=\"offset points\",\n            bbox=dict(boxstyle=\"round\", fc=\"black\", alpha=0.8),\n            arrowprops=dict(arrowstyle=\"->\", color='white'),\n            color='yellow',\n            fontsize=12,\n            visible=show_earning_markers and show_all_annotations\n        )\n        all_annotations.append((annotation, 'earning', date, price))\n\n    # 添加一个新的函数来控制所有浮窗的显示或隐藏\n    def toggle_all_annotations():\n        \"\"\"切换所有注释的显示状态\"\"\"\n        nonlocal show_all_annotations\n        show_all_annotations = not show_all_annotations\n        \n        # 更新所有注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'global':\n                annotation.set_visible(show_global_markers and show_all_annotations)\n            elif anno_type == 'specific':\n                annotation.set_visible(show_specific_markers and show_all_annotations)\n            elif anno_type == 'earning':\n                annotation.set_visible(show_earning_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n    \n    def clean_percentage_string(percentage_str):\n        \"\"\"\n        将可能包含 % 符号的字符串转换为浮点数。\n        \"\"\"\n        try:\n            return float(percentage_str.strip('%'))\n        except ValueError:\n            return None\n\n    # 计算换手额（单位：百万）\n    # turnover = (\n    #     (volumes[-1] * prices[-1]) / 1e6\n    #     if volumes and volumes[-1] is not None and prices[-1] is not None\n    #     else None\n    # )\n    # turnover_str = f\"{turnover:.1f}\" if turnover is not None else \"\"\n\n    turnover = (\n        (volumes[-1] * prices[-1]) / 1e6\n        if volumes and volumes[-1] is not None and prices[-1] is not None\n        else None\n    )\n\n    if turnover is not None:\n        if turnover >= 1000:  # 大于等于1000M时转换为B\n            turnover = turnover / 1000  # 转换为B\n            turnover_str = f\"{turnover:.1f}B\"\n        else:  # 小于1000M时保持M\n            turnover_str = f\"{turnover:.1f}M\"\n    else:\n        turnover_str = \"\"\n\n    # 从compare中去除中文和加号\n    filtered_compare = re.sub(r'[\\u4e00-\\u9fff+]', '', compare)\n    def clean_percentage_string(percentage_str):\n        try:\n            return float(percentage_str.strip('%'))\n        except ValueError:\n            return None\n    compare_value = clean_percentage_string(filtered_compare)\n\n    # 根据compare和换手额做\"可疑\"标记\n    if turnover is not None and turnover < 100 and compare_value is not None and compare_value > 0:\n        turnover_str = f\"可疑{turnover_str}\"\n\n    # 注意：这里用 share_val（而不是原来的 share）来计算换手率\n    try:\n        share_int = int(share_val)\n        turnover_rate = f\"{(volumes[-1] / share_int) * 100:.2f}\" if (volumes and volumes[-1] is not None and share_int > 0) else \"\"\n    except (ValueError, ZeroDivisionError, TypeError):\n        turnover_rate = \"\"\n        \n    marketcap_in_billion = (\n        f\"{float(marketcap) / 1e9:.1f}B\"\n        if marketcap not in [None, \"N/A\"]\n        else \"\"\n    )\n    pe_text = f\"{pe}\" if pe not in [None, \"N/A\"] else \"\"\n\n    clickable = False\n    tag_str = \"\"\n    fullname = \"\"\n    data_sources = ['stocks', 'etfs']\n    found = False\n\n    # 在JSON中查找对应的name信息以展示完整名称、标签、描述等\n    for source in data_sources:\n        for item in json_data.get(source, []):\n            if item['symbol'] == name:\n                tags = item.get('tag', [])\n                fullname = item.get('name', '')\n                tag_str = ','.join(tags)\n                if len(tag_str) > 25:\n                    tag_str = tag_str[:25] + '...'\n                clickable = True\n                found = True\n                break\n        if found:\n            break\n\n    # 组合标题，增加 pb_text 字段\n    title_text = (\n        f'{name}  {compare}  {turnover_str} {turnover_rate} '\n        f'{marketcap_in_billion} {pe_text} {pb_text} \"{table_name}\" {fullname} {tag_str}'\n    )\n    title_style = {\n        'color': 'orange' if clickable else 'lightgray',\n        'fontsize': 16 if clickable else 15,\n        'fontweight': 'bold',\n        'picker': clickable,\n    }\n    # 在设置标题的代码部分\n    title = ax1.set_title(title_text, **title_style, pad=70)  # 增加pad参数\n\n    def show_stock_etf_info(event=None):\n        \"\"\"\n        展示当前name在JSON数据中的信息（如全名、标签、描述等）。\n        如果未找到则弹框提示。\n        \"\"\"\n        for source in data_sources:\n            for item in json_data.get(source, []):\n                if item['symbol'] == name:\n                    descriptions = item\n                    root = tk.Tk()\n                    root.withdraw()  # 隐藏主窗口\n                    top = tk.Toplevel(root)\n                    top.title(\"Information\")\n                    top.geometry(\"600x750\")\n                    font_size = ('Arial', 22)\n                    text_box = scrolledtext.ScrolledText(top, wrap=tk.WORD, font=font_size)\n                    text_box.pack(expand=True, fill='both')\n                    info = (\n                        f\"{name}\\n\"\n                        f\"{descriptions['name']}\\n\\n\"\n                        f\"{descriptions['tag']}\\n\\n\"\n                        f\"{descriptions['description1']}\\n\\n\"\n                        f\"{descriptions['description2']}\"\n                    )\n                    text_box.insert(tk.END, info)\n                    text_box.config(state=tk.DISABLED)\n                    top.bind('<Escape>', lambda event: root.destroy())\n                    root.mainloop()\n                    return\n        display_dialog(f\"未找到 {name} 的信息\")\n\n    # 修改toggle_global_markers函数\n    def toggle_global_markers():\n        \"\"\"切换全局标记点（红色）的显示状态\"\"\"\n        nonlocal show_global_markers\n        show_global_markers = not show_global_markers\n        \n        # 更新所有全局标记点的可见性\n        for scatter, _, _, _ in global_scatter_points:\n            scatter.set_visible(show_global_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'global':\n                annotation.set_visible(show_global_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改toggle_specific_markers函数\n    def toggle_specific_markers():\n        \"\"\"切换特定股票标记点（橙色）的显示状态\"\"\"\n        nonlocal show_specific_markers\n        show_specific_markers = not show_specific_markers\n        \n        # 更新所有特定股票标记点的可见性\n        for scatter, _, _, _ in specific_scatter_points:\n            scatter.set_visible(show_specific_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'specific':\n                annotation.set_visible(show_specific_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改toggle_earning_markers函数\n    def toggle_earning_markers():\n        \"\"\"切换收益公告标记点的显示状态\"\"\"\n        nonlocal show_earning_markers\n        show_earning_markers = not show_earning_markers\n        \n        # 更新所有收益公告标记点的可见性\n        for scatter, _, _, _ in earning_scatter_points:\n            scatter.set_visible(show_earning_markers)\n        \n        # 更新对应注释的可见性\n        for annotation, anno_type, _, _ in all_annotations:\n            if anno_type == 'earning':\n                annotation.set_visible(show_earning_markers and show_all_annotations)\n        \n        fig.canvas.draw_idle()\n\n    # 修改update_marker_visibility函数来同时更新注释\n    def update_marker_visibility():\n        \"\"\"根据当前时间区间和各开关状态，更新标记点和注释的可见性。\"\"\"\n        # 提取当前时间区间内显示的最早日期\n        current_val = radio.value_selected\n        if current_val in time_options:\n            years = time_options[current_val]\n            if years == 0:\n                min_date = min(dates)\n            else:\n                min_date = datetime.now() - timedelta(days=years * 365)\n        else:\n            min_date = min(dates)\n\n        # 更新标记点可见性\n        for scatter, date, _, _ in global_scatter_points:\n            scatter.set_visible((min_date <= date) and show_global_markers)\n        for scatter, date, _, _ in specific_scatter_points:\n            scatter.set_visible((min_date <= date) and show_specific_markers)\n        for scatter, date, _, _ in earning_scatter_points:\n            scatter.set_visible((min_date <= date) and show_earning_markers)\n        \n        # 更新注释可见性\n        for annotation, anno_type, date, _ in all_annotations:\n            if min_date <= date:\n                if anno_type == 'global':\n                    annotation.set_visible(show_global_markers and show_all_annotations)\n                elif anno_type == 'specific':\n                    annotation.set_visible(show_specific_markers and show_all_annotations)\n                elif anno_type == 'earning':\n                    annotation.set_visible(show_earning_markers and show_all_annotations)\n            else:\n                annotation.set_visible(False)\n        \n        fig.canvas.draw_idle()\n    \n    def on_pick(event):\n        \"\"\"\n        当点击标题（可点击）或标记点时，展示对应信息窗口。\n        如果标记点不可见，则不会触发点击事件。\n        \"\"\"\n        if event.artist == title:\n            show_stock_etf_info()\n        elif event.artist in [point[0] for point in global_scatter_points + specific_scatter_points + earning_scatter_points]:\n            # 查找被点击的标记点\n            for scatter, date, price, text in global_scatter_points + specific_scatter_points + earning_scatter_points:\n                if event.artist == scatter:\n                    # 更新注释内容和显示位置\n                    annot.xy = (date, price)\n                    annot.set_text(f\"{datetime.strftime(date, '%Y-%m-%d')}\\n{price}\\n{text}\")\n                    annot.get_bbox_patch().set_alpha(0.8)\n                    annot.set_fontsize(16)\n                    # 调整注释显示位置\n                    midpoint = max(dates) - (max(dates) - min(dates)) / 2\n                    if date < midpoint:\n                        annot.set_position((50, -20))\n                    else:\n                        annot.set_position((-150, -20))\n                    annot.set_visible(True)\n                    highlight_point.set_offsets([date, price])\n                    highlight_point.set_visible(True)\n                    fig.canvas.draw_idle()\n                    break\n\n    def on_keyword_selected(db_path, table_name, name):\n        \"\"\"\n        按关键字查询数据库并弹框显示结果。\n        \"\"\"\n        condition = f\"name = '{name}'\"\n        result = query_database(db_path, table_name, condition)\n        create_window(result)\n\n    def query_database(db_path, table_name, condition):\n        \"\"\"\n        根据条件查询数据库并返回结果的字符串形式。\n        \"\"\"\n        with sqlite3.connect(db_path) as conn:\n            cursor = conn.cursor()\n            query = f\"SELECT * FROM {table_name} WHERE {condition} ORDER BY date DESC;\"\n            cursor.execute(query)\n            rows = cursor.fetchall()\n            if not rows:\n                return \"今天没有数据可显示。\\n\"\n            columns = [description[0] for description in cursor.description]\n            col_widths = [\n                max(len(str(row[i])) for row in rows + [columns])\n                for i in range(len(columns))\n            ]\n            output_text = ' | '.join(\n                [col.ljust(col_widths[idx]) for idx, col in enumerate(columns)]\n            ) + '\\n'\n            output_text += '-' * len(output_text) + '\\n'\n            for row in rows:\n                output_text += ' | '.join(\n                    [str(item).ljust(col_widths[idx]) for idx, item in enumerate(row)]\n                ) + '\\n'\n            return output_text\n\n    def create_window(content):\n        \"\"\"\n        创建新窗口显示查询数据库的结果。\n        \"\"\"\n        root = tk.Tk()\n        root.withdraw()  # 隐藏主窗口\n        top = tk.Toplevel(root)\n        top.title(\"数据库查询结果\")\n        window_width, window_height = 900, 600\n        center_x = (top.winfo_screenwidth() - window_width) // 2\n        center_y = (top.winfo_screenheight() - window_height) // 2\n        top.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')\n        top.bind('<Escape>', lambda event: root.destroy())\n\n        text_font = tkFont.Font(family=\"Courier\", size=20)\n        text_area = scrolledtext.ScrolledText(top, wrap=tk.WORD, width=100, height=30, font=text_font)\n        text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)\n        text_area.insert(tk.INSERT, content)\n        text_area.configure(state='disabled')\n        root.mainloop()\n\n    # 给标题添加可点击下划线\n    if clickable:\n        fig.canvas.mpl_connect('pick_event', on_pick)\n\n    ax1.grid(True, color='gray', alpha=0.1, linestyle='--')\n    plt.xticks(rotation=45)\n\n    annot = ax1.annotate(\n        \"\",\n        xy=(0, 0),\n        xytext=(20, 20),\n        textcoords=\"offset points\",\n        bbox=dict(boxstyle=\"round\", fc=\"black\"),\n        arrowprops=dict(arrowstyle=\"->\"),\n        color='white'\n    )\n    annot.set_visible(False)\n\n    # 定义可选时间范围\n    time_options = {\n        \"1m\": 0.08,\n        \"3m\": 0.25,\n        \"6m\": 0.5,\n        \"1Y\": 1,\n        \"2Y\": 2,\n        \"3Y\": 3,\n        \"5Y\": 5,\n        \"10Y\": 10,\n        \"All\": 0\n    }\n    default_index = list(time_options.keys()).index(default_time_range)\n\n    # 配置单选按钮\n    rax = plt.axes([0.95, 0.005, 0.05, 0.8], facecolor='black')\n    radio = RadioButtons(rax, list(time_options.keys()), active=default_index)\n    for label in radio.labels:\n        label.set_color('white')\n        label.set_fontsize(14)\n    radio.circles[default_index].set_facecolor('red')\n    \n    def open_earning_input(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Insert_Earning_Manual.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def check_earning_kimi(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['osascript', '/Users/yanzhang/Documents/ScriptEditor/CheckKimi_Earning.scpt', name])\n        except Exception as e:\n            display_dialog(f\"启动AppleScript程序失败: {e}\")\n    \n    def open_earning_edit(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Editor_Earning_DB.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def open_tags_edit(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Editor_Symbol_Tags.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def open_event_input(event):\n        \"\"\"启动财报输入程序并传递当前symbol\"\"\"\n        try:\n            subprocess.Popen(['/Library/Frameworks/Python.framework/Versions/Current/bin/python3', '/Users/yanzhang/Documents/Financial_System/Operations/Insert_Events.py', name])\n        except Exception as e:\n            display_dialog(f\"启动财报输入程序失败: {e}\")\n\n    def update_annot(ind):\n        \"\"\"\n        更新工具提示位置和文本内容。\n        \"\"\"\n        x_data, y_data = line1.get_data()\n        xval, yval = x_data[ind[\"ind\"][0]], y_data[ind[\"ind\"][0]]\n        annot.xy = (xval, yval)\n        \n        # 查找当前日期是否有标记信息\n        current_date = xval.replace(tzinfo=None)\n        global_marker_text = None\n        specific_marker_text = None\n        earning_marker_text = None  # 新增：收益公告文本\n        \n        # 只有当标记点可见时才显示对应的事件文本\n        # 查找全局标记\n        if show_global_markers:\n            for marker_date, text in global_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    global_marker_text = text\n                    break\n                \n        if show_specific_markers:\n            for marker_date, text in specific_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    specific_marker_text = text\n                    break\n    \n        # 只有当收益标记点可见时才显示收益事件文本\n        if show_earning_markers:\n            # 查找收益公告标记\n            for marker_date, text in earning_markers.items():\n                if abs((marker_date - current_date).total_seconds()) < 86400:  # 两天内\n                    earning_marker_text = text\n                    break\n                \n        # 如果鼠标按下，则显示与初始点的百分比变化，否则显示日期和数值\n        if mouse_pressed and initial_price is not None:\n            percent_change = ((yval - initial_price) / initial_price) * 100\n            text = f\"{percent_change:.1f}%\"\n            annot.set_color('white')  # 百分比变化使用白色\n        else:\n            # 显示当前日期、当前价格和当前价格跟最新价格的百分比差值\n            latest_price = prices[-1]  # 获取最新日期的价格\n            current_price = yval       # 当前鼠标位置的价格\n            percent_diff = ((latest_price - current_price) / current_price) * 100  # 计算百分比差值\n            text = f\"{datetime.strftime(xval, '%Y-%m-%d')}\\n{current_price:.2f}\\n\\n{percent_diff:.2f}%\"  # 显示日期、当前价格和百分比差值\n            # text = f\"{datetime.strftime(xval, '%Y-%m-%d')}\\n{percent_diff:.2f}%\"  # 显示日期、当前价格和百分比差值\n            \n            # 添加标记文本信息（如果有）\n            has_earning_marker = False\n            marker_texts = []\n            if global_marker_text:\n                marker_texts.append(global_marker_text)\n            if specific_marker_text:\n                marker_texts.append(specific_marker_text)\n            if earning_marker_text:\n                marker_texts.append(earning_marker_text)\n                has_earning_marker = True\n                \n            if marker_texts:\n                text += \"\\n\" + \"\\n\".join(marker_texts)\n            # 如果是收益公告，设置为黄色字体，否则为白色\n            if has_earning_marker and not (global_marker_text or specific_marker_text):\n                annot.set_color('yellow')  # 收益公告标记使用黄色文字\n            elif global_marker_text and not (specific_marker_text or has_earning_marker):\n                annot.set_color('red')    # 全局标记使用红色文字\n            elif specific_marker_text and not (global_marker_text or has_earning_marker):\n                annot.set_color('orange')    # 特殊标记使用橘色文字\n            else:\n                annot.set_color('white')  # 其他标记使用白色文字\n        \n        annot.set_text(text)\n        annot.get_bbox_patch().set_alpha(0.4)\n        annot.set_fontsize(16)\n        \n        # 检查点的垂直位置\n        y_range = ax1.get_ylim()\n        y_position_ratio = (yval - y_range[0]) / (y_range[1] - y_range[0])\n        \n        # 更智能地调整注释位置\n        x_range = ax1.get_xlim()\n        position_ratio = (matplotlib.dates.date2num(xval) - x_range[0]) / (x_range[1] - x_range[0])\n        \n        # 根据点在图表中的水平和垂直位置调整注释\n        if y_position_ratio < 0.2:  # 如果点在底部区域（靠近X轴）\n            # 将注释向上方移动\n            y_offset = 60  # 设置一个较大的向上偏移\n        elif y_position_ratio > 0.8:    # 如果点在顶部区域\n            y_offset = -120  # 默认向下偏移\n        else:\n            y_offset = -70  # 默认向下偏移\n        \n        # 根据水平位置调整\n        if position_ratio > 0.7:  # 如果点在右侧30%区域\n            # 估计文本长度，越长偏移越大\n            text_length = len(text)\n            x_offset = -20 - min(text_length * 6, 300)  # 根据文本长度动态调整左偏移\n            annot.set_position((x_offset, y_offset))\n        elif position_ratio < 0.3:  # 如果点在左侧30%区域\n            annot.set_position((50, y_offset))\n        else:  # 中间区域\n            # 如果在底部区域，仍然向上偏移\n            if y_position_ratio < 0.2:\n                annot.set_position((-200, y_offset))\n            else:\n                annot.set_position((-200, -70))  # 放到下方\n\n    def hover(event):\n        \"\"\"\n        鼠标在图表上滑动时，更新垂直参考线、注释、以及高亮最近的数据点。\n        \"\"\"\n        if event.inaxes in [ax1, ax2]:\n            if event.xdata:\n                current_date = matplotlib.dates.num2date(event.xdata).replace(tzinfo=None)\n                vline.set_xdata(current_date)\n                vline.set_visible(True)\n                fig.canvas.draw_idle()\n                x_data, y_data = line1.get_data()\n                nearest_index = (np.abs(np.array(x_data) - current_date)).argmin()\n\n                # 判断鼠标位置是否接近数据点的容差（tolerance）值来提高敏感度，根据差值判断是否接近某个数据点\n                # 如果你将它调大，比如改为 0.1 或 0.2，那么即便鼠标离数据点稍远一些，仍然可以触发高亮蓝色价格点\n                date_distance = 0.2 * ((ax1.get_xlim()[1] - ax1.get_xlim()[0]) / 365)\n                if np.isclose(\n                    matplotlib.dates.date2num(x_data[nearest_index]),\n                    matplotlib.dates.date2num(current_date),\n                    atol=date_distance\n                ):\n                    update_annot({\"ind\": [nearest_index]})\n                    annot.set_visible(True)\n                    highlight_point.set_offsets([x_data[nearest_index], y_data[nearest_index]])\n                    highlight_point.set_visible(True)\n                else:\n                    annot.set_visible(False)\n                    highlight_point.set_visible(False)\n                fig.canvas.draw_idle()\n            else:\n                vline.set_visible(False)\n                annot.set_visible(False)\n                highlight_point.set_visible(False)\n                fig.canvas.draw_idle()\n        elif event.inaxes == rax:\n            vline.set_visible(False)\n            annot.set_visible(False)\n            highlight_point.set_visible(False)\n            fig.canvas.draw_idle()\n\n    def update(val):\n        \"\"\"\n        根据单选按钮选项更新图表显示的时间范围。\n        \"\"\"\n        years = time_options[val]\n        if years == 0:\n            filtered_dates, filtered_prices, filtered_volumes = dates, prices, volumes\n            min_date = min(dates)\n        else:\n            min_date = datetime.now() - timedelta(days=years * 365)\n            filtered_dates = [d for d in dates  if d >= min_date]\n            filtered_prices = [p for d,p in zip(dates, prices)  if d >= min_date]\n            filtered_volumes= [v for d,v in zip(dates, volumes) if d >= min_date] if volumes else None\n\n        # ––––– 如果某个区间竟然把所有点都筛没了，但我们确实有老数据，就默认显示最后一条 –––––\n        if not filtered_dates and dates:\n            filtered_dates  = [dates[-1]]\n            filtered_prices = [prices[-1]]\n            filtered_volumes= [volumes[-1]] if volumes else None\n\n        nonlocal fill\n        fill = update_plot(line1, fill, line2, filtered_dates, filtered_prices, filtered_volumes, ax1, ax2, show_volume)\n        radio.circles[list(time_options.keys()).index(val)].set_facecolor('red')\n        \n        # 根据所选时间区间控制原始价格点散点的显示\n        if val in [\"1m\", \"3m\", \"6m\"]:\n            small_dot_scatter.set_visible(True)\n        else:\n            small_dot_scatter.set_visible(False)\n\n        # 更新红色标记点显示，考虑时间范围和红色标记点可见性设置\n        for scatter, date, _, _ in global_scatter_points:\n            scatter.set_visible((min_date <= date) and show_global_markers)\n            \n        # 更新橙色标记点显示，考虑时间范围和橙色标记点可见性设置\n        for scatter, date, _, _ in specific_scatter_points:\n            scatter.set_visible((min_date <= date) and show_specific_markers)\n            \n        # 更新绿色收益公告标记点显示，考虑时间范围和总体可见性设置\n        for scatter, date, _, _ in earning_scatter_points:\n            scatter.set_visible((min_date <= date) and show_earning_markers)\n            \n        # 更新标记点显示后，同时更新注释显示\n        update_marker_visibility()\n\n        fig.canvas.draw_idle()\n\n    def toggle_volume():\n        \"\"\"\n        显示或隐藏成交量曲线。\n        \"\"\"\n        nonlocal show_volume\n        show_volume = not show_volume\n        update(radio.value_selected)\n\n    def on_key(event):\n        \"\"\"\n        处理键盘事件，用于快捷操作图表。\n        \"\"\"\n        actions = {\n            'v': toggle_volume,\n            'r': toggle_global_markers,  # 'r'键切换红色全局标记点显示\n            'x': toggle_specific_markers,  # 'x'键切换橙色特定股票标记点显示\n            'a': toggle_earning_markers,  # 'a'键切换白色收益公告标记点显示（保持不变）\n            'c': toggle_all_annotations,  # 'c'键切换所有浮窗的显示/隐藏\n            'n': lambda: open_earning_input(None),\n            'e': lambda: open_earning_edit(None),\n            't': lambda: open_tags_edit(None),\n            'w': lambda: open_event_input(None),\n            'k': lambda: check_earning_kimi(None),\n            '1': lambda: radio.set_active(7),\n            '2': lambda: radio.set_active(1),\n            '3': lambda: radio.set_active(3),\n            '4': lambda: radio.set_active(4),\n            '5': lambda: radio.set_active(5),\n            '6': lambda: radio.set_active(6),\n            '7': lambda: radio.set_active(8),\n            '8': lambda: radio.set_active(2),\n            '9': lambda: radio.set_active(0),\n            '`': show_stock_etf_info,\n            'd': lambda: on_keyword_selected(db_path, table_name, name)\n        }\n        if event.key in actions:\n            actions[event.key]()\n\n        # 处理方向键在不同时间区间间移动\n        current_index = list(time_options.keys()).index(radio.value_selected)\n        if event.key == 'up' and current_index > 0:\n            radio.set_active(current_index - 1)\n        elif event.key == 'down' and current_index < len(time_options) - 1:\n            radio.set_active(current_index + 1)\n\n    def close_everything(event, panel_flag):\n        \"\"\"\n        按下ESC时关闭图表，并在panel为真时退出系统。\n        \"\"\"\n        if event.key == 'escape':\n            plt.close('all')\n            if panel_flag:\n                import sys\n                sys.exit(0)\n\n    def on_mouse_press(event):\n        \"\"\"\n        记录鼠标左键按下时的价格和日期，用于计算百分比变化。\n        \"\"\"\n        nonlocal mouse_pressed, initial_price, initial_date\n        if event.button == 1:\n            mouse_pressed = True\n            nearest_index = (np.abs(np.array(dates) -\n                            matplotlib.dates.num2date(event.xdata).replace(tzinfo=None))).argmin()\n            initial_price = prices[nearest_index]\n            initial_date = dates[nearest_index]\n\n    def on_mouse_release(event):\n        \"\"\"\n        鼠标左键释放时，停止显示百分比变化。\n        \"\"\"\n        nonlocal mouse_pressed\n        if event.button == 1:\n            mouse_pressed = False\n\n    # 参考线\n    vline = ax1.axvline(x=dates[0], color='cyan', linestyle='--', linewidth=1, visible=False)\n\n    # 连接事件\n    plt.gcf().canvas.mpl_connect(\"motion_notify_event\", hover)\n    plt.gcf().canvas.mpl_connect('key_press_event', on_key)\n    plt.gcf().canvas.mpl_connect('key_press_event', lambda e: close_everything(e, panel))\n    plt.gcf().canvas.mpl_connect('button_press_event', on_mouse_press)\n    plt.gcf().canvas.mpl_connect('button_release_event', on_mouse_release)\n    radio.on_clicked(update)\n\n    def hide_annot_on_leave(event):\n        \"\"\"\n        当鼠标离开图表区域时，隐藏注释和高亮点。\n        \"\"\"\n        annot.set_visible(False)\n        highlight_point.set_visible(False)\n        vline.set_visible(False)\n        fig.canvas.draw_idle()\n\n    plt.gcf().canvas.mpl_connect('figure_leave_event', hide_annot_on_leave)\n\n    # 初始化图表\n    update(default_time_range)\n    print(\"图表绘制完成，等待用户操作...\")\n    plt.show()"
            },
            {
                "path": "/Users/yanzhang/Documents/ScriptEditor/Stock_Chart.scpt",
                "filename": "Stock_Chart.scpt",
                "content": "set the clipboard to \"\"\ndelay 0.3\n\ntell application \"System Events\"\n\tkeystroke \"c\" using {command down}\nend tell\ndelay 0.5\n\ntry\n\tset selectedText to the clipboard\n\tif selectedText is not \"\" then\n\t\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py paste\"\n\telse\n\t\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py input\"\n\tend if\non error errorMessage\n\t-- 如果发生错误，执行 Python 脚本\n\tdo shell script \"/Library/Frameworks/Python.framework/Versions/Current/bin/python3 /Users/yanzhang/Documents/Financial_System/Query/Stock_Chart.py input\"\nend try"
            }
        ],
        "final_prompt": "其中，stock_chart会读取marketcap_pe.txt和shares.txt两个文件的内容，提取出marketcap、pe、pb、shares等数据供chart_input展示使用，我已经把这些数据导入sqlite3数据库/Users/yanzhang/Documents/Database/Finance.db里的名为MNSPP表里了，表结构和内容如下“id    symbol  name                                shares         marketcap        pe_ratio  pb    \n----  ------  ----------------------------------  -------------  ---------------  --------  ------\n1     LIN     Linde                               470720000.0    222520000000.0   34.3      5.85  \n2     BHP     BHP                                 2540000000.0   126290000000.0   11.06     2.76  \n3     RIO     Rio Tinto                           1620000000.0   95890000000.0    8.35      1.74  \n4     SCCO    Southern Copper                     804070000.0    76900000000.0    21.3      8.04  \n5     SHW     The Sherwin-Williams                250600000.0    89580000000.0    33.79     21.69 ”，我需要你拿掉读取marketcap_pe.txt和shares.txt部分的功能，把读txt改为通过读取数据表内数据，最终让chart_input跟之前一样正确的展示曲线数据结果。该怎么改代码实现？"
    }
]